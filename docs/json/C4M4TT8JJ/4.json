[
    {
        "ts": "1513853090.000070",
        "text": "<@U8HCA22Q1> has joined the channel",
        "user": "U8HCA22Q1",
        "type": "message"
    },
    {
        "ts": "1513937708.000359",
        "text": "評判どうなんですかねー\nセールで5ドル\n<https://www.packtpub.com/application-development/haskell-high-performance-programming>",
        "user": "U4L0B71L1",
        "type": "message"
    },
    {
        "ts": "1513940141.000075",
        "text": "<https://www.packtpub.com/application-development/haskell-design-patterns> も5ドルですって！",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1513940538.000235",
        "text": "Packt 社の品質は物によるそうですが <http://note.golden-lucky.net/2017/12/blog-post.html>",
        "user": "U4L0B71L1",
        "type": "message"
    },
    {
        "ts": "1513940812.000084",
        "text": "ではなおさら安いうちに買っておきたいですね！私は買います！",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1513964288.000077",
        "text": "<@U8JGMG1QT> has joined the channel",
        "user": "U8JGMG1QT",
        "type": "message"
    },
    {
        "ts": "1513997414.000013",
        "text": "GHC の 8.4.1のアルファ版のリリースについての補足です。 お楽しみ！:haskell:\n\n<https://www.reddit.com/r/haskell_jp/comments/7lm52h/ghc_841alpha1_available_ghc841%E3%81%AE%E3%82%A2%E3%83%AB%E3%83%95%E3%82%A1%E7%89%88/>",
        "user": "U55V441FS",
        "type": "message"
    },
    {
        "ts": "1514017190.000022",
        "text": "あちこちで古いと言われてなぜか悔しかったので意地で更新しました。\n<https://qiita.com/igrep/items/da1d8df6d40eb001a561>\n残念ながら、追記が多くて読みにくくなってしまってはいますが。。。 :disappointed:",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1514173807.000019",
        "text": "questionsの方でも書きましたが、Linuxは昔は複数のファイルディスクリプタ(fd)の変化を監視して待つシステムコールがselect(2)しかなかったんですよね。\nselectは変化を監視したいfdをビットマップで指定する(fd = nを待つ場合はビットnを立てる)ようなインターフェースになっているので、あまり沢山のfdは扱えないようになっていました。ビットマップをスキャンしたり更新したりするのはカーネルの負担になるので。",
        "user": "U61BA2X0U",
        "type": "message"
    },
    {
        "ts": "1514174058.000023",
        "text": "今のLinuxカーネルにはepoll(*BSDでいうところのkqueue)があってfdの変化をイベントキューのようなインターフェースで待てるので、そのような制限をかける必要がなくなったと。",
        "user": "U61BA2X0U",
        "type": "message"
    },
    {
        "ts": "1514330132.000126",
        "text": "先生と生徒 <https://github.com/hspec/sensei>",
        "user": "U4L0B71L1",
        "type": "message"
    },
    {
        "ts": "1514344351.000040",
        "text": "最大値の数ビット分だけメモリーをあらかじめ確保する必要があった、っていうことですか？",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1514354986.000026",
        "text": "ZaloraはHaskellやめちゃったんですかねえ <https://github.com/zalora/>",
        "user": "U5L06DM55",
        "type": "message"
    },
    {
        "ts": "1514355034.000046",
        "text": "数年前、PHPから乗り換えるって言ってたけど、GitHubにも動きがないし、Haskellerがいる気配もなくなってしまった",
        "user": "U5L06DM55",
        "type": "message"
    },
    {
        "ts": "1514364072.000126",
        "text": "はい。プロセスが持てるfdの数が1024個だとすると、1024bitのデータをユーザースペースとカーネルとでやり取りする必要がありました。どんな定義になっているかはこちらの記事 <https://qiita.com/fujinochan/items/2337ce48a998cf67966b> で言及されています",
        "user": "U61BA2X0U",
        "type": "message"
    },
    {
        "ts": "1514414113.000038",
        "text": "<https://github.com/commercialhaskell/stack/issues/2240>\nダウンロード、s3直なのをどうにかしたいですね",
        "user": "U74KTAG0N",
        "type": "message"
    },
    {
        "ts": "1514415773.000149",
        "text": "<https://github.com/sozysozbot/akrantiain2>\n自分がHaskellで書いたコードを置いておくとプロの方々がマサカリを投げてくださると聞いて",
        "user": "U8EJKMNVA",
        "type": "message"
    },
    {
        "ts": "1514421390.000074",
        "text": "stack使ってない",
        "user": "U74KTAG0N",
        "type": "message"
    },
    {
        "ts": "1514421529.000003",
        "text": "テストはよくあるフレームワーク使おう",
        "user": "U74KTAG0N",
        "type": "message"
    },
    {
        "ts": "1514421577.000071",
        "text": "ciやろう",
        "user": "U74KTAG0N",
        "type": "message"
    },
    {
        "ts": "1514421624.000041",
        "text": "すみませんが、まだ中身は読んでいません",
        "user": "U74KTAG0N",
        "type": "message"
    },
    {
        "ts": "1514425716.000036",
        "text": "もっとキレのいいマサカリが準備できるとよかったのですが。",
        "user": "U74KTAG0N",
        "type": "message"
    },
    {
        "ts": "1514426971.000061",
        "text": "まさか `Makefile` とは。。。なぜcabalも使わなかったのか逆に気になりますね。。。",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1514427645.000092",
        "text": "<https://github.com/sozysozbot/akrantiain2/blob/master/Makefile#L6>\n実はcabalはつかっています。",
        "user": "U74KTAG0N",
        "type": "message"
    },
    {
        "ts": "1514427801.000183",
        "text": "igrepさんのは「自プロジェクトをcabalizeしなかった(.cabalファイルを作らない)のは何故ですか」という話ですよね ．\ndependenciesをinstallするとこの話じゃなくて",
        "user": "U5G2BCVBN",
        "type": "message"
    },
    {
        "ts": "1514427828.000064",
        "text": "そうです",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1514429776.000066",
        "text": "<https://github.com/sozysozbot/akrantiain2/blob/f1b741b11cea585f72ba2ce6c68cdf9411fa172e/akrantiain2.hs#L48-L59> らへんのエラー処理ですが、\n自分の場合、 `IO (Either e a)` みたいな値は `e` が `Exception` のインスタンスとなるように変換した上で :point_down: みたいな関数で処理することが多いですね。\n```\nthrowOnLeft = either throwIO return\n```",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1514431281.000052",
        "text": "どうなんでしょうね。パース結果がせっかくEither で来ているのにException?",
        "user": "U74KTAG0N",
        "type": "message"
    },
    {
        "ts": "1514431355.000054",
        "text": "パーサーの中ならExceptionもいいかもしれないですが。",
        "user": "U74KTAG0N",
        "type": "message"
    },
    {
        "ts": "1514431581.000047",
        "text": "私だったら `EitherT` コンストラクタを被せてdo文で書くと思います(リンクはMaybeTですが似たような感じで書けるはず) <https://github.com/as-capabl/armageddon/blob/f5f6d676e00f508fe37efa77cedad89b58cf1023/app/Content.hs#L137>",
        "user": "U570660KX",
        "type": "message"
    },
    {
        "ts": "1514431782.000043",
        "text": "全部同じ型のエラーだったらその方がよさそうですね。\n`main` 関数のような、トップレベルに近い、「中の処理でいろいろな例外が起こりうるけどもう復帰できないから最後に最低限何が起きたのかログだけ書いておこう！」みたいな状況でを想定してました。（が、今回の場合全部同じエラーなのかな？）",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1514432393.000064",
        "text": "確かに、そういう状況だと例外がいいですね",
        "user": "U570660KX",
        "type": "message"
    },
    {
        "ts": "1514433891.000118",
        "text": "コンストラクタ1つでその種類は番号を持たせることで識別するようなエラー型の設計はやや気になります．\nエラーが起きたときそれが何のエラーかを判定してワークアラウンドするなりというのはよくあることと思いますが，\nエラー番号で識別することになると識別(=パターンマッチによる)の網羅性が緩くなる懸念が発生します．\n種類毎にコンストラクタを定義して，番号が欲しい場合は数値への変換を別途定義しておくのが好ましいのではないかと．",
        "user": "U5G2BCVBN",
        "type": "message"
    },
    {
        "ts": "1514435724.000059",
        "text": "ところで， `EitherT` は非推奨になったので，使うなら `ExceptT` ですかね？\n<https://www.stackage.org/haddock/lts-10.1/either-4.5/Control-Monad-Trans-Either.html>",
        "user": "U57D08Z9U",
        "type": "message"
    },
    {
        "ts": "1514435916.000029",
        "text": "そうですが、IOと一緒につかうExceptTは。。\n<https://www.fpcomplete.com/blog/2016/11/exceptions-best-practices-haskell>",
        "user": "U74KTAG0N",
        "type": "message"
    },
    {
        "ts": "1514436012.000018",
        "text": "違うモナド間の移動が発生するのは大変ですので、できれば避けたい。\nYesodでこりごりです。",
        "user": "U74KTAG0N",
        "type": "message"
    },
    {
        "ts": "1514436315.000045",
        "text": "yesod monad, conduit monad, aws monad ...",
        "user": "U74KTAG0N",
        "type": "message"
    },
    {
        "ts": "1514437959.000061",
        "text": "確かに `ExceptT` については、局所的に使うのであれば、って感じですかね。。。",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1514438733.000041",
        "text": "ところで，あんまり議論をよく見ていないんですが，このUIの良し悪しはともかくUIをそのまま守るなら，わざわざ `&gt;&gt;&gt;=` みたいな汎用的なインタフェースを用意しないで，こんな感じで書くのが好きですね\n```\n  ...\n  toks &lt;- pure &lt;$&gt; runParser toTokens () fname input `catchEither` \\e -&gt; do\n      printError e\n      exitWith $ ExitFailure TOKEN_FAILURE_CODE\n  ...\n\ncatchEither :: Either a b -&gt; (a -&gt; b) -&gt; b\ncatchEither e f = either f id e\n\nprintError :: (Show a) =&gt; a -&gt; IO ()\nprintError x = do\n  hPrint stderr x\n  hPutStrLn stderr \"\\n\\nPress Enter after reading this message.\"\n  void getLine\n```",
        "user": "U57D08Z9U",
        "type": "message"
    },
    {
        "ts": "1514438874.000035",
        "text": "そうか。 `IO` が絡むから `&gt;&gt;&gt;=` なんて作ったのかな、と思っていたけど、よく見たら `IO (Either e a)` ですらないんですね。",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1514439150.000061",
        "text": "それから， <https://github.com/sozysozbot/akrantiain2/blob/f1b741b11cea585f72ba2ce6c68cdf9411fa172e/akrantiain2.hs#L72> ですが，cabalのパッケージシステムを使うと，version情報をPaths_&lt;pkg&gt;というcabalが自動生成するモジュールから取れたりするので，その点でもcabalパッケージへの移行はおすすめですね",
        "user": "U57D08Z9U",
        "type": "message"
    },
    {
        "ts": "1514439874.000097",
        "text": "あと， <https://github.com/sozysozbot/akrantiain2/blob/master/Akrantiain/Pattern_match.hs#L86> これとかは現状コメントとしてなんですかね？ doctest(<https://github.com/sol/doctest>) を使うとこういうサンプルコードコメントをコメントの書式を変えるだけで Haddockでハイライティングされて，さらにテストに流用できるようになるので，おすすめですね．cabalパッケージ化すると，<https://github.com/phadej/cabal-doctest> がパッケージと依存一覧を自動生成してくれるようになるのでこれもおすすめです(cabalのバージョンが1.24以上じゃないと使えないのが難ですが)",
        "user": "U57D08Z9U",
        "type": "message"
    },
    {
        "ts": "1514442410.000006",
        "text": "インターフェイスとして露出させるならEitherTもといExceptTは嫌ですね。逆に外に漏らさないというメリットでもあるので、適材適所だと思います",
        "user": "U570660KX",
        "type": "message"
    },
    {
        "ts": "1514447243.000012",
        "text": "帰宅したらたくさんのマサカリが来ていてありがたい限りです",
        "user": "U8EJKMNVA",
        "type": "message"
    },
    {
        "ts": "1514447399.000179",
        "text": "年末年始でゆっくり直していきます",
        "user": "U8EJKMNVA",
        "type": "message"
    },
    {
        "ts": "1514447479.000021",
        "text": "自プロジェクトをcabalizeできることを知ったのがコードを書き始めた後だったからです（完）",
        "user": "U8EJKMNVA",
        "type": "message"
    },
    {
        "ts": "1514447564.000096",
        "text": "番号振ったのは…なんでだっけ（忘れた）",
        "user": "U8EJKMNVA",
        "type": "message"
    },
    {
        "ts": "1514447649.000165",
        "text": "テストにまで流用できるのですか、情報ありがとうございます",
        "user": "U8EJKMNVA",
        "type": "message"
    },
    {
        "ts": "1514447762.000026",
        "text": "そうか。。。そういえばすごいH本とかじゃその辺教えないですもんね。。。 :disappointed_relieved:",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1514447861.000083",
        "text": "そういうことです、すごいHとReal World Haskellと「関数プログラミング 珠玉のアルゴリズムデザイン」ぐらいしか当時は読んだことがなかったもので（最近やっと「Haskell入門 関数型プログラミング言語の基礎と実践」を読んだ）",
        "user": "U8EJKMNVA",
        "type": "message"
    }
]