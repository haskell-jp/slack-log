[
    {
        "ts": "1514333272.000006",
        "text": "「ラムダ抽象の高階単一化の決定不能性」について調べてみます。なにかお勧めの文献ありますか？",
        "user": "U4KU9ABL0",
        "type": "message"
    },
    {
        "ts": "1514334128.000079",
        "text": "ああ、Agdaの実装になんかあった気がする。",
        "user": "U4KU9ABL0",
        "type": "message"
    },
    {
        "ts": "1514334681.000010",
        "text": "<@U5GP4SCMD> commented on <@U5GP4SCMD>’s file <https://haskell-jp.slack.com/files/U5GP4SCMD/F8JPH5R5W/____________________________2017-12-27_06.04.08.png|nix で slack をインストールしようとしてコケました>: stackでした :sweat_smile:",
        "user": null,
        "type": "message"
    },
    {
        "ts": "1514340938.000037",
        "text": "昔同じようなことを書いた記憶があると思ったら……\n<http://chaton.practical-scheme.net/haskell-ja/a/2011/12/02>\n<http://chaton.practical-scheme.net/haskell-ja/a/2011/12/07>\n<http://chaton.practical-scheme.net/haskell-ja/a/2011/12/08>\n<http://chaton.practical-scheme.net/haskell-ja/a/2011/12/09>\n<http://chaton.practical-scheme.net/haskell-ja/a/2011/12/10>\n<http://chaton.practical-scheme.net/haskell-ja/a/2011/12/11>\n<http://chaton.practical-scheme.net/haskell-ja/a/2011/12/13>",
        "user": "U4MA78F6X",
        "type": "message"
    },
    {
        "ts": "1514342043.000013",
        "text": "うへぇ。私6年間まったく進歩してない（どころか退化している）ことが晒されたぁ。orz\n勉強しなおしだ。",
        "user": "U4KU9ABL0",
        "type": "message"
    },
    {
        "ts": "1514344934.000032",
        "text": "なんか壊れたバージョンを間違ってビルドしてしまったんですかね。。。\nそれにしても不思議ですね。。。そもそもなんでわざわざソースからインストールしてるんだろう。。。 \n:thinking_face:",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1514346236.000098",
        "text": "<@U4MA78F6X> すいません，ラムダの等価性判定でeta expansionがうまくできない場合があるって話を聞いたことがあって勘違いしてましたが，injectivityの問題なんですね．これってつまり，Injectivityがうまく追跡できれば，f a ~ f b =&gt; a ~ bの展開が(安全に)できるってことなんですよね．",
        "user": "U57D08Z9U",
        "type": "message"
    },
    {
        "ts": "1514346407.000002",
        "text": "injectivityが辿れれば，ラムダのunifyはうまくいくということなんですかね？",
        "user": "U57D08Z9U",
        "type": "message"
    },
    {
        "ts": "1514347190.000017",
        "text": "Oh…12/2のしか見てませんでした．すいません忘れてください",
        "user": "U57D08Z9U",
        "type": "message"
    },
    {
        "ts": "1514382702.000119",
        "text": "同じような `issue` 立ちましたね。\n<https://github.com/commercialhaskell/stack/issues/3713>",
        "user": "U5B3EGEFQ",
        "type": "message"
    },
    {
        "ts": "1514439802.000020",
        "text": ":point_up: のissue、もうcloseされましたね。言及している方のissueももう解決したみたいですし、今ならいいのかも。",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1514447700.000194",
        "text": "<@U8EJKMNVA> has joined the channel",
        "user": "U8EJKMNVA",
        "type": "message"
    },
    {
        "ts": "1514449383.000238",
        "text": "<@U4LGTMTMK> pinned a message to this channel.",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1514450354.000056",
        "text": "<#C8KBGEBR7|code-review> で少し触れたのですが、\nテストフレームワークはみなさん何がおすすめですかね？個人的にはHSpecをずっと使っていて、この間HUnitを使わざるを得ない状況になったので使ってみたら、HSpecに慣れすぎていたせいか、ものすごく書きにくかったように覚えていまして。。。",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1514451124.000116",
        "text": "過去のコードを読んでいたら ` \\u -&gt; return(u,u) ` というのを見つけたんですが、こういうのってArrowで書くべきなんですかね",
        "user": "U8EJKMNVA",
        "type": "message"
    },
    {
        "ts": "1514451244.000229",
        "text": "そのあたりは劇的にコードを短くしたりわかりやすくしたりするものでもないので、覚えていたら、程度でいいと思いますよ。",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1514771614.000027",
        "text": "いつもtasty-hspecとdoctestを使ってます！",
        "user": "U5LV76EJH",
        "type": "message"
    },
    {
        "ts": "1514967685.000066",
        "text": "<@U8LLBJ59Q> has joined the channel",
        "user": "U8LLBJ59Q",
        "type": "message"
    },
    {
        "ts": "1514981592.000140",
        "text": "これって現状， `RecordWildCards` に対応してないって認識でいいんですかね？なんか対応してない理由とかあるんすかね？(field punsは対応してそうなんですよね)\n<https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#record-pattern-synonyms>",
        "user": "U57D08Z9U",
        "type": "message"
    },
    {
        "ts": "1514981811.000257",
        "text": "いちよ，使えるんですかね？ `name-shadowing` 警告が出るけど…",
        "user": "U57D08Z9U",
        "type": "message"
    },
    {
        "ts": "1515146591.000078",
        "text": "ExcelのRATE関数相当品が、どこかに転がっていないですかね・・・\n<http://www.excel-list.com/rate.html>",
        "user": "U87QYA152",
        "type": "message"
    },
    {
        "ts": "1515228730.000034",
        "text": "超遅レスですが、名前はequality constraintsですね。\n<https://downloads.haskell.org/~ghc/8.2.1/docs/html/users_guide/glasgow_exts.html#equality-constraints>",
        "user": "U59TQ3MJ9",
        "type": "message"
    },
    {
        "ts": "1515309334.000036",
        "text": "<@U88NRUX26> has joined the channel",
        "user": "U88NRUX26",
        "type": "message"
    },
    {
        "ts": "1515446598.000160",
        "text": "「チャンス」なんてリアクションがあるんですね。結局自前で実装しました。\nと言ってもJavaでの実装を見つけたので、それをHaskellに移植しただけですが。",
        "user": "U87QYA152",
        "type": "message"
    },
    {
        "ts": "1515447187.000513",
        "text": "Excel/Java/Haskellそれぞれで微妙に結果が異なるのですが、原因が分からず・・・まあ誤差と言ってもいい程度の差異ではあるのですが。",
        "user": "U87QYA152",
        "type": "message"
    },
    {
        "ts": "1515482874.000074",
        "text": "このために作りましたw :commit: :chance: \n<https://emoji.pine.moe/#!/> を使っています。",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1515486530.000175",
        "text": "JavaScript で Prettier というフォーマッターを最近使っているのですが、これ保存時に自動的かつ強制的にコードのフォーマットを統一してくるんですね。細かいこだわりとかが無視されてしまうものの、フォーマットを気にしなくて良くなるというユーザ体験はかなり良かったので Haskell 開発でも同じようなことをやってみたいと思っています。\n\nおそらくエディタの保存フックで hfmt や brittany などを走らせればいいと思うのですが、そのようなことをやっている人はいますか？ 設定を伺いたいです(できれば Spacemacs か Emacs)。",
        "user": "U4M598NHM",
        "type": "message"
    },
    {
        "ts": "1515488335.000011",
        "text": "Elm はフォーマットがかっちり決まってるのもあって 、VS Code 使ってましたが、保存時フォーマットの設定ありましたね（自分は JetBrains 製品に慣れてて VS Code でも自動保存してるせいで、手動フォーマット適用にしてましたが）\nフォーマットを気にしなくていいというのが楽というのは同意です",
        "user": "U4L0B71L1",
        "type": "message"
    },
    {
        "ts": "1515489556.000516",
        "text": "HIE にいちおう brittany を呼び出す仕組みがあるっぽいけど\n<https://github.com/haskell/haskell-ide-engine/blob/master/README.md#features>",
        "user": "U56L7EVNY",
        "type": "message"
    },
    {
        "ts": "1515508805.000825",
        "text": "haskell-ide-engineは未調査でした。近々 Emacs で使いやすくなりそう！ <https://github.com/haskell/haskell-ide-engine/issues/338>",
        "user": "U4M598NHM",
        "type": "message"
    },
    {
        "ts": "1515556200.000112",
        "text": "hfmtを試してみましたが、#ifdef とか .hsc には対応してないんですね。残念すぎる。",
        "user": "U56MBRKR9",
        "type": "message"
    },
    {
        "ts": "1515572728.000158",
        "text": "私はCloudFunctionsを用いたイベント駆動型のサーバーレス設計が好きです。Haskellにそのようなサービスはありますか？",
        "user": "U6M886B2M",
        "type": "message"
    },
    {
        "ts": "1515572828.000051",
        "text": "求めているものかどうか確信が持てませんが、ちょうど今日こんなパッケージを見つけました <https://github.com/seek-oss/serverless-haskell>",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1515574154.000258",
        "text": "Lambdaの方はこういったことができるんですね、ありがとうございます。",
        "user": "U6M886B2M",
        "type": "message"
    },
    {
        "ts": "1515594395.000305",
        "text": "私も山下さんと会うたびにこの話をしている気がするのですが、KindSignature を明示させるようにすれば、決定不能を避けることができたりはしないのでしょうか。\nそれでうまくいくのなら、GHC に拡張を提案するのが良いのではないかと思っています。",
        "user": "U4KNU6N48",
        "type": "message"
    },
    {
        "ts": "1515601419.000154",
        "text": "<@U6JPU2DD2> has joined the channel",
        "user": "U6JPU2DD2",
        "type": "message"
    },
    {
        "ts": "1515715777.000138",
        "text": "これはよさそうですね。早速試してみたいと思います。",
        "user": "U87QYA152",
        "type": "message"
    },
    {
        "ts": "1515716339.000214",
        "text": "mtlパッケージのReaderTに、 `k` という見慣れない型パラメーターがあるのを見つけたんですが、これは一体何のためのパラメーターで、使用する際型宣言ではどう書けばいいのでしょうか？\n<https://hackage.haskell.org/package/mtl-2.2.1/docs/Control-Monad-Reader.html#t:ReaderT> \nまぁ、 kindの宣言を見る限り継続っぽい何かであることは察せられるんですが。。。",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1515723567.000161",
        "text": "Haddock のバージョンが上がったのか詳細は知らないんですが `newtype` でのカインドが明示されるようになったみたいですね",
        "user": "U4L0B71L1",
        "type": "message"
    },
    {
        "ts": "1515726275.000014",
        "text": "ソース読んでみたらControl.Monad.Trans.Readerからreexportしていて、reexport元のControl.Monad.Trans.Readerではそうなってなかったので、何か使っている拡張が関係している気がしてきました。\n<https://hackage.haskell.org/package/transformers-0.5.5.0/docs/Control-Monad-Trans-Reader.html>",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1515726340.000008",
        "text": "ReaderTの定義が\n\n```\nnewtype ReaderT r m a = ReaderT (r -&gt; m a)\n```\n\nなので、実は `m a` が `*` でさえあれば `m :: * -&gt; *` と `a :: *` 以外でも値を作れますよ、っていう話ですね。\nなので　 `m :: k -&gt; *` と `a :: k` に一般化されていると。\n\n<https://haskell.jp/blog/posts/2017/10-about-kind-system-part1.html> の「種多相」節に書いてある。",
        "user": "U570660KX",
        "type": "message"
    },
    {
        "ts": "1515726435.000003",
        "text": "とはいえ、MonadをはじめとするReaderTのインスタンスはk=*の場合しか定義されないので、一般化されたReaderTを何に使うのかは良く分からないです",
        "user": "U570660KX",
        "type": "message"
    },
    {
        "ts": "1515726494.000061",
        "text": "transformersのChangelogによると、0.5からPolyKinded対応したとの事なので、ここで各クラスがまとめて種多相になったっぽい？",
        "user": "U570660KX",
        "type": "message"
    },
    {
        "ts": "1515727203.000090",
        "text": "続けて済みません、 :point_up: の質問に関連してtransformersのドキュメントを読んでいたんですが、\nSelectT と AccumT というこれまた見慣れないMonad Transformersができているのに気づきました。\n<https://hackage.haskell.org/package/transformers-0.5.5.0/docs/Control-Monad-Trans-Select.html>\n<https://hackage.haskell.org/package/transformers-0.5.5.0/docs/Control-Monad-Trans-Accum.html>\nそれぞれ何のためのものかご存じでしょうか？\n特にぱっとソースを読んでみた感じ、AccumTはLazy WriterTと何が違うねん、という感じでした。。。 :cold_sweat:",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1515727300.000075",
        "text": "あ、ごめんなさい `AccumT` については自己解決しました。\n\n```\nThis monad transformer is similar to both state and writer monad transformers. Thus it can be seen as\n\na restricted append-only version of a state monad transformer or\na writer monad transformer with the extra ability to read all previous output.\n```\nと書いてあるとおりですね！",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1515727448.000053",
        "text": "まぁ、 `SelectT` については張ってある論文読めって感じですかね。。。",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1515727773.000243",
        "text": " set up a reminder “https://haskell-jp.slack.com/archives/C5666B6BB/p1513788569000134” in this channel at 10AM every Friday, Japan Standard Time.",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1515727944.000009",
        "text": "有用そうな質問は積極的に :memo: していきたいですが、ついつい忘れてしまうので取り急ぎ <https://haskell-jp.slack.com/archives/C5666B6BB/p1513788569000134> のメッセージを定期リマインダーに追加しました。\nとりあえず毎週金曜日で。",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1515731534.000002",
        "text": "Win32 な環境で、FFI に stdcall ではなく ccall と書くと何が起きますか？\nときどき ccall を使っているコードを見かけるのですが、大丈夫なのでしょうか？\nちなみに、Win64だとccallと書くと適切なABIを使うようです。\nstdcallと書いても適切なABIを使いますが、無意味に警告が出ます。",
        "user": "U56MBRKR9",
        "type": "message"
    },
    {
        "ts": "1515738921.000036",
        "text": "`stack.yaml` で指定してるsolver以外のdb情報などを `.stack-work` から消してくれる `stack` のサブコマンドってあったりしますかね？",
        "user": "U57D08Z9U",
        "type": "message"
    }
]