[
    {
        "ts": "1549538311.464500",
        "text": "お疲れ様です。\n<https://qiita.com/mod_poppo/items/03fc14f693b601e0a00f>\nなぜIORefだと遅いのでしょうか。\n自分でベンチマークとるのが一番かもしれませんが。\nあと既出だったらすみません。\n:man-bowing:",
        "user": "U74KTAG0N",
        "type": "message"
    },
    {
        "ts": "1549538426.465500",
        "text": "IORefだとヒープで、StateTだとスタックにのるとかあるのでしょうか。",
        "user": "U74KTAG0N",
        "type": "message"
    },
    {
        "ts": "1549540464.465700",
        "text": "&gt; この程度のコードであれば GHC の最適化によって i と acc が正格評価 &amp; unbox 化されることが期待でき1、 C言語での普通のローカル変数を使ったようなアセンブリコードが（たぶん）出力されます。\n\nとあるとおり、やっぱりGHCにとって普通の引数の方が最適化を利かせやすいところにあるんじゃないっすかね。（その最適化の詳細を知りたいんだよ！という意味であればすみません、わかりません... :bow:）",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1549540652.465900",
        "text": "記事にも書いてありますが， IORef の場合余分なポインタによる Boxing が挟まるからです．\n通常は，そのままデータにアクセスすればいいですが， IORef の場合一度 IORef データのポインタから実際の IORef データにアクセスし，さらにそこに格納されているポインタからデータにアクセスする必要が出てきます．\n\n特に今回の記事の内容だと，Stateの場合もインライン展開と正確性解析によるwrapper変換がうまく入ります(GHC 8.6.3 ではうまく最適化されていることを確認しました)が， IORef はうまく上記の方法で最適化できないため Boxing のままになっているのが大きな差を生んでる原因だと思います",
        "user": "U57D08Z9U",
        "type": "message"
    },
    {
        "ts": "1549543311.466500",
        "text": "ありがとうございます",
        "user": "U74KTAG0N",
        "type": "message"
    },
    {
        "ts": "1549551984.466800",
        "text": "いくつかベンチマークをしての追記なのですが， IORef で書かれたコードはインライン展開からの変換による最適化が入りにくいようです．例えば， readIORef などを readMutVar# などのプリミティブ命令に変換した後特に最適化が入りにくいのに対し， State はタプルを使った単純な関数の場合が多く， IORef を使ったコードに比べかなりのレベルまでインライン展開され joinrec を使った loop optimization がかなり入りやすいようです．もちろん，今回の記事のように wrapper 変換も入りにくいため，一般には IORef より State の方が最適化が入りやすいため高速な処理が期待できそうです．\n\nなので， IORef の Boxing によるオーバーヘッドというよりは最適化がうまく入らないデメリットが大きそうですね",
        "user": "U57D08Z9U",
        "type": "message"
    },
    {
        "ts": "1549552453.467000",
        "text": "あ，ついでに上の話は GHC 8.6.3 で調べたので，他のバージョンだと違った結果になるかもしれません(おそらく，他のバージョンも同じ状況だとは思うんですが)",
        "user": "U57D08Z9U",
        "type": "message"
    },
    {
        "ts": "1549553132.467200",
        "text": "ついでに， wrapper 変換を避けるために書き直したベンチマークコードを上げておきます\n<https://gist.github.com/mizunashi-mana/1de1f69f2723d7cef51c9a57c506fdcf>",
        "user": "U57D08Z9U",
        "type": "message"
    },
    {
        "ts": "1549556705.467500",
        "text": "<@UG0QR8Y7N> has joined the channel",
        "user": "UG0QR8Y7N",
        "type": "message"
    },
    {
        "ts": "1549574755.467900",
        "text": "```\nsomeCalculationWithFastMutInt :: IO Int\nsomeCalculationWithFastMutInt = do\n  sumRef &lt;- newFastMutInt\n  writeFastMutInt sumRef 0\n  forM_ [0..10000 * 10000] $ \\i -&gt; do\n    s &lt;- readFastMutInt sumRef\n    writeFastMutInt sumRef $! s + (i `rem` 3)\n  readFastMutInt sumRef\n```\n<http://hackage.haskell.org/package/ghc-8.6.1/docs/FastMutInt.html>\nこれだとunboxされるのですね。\n微妙に納得いかないですね。\n別件でSTRefもIORefと同様でした。",
        "user": "U74KTAG0N",
        "type": "message"
    },
    {
        "ts": "1549575367.468400",
        "text": "次の疑問はなぜIORefがunboxされないのかというところです。",
        "user": "U74KTAG0N",
        "type": "message"
    },
    {
        "ts": "1549575853.468600",
        "text": "<http://hackage.haskell.org/package/unboxed-ref>\nすでにそういうパッケージがありますね。",
        "user": "U74KTAG0N",
        "type": "message"
    },
    {
        "ts": "1549603889.469600",
        "text": "GHC ではスタックとヒープどちらに割り当てるかなどを扱うような段階より，ずっと以前の表層の部分で多くの最適化が行われます．特に worker/wrapper 変換は Haskell のプログラムをより効率の良いプログラムに変換するような最適化で(厳密には， Core-2-Core ですが)，単純に Int や Char などの unbox 型をラップした Boxing な型に対して書かれた幾つかの制約を満たす関数をアンラップする関数と unbox 型に対して処理を行う関数に分解することで，wrap/unwrap のオーバーヘッドを無くし不要なヒープ確保を抑えるといったものです．\n\n例えば，\n\n```\nsumInt :: [Int] -&gt; Int\nsumInt = go 0\n  where\n    go acc []     = acc\n    go acc (x:xs) = go (acc + x) xs\n```\n\nという関数を考えてみた時， `(+) :: Int -&gt; Int -&gt; Int` は `I# i1 + I# i2 = I# (i1 +# i2)` と定義されますから `(+)` 演算をする分だけ unwrap/wrap を繰り返すことになりますが，以下のように変形できればその操作を抑えることができます．\n\n```\nsumInt :: [Int] -&gt; Int\nsumInt = go 0\n  where\n     go (I# i) = goWork i\n\n     goWork acc []        = I# acc\n     goWork acc (I# x:xs) = goWork (acc +# x) xs\n```\n\nこの変形をより一般的に自動で行うのが worker/wrapper 変換による unbox 化です．もちろん，この後の段階で unbox 型の引数はヒープ確保を起こさない形に翻訳される可能性が高いです．ただこの変換は，見ての通りどの部分で `I#` の unwrap/wrap が起きるか分かっていないとその部分を削減できないため，インライン展開がうまく行われるかどうかに強く依存します．\n\nさて，本題の IORef がなぜ unbox されないかですが，厳密には IORef が unbox 化されないというより， IORef を使ったコードは最終的に IORef を操作するランタイム命令 readMutVar# / writeMutVar# までしかインライン展開されないため， unwrap/wrap の処理がインライン展開後も自動的に構文だけからは判断できず， worker/wrapper 変換が適用されないというのが大きいと思います． readMutVar# / writeMutVar# の動作特性を情報として別に持っておいて worker/wrapper 変換を適用できるようにするのは可能ではありますが，かなりヒューリスティックな部分となるのでおそらく実装されていないのだと思います．もちろん，これは STRef でも同じ話になります．",
        "user": "U57D08Z9U",
        "type": "message"
    },
    {
        "ts": "1549604413.470300",
        "text": "ついでにですが，実行性能の差の要因は追記でも述べた通り unbox 化だけではないようです．なので，上の unboxed-ref を使えば worker/wrapper 変換は入るようになると思いますが，他の最適化が入りにくくなり結局 State の方が速くなるんじゃないかと思います(これは未検証なので，後でやってみたいと思います)",
        "user": "U57D08Z9U",
        "type": "message"
    },
    {
        "ts": "1549612404.470800",
        "text": "-O: State &lt; IORefU &lt; Rec &lt; IORef\n-O2: Rec &lt; State &lt; IORefU &lt;&lt; IORef\nとなりました．そこまで有意差ではないと思いますが IORefU の方が State より遅い傾向が見られましたね．中間コード自体はほぼ同じでしたが，やることによっては差が出る場合もあるかもしれません．\n<https://gist.github.com/mizunashi-mana/176875a0af98578d0d9bafd2dabdf876>",
        "user": "U57D08Z9U",
        "type": "message"
    },
    {
        "ts": "1549612807.471200",
        "text": "ありがとうございます！これって、計測はそれぞれの `someCalculation*` を適当な `main` 関数に含めて実行ファイル作ってtimeコマンドでやったんですかね？\nそれともcriterionかなにか使ったんすか？",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1549612967.471400",
        "text": "time コマンドでやりました",
        "user": "U57D08Z9U",
        "type": "message"
    },
    {
        "ts": "1549612997.471700",
        "text": "criterion でやる場合は，もっと繰り返し数少なくした方が良いと思いますね",
        "user": "U57D08Z9U",
        "type": "message"
    },
    {
        "ts": "1549629516.472000",
        "text": "<@UG1NKET4K> has joined the channel",
        "user": "UG1NKET4K",
        "type": "message"
    },
    {
        "ts": "1550133199.008600",
        "text": "標準出力に文字列を出力するIO ()の振舞いをHspecでテストするにはどうすればよいでしょうか？．たとえば標準出力に指定の文字列\"Hello, world.\"が，確かに出力されることを確認したいとき，どうすればいいでしょう．",
        "user": "U4KU9ABL0",
        "type": "message"
    },
    {
        "ts": "1550133279.008700",
        "text": "手前味噌で恐縮ですが、 <https://haskell.jp/blog/posts/2018/main-tester.html> とかいかがでしょうか？",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1550133698.009600",
        "text": "おお．ありがとうございます．まさにこれです．",
        "user": "U4KU9ABL0",
        "type": "message"
    },
    {
        "ts": "1550225328.017300",
        "text": "Cabalが作ってくれるPaths_hogeの詳しい仕様とか使い方ってどう検索すれば出てきますかね……もしくは公式をよく読めばある？",
        "user": "U7155GPR9",
        "type": "message"
    },
    {
        "ts": "1550225725.017400",
        "text": "ここですかい？\n<https://www.haskell.org/cabal/users-guide/developing-packages.html#accessing-data-files-from-package-code>",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1550226133.017700",
        "text": "アッめっちゃ書いてある。ちゃんと読まないとダメですね……。ありがとうございます",
        "user": "U7155GPR9",
        "type": "message"
    },
    {
        "ts": "1550378567.018400",
        "text": "<@UG93F9F6G> has joined the channel",
        "user": "UG93F9F6G",
        "type": "message"
    },
    {
        "ts": "1550381961.018700",
        "text": "<@UG91FEHJ7> has joined the channel",
        "user": "UG91FEHJ7",
        "type": "message"
    },
    {
        "ts": "1550384299.019000",
        "text": "<@UG8CPC0L8> has joined the channel",
        "user": "UG8CPC0L8",
        "type": "message"
    },
    {
        "ts": "1550388057.019300",
        "text": "<@UG91XB52P> has joined the channel",
        "user": "UG91XB52P",
        "type": "message"
    },
    {
        "ts": "1550479108.019600",
        "text": "<@UGB1MPLH4> has joined the channel",
        "user": "UGB1MPLH4",
        "type": "message"
    },
    {
        "ts": "1550496152.019900",
        "text": "<@UEJCJMCRL> has joined the channel",
        "user": "UEJCJMCRL",
        "type": "message"
    },
    {
        "ts": "1550572995.020900",
        "text": "数独を解くコードを書いてみました。変な所があればご指摘いただけると嬉しいです。\n<https://gist.github.com/gaxiiiiiiiiiiii/0fab7374d7c3ef8f2a0801972aa0aea5>",
        "user": "UF797SSBC",
        "type": "message"
    },
    {
        "ts": "1550575236.021000",
        "text": "ぱっと見て気づいたところを。\n- `length empties == 0` は `null` で置き換えられるかと。\n- `data Tree = Node Board [Tree]` は <http://hackage.haskell.org/package/containers-0.6.0.1/docs/Data-Tree.html> の `Tree` で表すことができるかと（型定義だけしか要らなければ特に必要はないかと思いますが、もし便利な関数があれば使ってみるのも良いかと",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1550581569.021300",
        "text": "`classify` は `div` で代用できそう",
        "user": "U56L7EVNY",
        "type": "message"
    },
    {
        "ts": "1550581867.021500",
        "text": "`head es` のところは、その前のパターンマッチで `e:_` とでも書けば取り出せると思います",
        "user": "U56L7EVNY",
        "type": "message"
    },
    {
        "ts": "1550581995.021700",
        "text": "`tree` のところで毎回 `empties` を生成しているのはもったいないですね",
        "user": "U56L7EVNY",
        "type": "message"
    },
    {
        "ts": "1550582090.021900",
        "text": "終了の判定を `tree` と `isSolved` の実質二ヶ所でやってるのももったいないです。",
        "user": "U56L7EVNY",
        "type": "message"
    }
]