[
    {
        "text": "Haskellそのものとは関係ない質問になるので恐縮ですがお聞かせ下さい\n\nプログラミング初心者やHaskellの周辺に全く触れたことない人向けに一時間程度Haskellについて話す機会を得たのですが、皆さんならどういった内容を話すと良いと思われますか？",
        "type": "message",
        "ts": "1662712288.672419",
        "user": "U02LD7MAQ00"
    },
    {
        "text": "細かいシチュエーションが分かっていませんが自分だったら例えばこんな感じかな？\nあくまで私の感覚なので、ちょっと違うというのがあれば後学のためにも指摘歓迎です。\n自分も熟練者ではないのでそういう人の一意見ということで。\n\n[導入]\n・「遅延評価」や「静的多相型付け」の特徴がある関数型言語\n・他のプログラミング言語と一般的に比べて型の力が重視・強化されている\n[顕著な利点]\n・入出力があることを表す型があることにより、入出力を意識的に管理しやすい\n　→結果的に入出力のコードが分散されない構造になりやすく、見通しが良くなりやすい\n・文脈の概念「失敗がありうる、など」を扱うことができ、関数内でその文脈が共有されるため、高度なことを簡潔に表現できる\n　→文脈は戻り値の型で決定される、また、関数の戻り値は関数内の最後の処理の値である\n[顕著な欠点]\n・GUIなものを作ろうとするなら標準ではできないのでサードパーティーのライブラリが必要\n　→サードパーティーのライブラリ自体は充分なクオリティのものが複数ある\n・依存関係の解決に慣れが要り、全てのライブラリを最新バージョンにすると大抵依存関係で弾かれる\n　→直接的に必要なライブラリのアップロード日時以前の直近にアップロードされた依存ライブラリのバージョンを探して指定、が安定\n[他の特徴]\n・遅延評価(結果が必要になったら計算する)\n　→例えば「無限長の素数リストを生成し、先頭10個を取得する」といった内容の記述ができ、数学的な定義に近い記述がしやすい\n・静的型付け\n　→コンパイル時に型が決定されている必要があるが、Haskell独自の型チェックが強力に働きメリットが大きい\n・多相型付け\n　→抽象的な型を指定することもでき、静的型付けの制約のコンパイル時型決定のデメリットも制御できる\n・カリー化(関数の引数の分解)\n　→関数の複数の引数の一つを埋めた関数を生成する(部分適用)といったことが簡潔にできる\n・関数合成\n　→関数を合成する演算子(中置関数) . があり、カリー化などと合わせて複数のパーツとなる関数から必要な関数を得ることが便利\n[総評]\n・簡単なことは難しくなるが難しいことは簡単にできる、と評されたりする\n・実際に使用されているプロジェクトの比率は少ないが、質は高い傾向に感じる\n・アプローチが独特であり、美しさに魅了される人と拒絶反応の人に結構分かれるらしい",
        "type": "message",
        "ts": "1662730115.019839",
        "user": "U02JVFSJT38"
    },
    {
        "text": "具体的に書いていただきありがとうございます（詳細は私もまだわかっていなかったりします）\n利点・欠点としていくつか話題を挙げるのは実際に触れるときの指標にもなりそうで良いですね",
        "type": "message",
        "ts": "1662734102.285459",
        "user": "U02LD7MAQ00"
    }
]