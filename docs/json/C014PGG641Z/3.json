[
    {
        "ts": "1595649780.114900",
        "text": "長いけど見終えた。 <https://www.youtube.com/watch?v=RknM0j138PE&amp;feature=youtu.be>\n言うほどHaskell関係ないし個人的には割と知った話が大半だったのであまりおすすめしません... :disappointed:",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1595948494.117500",
        "text": "プログラミングHaskell第2版の15章、遅延評価を読みました。1周目なので消化不良な部分はありますが:sweat_smile:",
        "user": "U012A4ALLSC",
        "type": "message"
    },
    {
        "ts": "1596103729.118300",
        "text": "自作インタープリターでパターンマッチによる分解ができるようになりました",
        "user": "U4L0B71L1",
        "type": "message"
    },
    {
        "ts": "1596103761.118400",
        "text": "テストから抜粋",
        "user": "U4L0B71L1",
        "type": "message"
    },
    {
        "ts": "1596364573.120900",
        "text": "今朝見終えた。 <https://www.youtube.com/watch?v=I7-JuVNvz78&amp;list=PLiU7KJ5_df6aZbNfh_TUJt-6w9N3rYkTX&amp;index=3>\nやっぱりハッシュテーブルなどのmutableなデータ構造を線形型で管理することで（Rustの`&amp;mut`みたいなものと考えればいいかも）、純粋な関数の中で更新できるようにするのがポイントみたいですね。",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1596559872.123900",
        "text": "Haskell入門関数型プログラミング言語の基礎と実践を読み返してました:grinning:普段書かないコードは忘れるものですね:sweat_smile:",
        "user": "U012A4ALLSC",
        "type": "message"
    },
    {
        "ts": "1596628408.124400",
        "text": "自作 Haskell インタープリターでここまでできるようになった",
        "user": "U4L0B71L1",
        "type": "message"
    },
    {
        "ts": "1596905993.127300",
        "text": "Control.Monad.Trans.State.Lazyとかのソースコードを読んでました。ソースコードを見ずに自分で定義を書き起こしたりして理解を深めてました:smile:\n\n<https://hackage.haskell.org/package/transformers-0.5.6.2/docs/src/Control.Monad.Trans.State.Lazy.html>\n\n<https://hackage.haskell.org/package/base-4.14.0.0/docs/src/Data.Either.html>",
        "user": "U012A4ALLSC",
        "type": "message"
    },
    {
        "ts": "1597161214.128100",
        "text": "マージされた <https://github.com/simonmar/ghc-paths/pull/22>",
        "user": "U4L0B71L1",
        "type": "message"
    }
]