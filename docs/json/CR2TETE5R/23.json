[
    {
        "type": "message",
        "user": "U04LSF55D9U",
        "ts": "1674891407.139569",
        "text": "<@U04LSF55D9U> has joined the channel"
    },
    {
        "type": "message",
        "user": "U04MB7BQ50T",
        "ts": "1675173537.884209",
        "text": "<@U04MB7BQ50T> has joined the channel"
    },
    {
        "type": "message",
        "user": "U04MBBNV5QB",
        "ts": "1675174780.764359",
        "text": "<@U04MBBNV5QB> has joined the channel"
    },
    {
        "type": "message",
        "user": "UA6CQEGR5",
        "ts": "1675217825.168639",
        "text": "<@UA6CQEGR5> has joined the channel"
    },
    {
        "type": "message",
        "user": "UA6CQEGR5",
        "ts": "1675217825.168639",
        "text": "<@UA6CQEGR5> has joined the channel"
    },
    {
        "type": "message",
        "user": "U04NS1ZNSJK",
        "ts": "1676140328.163949",
        "text": "<@U04NS1ZNSJK> has joined the channel"
    },
    {
        "type": "message",
        "user": "U04P4FYK221",
        "ts": "1676196208.507679",
        "text": "<@U04P4FYK221> has joined the channel"
    },
    {
        "type": "message",
        "user": "U04RTA85CH3",
        "ts": "1677690079.961519",
        "text": "<@U04RTA85CH3> has joined the channel"
    },
    {
        "type": "message",
        "user": "U04T6H7Q56W",
        "ts": "1678377424.030769",
        "text": "<@U04T6H7Q56W> has joined the channel"
    },
    {
        "type": "message",
        "user": "U04TL7B4RK8",
        "ts": "1678767625.804149",
        "text": "<@U04TL7B4RK8> has joined the channel"
    },
    {
        "type": "message",
        "user": "U04UTFS57A5",
        "ts": "1679039675.001459",
        "text": "<@U04UTFS57A5> has joined the channel"
    },
    {
        "type": "message",
        "user": "U04UUR7L093",
        "ts": "1679400115.927789",
        "text": "<@U04UUR7L093> has joined the channel"
    },
    {
        "type": "message",
        "user": "U050T9D1RCH",
        "ts": "1679925721.714839",
        "text": "<@U050T9D1RCH> has joined the channel"
    },
    {
        "type": "message",
        "user": "USLACKBOT",
        "ts": "1680134409.818339",
        "text": "Reminder: beginnersチャンネルは、新しい人がスムーズにHaskellに慣れるための質問を歓迎するチャンネルです。 Haskell-Beginners ML や IRCの#haskell-beginners  や RedditのMonthly Hask Anythingのような位置づけを意図しています。  beginnersチャンネルでの回答側は、以下の左側のような応答を厳禁とする運用です。 • それはくだらない質問だ → くだらない質問など無い • その質問は以前にもあった → 質問者はそんなこと知らない • Google検索せよ → 検索できないから質問している  beginnersチャンネルでは、例えば以下のレベルの質問から歓迎します。 • `:` とは何のことですか。 • タプルとは何ですか。 "
    },
    {
        "type": "message",
        "user": "U03DUKNQL3H",
        "ts": "1681055436.507129",
        "text": "こんばんは。学習のために色々な処理をfunctionalなアプローチで書いてみる中で浮かんだ疑問です。\n\n手続き的な書き方は難しくないのに、functionalに書こうと思うと急に難度があがる処理があるように感じ始めています。\n当たり前のことなのですが、これは慣れるしかないのですよね……？\n自分には到底書けないよと思う処理も、関数型言語に慣れ親しむうちに処理が書けるようになっていくのでしょうか？:smiling_face_with_tear:\n\n例えば`List.GroupBy`をあえて自分で実装するとなると、\n手続き型では「forループを回して、毎要素ペアを条件判定し、適宜新しい配列を作成したり既存の配列に追加したり」で済むところが、\n関数型では下記のように(*私にとっては*)難しい書き方になってしまいます。\n```myGroupBy :: (a -&gt; a -&gt; Bool) -&gt; [a] -&gt; [[a]]\nmyGroupBy p xs = foldl step [] xs\n    where step ys x | null ys = (x:[]):ys\n                    | p (head (last ys)) x = (init ys) ++ (((last ys) ++ (x:[])):[])\n                    | otherwise = ys ++ ((x:[]):[])```\n自力では書けなかったので、<https://www.mkamimura.com/2013/02/haskell-datalistgroupby.html> を引用しています(正直、このコードにバグがあるかどうかも私には自信を持っては分かりません)。\nこのような処理を書けるようになるためには、他言語の習得と同様に練習するしかないのですよね……！\n\nすみません、とても当たり前のことしか言っていないのですが、難しさに圧倒されて思わず何かご意見を伺いたくなってしまい……:eyes:"
    },
    {
        "type": "message",
        "user": "U4KU9ABL0",
        "ts": "1681100617.176789",
        "text": "groupBy は foldr より unfoldr のほうがすっきりしますね。\n<https://scrapbox.io/Haskell-Misc/span%E3%81%AE%E5%B0%8F%E3%83%8D%E3%82%BF%EF%BC%88%E4%BD%BF%E3%81%84%E6%96%B9%E7%B7%A8%EF%BC%89>"
    },
    {
        "type": "message",
        "user": "U04MBBNV5QB",
        "ts": "1681353081.736949",
        "text": "詳しい方教えてください。\n\n引数の値を、複数の関数(Char -&gt; Bool) に適用して or をとることを考えています。\n最初にシンプルに考えて以下のようになりました。\n```import Data.Char\nf x = or $ map ($ x) [isDigit, isLetter]\n\nghci&gt; f '1'\nTrue```\nこれをポイントフリー化しようと以下のように変更し\n```f x = or . flip map [isDigit, isLetter] $ ($ x)\n\nghci&gt; f '1'\nTrue```\nここまでは良かったのですが、最後に引数を消すことを考え\n\n```f = or . flip map [isDigit, isLetter] . ($)\n\nghci&gt; :t f\nf :: ((Char -&gt; Bool) -&gt; Bool) -&gt; Bool```\nこのようにしたところ、これは期待している型と違ってしまいます。\n\nうまく説明できているかわかりませんが、上記のような場合\nポイントフリーな書き方は可能でしょうか ?"
    },
    {
        "type": "message",
        "user": "U052LCRM2GP",
        "ts": "1681367761.317629",
        "text": "<@U052LCRM2GP> has joined the channel"
    },
    {
        "type": "message",
        "user": "U4KU9ABL0",
        "ts": "1681382954.057189",
        "text": "関数型 (function type) の意味がなんとなく判ってくると自然にそういう発想になるかなと思います。\n「σ と τ が型ならばσ → τ も型である」つまり、関数はそれ自身で値をもつ一級の(計算)対象で、なにも特別なものではないということが腑におちるとよいかもしれません。ちょっと手前味噌ですが、2019年のHaskell dayのときの「お話」のスライドです。御笑覧ください。\n<https://github.com/nobsun/hday2019/blob/master/doc/ftype.pdf>"
    },
    {
        "type": "message",
        "user": "U053MT1AGTW",
        "ts": "1681741820.164389",
        "text": "<@U053MT1AGTW> has joined the channel"
    },
    {
        "type": "message",
        "user": "U053GLH63LN",
        "ts": "1681791728.777879",
        "text": "<@U053GLH63LN> has joined the channel"
    },
    {
        "type": "message",
        "user": "U04MBBNV5QB",
        "ts": "1682068157.989739",
        "text": "(&gt;&gt;=) と (&gt;=&gt;) の違いについて\n\nChatGPT で教えてもらったところ\n&gt; (&gt;&gt;=)はバインド演算子と呼ばれ、モナド値を取り、モナドの中の値を抽出し、それを次の関数に渡します。\n&gt; 一方、(&gt;=&gt;)は関数合成演算子であり、モナドを扱う関数を合成するための演算子です。\nとの事でした。\n\n簡単に試してみたところ、以下のようなコードになったのですが\n違いは最初の関数 (f) の引数の渡し方くらいでした。\n\nこの二つの違いは、そのくらいの認識で問題ないでしょうか ?\n```import Control.Monad\n\nf x = Just $ x + 1\ng x = if x &gt; 0 then Just (x * 2) else Nothing\nh x = Just $ \"The number is \" ++ show x\n\nfgh    = f   &gt;=&gt; g &gt;=&gt; h\nfgh' x = f x &gt;&gt;= g &gt;&gt;= h\n\nmain = do\n  putStrLn $ show $ fgh  1\n  putStrLn $ show $ fgh' 1```\n"
    },
    {
        "type": "message",
        "user": "U054JSAHPC4",
        "ts": "1682165305.160919",
        "text": "<@U054JSAHPC4> has joined the channel"
    },
    {
        "type": "message",
        "user": "U055FRPTWJH",
        "ts": "1682743797.041699",
        "text": "<@U055FRPTWJH> has joined the channel"
    },
    {
        "type": "message",
        "user": "U055P58NJF6",
        "ts": "1682852642.717049",
        "text": "<@U055P58NJF6> has joined the channel"
    },
    {
        "type": "message",
        "user": "U04MBBNV5QB",
        "ts": "1682951128.365409",
        "text": "分岐処理について教えて下さい\n\nMaybe を使った場合\n```import Control.Monad\n\nf :: String -&gt; Maybe String\nf x = do\n    guard (x == \"MZ\")\n\n    return \"SUCCESS\"\n\n\nmain :: IO ()\nmain = do\n    print $ f \"MZ\"\n    print $ f \"ELF\"```\nこのような形 (guard) で条件によって処理を中断ができます。\nしかし、それ以外の文脈の場合この方法は使えないと思います。\n\n具体的には以下のようなプログラムを作っています。\n```import <http://System.IO|System.IO>\nimport System.Directory ( getCurrentDirectory )\nimport System.FilePath ( joinPath )\n\nimport qualified Data.ByteString.Lazy as B\nimport qualified Data.ByteString.Internal as BI ( w2c )\nimport Data.Binary.Get\n\ngetC :: Get Char\ngetC = BI.w2c &lt;$&gt; getWord8\n\nreadPE :: Get (Maybe String)\nreadPE = do\n    isMZ &lt;- (== \"MZ\") &lt;$&gt; sequence [getC, getC]\n\n    if isMZ then\n        return $ Just \"SUCCESS\"\n    else\n        return Nothing\n\nmain :: IO ()\nmain = do\n    xpath &lt;- joinPath . flip (:) [\"src\", \"a.exe\"] &lt;$&gt; getCurrentDirectory\n\n    withBinaryFile xpath ReadMode $ \\h -&gt; do\n        dat &lt;- B.hGetContents h\n        print $ runGet readPE dat\n\n    print \"done.\"```\n上記の `readPE` 関数の中で if による分岐を行っていますが\nもし、この後も条件による分岐が必要だった場合 if 文をネスト\nさせていくような形で作るのが正しいのでしょうか ?"
    },
    {
        "type": "message",
        "user": "U055C884CHM",
        "ts": "1683003502.792269",
        "text": "<@U055C884CHM> has joined the channel"
    },
    {
        "type": "message",
        "user": "U04MBBNV5QB",
        "ts": "1683303647.855859",
        "text": "型の異なる値の計算について教えて下さい\n\n以下の関数 f は a, b に対し fromIntegral を適用することで (+) の引数とできます。\n```import Data.Word\nimport Data.Function ( on )\nimport Control.Monad ( liftM2 )\n\nf = do\n    let a = pure 1 :: Maybe Word32\n    let b = pure 2 :: Maybe Word64\n\n    let a' = fromIntegral &lt;$&gt; a\n    let b' = fromIntegral &lt;$&gt; b\n\n    let c = (+) &lt;$&gt; a' &lt;*&gt; b'\n\n    print c\n---\nghci&gt; f\nJust 3\nit :: ()```\nこれを `on` 関数を使って一気に適用すると a, b の型が異なるため不可能です。\n```g = do\n    let a = pure 1 :: Maybe Word32\n    let b = pure 2 :: Maybe Word64\n\n    let c = on (liftM2 (+)) (fromIntegral &lt;$&gt;) a b\n\n    print c\n---\na.hs:23:50: error:\n    • Couldn't match type 'Word64' with 'Word32'\n      Expected: Maybe Word32\n        Actual: Maybe Word64\n    • In the fourth argument of 'on', namely 'b'\n      In the expression: on (liftM2 (+)) (fromIntegral &lt;$&gt;) a b\n      In an equation for 'c': c = on (liftM2 (+)) (fromIntegral &lt;$&gt;) a b\n   |\n23 |     let c = on (liftM2 (+)) (fromIntegral &lt;$&gt;) a b\n   |   ```\nこのような場合、なにか上手に解決する方法はあるのでしょうか ?"
    },
    {
        "type": "message",
        "user": "U058D0RSJQ0",
        "ts": "1684068566.870359",
        "text": "<@U058D0RSJQ0> has joined the channel"
    },
    {
        "type": "message",
        "user": "U058N9G5JCT",
        "ts": "1684521016.871239",
        "text": "<@U058N9G5JCT> has joined the channel"
    },
    {
        "type": "message",
        "user": "U05A9S45BCN",
        "ts": "1685616849.406719",
        "text": "<@U05A9S45BCN> has joined the channel"
    },
    {
        "type": "message",
        "user": "U05A7BL0PST",
        "ts": "1685679030.360229",
        "text": "<@U05A7BL0PST> has joined the channel"
    }
]