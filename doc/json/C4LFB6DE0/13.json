[
    {
        "ts": "1543753986.001400",
        "text": "<@UEH5X296F> has joined the channel",
        "user": "UEH5X296F",
        "type": "message"
    },
    {
        "ts": "1543798827.001600",
        "text": "Reminder: <https://haskell-jp.slack.com/archives/C4LFB6DE0/p1517792426000233>",
        "user": "USLACKBOT",
        "type": "message"
    },
    {
        "ts": "1543843574.002400",
        "text": "<@UEH3V5NRE> has joined the channel",
        "user": "UEH3V5NRE",
        "type": "message"
    },
    {
        "ts": "1543884354.008100",
        "text": "Qiita の Advent Calendar の某記事でここに興味を持ち Slack を始めました, 見るだけになってしまうかも知れませんが, もしもの時はよろしくお願い申し上げます.",
        "user": "UEH3V5NRE",
        "type": "message"
    },
    {
        "ts": "1543896317.008900",
        "text": "<@UEL0LE3V4> has joined the channel",
        "user": "UEL0LE3V4",
        "type": "message"
    },
    {
        "ts": "1543914817.010200",
        "text": "<@UEJUFM013> has joined the channel",
        "user": "UEJUFM013",
        "type": "message"
    },
    {
        "ts": "1544031201.010900",
        "text": "<@UELFKSH0V> has joined the channel",
        "user": "UELFKSH0V",
        "type": "message"
    },
    {
        "ts": "1544065969.011200",
        "text": "<@UELP94BJN> has joined the channel",
        "user": "UELP94BJN",
        "type": "message"
    },
    {
        "ts": "1544141319.011500",
        "text": "<@UEM161796> has joined the channel",
        "user": "UEM161796",
        "type": "message"
    },
    {
        "ts": "1544141462.012300",
        "text": "はじめまして。Haskell初心者で分からないことだらけですが、頑張りますのでどうぞよろしくお願いいたします。",
        "user": "UEM161796",
        "type": "message"
    },
    {
        "ts": "1544141823.015900",
        "text": "質問させて頂きます。Haskellのwebアプリ（wai）の勉強をしているのですが、以下のソースコードの24行目、\"こんにちわ\"の部分が、ブラウザ上で見ると文字化けしてしまいます。文字コード変換の問題かと思うのですが、どうしても解消できませんでした。どうぞお知恵をお貸しください。\n\n{-# LANGUAGE OverloadedStrings #-}\n\nmodule Lib\n    ( someFunc\n    ) where\n\n\nimport Network.Wai (Application, responseLBS)\nimport Network.HTTP.Types (status200)\nimport Network.Wai.Handler.Warp (run,Port)\nimport System.Environment(getEnvironment)\nimport Data.List(lookup)\nimport Data.Maybe\n\n\nsomeFunc :: IO ()\nsomeFunc = do\n  port &lt;- getPort\n  Prelude.putStr \"start Server: http://localhost:\"\n  print port\n  run port helloApp\n\nhelloApp :: Application\nhelloApp req respond =respond\n                      $ responseLBS status200 [] \"こんにちわ\"　# ←　この部分です\n\ngetPort :: IO Port\ngetPort = getEnvironment &gt;&gt;= return . port\n  where\n    port = fromMaybe defaultPort . fmap read . lookup \"PORT\"\n\ndefaultPort :: Port\ndefaultPort = 3000",
        "user": "UEM161796",
        "type": "message"
    },
    {
        "ts": "1544143899.016300",
        "text": "ああー、ByteStringの文字列リテラルの罠ですね。。。\n取り急ぎ結論から言うと、\n`\"こんにちわ\"` に `Data.Text.Lazy.Encoding.encodeUtf8` <http://hackage.haskell.org/package/text-1.2.3.1/docs/Data-Text-Lazy-Encoding.html#v:encodeUtf8> を適用すれば解決するはずです。",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1544144797.016500",
        "text": "IsString ByteStringは罠ですね…",
        "user": "U4KUNQF9N",
        "type": "message"
    },
    {
        "ts": "1544145294.016700",
        "text": "igrep 様、fumieval様、真に有難うございました。ソースコードを以下のように訂正しました所、文字化けが解消しました。大変お世話になり、真に有難うございました。\n　Chromeですと、さらにブラウザ自身の文字コードもUTF-8にしないといけないのですね。。大変勉強になりました。（FireFoxはそのままできれいに表示されました。）\n\nimport Data.Text.Lazy.Encoding # 追加\n\nhello= encodeUtf8 \"こんにちわ\" # 追加・変更",
        "user": "UEM161796",
        "type": "message"
    },
    {
        "ts": "1544145386.017000",
        "text": "grep 様、fumieval様、真に有難うございました。ソースコードを以下のように訂正しました所、文字化けが解消しました。大変お世話になり、真に有難うございました。\n　Chromeですと、さらにブラウザ自身の文字コードもUTF-8にしないといけないのですね。。大変勉強になりました。（FireFoxはそのままできれいに表示されました。）\n\nimport Data.Text.Lazy.Encoding # 追加\n\nhello= encodeUtf8 \"こんにちわ\" # 追加・変更",
        "user": "UEM161796",
        "type": "message"
    },
    {
        "ts": "1544145477.017600",
        "text": "igrep　様、名前のiが抜けてしまっておりました。大変失礼いたしました。申し訳ありませんでした。",
        "user": "UEM161796",
        "type": "message"
    },
    {
        "ts": "1544145501.017900",
        "text": "詳しく言うと、これはOverloadedStringsを使ってBytStringの文字列リテラルを書いたことによる問題です。\nOverloadedStringsを使ってBytStringの文字列リテラルを書いた場合、内部でBytStringのfromStringというStringからBytStringに変換する関数（<@U4KUNQF9N>さんが触れてるIsStringのメソッドです）を呼んでいるのですが、各Charの1バイト目の値しかとらないため、 \"こんにちわ\" の各文字が切れてしまうのです",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1544145513.018100",
        "text": "&gt; Chromeですと、さらにブラウザ自身の文字コードもUTF-8に\nそんなことなかった気もしますが、その辺は WAI 関係なく web の話なので、 response header に `Content-Type:\ntext/html; charset=UTF-8` 加えるなどするのがいいと思います。",
        "user": "U4MAYDV9C",
        "type": "message"
    },
    {
        "ts": "1544145571.018600",
        "text": "<@UEM161796> すみません、原則として「Also send to <#C4LFB6DE0|general> 」は使わないでください。",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1544145628.018900",
        "text": "<@U4LGTMTMK> 有難うございます。よくわからないまま、チェックを入れてしまっておりました。申し訳ありません。",
        "user": "UEM161796",
        "type": "message"
    },
    {
        "ts": "1544145730.019100",
        "text": "hiratara　様　有難うございます。また、いろいろ試して、勉強してみたいと思います。",
        "user": "UEM161796",
        "type": "message"
    },
    {
        "ts": "1544247441.020000",
        "text": "<@UEPSSLZ9D> has joined the channel",
        "user": "UEPSSLZ9D",
        "type": "message"
    },
    {
        "ts": "1544356253.020400",
        "text": "<@UEP6QNUG2> has joined the channel",
        "user": "UEP6QNUG2",
        "type": "message"
    },
    {
        "ts": "1544361151.020700",
        "text": "<@UEP79DXM0> has joined the channel",
        "user": "UEP79DXM0",
        "type": "message"
    },
    {
        "ts": "1544401078.021000",
        "text": "<@UEQPMGVSS> has joined the channel",
        "user": "UEQPMGVSS",
        "type": "message"
    },
    {
        "ts": "1544403601.021200",
        "text": "Reminder: <https://haskell-jp.slack.com/archives/C4LFB6DE0/p1517792426000233>",
        "user": "USLACKBOT",
        "type": "message"
    },
    {
        "ts": "1544747872.021900",
        "text": "<@UET37UPQR> has joined the channel",
        "user": "UET37UPQR",
        "type": "message"
    },
    {
        "ts": "1544768067.027600",
        "text": "抽象的な質問で恐縮ですが、質問させていただきます。\n先程hClose を忘れていたせいでoutput の末尾だけ欠損して毎回その数が異なるというバグと戦っておりました。\n何かを呼び出した後に、特定の関数を呼び出していない場合にエラーを表示するような機能を付ける場合、template Haskell 等でコンパイル時に判断する他に手段があるでしょうか。",
        "user": "UEC0PN1PA",
        "type": "message"
    },
    {
        "ts": "1544768453.027700",
        "text": "いかなる条件でも絶対に呼び出すことを保証するのは、そもそもTemplate Haskellでも難しいです。\nそうしたAPIや型（ファイルの場合 `Handle` ）を実装した人が、 `bracket` を使って作ったAPI （ファイルの場合 `withFile` ）のみを利用してその型を利用できるようにする、という手はあります。\nあと、APIのユーザーとして、 極力 `withFile` などのAPIだけを利用する、というだけでもそれなりに防げるかと思います。",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1544769012.028100",
        "text": "ありがとうございます.利用者側としては取り敢えずbracketを基本的に使うことを心がけるというのが一番なのですね",
        "user": "UEC0PN1PA",
        "type": "message"
    },
    {
        "ts": "1544775666.028500",
        "text": "<@UET91JXLZ> has joined the channel",
        "user": "UET91JXLZ",
        "type": "message"
    },
    {
        "ts": "1544781997.030300",
        "text": "bracket や、withXXXX を使うのは前提として ResourceT を使うっていう手もあるにはありますよ。",
        "user": "U9XHWQX7Z",
        "type": "message"
    },
    {
        "ts": "1544798202.031400",
        "text": "Conduitなら必ずhCloseされるよ定期",
        "user": "U570660KX",
        "type": "message"
    },
    {
        "ts": "1544798232.032000",
        "text": "実装はResourceTです",
        "user": "U570660KX",
        "type": "message"
    }
]