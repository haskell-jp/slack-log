[
    {
        "type": "message",
        "user": "U03H9PH8FRP",
        "ts": "1683290439.834829",
        "text": "すみません、自己解決しました……！　2 変数関数だったのが問題でした。\n2 変数関数が絡むポイントフリースタイルは、別途調べます！"
    },
    {
        "type": "message",
        "user": "U4KU9ABL0",
        "ts": "1683796830.050749",
        "text": "すでに解決すみかもしれませんが、変数がいくつあっても、外側から1つずつ外していけばよいだけなので機械的にできると思います．infix operator がすこし扱いにくいと感じたら, セクションにするか、名前をつけて prefix で使えばよいかと思います．s = (&lt;*&gt;) :: (a -&gt; b -&gt; c) -&gt; (b -&gt; c) -&gt; a -&gt; c とか b = (.) :: (b-&gt;c)-&gt;(a-&gt;b)-&gt;a-&gt;c など．．．"
    },
    {
        "type": "message",
        "user": "U4KU9ABL0",
        "ts": "1683797067.868319",
        "text": "f = ((fst &lt;$&gt;) .) . monadicTuple"
    },
    {
        "type": "message",
        "user": "U03H9PH8FRP",
        "ts": "1683798553.667309",
        "text": "だいぶ難しいですね……！　機械的と聞いて <http://pointfree.io|Pointfree.io> を思い出し、正体が分かりました。\n\n(.:) :: (b -&gt; c) -&gt; (a1 -&gt; a2 -&gt; b) -&gt; (a1 -&gt; a2 -&gt; c)\n(.:) = (.) . (.)\n\nf = fmap fst .: monadicTuple\n\n競プロ専のため `.:` 演算子を使っていこうと思います。ありがとうございます！"
    },
    {
        "type": "message",
        "user": "U4KU9ABL0",
        "ts": "1683799350.009429",
        "text": "```    f x y = g &lt;$&gt; h x y\n=&gt;  { infix の セクション化 }\n    f x y = (g &lt;$&gt;) ((h x) y)\n=&gt;  { y を外す }\n    f x = (g &lt;$&gt;) . (h x)\n=&gt;  { infix のセクション化 }\n    f x = ((g &lt;$&gt;) .) (h x)\n=&gt;  { x を外す }\n    f = ((g &lt;$&gt;) .) . h```"
    },
    {
        "type": "message",
        "user": "U03H9PH8FRP",
        "ts": "1683799813.848749",
        "text": "ほ、ホントだーー！\nそしてもう 1 つの積月 (?) の悩みも同様に解けました:"
    },
    {
        "type": "message",
        "user": "U03H9PH8FRP",
        "ts": "1683799837.312329",
        "text": ""
    },
    {
        "type": "message",
        "user": "U03H9PH8FRP",
        "ts": "1683800012.713689",
        "text": "演算子をセクションとして解釈するとき、 `(左の要素 演算子)` とするか (のぶさん の例) `(演算子 右の要素)` にするか (僕の例) も機械的に分かりますか？\n僕の書いた分は跳躍があった気もしますが……"
    },
    {
        "type": "message",
        "user": "U03H9PH8FRP",
        "ts": "1683800326.046079",
        "text": "`&gt;&gt;` は『左結合』だから……？　ともかく機械的にポイントフリースタイルに変換する方法を調べていきたいと思います。とてもスッキリして助かりました！"
    },
    {
        "type": "message",
        "user": "U4KU9ABL0",
        "ts": "1683801210.914949",
        "text": "外したい変数が左にあるときは (演算子 右オペランド) ですね。\n```    f x = x `g` y\n+&gt;  { セクション化 }\n    f x = (`g` y) x\n=&gt;  { x を外す }\n    f = (`g` y)```\nこれは結局\n```    f x = g x y\n+&gt;  { Cコンビネータ }\n    f x = flip g y x\n=&gt;  { x を外す }\n    f = flip g y```\nと同じなんです。"
    },
    {
        "type": "message",
        "user": "U03H9PH8FRP",
        "ts": "1683802532.670989",
        "text": "すごい。。分かりました！　たぶんその考えは一生使っていきます！\nメモ: <https://ja.wikipedia.org/wiki/%E3%82%B3%E3%83%B3%E3%83%93%E3%83%8D%E3%83%BC%E3%82%BF%E8%AB%96%E7%90%86#B,C%E3%82%B3%E3%83%B3%E3%83%93%E3%83%8D%E3%83%BC%E3%82%BF|C コンビネータ (Wiki)>"
    }
]