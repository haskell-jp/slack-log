[
    {
        "ts": "1556349500.003300",
        "text": "```\ntype PersonParams (f :: * -&gt; *) (g :: * -&gt; *) =\n  Field Identity :*\n  '[ \"name\" &gt;: f Text\n   , \"age\" &gt;: g Int\n   ]\n```\n↓\n```\ntype PersonRequiredParams (f :: * -&gt; *) =\n  Field f :*\n  '[ \"name\" &gt;: Text\n   ]\n\ntype PersonOptionalParams (g :: * -&gt; *) =\n  Field g :*\n  '[ \"age\" &gt;: Int\n   ]\n```",
        "user": "U4LNDESN8",
        "type": "message"
    },
    {
        "ts": "1556349695.003700",
        "text": "`h *: xs` の `xs` のなかに入っているファンクタをフィルターしながら `h` の方に上げたいのです。",
        "user": "U4LNDESN8",
        "type": "message"
    },
    {
        "ts": "1556350546.004200",
        "text": "なるほど、勘違いしてたw\n例えば `PersonParams -&gt; PersonOptionalParams` であれば Nullable の `wrench` に近いやもしれません。\n<http://hackage.haskell.org/package/extensible-0.5/docs/Data-Extensible-Nullable.html#v:wrench>\n参考になるかも",
        "user": "U56L7EVNY",
        "type": "message"
    },
    {
        "ts": "1556351109.004500",
        "text": "`wrench` は `h` に作用するだけなので、 `xs` が不変でないと使えないのです。。。",
        "user": "U4LNDESN8",
        "type": "message"
    },
    {
        "ts": "1556351171.004700",
        "text": "難しいのは `xs` が変わってしまう点ですね。",
        "user": "U4LNDESN8",
        "type": "message"
    },
    {
        "ts": "1556351391.005000",
        "text": "気分的にはこんな感じのコンストレイントが書けないかな、と。\n`(xs ~ [f x1, g x2, f x3], ys ~ [x1, x3], Include xs (f * ys))`",
        "user": "U4LNDESN8",
        "type": "message"
    },
    {
        "ts": "1556358682.005200",
        "text": "それっぽいのできた\n<https://gist.github.com/matsubara0507/0beb24c885585089caa4b769f6a1b1a9>",
        "user": "U56L7EVNY",
        "type": "message"
    },
    {
        "ts": "1556358886.005400",
        "text": "```\n$ ghci\n&gt;&gt;&gt; :set -XOverloadedLabels\n&gt;&gt;&gt; import Lens.Micro\n&gt;&gt;&gt; a = liftRecord person :: PersonRequiredParams\n&gt;&gt;&gt; a ^. #name\n\"alice\"\n```",
        "user": "U56L7EVNY",
        "type": "message"
    },
    {
        "ts": "1556378758.005700",
        "text": "おお、ありがとうございます。見てみます。",
        "user": "U4LNDESN8",
        "type": "message"
    },
    {
        "ts": "1556430312.005900",
        "text": "今更ながら。開発中の古い資料なんで実際はどうか分かりませんが、こんなのがありました。\n当初はビルド時の入力のハッシュ値をとるというプランだったみたいですが、なんかいろいろ試行錯誤してたみたいですね…\n\n<https://www.haskell.org/wikiupload/5/50/Hiw2012-philipp-schuster.pdf>",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1556506761.013400",
        "text": "`aeson` についてなんですが\n\nFoo型を表すJSONとして\n\n`{ \"a\":100, \"b\":200}`\n\nが与えられる場合\n\n```\ndata Foo = Foo { a :: Int, b :: Int} deriving Generic\ninstance FromJSON Foo\n```\n\nのようにして簡単に実装できるのですが。\nレコード b が省略されているときはb に50が入ってるものだと過程する。\nみたいな場合はbの型をMaybe Int にするしかないのでしょうか？\nもちろん手書きすればいいのはわかるのですが。\nデフォルト値を与えられたりしないでしょうか？",
        "user": "U9XHWQX7Z",
        "type": "message"
    },
    {
        "ts": "1556511638.013500",
        "text": "一つの型では難しいんじゃないっすかね。\n一旦 `Maybe Int` として読んでから変換するとか。",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1556511892.014000",
        "text": ":bulb: あとは `FomJSON` を別途実装した `newtype` で囲うとか\n\n```\nnewtype Default50 = Default50 :: Int\ninstance FromJSON Default50 where\n  parseJSON = withScientific ...\n```",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1556511911.014200",
        "text": "ｆｍｆｍ Maybe Int 経由するのが無難ですかね？:sweat: まぁしょうがないか。 回答どうもです！",
        "user": "U9XHWQX7Z",
        "type": "message"
    },
    {
        "ts": "1556512002.014400",
        "text": "あ。 `newtype` 使う作戦もありなのか。そっちにしよっと :smile:",
        "user": "U9XHWQX7Z",
        "type": "message"
    },
    {
        "ts": "1556513170.014800",
        "text": "Stackoverflowに関係ありそうな質問がありました。FromJSONとデフォルトの値を持つ型クラスを満たすnewtypeでラップするという戦略のようです。\n<https://stackoverflow.com/questions/26683693/aeson-generics-with-default-values>",
        "user": "U59GW4U4T",
        "type": "message"
    },
    {
        "ts": "1556515042.015300",
        "text": "完全にオーバーウェポンって感じだけど extensible の Nullable を駆使すればそれっぽいのを実現できる気がする",
        "user": "U56L7EVNY",
        "type": "message"
    },
    {
        "ts": "1556515875.015600",
        "text": "`Maybe` な `RecordOf` 作って各フィールドごとに `&lt;|&gt;` を適用させるってのをやってましたね。そんで最後に `htraverse` で `Nothing` が1つでもあれば全体として `mzero` になるみたいな",
        "user": "U7155GPR9",
        "type": "message"
    },
    {
        "ts": "1556516038.015900",
        "text": "できた\n<https://gist.github.com/matsubara0507/0d0fe2fa59171547ee438dacb0cf6d9c>",
        "user": "U56L7EVNY",
        "type": "message"
    },
    {
        "ts": "1556516136.016100",
        "text": "```\n$ ghci\n&gt;&gt;&gt; :set -XOverloadedStrings\n&gt;&gt;&gt; import Data.Aeson\n&gt;&gt;&gt; decode \"{ \\\"a\\\": 1, \\\"b\\\": 2 }\" :: Maybe Foo\nJust (a @= 1 &lt;: b @= 2 &lt;: nil)\n&gt;&gt;&gt; decode \"{ \\\"a\\\": 1 }\" :: Maybe Foo\nNothing\n&gt;&gt;&gt; decode \"{ \\\"a\\\": 1 }\" :: Maybe Foo'\nJust (Nullable {getNullable = Just (a @= 1)} &lt;: Nullable {getNullable = Nothing} &lt;: nil)\n&gt;&gt;&gt; fromNullable defaultFoo &lt;$&gt; decode \"{ \\\"a\\\": 1 }\" :: Maybe Foo\nJust (a @= 1 &lt;: b @= 50 &lt;: nil)\n```",
        "user": "U56L7EVNY",
        "type": "message"
    },
    {
        "ts": "1556516206.016600",
        "text": "ただデフォルト値なしはできないけど。。。もう少し工夫すればできる気もするが",
        "user": "U56L7EVNY",
        "type": "message"
    },
    {
        "ts": "1556606971.017200",
        "text": "defaultFooもNullableにして、両方Nothingだったら失敗するようにもできそうです(さらなる追い討ち)",
        "user": "U4KUNQF9N",
        "type": "message"
    },
    {
        "ts": "1556607002.017400",
        "text": "なるほど～かしこい",
        "user": "U56L7EVNY",
        "type": "message"
    },
    {
        "ts": "1556608835.018200",
        "text": "お世話になります。初歩的なことかもしれませんが、以下質問させてください。\n\n以下のようなクラス宣言およびインスタンス宣言を考えます。\n```\ndata Fuga a Int = Fuga Int\n\nclass Hoge h where\n  func :: h a -&gt; a\n\ninstance Hoge (Fuga a) where\n  func (Fuga x) = ...\n\n```\nここで、型変数 `a` に応じて `func` の振る舞いを変更するには、どのようにしたらよいでしょうか？",
        "user": "U55V45LQ0",
        "type": "message"
    },
    {
        "ts": "1556608868.018300",
        "text": "具体的なモチベーションは、\nヒープを実装しようとした時に、最小値を取得できるヒープと最大値を取得できるヒープを別の型として表現したいが、実装（もしくはインスタンス宣言）は共通としたい、\nというものです。\n（ここでは、別の型であることを表現する手段として幽霊型を用いようとしています）",
        "user": "U55V45LQ0",
        "type": "message"
    },
    {
        "ts": "1556608889.018500",
        "text": "単純に `FlexibleInstances` 拡張を有効にして2つのインスタンス宣言を書く、というのも手ですが、そうするとほとんど同じ実装（値の比較以外）のインスタンス宣言が2つ出てきてしまいます。\nそういうのは避けて、 `func` の実装を別途 `a` ごとに用意しておいて、インスタンス内部で `a` に応じて適切な実装が選択されるようにできればいいなー、と。",
        "user": "U55V45LQ0",
        "type": "message"
    },
    {
        "ts": "1556609201.018700",
        "text": "`a` をまた別の型クラスのインスタンスにして比較する処理をメソッドとしてもたせるとかでしょうか :thinking_face:",
        "user": "U4KPPQW7K",
        "type": "message"
    },
    {
        "ts": "1556609910.018900",
        "text": "（質問の意図が組みきれず途中で迷走してしまいましたがそれっぽいものを書いてみました <https://repl.it/@lotz84/IvoryRipeAngle> ）",
        "user": "U4KPPQW7K",
        "type": "message"
    },
    {
        "ts": "1556610017.019500",
        "text": "要素の比較方法を変えたい、というものであれば、 `Down` という `newtype` でくるんであげることでも可能ですが... <https://hackage.haskell.org/package/base-4.12.0.0/docs/Data-Ord.html#t:Down>",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1556610400.019800",
        "text": "さすがにextensibleへの拡張は考えてませんでしたが。今後の拡張性のため考慮に入れておくべきですね",
        "user": "U9XHWQX7Z",
        "type": "message"
    },
    {
        "ts": "1556617648.020200",
        "text": "最初に実際のソースコードをおいておけばよかったですね...\n<https://gist.github.com/chupaaaaaaan/c70ab641df6f53b35b35e2d9abbf41c3>",
        "user": "U55V45LQ0",
        "type": "message"
    },
    {
        "ts": "1556618252.020400",
        "text": "やりたかったことは、まさに<@U4KPPQW7K> さんの実装がドンピシャ！という感じです。\n要素の比較、というよりは、型コンストラクタにだけ現れて値コンストラクタの型変数として現れない型をどの様に実装に取り込むか、に悩んでいました。ありがとうございます。",
        "user": "U55V45LQ0",
        "type": "message"
    },
    {
        "ts": "1556618415.020700",
        "text": "（ドンピシャ、と言ったけどちょっとわからないところがある…）",
        "user": "U55V45LQ0",
        "type": "message"
    },
    {
        "ts": "1556692512.021200",
        "text": "最初の一歩としては、単純にそういう `FromJSON` のインスタンスを定義する、というのがよいと思います。\n```\nimport Data.Aeson\n\ndata Foo = Foo { a :: Int, b :: Int}\n  deriving Show\n\ninstance FromJSON Foo where\n  parseJSON = withObject \"Foo\" $ \\o -&gt; do\n    a &lt;- o .: \"a\"\n    b &lt;- o .:? \"b\" .!= 50\n    pure $ Foo a b\n\n-- |\n-- &gt;&gt;&gt; run\n-- Just (Foo {a = 100, b = 200})\n-- Just (Foo {a = 100, b = 50})\nrun :: IO ()\nrun = do\n  print (decode \"{ \\\"a\\\":100, \\\"b\\\":200}\" :: Maybe Foo)\n  print (decode \"{ \\\"a\\\":100}\" :: Maybe Foo)\n```",
        "user": "U4LNDESN8",
        "type": "message"
    },
    {
        "ts": "1556697298.021500",
        "text": "<@U55V45LQ0> 型に依存する部分だけ型クラスで分ければよいのではないでしょうかね？\n\n```\nempty :: (Ord a, h ~ LeftistHeap x) =&gt; h a\nempty = E\n\nisEmpty :: (Ord a, h ~ LeftistHeap x) =&gt; h a -&gt; Bool\nisEmpty E = True\nisEmpty _ = False\n\ninsert :: (Ord a, h ~ LeftistHeap x, Heap h) =&gt; a -&gt; h a -&gt; h a\ninsert x h = merge (T 1 x E E) h\n\nfind :: (Ord a, h ~ LeftistHeap x) =&gt; h a -&gt; Maybe a\nfind E = Nothing\nfind (T _ x _ _) = Just x\n\ndelete :: (Ord a, h ~ LeftistHeap x, Heap h) =&gt; h a -&gt; Maybe (h a)\ndelete E = Nothing\ndelete (T _ _ a b) = Just (merge a b)\n\n\nclass Heap h where\n  merge :: Ord a =&gt; h a -&gt; h a -&gt; h a\n\ninstance Heap (LeftistHeap Min) where\n  merge h E = h\n  merge E h = h\n  merge h1@(T _ x a1 b1) h2@(T _ y a2 b2)\n    = if x &lt;= y\n      then makeT x a1 $ merge b1 h2\n      else makeT y a2 $ merge h1 b2\n\ninstance Heap (LeftistHeap Max) where\n  merge h E = h\n  merge E h = h\n  merge h1@(T _ x a1 b1) h2@(T _ y a2 b2)\n    = if x &gt;= y\n      then makeT x a1 $ merge b1 h2\n      else makeT y a2 $ merge h1 b2\n```",
        "user": "U4LNDESN8",
        "type": "message"
    },
    {
        "ts": "1556709561.021800",
        "text": "わからない箇所が解消しました。\n `Proxy`の使い方がいまいちわかっていなかったですが、具体的な値を定義せずに型を使いたい時に使用するのですね。ありがとうございます。",
        "user": "U55V45LQ0",
        "type": "message"
    },
    {
        "ts": "1556709848.022100",
        "text": "<@U4LNDESN8> 最初はそれも考えましたが、Heap構造に対する抽象的な操作として他のメソッドも定義しているので、できれば他のメソッドもHeap型クラスに含めたいですね…（現在「純粋関数型データ構造」を読んでいて、それにいくつかのHeap構造が出てくるのでそれに合わせたい、というのもあります）",
        "user": "U55V45LQ0",
        "type": "message"
    },
    {
        "ts": "1556709956.022300",
        "text": "もちろん、 `LeftistHeap` に固有の操作は型クラスに含めず、独立に定義するものだと思います。",
        "user": "U55V45LQ0",
        "type": "message"
    },
    {
        "ts": "1556868276.022800",
        "text": "<@UJF50B755> has joined the channel",
        "user": "UJF50B755",
        "type": "message"
    },
    {
        "ts": "1556947405.023100",
        "text": "<@UJG3B0CT1> has joined the channel",
        "user": "UJG3B0CT1",
        "type": "message"
    },
    {
        "ts": "1556947674.024200",
        "text": "",
        "user": "UJG3B0CT1",
        "type": "message"
    },
    {
        "ts": "1556947721.025200",
        "text": "お世話になります。とても初歩的な質問で申し訳ないのですが、上の式が成り立っている意味がよくわかりません。\nぜひ教えていただけたら幸いです。よろしくお願いします。",
        "user": "UJG3B0CT1",
        "type": "message"
    },
    {
        "ts": "1556949923.025700",
        "text": "```\n(*), (+) :: Num a =&gt; a -&gt; a-&gt; a\n```\nですので `(*)` に `b` 型を代入すると `b -&gt; b` になります。 `b` が `(+)` だとすると `(a -&gt; a-&gt; a) -&gt; (a-&gt; a-&gt; a) `になります。結合性から右のかっこは省略しても良いので `(a -&gt; a-&gt; a) -&gt; a -&gt; a -&gt; a `となります",
        "user": "U7155GPR9",
        "type": "message"
    },
    {
        "ts": "1556955454.025900",
        "text": "`(*)` も `(+)` も、それぞれ `Num` 型クラスのインスタンスであればどれでも受け取るようになっています。\nなので、 `:t` の結果が `(Num a, Num (a -&gt; a -&gt; a)) =&gt; ...` となっているとおり、これらの条件を満たす型が *本当にあれば* この式も普通に型チェックを通ります。\n\nただ、実際のところ `(Num a, Num (a -&gt; a -&gt; a))` を満たす型は意図的に、頑張って作らない限りは存在しないので、いざ `((*) (+))` を使おうとしたその時に型エラーになる可能性が高いです。\n例えば以下のように:\n\n```\n&gt; ((*) (+)) (+) 1 2 3 :: Integer\n\n&lt;interactive&gt;:4:1: error:\n    ? No instance for (Num\n                         ((Integer -&gt; Integer)\n                          -&gt; (Integer -&gt; Integer) -&gt; Integer -&gt; Integer))\n        arising from a use of ‘*’\n        (maybe you haven't applied a function to enough arguments?)\n    ? In the expression: ((*) (+)) (+) 1 2 3 :: Integer\n      In an equation for ‘it’: it = ((*) (+)) (+) 1 2 3 :: Integer\n\n&lt;interactive&gt;:4:6: error:\n    ? No instance for (Num (Integer -&gt; Integer))\n        arising from a use of ‘+’\n        (maybe you haven't applied a function to enough arguments?)\n    ? In the first argument of ‘(*)’, namely ‘(+)’\n      In the expression: ((*) (+)) (+) 1 2 3 :: Integer\n      In an equation for ‘it’: it = ((*) (+)) (+) 1 2 3 :: Integer\n```",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1556958445.026200",
        "text": "なるほど...\n助かりました。ありがとうございます",
        "user": "UJG3B0CT1",
        "type": "message"
    },
    {
        "ts": "1557018043.026500",
        "text": "それほど頑張らなくても，あまり違和感なく定義できそう．\n```\n{-# LANGUAGE NoMonomorphismRestriction #-}\n{-# LANGUAGE FlexibleContexts #-}\n{-# LANGUAGE FlexibleInstances #-}\ninstance Num a =&gt; Num (a -&gt; a -&gt; a) where\n  (f + g) x y = f x y + g x y\n  (f * g) x y = f x y * g x y\n  (f - g) x y = f x y - g x y\n  abs f x y = abs (f x y)\n  signum f x y = signum (f x y)\n  fromInteger i = const (const (fromInteger i))\n```\nとかどうですかねぇ．",
        "user": "U4KU9ABL0",
        "type": "message"
    },
    {
        "ts": "1557137034.027000",
        "text": "<@UJ8P66TRP> has joined the channel",
        "user": "UJ8P66TRP",
        "type": "message"
    },
    {
        "ts": "1557273009.031400",
        "text": "こんにちは。いつもお世話になっています。\n\nGitHub + CircleCI + Coverall の組み合わせで、CoverallのHaskell対応パッケージで、stackベースのものをお使いの方いらっしゃいますか？\n\nCoverallは、PR送るときにテストカバレッジをチェックしてくれるものですが、Coverall のHaskell対応のパッケージはCabal用でメンテナンスもされていない模様で不安。stack用のCoverallパッケージはいくつかあるみたいなので どれがよいのか戸惑っています。",
        "user": "U7GSVRQ6S",
        "type": "message"
    }
]