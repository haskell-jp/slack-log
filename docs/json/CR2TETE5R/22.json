[
    {
        "text": "<@U045TDSSH8C> has joined the channel",
        "type": "message",
        "ts": "1665272454.027519",
        "user": "U045TDSSH8C"
    },
    {
        "text": "<@U045SA60C90> has joined the channel",
        "type": "message",
        "ts": "1665356484.685789",
        "user": "U045SA60C90"
    },
    {
        "text": "Reminder: beginnersチャンネルは、新しい人がスムーズにHaskellに慣れるための質問を歓迎するチャンネルです。 Haskell-Beginners ML や IRCの#haskell-beginners  や RedditのMonthly Hask Anythingのような位置づけを意図しています。  beginnersチャンネルでの回答側は、以下の左側のような応答を厳禁とする運用です。 • それはくだらない質問だ → くだらない質問など無い • その質問は以前にもあった → 質問者はそんなこと知らない • Google検索せよ → 検索できないから質問している  beginnersチャンネルでは、例えば以下のレベルの質問から歓迎します。 • `:` とは何のことですか。 • タプルとは何ですか。 ",
        "type": "message",
        "ts": "1665619227.383829",
        "user": "USLACKBOT"
    },
    {
        "text": "Haskellでのデバッグ方法がわからず、質問させていただいてもよろしいでしょうか。\nやりたいことは、JavaScriptの`console.log`のように、関数のなかの変数を`GHCi`のコンソールに出力したいです。\n具体的には、以下の関数で、`repeatedL1`　の部分がどんな値になっているかを見たいです。\n```cartCombine :: (a -&gt; b -&gt; c) -&gt; [a] -&gt; [b] -&gt; [c]\ncartCombine func l1 l2 = zipWith func newL1 cycledL2\n    where\n        nToAdd = length l2\n        repeatedL1 = map (take nToAdd . repeat) l1\n        newL1 = mconcat repeatedL1\n        cycledL2 = cycle l2```\nここで、\n```repeatedL1 = map (take nToAdd . repeat) l1\nshow repeatedL1\nnewL1 = mconcat repeatedL1\n……```\nなどとすると、エラーになってしまいます。\n\nご教示いただけますと幸いです。\nよろしくお願いいたします。",
        "type": "message",
        "ts": "1665737308.311929",
        "user": "U0203PR2087"
    },
    {
        "text": "Practical Haskell という本を読んでいます。分からない点があるので質問させてください。\n\n```module Main (main) where\n\nimport GHC.IO.IOMode (IOMode(ReadMode))\nimport GHC.IO.Handle (hGetContents, hClose)\nimport <http://System.IO|System.IO> (openFile)\n\nmain :: IO ()\nmain = do\n    h &lt;- openFile \"./some.txt\" ReadMode\n    s &lt;- hGetContents h\n    hClose h\n    print s```\nこれを実行するとエラーになります。`./some.txt: hGetContents: illegal operation (delayed read on closed handle)`\n\nエラーになる理屈は理解していて、`hClose h`と`print s`を入れ替えれば動作します。\n他の解決策として   `seq` または   `deepseq`  を使っても解決できると書いてあるのですが、具体的に使い方は書いてありませんでした。\n\n`hClose h` する前に文字列全体を読み込めばいいので、`let !size = length s` を追加して、文字列全体を読み込むように処理を強制しました。これは動作しました。\n```{-# LANGUAGE BangPatterns #-}\nmodule Main (main) where\n\nimport GHC.IO.IOMode (IOMode(ReadMode))\nimport GHC.IO.Handle (hGetContents, hClose)\nimport <http://System.IO|System.IO> (openFile)\n\nmain :: IO ()\nmain = do\n    h &lt;- openFile \"./some.txt\" ReadMode\n    s &lt;- hGetContents h\n    let !size = length s\n    hClose h\n    print s```\n`let !size = length s`  を追加したのと同じ理屈で  `let ds =  s `deepseq` s` を追加したのですが、これだとエラーになります。\n\n```{-# LANGUAGE BangPatterns #-}\nmodule Main (main) where\n\nimport GHC.IO.IOMode (IOMode(ReadMode))\nimport GHC.IO.Handle (hGetContents, hClose)\nimport <http://System.IO|System.IO> (openFile)\nimport Control.DeepSeq\n\nmain :: IO ()\nmain = do\n    h &lt;- openFile \"./some.txt\" ReadMode\n    s &lt;- hGetContents h\n    let ds =  s `deepseq` s\n    hClose h\n    print ds```\n`let ds =  s `deepseq` s`  ではエラーになる理由をご教示いただけないでしょうか。よろしくお願い致します。",
        "type": "message",
        "ts": "1665918777.693479",
        "user": "UTK43JS4X"
    },
    {
        "text": "遅延評価についてよく分からなくなってきました。\n```module Main (main) where\n\nimport qualified <http://System.IO|System.IO> as SIO\n\nmain :: IO ()\nmain = do\n    h &lt;- SIO.openFile \"./input.txt\" SIO.ReadMode\n    content &lt;- SIO.hGetContents h\n    SIO.hClose h\n    print content```\nこれは実行するとエラーになる理由はわかります。`content` を評価する時には既にファイルがクローズされているから。\n\n```module Main (main) where\n\nmain :: IO ()\nmain = do\n    putStrLn \"please input1 \"\n    input &lt;- getLine\n    putStrLn \"please input2 \"\n    putStrLn $ \"your input is \" ++ input```\n同様に考えて、 `input`を評価する時に標準入力を受け付けることになり、下のような出力順になるのでは？と考えたのですが、\nそうはならず。コードに書いてある順序通りの出力になりました。\n\n```please input1 \nplease input2 \nyour input is aaa```\nこれまでちゃんと理解せずにいたのですが、混乱しています。\n\n`getLine`がlazyではないから評価された時点で入力待ち状態になる、と考えると納得できそうですが、\nそもそも `getLine`  が評価されるのは「please input2」 を出力した後なのでは？\nたぶん「遅延評価」「式を評価する」ということの意味を正確に理解できていないと思うのですが、どなたかご教示いただけないでしょうか。",
        "type": "message",
        "ts": "1666062034.575279",
        "user": "UTK43JS4X"
    },
    {
        "text": "<@U047GLV1KA5> has joined the channel",
        "type": "message",
        "ts": "1666147001.076179",
        "user": "U047GLV1KA5"
    },
    {
        "text": "\\",
        "type": "message",
        "ts": "1666689195.737389",
        "user": "U027BSBUHMH"
    },
    {
        "text": "<@U048BPMJ960> has joined the channel",
        "type": "message",
        "ts": "1666822096.525419",
        "user": "U048BPMJ960"
    },
    {
        "text": "<@U048GAF8X8E> has joined the channel",
        "type": "message",
        "ts": "1667060090.805199",
        "user": "U048GAF8X8E"
    },
    {
        "text": "こんばんは。 <https://en.wikibooks.org/wiki/Write_Yourself_a_Scheme_in_48_Hours|Write Yourself a Scheme in 48 hours> をやっています。記事中では `String` が使用されていますが、代わりに `Text` (データ型) を使ってみたいと思います。",
        "type": "message",
        "ts": "1667135722.364259",
        "user": "U03H9PH8FRP"
    },
    {
        "text": "ただ実際使おうにも、 1 文字を表すのに `Char` を使うべきか `Text.singleton` かなど迷う点が多くありそうです。",
        "type": "message",
        "ts": "1667135853.108099",
        "user": "U03H9PH8FRP"
    },
    {
        "text": "(そのためインプットが欲しいと思います)。 `Text` と `Parsec` を使ったおすすめのリポジトリなどあれば、お聞かせ願えますでしょうか :eyes:",
        "type": "message",
        "ts": "1667135922.740229",
        "user": "U03H9PH8FRP"
    },
    {
        "text": "<@U048QMQ8MEX> has joined the channel",
        "type": "message",
        "ts": "1667175686.852589",
        "user": "U048QMQ8MEX"
    },
    {
        "text": "意外とリポジトリが見つかりました (<https://github.com/search?l=Haskell&amp;q=scheme+Data.Text+parsec&amp;type=Code|scheme>, <https://github.com/search?l=Haskell&amp;q=lox+Data.Text&amp;type=Code|lox>) 。 `String` をパースして `Text` で保存するみたいなものが多い気がします。 Parsec で `String` ではなく  `Text` を受け取ることは珍しいのでしょうか……？　よくあることなら探してみたいと思います :pray:",
        "type": "message",
        "ts": "1667220359.249549",
        "user": "U03H9PH8FRP"
    },
    {
        "text": "えっと、ご所望のparsecを使ったものではないですが、パーサーコンビネーターの初歩的な概念を学ぶために、 <https://www.lambdanote.com/products/haskell> の第13章などの本を読むのがおすすめです。Haskellの世界にはparsec以外にも、もっと新しいmegaparsecなどいろいろなパーサーコンビネーターがありますが、基本的な使い方や考え方は全く変わらないので、サンプルとしては十分だと思います。 `Text` でやろうと `String` でやろうとも基本は変わりませんし。",
        "type": "message",
        "ts": "1667220676.193419",
        "user": "U4LGTMTMK"
    },
    {
        "text": "そうですね、そちらの本も持っているのでじっくり読んでみます。ありがとうございます。",
        "type": "message",
        "ts": "1667222218.239849",
        "user": "U03H9PH8FRP"
    },
    {
        "text": "と思いきや、今コンパイルが通りました。 `Text.ParseCombinators.Parsec` の代わりに `Text.Parsec` や `Text.Parsec.Text` を import したら良かったみたいです……？\n大分怪しいですが進んでみます……！ ()",
        "type": "message",
        "ts": "1667222331.007019",
        "user": "U03H9PH8FRP"
    },
    {
        "text": "パラメータ多相とアドホック多相の違いについて質問させてください。\n自分の理解では、パラメータ多相は「いろんな型から利用でき、全く同じ動きをする多相性」で、アドホック多相は「いろんな型から利用でき、それぞれで動きが異なる多相性」のことだと思っています。\nこの認識はあっていますでしょうか？\n\nまた、上記の認識と今まで見てきた情報を総括して個人的なイメージとして「Haskellはパラメータ多相、JavaとかC++などのクラスベースオブジェクト指向はアドホック多相」という風に思っていました。（こういう紹介をしていた情報源もどこかで見たことがあった気がしています。）\nですが、例えばジェネリクスを使って型Aの変数をそのまま返す関数を作れば、これはパラメータ多相っぽいのでは？と思いました。\nまた、`fmap`はそれを実装したい型ごとに `instance` 構文でそれぞれの型用の動きを記述するため、`fmap`はアドホック多相っぽいような気がしています。\nそうなりますとパラメータ多相やアドホック多相は関数型やオブジェクト指向などの考え方とは独立したものになる感じでしょうか？",
        "type": "message",
        "ts": "1667297024.821029",
        "user": "U02PHQ2D9D0"
    },
    {
        "text": "<@U049HCAN7DF> has joined the channel",
        "type": "message",
        "ts": "1667385234.800059",
        "user": "U049HCAN7DF"
    },
    {
        "text": "<@U0496PJPB3P> has joined the channel",
        "type": "message",
        "ts": "1667450855.528669",
        "user": "U0496PJPB3P"
    },
    {
        "text": "<@U049ZTT7M8R> has joined the channel",
        "type": "message",
        "ts": "1667609010.131749",
        "user": "U049ZTT7M8R"
    },
    {
        "text": "<@U04ALAE8HU0> has joined the channel",
        "type": "message",
        "ts": "1667868894.716239",
        "user": "U04ALAE8HU0"
    },
    {
        "text": "こんにちは。\nVSCodeでのstackのエラーが出て、解消できず困っております。\n何かご教示いただけますと幸いです。\nHaskell自体の環境設定は、GHCupを使っています。\n\n環境\n```Windows 11 WSL2 上の Ubuntu 20.04```\nバージョン\n```stack 2.9.1\nghcup 0.1.18.0```\n再現方法\n\n```stack new palindrome-checker```\nで新規プロジェクト作成\n\n`app/Main.hs`\n\nで以下のようなエラーがでます。\nキャプチャ\n\n```ghcide compiled by GHC 9.0 failed to load packages: &lt;command line&gt;: cannot satisfy -package palindrome-checker-0.1.0.0\n    (use -v for more information). \nPlease ensure that ghcide is compiled with the same GHC installation as the project.cradle```\nバージョンの不整合が起こっているようでいろいろ調べたのですが、\nghcide がアーカイブになっていたりよくわかりません。\n\n<https://github.com/haskell/ghcide>\n\nghcのバージョンについても調べました。\n以下の二つのコマンドでGHCのバージョンが異なるようでこれも謎でした。\n\n```&gt; ghc -v\nGlasgow Haskell Compiler, Version 9.4.3, stage 2 booted by GHC version 9.2.2```\n```&gt; stack ghc -- --version\nThe Glorious Glasgow Haskell Compilation System, version 9.0.2```",
        "type": "message",
        "ts": "1668151362.719499",
        "user": "U0203PR2087"
    },
    {
        "text": "<@U04BD6ZFKQ8> has joined the channel",
        "type": "message",
        "ts": "1668312013.992689",
        "user": "U04BD6ZFKQ8"
    },
    {
        "text": "<@U04B4TR0AUA> has joined the channel",
        "type": "message",
        "ts": "1668582832.662289",
        "user": "U04B4TR0AUA"
    },
    {
        "text": "<@U04BAANP8GP> has joined the channel",
        "type": "message",
        "ts": "1668921931.377889",
        "user": "U04BAANP8GP"
    },
    {
        "text": "<@U04CFH59A01> has joined the channel",
        "type": "message",
        "ts": "1669141559.239779",
        "user": "U04CFH59A01"
    },
    {
        "text": "こんばんは。 `State` モナドの質問です。 `mapAccumL` を `mapM` と `State` モナドで作り直してみました。\nこのとき `mapM` で <https://gist.github.com/toyboot4e/6f6c0464c1a941b28d3690a43f608d55#file-mapaccuml-hs-L12|使用した無名関数> が長くて気になりました。もしも`\\acc x -&gt; .. (acc', x')` のような純粋な関数を `State` モナドに？変換できたら、 `mapM (変換 $ \\acc x -&gt; .. (acc', x')) ..` のように書けて便利だと思います。この `変換` のような関数はありますか？　よろしくお願いします。",
        "type": "message",
        "ts": "1669812950.225089",
        "user": "U03H9PH8FRP"
    },
    {
        "text": "最終的には `Vector` に対する `mapAccumL` が欲しくて、それが `mapM` と高階関数で in-place に書けるとさらに嬉しいです _(._.)_",
        "type": "message",
        "ts": "1669813167.192329",
        "user": "U03H9PH8FRP"
    },
    {
        "text": "<@U04DQ49DQR0> has joined the channel",
        "type": "message",
        "ts": "1670224700.608869",
        "user": "U04DQ49DQR0"
    },
    {
        "text": "<@U04E12QEKBR> has joined the channel",
        "type": "message",
        "ts": "1670550761.611259",
        "user": "U04E12QEKBR"
    },
    {
        "text": "<@U04EL293D6Z> has joined the channel",
        "type": "message",
        "ts": "1670730929.807109",
        "user": "U04EL293D6Z"
    },
    {
        "text": "はじめまして。プログラミングHaskell第2版を読み始めました。1章のqsortについて早速質問させてください。\n```qsort[]=[]\nqsort(x;xs)=qsort smaller ++[x]++qsort larger\n where\n  smaller = [a | a&lt;- xs,a&lt;=x]\n  larger  = [b | b&lt;- xs,b&gt;x]```\nでqsortを定義していますが、この定義はGHCiに直接書き込む物ですか？",
        "type": "message",
        "ts": "1671020744.415489",
        "user": "U026S0BCF3J"
    },
    {
        "text": "```double x = x + x\nlistdouble (x:xs)=[double x] ++ listdouble xs ```\nによってリストの各要素を二倍にする関数を定義しようとしてみたのですが、エラーが生じてしまいました。具体的には\n```listdouble [1,2,3,4]```\nをGHCiでコンパイルすると\n```[2,4,6,8*** Exception: &lt;interactive&gt;:41:1-43: Non-exhaustive patterns in function listdouble```\nというエラーが生じます。定義が間違っていると思うのですが、何が間違っているのか理解できずにいます。",
        "type": "message",
        "ts": "1671100252.402679",
        "user": "U026S0BCF3J"
    }
]