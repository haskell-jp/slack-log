[
    {
        "ts": "1541316919.048200",
        "text": "<@UDWMRUHGE> has joined the channel",
        "user": "UDWMRUHGE",
        "type": "message"
    },
    {
        "ts": "1541321220.051500",
        "text": "<#C4P499EPQ|english> 、 <#C8KBGEBR7|code-review> 、 <#C7002UTC6|kinds>  チャンネルはアーカイブしてしまってもいいと思ったのですがどうでしょう？情報を集中させ、より多くの人が発言にアクセスできるようにするというのが動機です",
        "user": "U4KUNQF9N",
        "type": "message"
    },
    {
        "ts": "1541321648.052600",
        "text": "<#C7002UTC6|kinds> に関しては賛成です．他のチャンネルに関しては棄権で",
        "user": "U57D08Z9U",
        "type": "message"
    },
    {
        "ts": "1541384537.053300",
        "text": "現状、追えないほど <#C4M4TT8JJ|random> が活発というわけでもないので <#C4M4TT8JJ|random> に集約させるのは自分は賛成です\n新規参入者にとってもチャネルが多いのはどこに入るべきか迷うように思います\n<#C4M4TT8JJ|random> の流速が速すぎるようになったら再分離の検討をすればよいと思います",
        "user": "U4L0B71L1",
        "type": "message"
    },
    {
        "ts": "1541386326.053600",
        "text": "ようやく理解できたような気がします．\nメモを公開してあります．(不備の指摘などいただけると嬉しいです) ありがとうございました．\n<https://scrapbox.io/ny-sketch-book/%E5%A4%89%E6%95%B0%E3%82%92%E6%9D%9F%E7%B8%9B%E3%81%99%E3%82%8B%E3%81%AE%E3%81%AF%E5%80%A4%E3%81%A7%E3%81%AF%E3%81%AA%E3%81%84%E3%81%AE%E3%81%8B>",
        "user": "U4KU9ABL0",
        "type": "message"
    },
    {
        "ts": "1541396381.055000",
        "text": "CI した <https://travis-ci.org/kakkun61/pixela-client-haskell>",
        "user": "U4L0B71L1",
        "type": "message"
    },
    {
        "ts": "1541408950.057400",
        "text": "&gt; 実際，[Lazyな(おもちゃ)言語 <https://gist.github.com/nobsun/5b310dd4a397af624690b6ca4b0af2c8]も`interp`は意味関数>(semantic function あるいは meaning function)という表示意味論で登場する意味を決める関数なわけで，操作意味論における簡約過程を書いたものではない．計算済みかどうかを意識して区別していない(できないし，必要もない)のはその所為である．\n\n意味論については議論の途中で出てきたURLを踏んだりして勉強している所で、これは私見なのですが。denotativeに評価器を定義したいなら、ステップを陽に見えるように書かない限り、ちゃんとした定義にならないのではないかと思います。\n\n現状だと⊥をdenoteする式に対してinterpを動かすと「プログラムが停止しない」という結果が得られる訳ですが、これはHaskellの持つ操作的意味論によって意味づけられているだけで、数学的にはinterpは部分関数で、⊥に相当する部分がill-definedなのではないかと思います。",
        "user": "U570660KX",
        "type": "message"
    },
    {
        "ts": "1541409005.057600",
        "text": "Haskellにおいてステップを陽に書くなら、Iterモナドを用いると綺麗になりそう。 <http://hackage.haskell.org/package/free-5.1/docs/Control-Monad-Trans-Iter.html#t:Iter>",
        "user": "U570660KX",
        "type": "message"
    },
    {
        "ts": "1541409444.057800",
        "text": "はい，ご指摘のとおりです．Div e1 e2 の意味がHaskellのdivに依存しているからです．",
        "user": "U4KU9ABL0",
        "type": "message"
    },
    {
        "ts": "1541410842.058100",
        "text": "divというか、 let inf = inf + 1 in inf みたいなのの事を想定していました。こういうものの意味論をきちんと定義するために、Wikipediaの記事で言うところのprogressionを使った手法を導入したはずなので、表示的意味論でinterpを定義するなら考慮しないと駄目では、と思った次第 <https://ja.wikipedia.org/wiki/%E8%A1%A8%E7%A4%BA%E7%9A%84%E6%84%8F%E5%91%B3%E8%AB%96>",
        "user": "U570660KX",
        "type": "message"
    },
    {
        "ts": "1541413326.058400",
        "text": "⊥を表示する式で停止するのは，Lazyおもちゃ言語では div ？ 0 だけですが．",
        "user": "U4KU9ABL0",
        "type": "message"
    },
    {
        "ts": "1541413713.058700",
        "text": "申し訳ない、「停止しない」でした（訂正済）",
        "user": "U570660KX",
        "type": "message"
    },
    {
        "ts": "1541414633.058900",
        "text": "そうですねぇ．⊥から始まる近似列を実装しなければなりませんが，たとえば，inf = inf + 1 の場合，infの値はその近似列の極限になるわけで， +1 が値構成子 Succ :: Nat -&gt; Nat で構成されていればなんとかなるかもしれませんが，その場合は，inf ≠ ⊥ですねぇ．実装上は単に停止しないということで表現する以外は思いつかなかったです．",
        "user": "U4KU9ABL0",
        "type": "message"
    },
    {
        "ts": "1541415322.059300",
        "text": "単にsuccでいいのかな．",
        "user": "U4KU9ABL0",
        "type": "message"
    },
    {
        "ts": "1541416495.059600",
        "text": "+ がプリミティブだとむずかしそう．",
        "user": "U4KU9ABL0",
        "type": "message"
    },
    {
        "ts": "1541416821.059800",
        "text": "すいません，あれから少し不動点意味論の勉強をして，言いたかったことやHaskellの仕様が混乱していないという主張の意味がわかりました．\n\nところで，僕も <@U570660KX> さんと同じ疑問は持ったのですが，個人的にはHaskellの意味関数を[]，Toy言語の意味関数を[| |]とした時，[|e|] = [interp e]でHaskellの意味領域に接地させることで，意味関数と主張しているのだと思っていました．",
        "user": "U57D08Z9U",
        "type": "message"
    },
    {
        "ts": "1541416884.060000",
        "text": "primitiveの場合単に [e1 + e2] = { ⊥ if [e1] = ⊥ || [e2] = ⊥; [e1] + [e2] else }で定義すればいいのではないでしょうか？",
        "user": "U57D08Z9U",
        "type": "message"
    },
    {
        "ts": "1541417510.060400",
        "text": "あ，それで1つ前で言いたかったのは，例えばparallel ifなどを実装する際多分そのままの定義ではできなくて，それは何故できないかというと\n&gt; ⊥に相当する部分がill-defined\n\nが効いてきてるのではないかなと思ったという感じです(あんまり説明になっていないかも)",
        "user": "U57D08Z9U",
        "type": "message"
    },
    {
        "ts": "1541417934.060600",
        "text": "停止が判定できないので，[e]=⊥が判定できないです．",
        "user": "U4KU9ABL0",
        "type": "message"
    },
    {
        "ts": "1541418838.060900",
        "text": "<@UDVMPMU8K> has joined the channel",
        "user": "UDVMPMU8K",
        "type": "message"
    },
    {
        "ts": "1541418987.061100",
        "text": "&gt; 例えばparallel ifなどを実装する際多分そのままの定義ではできなくて\nparallel-orのことでしょうか？多分，⊥のように計算が停止しない値ではなく，値にバインドされていない変数が表示する値(emptyMVarの中身)みたいな計算をブロックするような値を考えないといけないですね．(たぶん)",
        "user": "U4KU9ABL0",
        "type": "message"
    },
    {
        "ts": "1541419459.061300",
        "text": "asyncパッケージにあるControl.Concurrent.Async.raceみたいなもの実装のことですよね．",
        "user": "U4KU9ABL0",
        "type": "message"
    },
    {
        "ts": "1541421279.062600",
        "text": "はい，C[pif L then M else N](env) = { [M](env) if [L](env) = true; [N](env) if [L](env) = false; [N](env) if [L](env) = ⊥ and [M](env) = [N](env); ⊥ else } みたいなやつですね．parallel orでも同じ議論ができますし，そっちの方が単純なのでそっちで考えてもらっても大丈夫です．\n\n&gt; 停止が判定できないので，[e] = ⊥が判定できないです．\n\nこれがよく分からないのですが，別に意味論上は停止するかどうかは判定しなくてよくて，その表示を満たせば良いと思うのですが，何か勘違いしてるでしょうか？実装上は， `seq e1 . seq e2 $ e1 + e2` で問題ないはずです(Haskellの場合はそもそもe1 + e2でもいいですね)",
        "user": "U57D08Z9U",
        "type": "message"
    },
    {
        "ts": "1541421361.064700",
        "text": "「MonadPlusは高階なモノイドである」っていう主張、妥当か否か？\n（e.g. MonadPlus Maybe は `Nothing mplus Just = Just` かつ右についてもそう）",
        "user": "U5LV76EJH",
        "type": "message"
    },
    {
        "ts": "1541421754.065400",
        "text": "また，自分の言っていることが混乱しているような気がしてきました．すみません．\n&gt;⊥に相当する部分がill-defined\nがよく判っていない気がします(私が)．どうなっていれば，well-definedですか？",
        "user": "U4KU9ABL0",
        "type": "message"
    },
    {
        "ts": "1541422083.065600",
        "text": "ああ．プリミティブの場合はおっしゃるとおりですね．",
        "user": "U4KU9ABL0",
        "type": "message"
    },
    {
        "ts": "1541422537.065800",
        "text": "要は，⊥となるtermへの扱いが明確に定められていなくて，Haskellの式が結果的に計算が停止しないので評価器も停止しないようになっているだけで，por のような⊥の扱いが重要になる場合にそれが問題になりそうというのが言いたいことでした．個人的には，\n&gt; Haskellの意味関数を[]，Toy言語の意味関数を[| |]とした時，[|e|] = [interp e]でHaskellの意味領域に接地させることで，意味関数と主張している\nということでも問題ないとは思うのですが，denotativeと主張するならHaskellに接地させるのでなくtermに対する定義が明確になっていて，\n&gt; let inf = inf + 1 in inf みたいなの\nに対する定義が明示されているべきだという主張も分かる気がするという感じです(これが明示されていれば，おそらくporの導入もそれほど難しくないのかなという．例えば， <@U570660KX> さんがいうように評価器がちゃんとステップを陽に見えるよう書かれていれば，porはステップを同時進行させることで実装できるはずです)",
        "user": "U57D08Z9U",
        "type": "message"
    },
    {
        "ts": "1541423029.066000",
        "text": "プログラムのコードでいうと，ValueにBotが含まれているべきということになりますか？",
        "user": "U4KU9ABL0",
        "type": "message"
    },
    {
        "ts": "1541423286.066200",
        "text": "それもありますが，主に\n&gt; progressionを使った手法を導入したはずなので、表示的意味論でinterpを定義するなら考慮しないと駄目では\nですね．多分ValueにBotを導入しただけではporは実装できないはずです(片方が停止しなくてももう片方が停止してtrueになれば結果が返せるので)",
        "user": "U57D08Z9U",
        "type": "message"
    },
    {
        "ts": "1541423354.066400",
        "text": "x por y = if isBot x then y else x は無理ですよね．",
        "user": "U4KU9ABL0",
        "type": "message"
    },
    {
        "ts": "1541423596.066600",
        "text": "はい，その定義は二重にだめで，isBotがおそらく停止するように実装するのが無理なのと，⊥ por falseは通常⊥になるはずっていうのですね(なので，結構実装は難しいはずです)",
        "user": "U57D08Z9U",
        "type": "message"
    },
    {
        "ts": "1541423830.066900",
        "text": "&gt;let inf = inf + 1 in infに対する定義がなされているべき\nこれがそもそもできそうもない(私の能力的に)",
        "user": "U4KU9ABL0",
        "type": "message"
    },
    {
        "ts": "1541424338.067100",
        "text": "(まあ，本題からかなり外れる気がするのでどうなんですかね？個人的には，\n&gt; 実際，[Lazyな(おもちゃ)言語 <https://gist.github.com/nobsun/5b310dd4a397af624690b6ca4b0af2c8]も`interp`は意味関数>(semantic function あるいは meaning function)という表示意味論で登場する意味を決める関数なわけで，操作意味論における簡約過程を書いたものではない\nという文が気になったというだけなので．後この議論で不動点意味論の気持ちが分かったので，感謝の気持ちしかないです)",
        "user": "U57D08Z9U",
        "type": "message"
    },
    {
        "ts": "1541426114.068900",
        "text": "よく分からないんですけど、Alt によって任意の MonadPlus は Monoid になるのと関係ありそうな気が\n<https://hackage.haskell.org/package/base-4.12.0.0/docs/Data-Monoid.html#t:Alt>",
        "user": "U5LEE6C1J",
        "type": "message"
    },
    {
        "ts": "1541426790.069100",
        "text": "意味が定められない = ⊥  ?",
        "user": "U4KU9ABL0",
        "type": "message"
    },
    {
        "ts": "1541461047.071200",
        "text": "Iterモナドを使えば行ける...と思ったんですけど、意外に難しくてまだ組み途中です",
        "user": "U570660KX",
        "type": "message"
    },
    {
        "ts": "1541465882.071400",
        "text": "Alternative は (Hask, (), (,)) -&gt; (Hask, Void, Either)の monoidal functorだから、monoidっぽいのは間違いなし\n\nf Void &lt;-&gt; f a — trivial\nf a -&gt; f b -&gt; f (Either a b) &lt;-&gt; f a -&gt; f a -&gt; f a — trivial",
        "user": "UACQ9J5D3",
        "type": "message"
    },
    {
        "ts": "1541476050.075400",
        "text": "interpをinterpFの不動点として定義してできたことにする．じゃだめかな？ &lt;- 適当にいってます．",
        "user": "U4KU9ABL0",
        "type": "message"
    },
    {
        "ts": "1541476188.077500",
        "text": "Monoidal functor であるという条件からこの二つの関数が得られて、\n\n() -&gt; f Void\nforall a b. (f a, f b) -&gt; f (Either a b)\n\nこれが Alternative である条件の二つの関数と対応するということですよね？\n\nforall a. f a\nforall a. f a -&gt; f a -&gt; f a\n\n（一瞬、forall a. f Void &lt;-&gt; f a に見えてびっくりした）",
        "user": "U5LEE6C1J",
        "type": "message"
    },
    {
        "ts": "1541477861.078100",
        "text": "ww\nそうです、その &lt;-&gt; はisomorphicの記号みたいなものww",
        "user": "UACQ9J5D3",
        "type": "message"
    },
    {
        "ts": "1541514848.078600",
        "text": "<https://gist.github.com/as-capabl/9dfb4cff6c08f6b5027741e2fc4bf40b> por実装したやつできました",
        "user": "U570660KX",
        "type": "message"
    },
    {
        "ts": "1541565541.079500",
        "text": "これは，call-by-name だけど，call-by-needじゃないようですが，そこは意図的ですか？",
        "user": "U4KU9ABL0",
        "type": "message"
    },
    {
        "ts": "1541568543.079700",
        "text": "なるほど、そこは意識できてなかったです。おそらく改良すればcall-by-needも実装可能ですが、考える事が増えそうですね",
        "user": "U570660KX",
        "type": "message"
    },
    {
        "ts": "1541568733.080000",
        "text": "単純にnormalizeがcall-by-need用になっていないだけです．",
        "user": "U4KU9ABL0",
        "type": "message"
    },
    {
        "ts": "1541570676.081000",
        "text": "たまたま正格版のコードを元にして作り始めて、そうすると非正格評価に戻したときlet内でbotが呼び出しエラーになる事が分かって、結果的にほとんどnormalizeしていない形に修正しました。上の非正格版のnormを埋め込めば動くかどうか。",
        "user": "U570660KX",
        "type": "message"
    },
    {
        "ts": "1541570756.081200",
        "text": "それはそれとして、このスレッドの本題としては「変数に束縛されるのはIter Valueだが、これを『値』とみなして良いのかどうか」かと",
        "user": "U570660KX",
        "type": "message"
    },
    {
        "ts": "1541574197.082100",
        "text": "そうですね．Iter Value は値ではなく計算なので，「変数に束縛されるのは値ではなく，値を求める計算」ということになります．ただし，解釈器interp の最終結果すなわち，式が表示するものが，Iter Valueであるとするなら，Iter Valueを改めて値と読んでもよいと思います．",
        "user": "U4KU9ABL0",
        "type": "message"
    },
    {
        "ts": "1541575484.082400",
        "text": "ちょっと強引かな．\n\nLazy版を修正してみました．Porの意味は勝手に替えてしまいましたが，動くようです．\n<https://gist.github.com/nobsun/5b310dd4a397af624690b6ca4b0af2c8>",
        "user": "U4KU9ABL0",
        "type": "message"
    },
    {
        "ts": "1541578294.083400",
        "text": "ありがとうございます！\nとても参考になりました\n\nMonadPlusは高階なモノイドである\n（任意のMonadPlusはAltを介して任意のaに対してMonoidである）\nって感じに主張しようかな:face_with_rolling_eyes:\n\nmonoidal functor、また何なのか忘れたのでみてみよw",
        "user": "U5LV76EJH",
        "type": "message"
    },
    {
        "ts": "1541579700.083600",
        "text": "そういえば， <@U570660KX> さんのだと\n```\n&gt;&gt;&gt; eval $ Div (Con 1) (Con 0) `Por` Div (Con 1) (Con 1)\n*** Exception: divide by zero\n```\nになるんですね( <@U4KU9ABL0> の修正見るまで気づかなかった)．本来のdenotational semanticsに立ち戻るならIter ValueはあくまでValueの近似であって，Iter Value ~ Valueとみなしても良いのではないでしょうか？まあただdenotationalにも近似を束縛する，計算を束縛するとも言えるかもしれないですね．",
        "user": "U57D08Z9U",
        "type": "message"
    }
]