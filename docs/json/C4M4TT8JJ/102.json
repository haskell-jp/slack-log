[
    {
        "type": "message",
        "user": "U04MBBNV5QB",
        "ts": "1675174781.138779",
        "text": "<@U04MBBNV5QB> has joined the channel"
    },
    {
        "type": "message",
        "user": "USLACKBOT",
        "ts": "1675209615.125619",
        "text": "Reminder: [定期] 現在の主要なチャンネルは :point_down: のとおりです。 - <#C5666B6BB|questions> : Haskellについてのお悩み相談 :thought_balloon: はこちら - <#CR2TETE5R|beginners> : 初心者 :beginner: 向けのより安心・より気軽なQ&amp;A用チャンネル - <#C4M4TT8JJ|random> : 見つけたHaskellに関する情報、アナウンス、その他何でも :ok: - <#CR4U9PBLL|english-help> : 英語 :uk: で困ったときの駆け込み寺 - <#C4NDY2TF1|event-announcement> : :tada: Haskellに関するイベントを開催するときはこちらにリンクを張ってください - その他のChannelは「Channels」の右にある :heavy_plus_sign: ボタン -&gt; 「Browse channels」から探してみましょう！"
    },
    {
        "type": "message",
        "user": "U4LGTMTMK",
        "ts": "1675983510.195949",
        "text": "今週のHaskell Weeklyから。GHC 9.6.x Migration Guide\n <https://gitlab.haskell.org/ghc/ghc/-/wikis/migration/9.6>"
    },
    {
        "type": "message",
        "user": "U4L0B71L1",
        "ts": "1676032614.754439",
        "text": "Core Libraries Committee ってのができて CLC proposal 何番っていうふうに管理されるようになったんですね\n（GHC 9.6 移行案内を見てた\n<https://github.com/haskell/core-libraries-committee>"
    },
    {
        "type": "message",
        "user": "U55V441FS",
        "ts": "1676082832.861029",
        "text": "ghc 9.2.6 がリリースされています:haskell:\n（問題なければ、これがghc 9.2系の最終になる予定とのこと）\n<https://discourse.haskell.org/t/ghc-9-2-6-is-now-available/5782>"
    },
    {
        "type": "message",
        "user": "UK0MXUCAV",
        "ts": "1676089993.689759",
        "text": "今週末くらいから、GitHub Action の Ubuntu shared runner 内で `haskell/actions/setup` が動かなくなっています（参考リンク<https://github.com/haskell/actions/issues/187|1>, <https://github.com/actions/runner-images/pull/7068|2>, <https://discourse.haskell.org/t/incident-github-actions-ci-failure-ghcup/5761|3>）。runner 用イメージ内での ghcup のパーミッションの設定が問題のようで、ghcup の作者の方が修正に向けて動きだしています。コンテナ内でアクションを実行している場合は問題なく動くようです（setup アクションがサポートしている環境であれば、の話）。\n一、二週間程度かかるかもしれないとのことで、それまでの間は <https://github.com/haskell/actions/issues/187> で紹介されているように、setup 前に以下のようなコマンドを追加しておけば当座は動くようです：\n\n```    steps:\n      ...\n      - name: Workaround runner image issue\n        if: ${{ runner.os == 'Linux' }}\n        # <https://github.com/actions/runner-images/issues/7061>\n        run: sudo chown -R \"${USER}\" /usr/local/.ghcup\n      - uses: haskell/actions/setup@v2\n        with:\n          ghc-version: 9.0.2```"
    },
    {
        "type": "message",
        "user": "U04NS1ZNSJK",
        "ts": "1676140328.364539",
        "text": "<@U04NS1ZNSJK> has joined the channel"
    },
    {
        "type": "message",
        "user": "U4LGTMTMK",
        "ts": "1676195913.344389",
        "text": "baseパッケージだけで `PATH` 環境変数に入ったパスを分割する、横着なワンライナーを考えました\n```mapM_ print . filter (/= \";\") . groupBy (\\a b -&gt; a /= ';' &amp;&amp; b /= ';') =&lt;&lt; getEnv \"PATH\"```\nWindows上でやったので `PATH` の区切りがセミコロンになっている点に注意"
    },
    {
        "type": "message",
        "user": "U04P4FYK221",
        "ts": "1676196208.681559",
        "text": "<@U04P4FYK221> has joined the channel"
    },
    {
        "type": "message",
        "user": "UK0MXUCAV",
        "ts": "1676274963.934119",
        "text": "DeepFlow 社内で開発して2年ほど使っていた、Haskell 製巨大モノレポの依存関係チェックツール guardian を OSS 化したので宣伝させてください。\n\n<https://github.com/deepflowinc/guardian>\n\n大量のパッケージから成るモノレポで開発を進めていると、不用意にパッケージ間の依存関係を増やした結果不必要にビルドに時間がかかってしまい、ちょっとした変更でもビルドに時間がかかってイテレーションが阻害される、という事がしばしばあります。\nguardian はパッケージを複数のグループ（ドメイン）に分けて、予め指定されたグループ間の依存関係以外を発見すると警告してくれる、というツールです。stackベースと cabal-install ベースのプロジェクトに対応しています。\nCI で手軽に呼ぶためのビルド済バイナリや、GitHub Action も用意しています。\n\n詳細は以下の記事で紹介させて頂いておりますので、巨大 Haskell モノレポの依存関係の管理にお悩みの方のお役に立てれば幸いです:pray:\n\n<https://zenn.dev/deepflow_tech/articles/secure-haskell-monorepo-deps-with-guardian>"
    },
    {
        "type": "message",
        "user": "U56MBRKR9",
        "ts": "1677072341.531689",
        "text": "`atomicModifyIORef'` についてまとめました。\n<https://kazu-yamamoto.hatenablog.jp/entry/2023/02/19/110709>"
    },
    {
        "type": "message",
        "user": "U4LGTMTMK",
        "ts": "1677473083.086379",
        "text": "そういえば共有したつもりで忘れてました。ブラウザー上でHaskellを試す公式のplaygroundができたそうです。\n<https://discourse.haskell.org/t/haskell-playground-is-live-at-play-haskell-org/5869>\n<https://play.haskell.org/>"
    },
    {
        "type": "message",
        "user": "U56MBRKR9",
        "ts": "1677547290.269799",
        "text": "pandocをcabalなんかでインストールしても、pandocコマンドはインストールされなくなり、はまりました。\nコマンドはpandoc-cliという別パッケージになっています。"
    },
    {
        "type": "message",
        "user": "U55V441FS",
        "ts": "1677670928.062219",
        "text": "残念ながら9.2.6では最終にならずに、9.2.7が出てしまってますね,,, :haskell:\n<https://discourse.haskell.org/t/ghc-9-2-7-is-now-available/5883>"
    },
    {
        "type": "message",
        "user": "U04RTA85CH3",
        "ts": "1677690080.208029",
        "text": "<@U04RTA85CH3> has joined the channel"
    },
    {
        "type": "message",
        "user": "U04T6H7Q56W",
        "ts": "1678377424.360149",
        "text": "<@U04T6H7Q56W> has joined the channel"
    },
    {
        "type": "message",
        "user": "UGM9F7XQS",
        "ts": "1678542309.366269",
        "text": "GHC 9.6のJavaScript backendを環境を汚さずに試したかったのでDockerfileを書いてみました。WebAssembly版も書いていますが、色々問題にぶち当たっています。ホストがAArch64じゃなくてx86_64なら問題ないのかもしれません。 <https://github.com/minoki/ghc-docker>"
    },
    {
        "type": "message",
        "user": "U4L0B71L1",
        "ts": "1678587551.811899",
        "text": "<https://twitter.com/bgamari/status/1634738920968671234?t=aNfgWhmNpcDAzYfygVdISA&amp;s=19|https://twitter.com/bgamari/status/1634738920968671234>"
    },
    {
        "type": "message",
        "user": "UL1HFJATE",
        "ts": "1678587612.874699",
        "text": "なんか変なGHCのバグ踏んで面白かったので報告します．多分 <https://gitlab.haskell.org/ghc/ghc/-/issues/12091> 関係なんですけど，このissueってresolvedでcloseされてるんですよね:\n\n```$ mkdir ghcbugtest\n$ cd ghcbugtest\n$ echo \"main = return () :: IO ()\" &gt; Test.hs\n$ ghci-9.2.7 -fobject-code Test.hs\nGHCi, version 9.2.7: <https://www.haskell.org/ghc/>  :? for help\n[1 of 1] Compiling Main             ( Test.hs, Test.o )\nOk, one module loaded.\nghci&gt; :{\nghci| f :: a -&gt; a\nghci| f = id\nghci| :}\nghci&gt; f\n\n&lt;interactive&gt;:5:1: error: Variable not in scope: f\nghci&gt; f :: a -&gt; a; f = id\nghci&gt; f\n\n&lt;interactive&gt;:2:1: error: Variable not in scope: f\nghci&gt; f = id :: a -&gt; a\nghci&gt; f\n\n&lt;interactive&gt;:2:1: error:\n    • No instance for (Show (a0 -&gt; a0)) arising from a use of 'print'\n        (maybe you haven't applied a function to enough arguments?)\n    • In a stmt of an interactive GHCi command: print it```"
    },
    {
        "type": "message",
        "user": "UL1HFJATE",
        "ts": "1678589459.823659",
        "text": "とりあえず報告してきました: <https://gitlab.haskell.org/ghc/ghc/-/issues/23107>"
    },
    {
        "type": "message",
        "user": "UGM9F7XQS",
        "ts": "1678627987.166779",
        "text": "ざっくりですが書きました / GHC 9.6の新機能 <https://zenn.dev/mod_poppo/articles/whats-new-in-ghc-9-6>"
    },
    {
        "type": "message",
        "user": "UGM9F7XQS",
        "ts": "1678704869.657919",
        "text": "wasm32-wasi用のGHCをビルドするDockerfileも書けました。GHCをビルドする際のバグを回避するためにパッチを当てたりしています。途中でGHCだけでなくLLVMのビルドも走りますが、新しい物好きの人は試してみる価値があると思います。"
    },
    {
        "type": "message",
        "user": "U04TL7B4RK8",
        "ts": "1678767626.052819",
        "text": "<@U04TL7B4RK8> has joined the channel"
    },
    {
        "type": "message",
        "user": "U4L0B71L1",
        "ts": "1678769792.077299",
        "text": "_Setup.hs_ の HLS 対応はまだなのでこういうワークアラウンドが必要なんですね <https://github.com/haskell/haskell-ide-engine/issues/1650#issuecomment-650192055>"
    },
    {
        "type": "message",
        "user": "U56MBRKR9",
        "ts": "1678841740.347259",
        "text": "cabal が v2 コマンドになってから、ビルドのパスが分からないので doctest が失敗するようになってしまった問題についてです。\n現在では cabal repl で動かすようになったんですね。\n\n<https://github.com/sol/doctest#running-doctest-for-a-cabal-package>\n\n• `.cabal`ファイルに doctest の項目は不要になりました\n• test/doctest.hs も不要になりました\n• CI では、cabal test に加えて cabal repl を追加します\n"
    },
    {
        "type": "message",
        "user": "U04UTFS57A5",
        "ts": "1679039675.207189",
        "text": "<@U04UTFS57A5> has joined the channel"
    },
    {
        "type": "message",
        "user": "U04LCUXALJ2",
        "ts": "1679193467.747119",
        "text": "相互再帰ってfixで書けるんですね．Lazy pattern matchingがミソでした．\n```even1, odd1 :: Int -&gt; Bool\n(even1, odd1) = fix $ \\ ~(e, o) -&gt;\n  let f n = if n == 0 then True else o $ pred n\n      g n = if n == 0 then False else e $ pred n\n  in (f, g)\n\neven2, odd2 :: Int -&gt; Bool\n(even2, odd2) = fix $ \\ ~(e, o) -&gt; (f o, g e)\n where\n  f o n = if n == 0 then True else o $ pred n\n  g e n = if n == 0 then False else e $ pred n```"
    },
    {
        "type": "message",
        "user": "U04UUR7L093",
        "ts": "1679400116.368049",
        "text": "<@U04UUR7L093> has joined the channel"
    },
    {
        "type": "message",
        "user": "U56MBRKR9",
        "ts": "1679641577.325779",
        "text": "GeneralizedNewtypeDeriving, Strict, StrictData をオンにしておいて\n```newtype Foo = Foo Int deriving (Storable)```\nと定義すると、sizeOf は引数に対して lazy になります。\nStrictが効かない。\nそういうものですかね？"
    },
    {
        "type": "message",
        "user": "U050T9D1RCH",
        "ts": "1679925721.981479",
        "text": "<@U050T9D1RCH> has joined the channel"
    },
    {
        "type": "message",
        "user": "U01K57PCEH2",
        "ts": "1680670312.999969",
        "text": "最近Idrisにハマっちゃってる人です。そこで、Haskellerのみなさんにお聞きしてみたいんですが、みなさんはIdrisについてどう思います？型システムについてでも、あるいはML系の構文をしてる１プログラミング言語としてでも。（関数型ファンな人やプロフェッショナルな方々の視点や感想を聞いてみたくて）（Haskell以外の言語の話題はご迷惑でしたらすみません……）"
    },
    {
        "type": "message",
        "user": "U01K57PCEH2",
        "ts": "1680693382.818309",
        "text": "そういえば、Haskellにとどまらない、関数型言語や型理論、数学（基礎論）よりのCSとかこれ系全般の（日本の）コミュニティってありますかね？（今、Idrisでグラフィック触れるライブラリいい感じのを知ってる人どこかにいないかなとか考えてて）（Haskellのコミュニティなのにこういう話ばっかりしてすみません）"
    },
    {
        "type": "message",
        "user": "UL1HFJATE",
        "ts": "1680957499.084379",
        "text": "ぶったまげたんですけど， GHCに Git submodule として入ってる `hpc` というpackage (<https://gitlab.haskell.org/hpc/hpc/-/tree/767f476a5aa19260c8297ce40134f56d6f890019>) が，GHC &gt;= 9.6.1 において本当に Git submodule (<https://gitlab.haskell.org/ghc/ghc/-/tree/ghc-9.6.1-release/libraries>) として指されているだけの detached commit になってました．もちろん「`hpc` 本家」の Git repository は存在 (<https://gitlab.haskell.org/hpc/hpc>) します．しかし，当該 Git submodule は `hpc` 本家のなんのブランチにも多分属してないし，hackage上でリリースもされていない上に，`.cabal` ファイル上の バージョン番号が Hackage上でリリース済みの `0.6.2.0` と一致してます． GHC をダウンロードしてついてきたhpc-0.6.2.0と同じ名前 “hpc”，同じバージョン “0.6.2.0\" のパッケージを Hackage から落としてくると中身が違う，ということです．その上，GHC-9.6.1 についてきたhpc-0.6.2.0は，  `filepath-1.4.100.1` + `directory-1.7.8.0`  (GHC-9.6.1についてくるバージョンです)とビルドできるけど，Hackageから落としてきたhpc-0.6.2.0は dependency constraint から外れてもいないのにこれらの `filepath` + `directory` とビルドできないので，本気でぶったまげました．"
    },
    {
        "type": "message",
        "user": "U4LGTMTMK",
        "ts": "1681167380.308479",
        "text": "この本、毎日ちょっとずつ読んで先日ようやく読み終えました。\n基本的にコンパイラー全般の話ではあるんですけど、後半の方でHaskellのようなlazyな言語をどう効率のよいC言語にコンパイルするか、みたいなことが書かれていて面白かったです。\n<https://link.springer.com/book/10.1007/978-1-4614-4699-6>"
    },
    {
        "type": "message",
        "user": "U4LGTMTMK",
        "ts": "1681354579.117209",
        "text": "こちらの回答を書く際 <http://pointfree.io|pointfree.io> が教えてくれた `flip id` ってなんだろう、と思ったら、どうやら引数と関数を受け取って引数を関数に渡した結果を返す、言わば前置記法みたいな変換をしてくれるんですね。\n```&gt; :t flip id\nflip id :: b -&gt; (b -&gt; c) -&gt; c\n&gt; :t flip id \"a\"\nflip id \"a\" :: (String -&gt; c) -&gt; c\n&gt; :t flip id \"a\" (++ \"b\")\nflip id \"a\" (++ \"b\") :: [Char]\n&gt; flip id \"a\" (++ \"b\")\n\"ab\"\n-- flip f x といえば (`f` x) にも置き換えられるので、\n-- ↓ももちろんOK。冷静に考えたら当たりまえだけど面白い。\n&gt; (`id` \"a\") (++ \"b\")\n\"ab\"```\n<https://haskell-jp.slack.com/archives/CR2TETE5R/p1681353753081089?thread_ts=1681353081.736949&amp;cid=CR2TETE5R>"
    },
    {
        "type": "message",
        "user": "U578W9676",
        "ts": "1681355182.628729",
        "text": "`id` は `($)` の代わりができるというのをどこかで読みました。`($) :: (a -&gt; b) -&gt; (a -&gt; b)` は `id` を特殊化した型になってますし、 `id f x = (id f) x = f x` になるので。`flip id` は `flip ($)` と置き換え可能で、機能的には同じだと思うんですけど、<http://pointfree.io|pointfree.io> では文字数が少ないから `id` を使うんでしょうか :thinking_face:"
    },
    {
        "type": "message",
        "user": "U052LCRM2GP",
        "ts": "1681367761.511879",
        "text": "<@U052LCRM2GP> has joined the channel"
    },
    {
        "type": "message",
        "user": "U053MT1AGTW",
        "ts": "1681741820.411119",
        "text": "<@U053MT1AGTW> has joined the channel"
    },
    {
        "type": "message",
        "user": "U053GLH63LN",
        "ts": "1681791728.986019",
        "text": "<@U053GLH63LN> has joined the channel"
    },
    {
        "type": "message",
        "user": "U0318JJGWS1",
        "ts": "1682005776.695019",
        "text": "<@U0318JJGWS1> has left the channel"
    },
    {
        "type": "message",
        "user": "U4L0B71L1",
        "ts": "1682055252.697819",
        "text": "haskell-actions Github オーガナイゼーションができてて Haskell 系ツールの Github Actions が集まってた\nfourmolu/fourmolu-action は haskell-actions/run-fourmolu にリダイレクトされた\n<https://twitter.com/kakkun61/status/1649284850069946375>"
    },
    {
        "type": "message",
        "user": "U01A20R5Z0Q",
        "ts": "1682073729.517589",
        "text": "朝日ネット 技術者ブログでAlgorithm Design with Haskellを紹介した記事が公開されました。\n<https://techblog.asahi-net.co.jp/entry/2023/04/21/121954|https://techblog.asahi-net.co.jp/entry/2023/04/21/121954>"
    },
    {
        "type": "message",
        "user": "U054JSAHPC4",
        "ts": "1682165305.328749",
        "text": "<@U054JSAHPC4> has joined the channel"
    },
    {
        "type": "message",
        "user": "U4LGTMTMK",
        "ts": "1682388506.545649",
        "text": ":earth_asia: GHCのWasmバックエンドがGHCのtestsuiteを全部通ったそうです :tada:\n<https://twitter.com/tweagio/status/1650493783224532994>"
    },
    {
        "type": "message",
        "user": "U055FRPTWJH",
        "ts": "1682743797.236329",
        "text": "<@U055FRPTWJH> has joined the channel"
    },
    {
        "type": "message",
        "user": "U055P58NJF6",
        "ts": "1682852642.895559",
        "text": "<@U055P58NJF6> has joined the channel"
    },
    {
        "type": "message",
        "user": "U055C884CHM",
        "ts": "1683003502.973729",
        "text": "<@U055C884CHM> has joined the channel"
    },
    {
        "type": "message",
        "user": "U4LGTMTMK",
        "ts": "1683630897.464579",
        "text": "例外発生時にバックトレースを加えるproposalについて、改めてフィードバック募集\n<https://twitter.com/bgamari/status/1655679570467598338>"
    },
    {
        "type": "message",
        "user": "U04LCUXALJ2",
        "ts": "1683965382.060029",
        "text": "```fix1 :: ((b -&gt; c) -&gt; b -&gt; c) -&gt; b -&gt; c\nfix1 = fix\nfix :: (a -&gt; a) -&gt; a\nfix f = flip fix1 f $ \\g h -&gt; h $ g f```\n`fix1`と`fix`は上記の通りどちらを先に定義しても良く，ほぼ等価．手続き型にコンパイルすることを考えると，関数から値を生成しなくてはならない`fix`より，関数から関数を生成すればよい`fix1`の方がプリミティブとして適している？`flip fix1`の形がループっぽくなるのは知られているが，手続き型のループの役割を`fix1`が担うとも考えられる．"
    }
]