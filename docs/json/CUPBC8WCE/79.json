[
    {
        "ts": "1757822585.143719",
        "text": "<@U08BHQ0ED0T> has joined the channel",
        "type": "message",
        "user": "U08BHQ0ED0T"
    },
    {
        "ts": "1757823419.375709",
        "text": "<https://byorgey.github.io/blog/posts/2023/05/24/competitive-programming-in-haskell-parsing-with-an-nfa.html|Competitive programming in Haskell: parsing with an NFA> Brent Yorgey 先生の (この謎の表題の) blog をもとに Kattis の問題を解きます",
        "type": "message",
        "user": "U584T7GAH"
    },
    {
        "ts": "1757824080.670089",
        "text": "S.K.です。ちょっと遅くなってしまいましたが、今週もお世話になります。よろしくお願いいたします。\n今週も Implementing Functional Languages: a tutorial の Chapter 6 Lambda Lifting の続きを進めて行こうと思います。",
        "type": "message",
        "user": "U04BD6ZFKQ8"
    },
    {
        "ts": "1757824518.044039",
        "text": "はじめまして。福島英人と申します。医学分野の研究室でゲノムの解析を行っている大学院生です。主にRでデータ分析をしており、今までコンパイル言語を使用したことはありませんし、プログラミング言語やアルゴリズムを深く理解しているわけではありません。\n\n自分の目標は、自分でゲノムデータを自由自在に操り、複雑な解析用のツールをスマートなやり方で作れるようになること、そして基本的なアルゴリズムを美しい方法で理解することです。　\n\n生物分野の解析では実はad-hocな解析・分析のほとんどがRかpythonで行われており、複雑なツールになると一部の単純処理のところにC++が入ってきます。\nしかしHaskellはめったに使用されている例を見ません。　しかし、Rの解析においてもpurrrなど関数型チックなモジュール群が存在しスマートな方法でデータを整理することができたりします。これをより本格的な関数型言語で、整理された概念で学んでみたいと思い、この会に参加させて頂きました。\n\n暫くの間は、Richard Bird の「HASKELL による関数型プログラミングの思考法」そして　「Algorithm design with Haskell」を実装しながら読んでいこうと思います。本日は前者の第一章をやります。そのうち、もっと他のこともできればいいなと思っています。お世話になります。\nどうぞよろしくお願い申し上げます。",
        "type": "message",
        "user": "U08BHQ0ED0T"
    },
    {
        "ts": "1757824828.703619",
        "text": "山本悠滋です。いつもどおりmakeMistakesToLearnHakellやHaskell-jp Blogの続きをします。",
        "type": "message",
        "user": "U4LGTMTMK"
    },
    {
        "ts": "1757840406.942029",
        "text": "",
        "type": "message",
        "user": null
    },
    {
        "ts": "1757840731.808919",
        "text": "Haskell-jp Blogの進捗\n<https://github.com/haskell-jp/blog/commit/0bfcf698523c97053150683f79d485eb7022e821>\nmakeMistakesToLearnHaskellの進捗\n<https://github.com/haskell-jp/makeMistakesToLearnHaskell/commit/000cb2dabb6bc59de9dd74e43d989ae120dfa7de>",
        "type": "message",
        "user": "U4LGTMTMK"
    },
    {
        "ts": "1757841143.221429",
        "text": "HASKELL による関数型プログラミングの思考法 第一章を、読み終わりました。",
        "type": "message",
        "user": "U08BHQ0ED0T"
    },
    {
        "ts": "1757841431.207529",
        "text": "Competitive programming in Haskell: Chemist's vows なるほどね　NFA とは Nondeterministic finite(-state) automaton のことで　遷移を丁寧に追うことで問題を deterministic finite automaton (DFA) に変えることが出来 (subset construction algorithm) これにて爆速を得る由　それで parsec と Text.ParserCombinators.ReadP.readP_to_S を使うのは余興となる　ホント勉強になります　模範解を写経して　細かいが nub を Data.Set の S.toList . S.fromList に代えたら (0.09 s) で Yorgey 先生のそれ (0.22 s) より倍以上速かった\nただいま今週の課題 \"Zapis\" を考慮中",
        "type": "message",
        "user": "U584T7GAH"
    },
    {
        "ts": "1757842046.393319",
        "text": "動作結果を元にテキストの 6.3.2 Free variables あたりからの説明を読んでいました。\nfreeVars 関数の動作は、少しずつ分かってきたつもりですが、まだ let(rec) の場合の処理がよく理解できていません。\nとりあえずそのまま、6.3.3 Generating supercombinators に進み、abstract 関数の動作は理解できたつもりです。\nそして、6.3.4 Making all the variables unique を読みながら、rename 関数の動作を理解中です。\n自分にとっては中々難しいですが、時間をかけて理解していこうと思います。",
        "type": "message",
        "user": "U04BD6ZFKQ8"
    },
    {
        "ts": "1758427207.145869",
        "text": "",
        "type": "message",
        "user": null
    },
    {
        "ts": "1758427275.972809",
        "text": "山本悠滋です。今日はタイプセーフプリキュアの更新をして、その後余力があればいつもどおりmakeMistakesToLearnHakellやHaskell-jp Blogの続きをします。",
        "type": "message",
        "user": "U4LGTMTMK"
    },
    {
        "ts": "1758427374.400179",
        "text": "<https://byorgey.github.io/blog/posts/2023/05/31/competitive-programming-in-haskell-introduction-to-dynamic-programming.html|Competitive programming in Haskell: Introduction to dynamic programming>  Brent Yorgey 先生の blog をもとに Kattis の問題を解きます",
        "type": "message",
        "user": "U584T7GAH"
    },
    {
        "ts": "1758428378.381899",
        "text": "S.K.です。ちょっと遅くなってしまいましたが、今週もお世話になります。よろしくお願いいたします。\n今週も Implementing Functional Languages: a tutorial の Chapter 6 Lambda Lifting の続きを進めて行こうと思います。",
        "type": "message",
        "user": "U04BD6ZFKQ8"
    },
    {
        "ts": "1758445214.719719",
        "text": "",
        "type": "message",
        "user": null
    },
    {
        "ts": "1758445456.943559",
        "text": "Competitive programming in Haskell: introduction to dynamic programming 読了　しかしこれは３連作の始まりに過ぎず　課題 \"Zapis\" を解くには TLE になってしまう　それではという事で先生の blog の第２部 <https://byorgey.github.io/blog/posts/2023/06/02/dynamic-programming-in-haskell-lazy-immutable-arrays.html|Dynamic programming in Haskell: lazy immutable arrays>  も読む事になり　これを写本に ByteString を用いていた我が旧解を minor changes して Accepted 　さらにメモ化を用いる改良版第３部 <https://byorgey.github.io/blog/posts/2023/06/06/dynamic-programming-in-haskell-automatic-memoization.html|Dynamic programming in Haskell: automatic memoization> があるそうなので　これは来週のお楽しみ",
        "type": "message",
        "user": "U584T7GAH"
    },
    {
        "ts": "1758445821.875999",
        "text": "クソ長昼寝をしてしまったので、まだ更新作業中です！",
        "type": "message",
        "user": "U4LGTMTMK"
    },
    {
        "ts": "1758446820.611629",
        "text": "動作結果を元にテキストの 6.3.4 Making all the variables unique の続きから、6.3.5 Collecting supercombinators まで読み、rename 関数と collectSCs 関数の動作を一応理解しました。\n6.3.2 Free variables と freeVars 関数についても、letrec 式を使った以下のテストプログラム\npair x y f = f x y ;\nf x y = letrec\n          fst = \\p. p K ;\n          snd = \\p. p K1 ;\n          a = pair x b ;\n          b = pair y a\n        in\n          fst (snd (snd (snd a))) ;\nmain = f 3 4\nと、let 式を使った以下のテストプログラム\nf x = let\n        g = \\y. x*x + y\n      in\n        (g 3 + g 4) ;\nmain = f 6\nを (freeVarse . parse) した結果を比較して、一応理解しました(つもりです)。\nあと、遅ればせながら Ex.6.1 にも対応しました。",
        "type": "message",
        "user": "U04BD6ZFKQ8"
    },
    {
        "ts": "1758456149.334029",
        "text": "更新できました！Hackageにもアップロード済みです。\n<https://github.com/igrep/typesafe-precure/pull/68>",
        "type": "message",
        "user": "U4LGTMTMK"
    },
    {
        "ts": "1759032007.042849",
        "text": "",
        "type": "message",
        "user": null
    },
    {
        "ts": "1759032348.740359",
        "text": "<https://byorgey.github.io/blog/posts/2023/06/20/competitive-programming-in-haskell-two-more-dp-challenges.html|Competitive programming in Haskell: Two more DP challenges>:  Brent Yorgey 先生の blog をもとに Kattis の問題を解きます",
        "type": "message",
        "user": "U584T7GAH"
    },
    {
        "ts": "1759033252.083169",
        "text": "S.K.です。今週もお世話になります。よろしくお願いいたします。\n今週も Implementing Functional Languages: a tutorial の Chapter 6 Lambda Lifting の続きを進めて行こうと思います。",
        "type": "message",
        "user": "U04BD6ZFKQ8"
    },
    {
        "ts": "1759044061.195599",
        "text": "山本悠滋です。昼寝で遅くなってしまいましたが、いつもどおりmakeMistakesToLearnHakellやHaskell-jp Blogの続きをします。",
        "type": "message",
        "user": "U4LGTMTMK"
    },
    {
        "ts": "1759050017.264439",
        "text": "",
        "type": "message",
        "user": null
    },
    {
        "ts": "1759050460.866169",
        "text": "Competitive Programming in Haskell: two more DP challenges 読了　課題 \"Honi\" に挑戦　昼寝ボケか題意を読み取るのに四苦八苦　ChatGPT に \"Sample Input/Out\" の解釈をお願いした　なるほどねと納得　コーディングをはじめたら　スパゲッティが出来た　場合分けが多すぎる　Yorgey 先生も \"I don’t yet know how to write *elegant* solutions!\" と言っていたのはこのことか？　呻吟再考中",
        "type": "message",
        "user": "U584T7GAH"
    },
    {
        "ts": "1759050767.660799",
        "text": "makeMistakesToLearnHaskellの進捗: <https://github.com/haskell-jp/makeMistakesToLearnHaskell/commit/327d875c9b40219bb650e51ee7c6dbb90c8b9949>\nHaskell-jp Blogの進捗はもう少し進めてから共有します",
        "type": "message",
        "user": "U4LGTMTMK"
    },
    {
        "ts": "1759051806.190849",
        "text": "Ex.6.2 を進めました。\npprintAnn 関数(下請け関数群を含む)と、とりあえず注釈処理用に iSet :: Set Name -&gt; Iseq という関数を定義して、\n以下のテストプログラム\n\nf x = let\n        g = \\y. x*x + y\n      in\n        (g 3 + g 4) ;\nmain = f 6\n\nを parse して freeVarse した結果\n\n[(\"f\",[\"x\"],([\"x\"],ALet False [(\"g\",([\"x\"],ALam [\"y\"] ([\"x\",\"y\"],AAp ([\"x\"],AAp ([],AVar \"+\") ([\"x\"],AAp ([\"x\"],AAp ([],AVar \"*\") ([\"x\"],AVar \"x\")) ([\"x\"],AVar \"x\"))) ([\"y\"],AVar \"y\"))))] ([\"g\"],AAp ([\"g\"],AAp ([],AVar \"+\") ([\"g\"],AAp ([\"g\"],AVar \"g\") ([],ANum 3))) ([\"g\"],AAp ([\"g\"],AVar \"g\") ([],ANum 4))))),(\"main\",[],([],AAp ([],AVar \"f\") ([],ANum 6)))]\n\nを処理してみたところ、以下の様に表示されました。\n\nf x = [x](let\n g = [x](\\y. [x,y]([x]([](+) ([x]([x]([](*) [x](x)) [x](x)))) [y](y)))\nin [g]([g]([](+) ([g]([g](g) [](3)))) ([g]([g](g) [](4))))) ;\nmain  = []([](f) [](6))\n\n\"+\" や \"*\" は中置表記をやめて前置表記にしてみました。それでも、結構見づらいです。\nはたして、これでいいのかどうかは、自分にとってはまだ不明です。あと case 式は未対応です。",
        "type": "message",
        "user": "U04BD6ZFKQ8"
    },
    {
        "ts": "1759052070.977429",
        "text": "Haskell-jp Blogの進捗\n<https://github.com/haskell-jp/blog/commit/034febb1427e2cb44d9788ea3e582812b35421da>",
        "type": "message",
        "user": "U4LGTMTMK"
    },
    {
        "ts": "1759636827.777269",
        "text": "",
        "type": "message",
        "user": null
    },
    {
        "ts": "1759637114.143429",
        "text": "<https://byorgey.github.io/blog/posts/2024/05/28/competitive-programming-in-haskell-two-problems.html|Competitive Programming in Haskell: Two Hard Problems>:  Brent Yorgey 先生の blog をもとに Kattis の問題を解きます",
        "type": "message",
        "user": "U584T7GAH"
    },
    {
        "ts": "1759640309.990359",
        "text": "S.K.です。遅くなってしまいましたが、今週もお世話になります。よろしくお願いいたします。\n今週も Implementing Functional Languages: a tutorial の Chapter 6 Lambda Lifting の続きを進めて行こうと思います。",
        "type": "message",
        "user": "U04BD6ZFKQ8"
    },
    {
        "ts": "1759649150.351959",
        "text": "山本悠滋です。新型コロナワクチン打った後の体調不良で遅くなってしまいましたが、いつもどおりmakeMistakesToLearnHakellやHaskell-jp Blogの続きをします。",
        "type": "message",
        "user": "U4LGTMTMK"
    },
    {
        "ts": "1759654807.545919",
        "text": "",
        "type": "message",
        "user": null
    },
    {
        "ts": "1759655102.348119",
        "text": "Competitive Programming in Haskell: Two Hard Problems: 読了　与えられた２つの課題の一つ \"Product Divisors\" に挑むも　あえなく TLE (16 個の testcase の早くも 3 番目で！) Difficulty: Hard 6.0 の問題に対して　愚直に素因数分解して τ 関数を計算しただけなので　当然の報いなのであるが　さてどうしたものか？　思案投げ首",
        "type": "message",
        "user": "U584T7GAH"
    },
    {
        "ts": "1759655467.902289",
        "text": "makeMistakesToLearnHaskellの進捗: <https://github.com/haskell-jp/makeMistakesToLearnHaskell/commit/19528c50dc568ac2964a25d36d561a537969ee76>\nHaskell-jp Blogの進捗: <https://github.com/haskell-jp/blog/commit/f143a5e9e7794f4a230dbab2c4925dc67f4838b5>\n後者がようやく一段落しました。最後の段落はほぼGitHub Copilotが自動生成したもので、やっぱこういうありふれた文を書くのはうまいですね。",
        "type": "message",
        "user": "U4LGTMTMK"
    },
    {
        "ts": "1759655611.769989",
        "text": "Ex.6.2 の pprintAnn 関数は、この先あまり使われることがなさそうとのことで、動作確認をいったん保留して Ex.6.4 を進めました。(Ex.6.3 は一応対応済み。)\nラムダリフタを case 式にも対応させるとのことで、freeVars関数と abstract 関数の対応を済ませて、rename 関数の対応中です。",
        "type": "message",
        "user": "U04BD6ZFKQ8"
    }
]