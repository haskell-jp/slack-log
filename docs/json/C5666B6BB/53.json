[
    {
        "ts": "1552480507.253700",
        "text": "```\nMap.insert k v &lt;$&gt; buildMap (ks, vs)\n```\n\nこれはbuildMapが全部返ってきてからMaybeでパターンマッチする形になるから、確かにスタック積み上がりそう。こういう所はHaskellでも末尾再帰気にしないといけないんですね",
        "user": "U570660KX",
        "type": "message"
    },
    {
        "ts": "1552480780.253900",
        "text": "ここのfromListはなんかinsertじゃない処理やっているような……？\n<http://hackage.haskell.org/package/containers-0.6.0.1/docs/src/Data.Map.Internal.html#fromList>",
        "user": "U570660KX",
        "type": "message"
    },
    {
        "ts": "1552481752.254200",
        "text": "foldr なのは，キーリストとかバリューリストにNothingがあったときのショートカット用です．",
        "user": "U4KU9ABL0",
        "type": "message"
    },
    {
        "ts": "1552484005.256600",
        "text": "あ、自分の見てたcontainersのバージョンが古かったようです。\nでもソートされていないリストに対しては\nやっぱりinsertで実装されてますね",
        "user": "UDUBKLQMD",
        "type": "message"
    },
    {
        "ts": "1552485522.258300",
        "text": "確かに、たまたま先頭が昇順になってた場合だけ違う処理してるのか",
        "user": "U570660KX",
        "type": "message"
    },
    {
        "ts": "1552491276.260900",
        "text": "末尾再帰については、集積引数を増やして積んでも結局変わらないですね…速度的にも、二回に分けるのが実は正解なのではと思い始める",
        "user": "U570660KX",
        "type": "message"
    },
    {
        "ts": "1552524686.261100",
        "text": "いや、速度測ってないけど、変わらなくはない（リスト末尾にpushするつもりでO(N^2)と見積もってたけど、insertで直接マップ作るならO(N log N)だ）",
        "user": "U570660KX",
        "type": "message"
    },
    {
        "ts": "1552553989.261400",
        "text": "<@UGYDCQXU3> has joined the channel",
        "user": "UGYDCQXU3",
        "type": "message"
    },
    {
        "ts": "1552657517.262200",
        "text": "等式論証って何ですか？ググってもわからず。",
        "user": "UGHG1RKDL",
        "type": "message"
    },
    {
        "ts": "1552658857.262400",
        "text": "<@UH181T815> has joined the channel",
        "user": "UH181T815",
        "type": "message"
    },
    {
        "ts": "1552669928.265400",
        "text": "```\ndata Hoge = II\nhuga x = x\n\nmain = do\n    i &lt;- huga II\n    putStrLn \"hello, world\"\n```\nを実行すると、\n```\n    • Couldn't match expected type 'IO a0' with actual type 'Hoge'\n    • In a stmt of a 'do' block: i &lt;- huga II\n      In the expression:\n        do i &lt;- huga II\n           putStrLn \"hello, world\"\n      In an equation for 'main':\n          main\n            = do i &lt;- huga II\n                 putStrLn \"hello, world\"\n  |\n5 |     i &lt;- huga II \n  |          ^^^^^^^\n```\nとエラーが出ます。iはtype ‘IO a0’を期待していますが。\n```\ndata Hoge = II\nhuga x = x\n\nmain = do\n    i &lt;- return II\n    putStrLn \"hello, world\"\n\n```\nとして、iはmonado typeを受けていますが。これは、type ‘IO a0’じゃないですが、なぜいいんでしょう？\nあと、type ‘IO a0’とはなんでしょう？\nIOなのはわかっているんですが。",
        "user": "UGHG1RKDL",
        "type": "message"
    },
    {
        "ts": "1552670414.266600",
        "text": "```\ndata Hoge = II\nhuga x = x\n\nmain = do\n    i &lt;- return II\n    putStrLn \"hello, world\"\n```\ntype Hogeはmonadのインスタンスではないのに、returnできるのはなぜでしょう？",
        "user": "UGHG1RKDL",
        "type": "message"
    },
    {
        "ts": "1552672316.268600",
        "text": "ただの値だからでは...？",
        "user": "UAMGYKUP5",
        "type": "message"
    },
    {
        "ts": "1552672569.271000",
        "text": "まずiに期待されている型はIO a0じゃないですね...それはi &lt;-の右側の式に期待されている型です\n\n質問を理解するために質問したいのですが，”モナド型”を受けるとはなんでしょうか...",
        "user": "UAMGYKUP5",
        "type": "message"
    },
    {
        "ts": "1552673313.275600",
        "text": "あとhugaは純粋な関数なのでそこに書く必要はなさそうです．純粋な式はletで束縛するとよいと思います．",
        "user": "UAMGYKUP5",
        "type": "message"
    },
    {
        "ts": "1552673508.278100",
        "text": "そして後者の型はIO ?? の形になってます．return で包んでいるので．",
        "user": "UAMGYKUP5",
        "type": "message"
    },
    {
        "ts": "1552674893.278400",
        "text": "`return` の型は `Monad m =&gt; a -&gt; m a` であり、引数の型 (ここでは `a` という型変数で表されています) が Monad のインスタンスかどうかを気にしないからです…というのではどうでしょう?",
        "user": "U578W9676",
        "type": "message"
    },
    {
        "ts": "1552692812.279000",
        "text": "一つ前の質問とまとめて回答します。\n\nまず、IOモナドの `do`記法で\n```\ni &lt;- e\n```\n( `e`はなんらかの式）と書くと、 `e`は `IO a`型、 `i`は `a`型に推論されます。一つ目のプログラムでは\n`huga II`は `Hoge`型であり、`IO a`型とマッチできないので型エラーが発生しています。\n一方、二つ目のプログラムでは\n`return II`は `Monad m =&gt; m Hoge`という型に推論されます。これを `IO a`型とマッチさせると、 `m = IO, a = Hoge`という解が見つかるのでエラーは発生しません。",
        "user": "UDUBKLQMD",
        "type": "message"
    },
    {
        "ts": "1552693621.283400",
        "text": "```\ndata Fool where\n  Fool :: ('True ~ 'False) =&gt; Fool\ntheFool  :: Fool\ntheFool = ???\nmain :: IO ()\nmain = case theFool of\n  Fool -&gt; pure () \n```\nとしてunsafeな関数を使っても良いので`Fool`型の値を得ることってできますか？(mainを実行時エラー起こさずに実行したい）",
        "user": "UDUBKLQMD",
        "type": "message"
    },
    {
        "ts": "1552696235.283600",
        "text": "`Fool` 型の値は得られない(Emptyである)ことが証明できるので，得られません．\n```\ntheFool :: Fool\ntheFool = case refl of {} where\n  refl :: (a ~ b) =&gt; a :~: b\n  refl = Refl\n```",
        "user": "U5G2BCVBN",
        "type": "message"
    },
    {
        "ts": "1552696479.283800",
        "text": "これが得られるようになるレベルのunsafeとは「任意の型の値が作成できる」という度合いのunsafeさであり，型による安全性を投げ捨てることになります．",
        "user": "U5G2BCVBN",
        "type": "message"
    },
    {
        "ts": "1552697099.284000",
        "text": "実行時エラーを起こさないというのを文字通りに取れば `theFool = theFool` も要件を満たしますがそういうことではないですよね。\n `theFool = unsafeCoerce $ \\_ -&gt; ()` とか。",
        "user": "U4M9NJ7QE",
        "type": "message"
    },
    {
        "ts": "1552697161.284200",
        "text": "引数は使われないので `unsafeCoerce ()` でも動くと思いますが `Fool` のarityは1になると思うので `const ()` の方が良いかもしれません。",
        "user": "U4M9NJ7QE",
        "type": "message"
    },
    {
        "ts": "1552703454.284500",
        "text": "&gt; ｀Fool｀ 型の値は得られない(Emptyである)ことが証明できるので，得られません．\n\n実際にやりたいのは `True ~ False`ほど邪悪なのではなくて、 `SomeConstraint :: * -&gt; Constraint` をtype familyとして、\n```\ndata Cert a where\n  Cert :: SomeConstraint a =&gt; Cert a\n```\nみたいなことです。 `a`がコンパイル時に分かっている場合には `SomeConstraint a`が簡約できてうまくいくんですが、 `a`が実行時にしかわからないケースもサポートしたくて、動的に `SomeConstraint`相当のチェックをしてから `Cert`の値を作りたいという状況です。\n\n&gt; 引数は使われないので ｀unsafeCoerce ()｀ でも動くと思いますが ｀Fool｀ のarityは1になると思うので ｀const ()｀ の方が良いかもしれません。\nやはり `unsafeCoerce`を使うのが無難そうですね。",
        "user": "UDUBKLQMD",
        "type": "message"
    },
    {
        "ts": "1552712738.287300",
        "text": "<@UH215BHKR> has joined the channel",
        "user": "UH215BHKR",
        "type": "message"
    },
    {
        "ts": "1552713620.287900",
        "text": "これのGADTの節みたいな感じでしょうか <https://propella.hatenablog.com/entry/20101218/p1>",
        "user": "U570660KX",
        "type": "message"
    },
    {
        "ts": "1552713874.288200",
        "text": "`data Cert a where ...` ではなく `data Cert where` にして、あとはtheFoolにあたる関数theCertの型を `theCert :: SomeConstraint a =&gt;  a -&gt; Cert` とするイメージかなと思います",
        "user": "U570660KX",
        "type": "message"
    },
    {
        "ts": "1552726047.288500",
        "text": "<@UDUBKLQMD> さんの回答よくわかりました。",
        "user": "UGHG1RKDL",
        "type": "message"
    },
    {
        "ts": "1552726074.288700",
        "text": "returnの型はわかるんですが、本体はどこにあるのでしょう？",
        "user": "UGHG1RKDL",
        "type": "message"
    },
    {
        "ts": "1552728599.288900",
        "text": "<http://hackage.haskell.org/package/base-4.12.0.0/docs/Prelude.html#v:return>\nですね。もう少し細かいことを言うと、GHCが提供する標準ライブラリの中にあり、管理の都合上 GHC.Base モジュールで定義されていて、それをHaskellを書く際暗黙で import される Prelude モジュールが含んでいる形になります",
        "user": "U57D08Z9U",
        "type": "message"
    },
    {
        "ts": "1552729243.289100",
        "text": "<@UDUBKLQMD> なぜm = IOになるのでしょう。これは、monado IOのreturnを使っているからだと思うのですが、なぜmonad IOなのでしょう？(これは、型推論….?",
        "user": "UGHG1RKDL",
        "type": "message"
    },
    {
        "ts": "1552729534.289500",
        "text": "あと、IO a0のa0って何ですか？",
        "user": "UGHG1RKDL",
        "type": "message"
    },
    {
        "ts": "1552730552.289900",
        "text": "なぜ、 `i &lt;- e` とかくとeはIO aに推論されるのでしょう？mainがIOのため？",
        "user": "UGHG1RKDL",
        "type": "message"
    },
    {
        "ts": "1552731059.290100",
        "text": "そうです，型推論により `m = IO` となります．Haskell では，\n```\ndo\n  i &lt;- e\n  …\n```\nは，\n```\ne &gt;&gt;= \\i -&gt; ...\n```\nの略記法になります．ここで， `&gt;&gt;=` は <https://hackage.haskell.org/package/base-4.12.0.0/docs/Prelude.html#v:-62--62--61-> の型を持つ型クラスのメソッドになります．今回は `putStrLn \"Hello World!\" :: IO ()` が続くのでここから\n1. `(&gt;&gt;=) :: m a -&gt; (a -&gt; m b) -&gt; m b` の `m b` の部分が `IO ()` と一致すると判定され `m = IO` / `b = ()` となります\n2. `m = IO` から `return II :: m Hoge` の部分の `m`  も `m = IO` と推論されます",
        "user": "U57D08Z9U",
        "type": "message"
    },
    {
        "ts": "1552731319.290300",
        "text": "型エラーにおいて表示されている `IO a0` の `a0` は例えば\n```\nf :: Maybe a -&gt; ()\nf _ = ()\n\ng :: Maybe a -&gt; ()\ng _ = ()\n\nh = f (g ())\n```\nというようなプログラムにおいて， `f` の引数における型変数 `a` のことなのか， `g` の引数における型変数 `a` のことなのか分からなくなることを避けるため，番号を暗黙に振り分けるということが内部で行われている結果です．確かに，少し分かりにくいですね．",
        "user": "U57D08Z9U",
        "type": "message"
    },
    {
        "ts": "1552732529.290600",
        "text": "<@U57D08Z9U> なるほど。わかりやすい説明ありがとうございます。",
        "user": "UGHG1RKDL",
        "type": "message"
    },
    {
        "ts": "1552732742.290900",
        "text": "あと、質問なのですが、 `(&gt;&gt;=) :: m a -&gt; (a -&gt; m b) -&gt; m b`は `ma` と `(a -&gt; mb)`の二つ引数をとるのに、`e &gt;&gt;= \\i -&gt; ...`  だと `e` 一つしか引数に取らないように見えますがどうなんでしょう？",
        "user": "UGHG1RKDL",
        "type": "message"
    },
    {
        "ts": "1552733207.291700",
        "text": "あ、もしかして、&gt;&gt;=の右側が第二引数…",
        "user": "UGHG1RKDL",
        "type": "message"
    },
    {
        "ts": "1552733302.291900",
        "text": "はい． Haskell では記号の関数か文字の関数かで演算子かどうかが分かれていて，記号の関数はデフォルトで二項演算子になります",
        "user": "U57D08Z9U",
        "type": "message"
    },
    {
        "ts": "1552733326.292100",
        "text": "了解です。あざす",
        "user": "UGHG1RKDL",
        "type": "message"
    },
    {
        "ts": "1552733367.292400",
        "text": "別スレッドで、解決しました。返答していただき、ありがとうございました。",
        "user": "UGHG1RKDL",
        "type": "message"
    },
    {
        "ts": "1552747810.292700",
        "text": "<@UH12AKL2G> has joined the channel",
        "user": "UH12AKL2G",
        "type": "message"
    },
    {
        "ts": "1552749095.294500",
        "text": "doは&gt;&gt;=のシンタックスシュガーのため、do構文で書いたものは、それなしに書きかえれますよね？\n以下のは書きかえれますかね？\n```\ndata Hoge = II deriving (Show)\nhuga x = x\n\nmain = do\n    i &lt;- return 3\n    let x = huga i\n    print $ 1\n```",
        "user": "UGHG1RKDL",
        "type": "message"
    },
    {
        "ts": "1552749838.294600",
        "text": "できます。\n<https://en.wikibooks.org/wiki/Haskell/do_notation> が参考になるかと思います。 `&lt;-` を `&gt;&gt;=` とラムダ式に、 `let` は `let ... in ...` に、逐次処理は `&gt;&gt;` でつなげばよい感じです。",
        "user": "U578W9676",
        "type": "message"
    },
    {
        "ts": "1552751592.294800",
        "text": "できたけど、in …が余分…\n```\ndata Hoge = II deriving (Show)\nhuga x = x\n\nmain =\n    return 3 &gt;&gt;= (\\i -&gt; let x = huga in return 1 ) &gt;&gt; print $ 1\n```",
        "user": "UGHG1RKDL",
        "type": "message"
    },
    {
        "ts": "1552751640.295100",
        "text": "do 構文の変換の覚え方でオススメは\n\n```\ndo\n  v &lt;- e1\n  e2\n==&gt;\ne1 &gt;&gt;= \\v -&gt; e2\n```\n\n```\ndo\n  e1\n  e2\n==&gt;\ndo\n  _ &lt;- e1\n  e2\n```\n\n```\ndo\n  let v1 = e1\n        ...\n        vN = eN\n  e\n==&gt;\nlet v1 = e1\n      ...\n      vN = eN\nin e\n```\n\n```\ndo\n  e\n==&gt;\ne\n```\n\n```\ndo\n  line1\n  line2\n  …\n  lineN\n==&gt;\ndo\n  line1\n  do\n    line2\n    ...\n    lineN\n```\n\nこの5つによる変換ですね．\n(厳密にはパフォーマンスを考慮してもっと良い変換( `&gt;&gt;` を使った変換)が行われたり， `p &lt;- e` の `p` の部分にパターンが使われると `fail` という関数を使った変換が行われたりするのですが，厳密さを求めないなら大体は上の変換を想定してもらえば大丈夫だと思います)\n\n今回の例では\n```\ndo\n  i &lt;- return 3\n  let x = huga i\n  print $ 1\n==&gt;\ndo\n  i &lt;- return 3\n  do\n    let x = huga i\n    print $ 1\n==&gt;\nreturn 3 &gt;&gt;= \\i -&gt; do\n  let x = huga i\n  print $ 1\n==&gt;\nreturn 3 &gt;&gt;= \\i -&gt;\n  let x = huga i\n  in print $ 1\n```\nみたいな感じです",
        "user": "U57D08Z9U",
        "type": "message"
    },
    {
        "ts": "1552751815.295400",
        "text": "ありがとうございます",
        "user": "UGHG1RKDL",
        "type": "message"
    },
    {
        "ts": "1552752248.295800",
        "text": "(ちょっと変換の仕方を修正しました．基本的には3行以上のものは do をネストさせて2行に書き直せて，2行の do は `&gt;&gt;=` で書き直せる感じですね)",
        "user": "U57D08Z9U",
        "type": "message"
    },
    {
        "ts": "1552785173.296200",
        "text": "```\nmain = print 1\n```\nでよいのでは:neutral_face:",
        "user": "U4KU9ABL0",
        "type": "message"
    },
    {
        "ts": "1552800384.296600",
        "text": "<@UH19YD7RQ> has joined the channel",
        "user": "UH19YD7RQ",
        "type": "message"
    }
]