[
    {
        "ts": "1564557369.063600",
        "text": "一応補足ですが，現在の GHC では full laziness が入るタイミングが調整されていて，\n```\nfactMemo :: Int -&gt; Integer\nfactMemo = (map fact' [0..] !!)\n  where\n    fact' 0 = 1\n    fact' n = fromIntegral n * factMemo (n - 1)\n\nfact :: Int -&gt; Integer\nfact x = map fact' [0..] !! x\n  where\n    fact' 0 = 1\n    fact' n = fromIntegral n * fact (n - 1)\n```\nはどちらも `fact'` は外に出されます．このため， `map fact' [0..]` も CAF として扱われます． GHCi のバイトコード出すパスでは， core 2 core のパスが少し簡略化されてるので， full laziness が真面目に入ってないだけだと思いますね．\n\nなので，スーパーコンビネータかどうかは指標の一つではありますが，実際にはどう最適化が入るかによって CAF になるかはかなり左右されます",
        "user": "U57D08Z9U",
        "type": "message"
    },
    {
        "ts": "1564577136.064100",
        "text": "<@ULXKBEPR6> has joined the channel",
        "user": "ULXKBEPR6",
        "type": "message"
    },
    {
        "ts": "1564580251.064400",
        "text": "<@ULZRSHT1C> has joined the channel",
        "user": "ULZRSHT1C",
        "type": "message"
    },
    {
        "ts": "1564587041.064600",
        "text": "Liquid Haskell について言えば、`{-@ @-}` は GHC にとっては単なるコメントなのでもっと早い段階で消えそう……な気がしますが根拠はないです。",
        "user": "U4M4XHKB8",
        "type": "message"
    },
    {
        "ts": "1564590486.066800",
        "text": "確かに あれはただのコメントでプラグまですらなかったですね:persevere: 雰囲気的に(?) 型が削除される以前に消されてそうですね…",
        "user": "U9XHWQX7Z",
        "type": "message"
    },
    {
        "ts": "1564617187.071600",
        "text": "はい、”外に出す”ということをコンパイラがやるかどうかはまた別ですもんね. &gt; 真面目に入ってない\nただ後者のfact’がxを巻き込まずに外に出せるとすると意味論的に変わっちゃわないのかなという疑問が湧いてきたんだけど…",
        "user": "U4MMHDSNT",
        "type": "message"
    },
    {
        "ts": "1564632506.072200",
        "text": "<@ULYJX1PU5> has joined the channel",
        "user": "ULYJX1PU5",
        "type": "message"
    },
    {
        "ts": "1564646022.072500",
        "text": "<@ULMAZ8XQB> has joined the channel",
        "user": "ULMAZ8XQB",
        "type": "message"
    },
    {
        "ts": "1564668616.072700",
        "text": "GHC の最適化は通常 equational reasoning に基づいて行われてるので，その意味で意味論が変わるものはあまりないと思いますね (Haskell はちゃんとした formal semantics はないので，ある程度簡略化したラムダ計算の体系の元でということにはなりますが)．\n\nCAF を static closure にして欲しくないという話であれば， <https://stackoverflow.com/questions/6090932/how-to-make-a-caf-not-a-caf-in-haskell/6091166#6091166> みたいな話があって，今回の場合 `map fact' [0..]` の部分を切り出して， `fact` の引数を受け取るようにして `NOINLINE` すればいいと思いますね．と，思ったんですが，\n```\nfact2 :: Int -&gt; Integer\nfact2 x = factMemo2 x fact' !! x\n  where\n    fact' 0 = 1\n    fact' n = fromIntegral n * fact' (n - 1)\n\nfactMemo2 :: Int -&gt; (Int -&gt; Integer) -&gt; [Integer]\nfactMemo2 _ f = map f [0..]\n{-# NOINLINE factMemo2 #-}\n```\nみたいなのだと， w/w が入って `factMemo2` の参照が worker の方に書き換えられてしまいますね… 一応次の形式にすると `-O` ならいい感じに CAF 化を妨害できるみたいです:\n```\nfact2 :: Int -&gt; Integer\nfact2 x = factMemo2 (x &lt; 0) fact' !! x\n  where\n    fact' 0 = 1\n    fact' n = fromIntegral n * fact' (n - 1)\n\nfactMemo2 :: Bool -&gt; (Int -&gt; Integer) -&gt; [Integer]\nfactMemo2 !_ f = map f [0..]\n{-# NOINLINE factMemo2 #-}\n```",
        "user": "U57D08Z9U",
        "type": "message"
    },
    {
        "ts": "1564848108.073200",
        "text": "<@UM0RQSUDS> has joined the channel",
        "user": "UM0RQSUDS",
        "type": "message"
    },
    {
        "ts": "1564990128.075100",
        "text": "みなさんHTMLを出力するときに、どんなテンプレートエンジンを使っていますか？\nこちらのissue <https://github.com/haskell-jp/slack-log/issues/20> に取り組む際の参考にしようと思います。",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1564990231.075500",
        "text": "楽なんで Mustache です :raising_hand: （型の活用はあんまりできないやつですが）\n<http://hackage.haskell.org/package/stache>",
        "user": "U4KPPQW7K",
        "type": "message"
    },
    {
        "ts": "1564990257.075900",
        "text": "blaze-htmlとか使うからテンプレートエンジン使いません！だと今回のケースはちょっとつらい。\nユーザーがカスタマイズできるように外部のテンプレートエンジンを使おう、という趣旨なので",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1564990349.076100",
        "text": "Mustacheやっぱ定番ですかね。\nユーザーがカスタマイズするという要件なので型が緩いのはこの際気にしません！ :muscle:\n起動時にテンプレートをコンパイルしてチェックする、みたいな考慮は必要でしょうね... mustacheならそれもできたはず。",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1564993898.076500",
        "text": "<@UM3TW6S5D> has joined the channel",
        "user": "UM3TW6S5D",
        "type": "message"
    },
    {
        "ts": "1564998373.076700",
        "text": "blaze-html はテンプレートエンジンとはまた違うか :tashikani:",
        "user": "U56L7EVNY",
        "type": "message"
    },
    {
        "ts": "1565050460.077000",
        "text": "関連議論を全部は追い切れていないのですが、再コンパイルが問題であるなら、現状の仕組みをrunghcで動かすのはどうでしょうか？",
        "user": "U570660KX",
        "type": "message"
    },
    {
        "ts": "1565051059.077200",
        "text": "Dhallもテンプレートエンジンとして使える事を謳っているのですが、現状パフォーマンスがすこぶる悪いのが難点です <http://www.haskellforall.com/2017/06/dhall-is-now-template-engine.html>",
        "user": "U570660KX",
        "type": "message"
    },
    {
        "ts": "1565054059.077800",
        "text": "我々だけでなく、ほかのSlack Workspaceの管理者も使えるように、実行ファイルのリリースも視野に入れているので、runghcだとちとつらいですね...\n<https://github.com/haskell-jp/slack-log/issues/22>",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1565083258.080300",
        "text": "<https://qiita.com/autotaker1984/items/5ec0bbd5a44e146dbada> を読んでいて気になったのですが、\nリストリテラル `[1, 2, 3]` が `build  (\\c n -&gt; c 1 (c 2 (c 3 n)))` に変換されるというルールはどこに載っているでしょうか？\nbaseパッケージのGHC.List moduleやGHC.Base moduleを探してみましたが見つかりませんでした。\nきっとコンパイラーのどこかの層に組み込まれているから、librariesの方を見てもわからないってことですよね...",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1565089371.080600",
        "text": "一応 <https://gitlab.haskell.org/ghc/ghc/blob/ghc-8.6.5-release/compiler/deSugar/DsExpr.hs#L837> の部分がそうです。リテラルは Haskell レベルだといじれないので通常は脱糖で扱われることになりますね",
        "user": "U57D08Z9U",
        "type": "message"
    },
    {
        "ts": "1565245599.082900",
        "text": "リスト、木、グラフみたいな基本的なデータ構造のうえでの、ソートとか探索とかの基本的なアルゴリズムについて Haskell でのコードをまとめたサイトとか本はなにかありますか？",
        "user": "UKYUFC94P",
        "type": "message"
    },
    {
        "ts": "1565245790.083100",
        "text": "ぱっと思いつくのは <https://scrapbox.io/haskell-shoen/%E3%83%AC%E3%82%B7%E3%83%94%E9%9B%86> と <https://wiki.haskell.jp/%E3%83%87%E3%83%BC%E3%82%BF%E6%A7%8B%E9%80%A0%E5%88%97%E4%BC%9D> ですが、前者は建設中っぽいし後者はデータ構造そのものの紹介で操作については言及してないしなぁ...",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1565246125.083500",
        "text": "ありがとうございます！",
        "user": "UKYUFC94P",
        "type": "message"
    },
    {
        "ts": "1565246591.083700",
        "text": "なかなかまとまってる資料が見当たらず、いまのところは Data.Tree とか Data.Graph とかのソースを読んでいます。",
        "user": "UKYUFC94P",
        "type": "message"
    },
    {
        "ts": "1565332911.087200",
        "text": "GHC って並行 GC あるんでしたっけ？\n（並列 GC があるという記述は見つけた。）\nというのも `System.Mem.Weak.Weak` のファイナライザーは別スレッドから（例えば main スレッドしか使っていなかったとして main 以外のスレッドから）呼ばれることを考慮すべきなのかと思いまして。",
        "user": "U4L0B71L1",
        "type": "message"
    },
    {
        "ts": "1565349607.087400",
        "text": "タイミング的に別スレッドっぽい（ `ThreadID` 見ろよという話",
        "user": "U4L0B71L1",
        "type": "message"
    },
    {
        "ts": "1565404121.091200",
        "text": "type instance が定義されてるかのテストってどう書くのがいいんでしょう？\n```\ntype family Foo :: Type -&gt; Type\ntype instance Foo Bar = Baz\n```\nがあったとき `Foo Bar` はあるけど `Foo Qux` はないことをテストに書きたい。",
        "user": "U4L0B71L1",
        "type": "message"
    },
    {
        "ts": "1565404708.091300",
        "text": "自己解決した\n追加情報として、別モジュールで `type instance Foo Qux = Quux` があって、 `Quux` でないことが確認できればよかったので次のように書けた\n```\ndo\n  let\n    target :: Foo Qux ~ Quxx =&gt; ()\n    target = ()\n  shouldNotTypecheck target\n```\nでうまくいったっぽい\n`Foo Qux` が本当になかった場合はどう書けるんだろう",
        "user": "U4L0B71L1",
        "type": "message"
    },
    {
        "ts": "1565568147.094100",
        "text": "それはそれとして、本物の並行GCがGHC 8.10で使えるようになるという噂も　<https://gitlab.haskell.org/ghc/ghc/merge_requests/972>",
        "user": "U4KUNQF9N",
        "type": "message"
    },
    {
        "ts": "1565609491.095000",
        "text": "<@UM9E9PXJ4> has joined the channel",
        "user": "UM9E9PXJ4",
        "type": "message"
    },
    {
        "ts": "1565703499.099300",
        "text": "ちょっとhaskellの話ではなくって数学の初歩みたいな質問失礼します(ここで聞いていいのかな…)\n減法のプロパティベーステストを書きたいのですが、減法の性質ってなんなのでしょうか…(どういう条件を満たせばいいのかが調べてもわからなかったです…)\nここで言いたい`条件`というのは、例えば加法で言えば以下のようなものです(これは調べられました)\n```\na + b = b + a\na + 0 = a\n(a + b) + c = a + (b + c)\n```",
        "user": "ULTBB86UC",
        "type": "message"
    },
    {
        "ts": "1565706078.099900",
        "text": "減法の性質というよりは `-1` がどのように導入されるかという話になりますが、\n\n- 自然数 N を考える\n- n ∈ N なる元を取ったときに、n + m = 0 となる m は (n = 0 のときを除いて) N に存在しない\n- ここで、N 上の代数方程式 N[x] に関して、x^2 = 1となる特別な元 `-1` を考え、N に添加 (代数拡大) する\n- これにより、n + m = 0 をみたす元として m = -n (-1 × n) を考えることができるようになる\n\nという感じが多いと思います。つまり、減法の性質もあくまで加法の性質と同様で、元として `-1` も含まれているだけ、ということです\n\n---\n\nテストの書き方は他のHaskell強者の方にゆずります :pray:\n(∀n ∈ Z，∃!m ∈ Z，n + m = 0 を書ければ良いと思いますが)",
        "user": "UDC1LV887",
        "type": "message"
    },
    {
        "ts": "1565706354.100300",
        "text": "厳密な資料だとこのあたりが参考になると思います↓\n<https://www.slideshare.net/yoshihiromizoguchi/ss-28541012>",
        "user": "UDC1LV887",
        "type": "message"
    },
    {
        "ts": "1565707938.100700",
        "text": "ありがとうございます！！\nhaskellの `-` の実装を見て `n - m = n + negate m` と書けるのは確認してましたが、数学的にはそう考えるのですね…\n難しいけど楽しい。とても為になりました！\n今の数学力でどこまで行けるかわからないですが資料も読んでみます。ありがとうございます",
        "user": "ULTBB86UC",
        "type": "message"
    },
    {
        "ts": "1565913900.104300",
        "text": "RIO使用時、 `Storable` のインスタンスを `Handle` から一個読み込むのに、なにか良い感じの書き方はあるでしょうか。\n\n```\nliftIO $ BS.hGet h (sizeOf @Int32 undefined) &gt;&gt;= BS.useAsCString `flip` (peek @Int32 . castPtr)\n```\n\nでいいでしょうか",
        "user": "U570660KX",
        "type": "message"
    },
    {
        "ts": "1565914276.104700",
        "text": "allocaなどで環境にバッファを確保しておいて、hGetBufからのpeekをすると効率がよいはずです",
        "user": "U4KUNQF9N",
        "type": "message"
    },
    {
        "ts": "1565914560.104900",
        "text": "hGetBuf見落としてました。ありがとうございます！",
        "user": "U570660KX",
        "type": "message"
    },
    {
        "ts": "1565934422.105500",
        "text": "余談になりますが、一般的に可換モノイド（今回のケースでは自然数）から可換群（今回のケースでは整数）を構成するグロタンディーク構成というのがあるようです。\n自然数から整数への具体的なグロタンディーク構成（本質的に Guvalifさんが紹介されている資料の方法と同じですが）については\n<https://ja.wikipedia.org/wiki/%E6%95%B4%E6%95%B0#%E5%8E%B3%E5%AF%86%E3%81%AA%E6%A7%8B%E6%88%90>",
        "user": "U57CGDBMG",
        "type": "message"
    },
    {
        "ts": "1566008950.106300",
        "text": "<@UMHA23D0F> has joined the channel",
        "user": "UMHA23D0F",
        "type": "message"
    },
    {
        "ts": "1566051320.111000",
        "text": "こんばんは. Haskell &amp; Parsec入門者です\nParsecを使ってパーサーを作っているのですが、\n`&gt;=`, `&gt;`, `&lt;`, `&lt;=`をパースする関数がどうも不格好で冗長な見た目をしています。\nもっとわかりやすく書くために、こういう書き方もあるよ、というのがあれば教えていただけませんでしょうか\n\n```\n-- relational ::= add | add (\"&lt;\" add | \"&lt;=\" add | \"&gt;\" add | \"&gt;=\" add)\nrelational :: Parser Expr\nrelational = do\n    a &lt;- spaces *&gt; add\n    (do\n            spaces *&gt; char '&lt;'\n            (Lt a &lt;$&gt; (spaces *&gt; relational))\n                &lt;|&gt; (Lte a &lt;$&gt; (char '=' *&gt; spaces *&gt; relational))\n        )\n        &lt;|&gt; (do\n                spaces *&gt; char '&gt;'\n                (Gt a &lt;$&gt; (spaces *&gt; relational))\n                    &lt;|&gt; (Gte a &lt;$&gt; (char '=' *&gt; spaces *&gt; relational))\n            )\n        &lt;|&gt; pure a\n```\n\nコード全体はこちらにあります。\n<https://github.com/mrsekut/hcc/blob/master/src/Parser.hs>\n\n今回の質問の主点は上記の部分ですが、もしコードを見てくださった上で気になる点があればご指摘いただけると嬉しいです。\n僕のレベル感としてはこんな感じです。↓\nState,Maybe,Eitherモナド→なんとなくわかった\nSTモナド、モナド変換子、Parsecのlexemeとかの使い方や概念を理解していない、パーサーとパーサコンビネータの見分け方を知らない\n\n雑な質問ですがよろしくお願いします",
        "user": "UCM4G8PGW",
        "type": "message"
    },
    {
        "ts": "1566082042.111700",
        "text": "<@UMJ0A18LE> has joined the channel",
        "user": "UMJ0A18LE",
        "type": "message"
    }
]