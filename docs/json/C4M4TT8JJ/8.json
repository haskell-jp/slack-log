[
    {
        "ts": "1516762824.000328",
        "text": "<@U8X01G6FJ> has joined the channel",
        "user": "U8X01G6FJ",
        "type": "message"
    },
    {
        "ts": "1516766329.000108",
        "text": "パッケージって、そんなに fork してるの？",
        "user": "U56MBRKR9",
        "type": "message"
    },
    {
        "ts": "1516766891.000025",
        "text": "<@U8XGRJ3DZ> has joined the channel",
        "user": "U8XGRJ3DZ",
        "type": "message"
    },
    {
        "ts": "1516766976.000187",
        "text": "hackage でバージョンを変えずに metadata を変えられることが諸悪の原因？",
        "user": "U56MBRKR9",
        "type": "message"
    },
    {
        "ts": "1516779430.000120",
        "text": "先ほどRedditで見かけました。\nSnoymanからのコメントが。\n<https://www.snoyman.com/blog/2018/01/slurp>",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1516799597.000186",
        "text": "速すぎて読みきれなかったのですが、一旦収束(park)方向のようですね、、、",
        "user": "U55V441FS",
        "type": "message"
    },
    {
        "ts": "1516855545.000095",
        "text": "恥ずかしながら :point_up: の騒動の背景にあるらしいHackage Revisionsと言うのを存じてませんでした。。。\n<https://github.com/haskell-infra/hackage-trustees/blob/master/revisions-information.md>",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1516877170.000012",
        "text": "<@U8YBE1TTM> has joined the channel",
        "user": "U8YBE1TTM",
        "type": "message"
    },
    {
        "ts": "1516945602.000074",
        "text": "この間Haskellerを募集している、と言うことで話題になったIOHKが開発するCardanoというブロックチェーンを支えるCardano Foundationと、FP Completeが提携するそうで。\n<https://www.fpcomplete.com/blog/fp-complete-and-cardano-blockchain-audit-partnership>\n<https://www.reddit.com/r/haskell_jp/comments/7kjb85/iohk%E3%81%A7%E3%81%AFhaskell%E9%96%8B%E7%99%BA%E8%80%85%E3%82%92%E5%8B%9F%E9%9B%86%E3%81%97%E3%81%A6%E3%81%84%E3%81%BE%E3%81%99/>",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1517038544.000124",
        "text": "今まで、slackに情報ながれてたのに、理解できてませんでした^^\nCardanoすごいですね、コントラクトをHaskellベース言語で書けて、仮想マシン層があってレジスタベース！\nEthereum/Solidityよくできてるなぁと最近知り始めたのですが、Cardanoの先進突き抜け感は尋常じゃないですね。\nあと、「関数プログラミングの楽しみ」本の６章の「金融取引契約の書き方」の考えが源流の１つにあったり。\n先見先進な人たちがいますね〜:telescope:",
        "user": "U55V441FS",
        "type": "message"
    },
    {
        "ts": "1517054099.000004",
        "text": "<@U90FHSDFG> has joined the channel",
        "user": "U90FHSDFG",
        "type": "message"
    },
    {
        "ts": "1517138679.000052",
        "text": "<@U8ZN25NE7> has joined the channel",
        "user": "U8ZN25NE7",
        "type": "message"
    },
    {
        "ts": "1517142303.000033",
        "text": "<@U8Z94MFCZ> has joined the channel",
        "user": "U8Z94MFCZ",
        "type": "message"
    },
    {
        "ts": "1517175329.000005",
        "text": "<@U8ZBMSPPB> has joined the channel",
        "user": "U8ZBMSPPB",
        "type": "message"
    },
    {
        "ts": "1517200416.000129",
        "text": "<@U900NGTV0> has joined the channel",
        "user": "U900NGTV0",
        "type": "message"
    },
    {
        "ts": "1517205764.000177",
        "text": "<@U8ZBFJLGY> has joined the channel",
        "user": "U8ZBFJLGY",
        "type": "message"
    },
    {
        "ts": "1517226181.000212",
        "text": "<@U90881C13> has joined the channel",
        "user": "U90881C13",
        "type": "message"
    },
    {
        "ts": "1517227874.000285",
        "text": "<@U9023UDGB> has joined the channel",
        "user": "U9023UDGB",
        "type": "message"
    },
    {
        "ts": "1517230526.000355",
        "text": "Solidity(Ethereum)とPlutus(Cardano)を軽くみていて、思い出したHaskellの面白い例の紹介です。\nPhantom型（幽霊型）を使って数値型の誤った混在を防ぐ例です。\n（Don Stewartさんの、資料に書かれてたはずなのですが、資料のURLがなくなってました。）\nコード例は以下です。\n　　<https://gist.github.com/takenobu-hs/36bae8f94410cf7f02b0659bff42b31a>\n\n使い方はこんな感じ。 例えば、Int同士を混在しないように、型で分けるというものです。\nGHCの言語拡張なしの基本的な機能でも、便利なことができます。\nなお、Valはnewtypeで定義されているので、実行時にはValは消えて実行時オーバーヘッドなしです。\n\n```\nghci&gt; x1 = 1 :: Wei\nghci&gt; x2 = 5 :: Wei\nghci&gt; x3 = 10 :: Ether\n\nghci&gt; x1 + 1\n2\nghci&gt; x1 + x2\n6\n\nghci&gt; x3 + 1\n11\nghci&gt; x1 + x3\n&lt;interactive&gt;:17:6: error:\n    • Couldn't match type ‘XEther’ with ‘XWei’\n      Expected type: Wei\n        Actual type: Ether\n    • In the second argument of ‘(+)’, namely ‘x3’\n      In the expression: x1 + x3\n      In an equation for ‘it’: it = x1 + x3\n```",
        "user": "U55V441FS",
        "type": "message"
    },
    {
        "ts": "1517232071.000147",
        "text": "stack のイシューには newcommer friendly ってラベルがあるんですね <https://github.com/commercialhaskell/stack/labels/newcomer%20friendly>",
        "user": "U4L0B71L1",
        "type": "message"
    },
    {
        "ts": "1517276265.000098",
        "text": "レイヤーが違うのが混ざっているとはいえ、めっちゃ多い :joy: \n<https://www.reddit.com/r/haskell/comments/7tx0o4/haskell_3_sql/>",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1517282097.000034",
        "text": "ShowはReadと一緒にderivingにして、シリアライズ/デシリアライズに使った方が便利という学びを得ました。画面出力用の文字列化関数なんかは別名で作った方がいい。 :memo:",
        "user": "U570660KX",
        "type": "message"
    },
    {
        "ts": "1517282258.000057",
        "text": "Showはあくまでもデバッグ用と考えた方がいいですもんね！",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1517282366.000218",
        "text": "HRRを推していこうな:muscle:",
        "user": "U570660KX",
        "type": "message"
    },
    {
        "ts": "1517282445.000134",
        "text": "禿同",
        "user": "U4L0B71L1",
        "type": "message"
    },
    {
        "ts": "1517282528.000066",
        "text": "```\nshow . read = id\nread . show = id\n```\nであってほしい",
        "user": "U4L0B71L1",
        "type": "message"
    },
    {
        "ts": "1517282536.000165",
        "text": "SQLiteの文字列フィールドに代数データ型を書き込むのに使ってみたり。内部データだからまあ良いかなと思いました",
        "user": "U570660KX",
        "type": "message"
    },
    {
        "ts": "1517285228.000247",
        "text": "あと、表示用関数は機能拡張するときに、フォーマットオプション等の引数を追加する場合がある、というのもあります。",
        "user": "U570660KX",
        "type": "message"
    },
    {
        "ts": "1517291573.000118",
        "text": "<@U90L8N3K6> has joined the channel",
        "user": "U90L8N3K6",
        "type": "message"
    },
    {
        "ts": "1517299332.000205",
        "text": "<http://twitter.com/mametter/status/958235368855228416>",
        "user": "U4L0B71L1",
        "type": "message"
    },
    {
        "ts": "1517299353.000005",
        "text": "<http://twitter.com/mametter/status/958240021252734976>",
        "user": "U4L0B71L1",
        "type": "message"
    },
    {
        "ts": "1517301028.000131",
        "text": "ほげほげ｀foo`bar｀ふがふが",
        "user": "U8EJKMNVA",
        "type": "message"
    },
    {
        "ts": "1517301034.000459",
        "text": "おー",
        "user": "U8EJKMNVA",
        "type": "message"
    },
    {
        "ts": "1517311910.000154",
        "text": "<@U90TTJDB7> has joined the channel",
        "user": "U90TTJDB7",
        "type": "message"
    },
    {
        "ts": "1517378266.000207",
        "text": "<@U91F1FSJH> has joined the channel",
        "user": "U91F1FSJH",
        "type": "message"
    },
    {
        "ts": "1517489682.000196",
        "text": "librariesのMLに面白そうな話が流れてました。\ncontainersパッケージを、Formal verificationする？、という話のようです。\nHaskellソースからCoq（理解してません）へのコンバータ（hs-to-coq）があるのですね。\n<https://mail.haskell.org/pipermail/libraries/2018-February/028473.html>",
        "user": "U55V441FS",
        "type": "message"
    },
    {
        "ts": "1517491041.000241",
        "text": "HaskellのADTをCoqに持っていくと，Inductive/Coinductive両方の性質をどうにかしないといけなくなるのどうしてるのかと思って<https://arxiv.org/pdf/1711.09286.pdf>",
        "user": "U5G2BCVBN",
        "type": "message"
    },
    {
        "ts": "1517491058.000193",
        "text": "見てみたら，ワリキリでInductive決め打ちなんですね",
        "user": "U5G2BCVBN",
        "type": "message"
    },
    {
        "ts": "1517556255.000104",
        "text": "Int みたいな桁あふれの問題があるデータ型をどうするのかきょうみがあるんですが、なにやら Import IntToZ してますね。",
        "user": "U56MBRKR9",
        "type": "message"
    },
    {
        "ts": "1517556285.000193",
        "text": "あと、証明した性質に過不足がないか、どう証明するんでしょうか？",
        "user": "U56MBRKR9",
        "type": "message"
    },
    {
        "ts": "1517556499.000218",
        "text": "<http://eprints.whiterose.ac.uk/118200/1/FitSpec.pdf>",
        "user": "U56MBRKR9",
        "type": "message"
    },
    {
        "ts": "1517556525.000156",
        "text": "FitSpecを使うと、テストの重複を教えてくれたような気がする。",
        "user": "U56MBRKR9",
        "type": "message"
    },
    {
        "ts": "1517557178.000138",
        "text": "&gt; In the case of fixed precision types, we have chosen these mappings for expediency; in future work, we plan to switch these definitions so that we can reason about underflow and overflow.",
        "user": "U5G2BCVBN",
        "type": "message"
    },
    {
        "ts": "1517557304.000106",
        "text": "future plan といいつつ、きっと取り組まないでしょうねぇ。。。",
        "user": "U56MBRKR9",
        "type": "message"
    },
    {
        "ts": "1517557410.000221",
        "text": "Set の API のオーダーを保証するには、木が平衡していることを証明しなければいけないけれど、平井くんをもってして3万行必要だった。。。",
        "user": "U56MBRKR9",
        "type": "message"
    },
    {
        "ts": "1517616515.000030",
        "text": "現在，hpackでescape hatchのためにverbatimフィールドを追加する案が出ています．現状，Cabalとの相互運用が難しい状況ですが，それに対していい対案が無い状況なので，もし何かもっといいアイデアをお持ちの方はコメントしてみると，今後のhpack利用が快適になるかもしれません\n<https://github.com/sol/hpack/pull/260>",
        "user": "U57D08Z9U",
        "type": "message"
    },
    {
        "ts": "1517620155.000087",
        "text": "普通にいいアイディアだと思うので :+1: しました",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1517620297.000217",
        "text": "ただ，この方法だと <https://github.com/sol/hpack/issues/262> にある通り，既存の設定を上書きすることができないんですよね",
        "user": "U57D08Z9U",
        "type": "message"
    },
    {
        "ts": "1517635628.000051",
        "text": "takano-akioさんのBlockArguments提案の実装が、ghcのmaster分岐にlandedしました。\nghc 8.6.1 から正式に使えるようになります。\n<https://phabricator.haskell.org/rGHCbe84823b956f0aa09c58d94d1901f2dff13546b4>\n\n詳細仕様はこちら。\n<https://github.com/ghc-proposals/ghc-proposals/blob/master/proposals/0010-block-arguments.rst>\n\ndo, let, case, if などの式のカタマリを、「括弧なし」で、引数箇所に書けるようになります。",
        "user": "U55V441FS",
        "type": "message"
    },
    {
        "ts": "1517635713.000067",
        "text": "昔の文章のようですが、面白いものを見つけました。（まだ読み込んでないですが有名なものですかね。）\n\nThe Haskell Road to Logic, Maths and Programming\n<https://fldit-www.cs.uni-dortmund.de/~peter/PS07/HR.pdf>",
        "user": "U55V441FS",
        "type": "message"
    }
]