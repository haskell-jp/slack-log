[
    {
        "ts": "1594177785.113400",
        "text": "あ、なるほど。",
        "user": "UL1HFJATE",
        "type": "message"
    },
    {
        "ts": "1594182324.113700",
        "text": "<@U016QCYJ9SN> has joined the channel",
        "user": "U016QCYJ9SN",
        "type": "message"
    },
    {
        "ts": "1594265082.120700",
        "text": "stackの使い方について質問させていただきたいです．\nyamlファイルやcabalファイルについてまだ使い方がちゃんとわかっていないところがあると思うのですが，回答いただければ幸いです．\n\n環境はWindows10でstack2.3.1を使っています．\n\nHaskellでsqliteを扱いたく， `sqlite-simple` というライブラリを使おうと，`stack.yaml` の `extra-devs` と プロジェクトのcabalファイルに以下のように追加しました．\n```# stack.yaml\n# コメント行は省略します\n\nresolver: lts-16.2\n\npackages:\n- .\n\nextra-deps:\n- sqlite-simple-0.4.16.0@sha256:aeb9502c0004054846829766a08d856122a7e7386077b95048e60edaf9f46b88,2947```\n```# cabalファイル(一部)\nlibrary\n  hs-source-dirs:      src\n  exposed-modules:     Lexer, Writer\n  build-depends:       base &gt;= 4.7 &amp;&amp; &lt; 5\n                     , text\n                     , sqlite-simple       # この行を追加しました\n  default-language:    Haskell2010```\n\nするとビルド時に以下のようなエラーが出ました．\n```Error: While constructing the build plan, the following exceptions were encountered:\n\nIn the dependencies for sqlite-simple-0.4.16.0:\n    base-4.13.0.0 from stack configuration does not match &lt;4.13  (latest matching version\n                  is 4.12.0.0)\n    direct-sqlite must match &gt;=2.3.13 &amp;&amp; &lt;2.4, but the stack configuration has no specified\n                  version  (latest matching version is 2.3.26)\n    semigroups-0.19.1 from stack configuration does not match ==0.18.*  (latest matching version\n                      is 0.18.5)\nneeded due to AIQRating-0.1.0.0 -&gt; sqlite-simple-0.4.16.0\n\nSome different approaches to resolving this:\n\n  * Build requires unattainable version of base. Since base is a part of GHC, you most likely\n    need to use a different GHC version with the matching base.\n\nPlan construction failed.```\n`dependencies` 等々書いてあったため，baseのバージョンが新しすぎて対応していないのかな？などと思い，cabalファイルの `build-depends` をいじったりしていたのですが，エラーが全く解決できず困っています．\n初歩的な質問かもしれないのですが，原因と対処法を教えていただければ幸いです．",
        "user": "USFQ6M2PR",
        "type": "message"
    },
    {
        "ts": "1594265641.122900",
        "text": "そのエラーは「sqlite-simpleのバージョンを0.4.16を指定してるけど、stackage の LTS-16.2 の base バージョン 4.13 では使えないよ（&lt;4.13 という条件がある）」って感じ",
        "user": "U56L7EVNY",
        "type": "message"
    },
    {
        "ts": "1594265791.123500",
        "text": "エラーの解決方法は次のどちらか\n1. 古い base のバージョンを使う（stack.yaml の `resolver` を lts-15 系を使う）\n2. 新しい sqlite-simple を使う（stack.yaml の `extra-deps` の `sqlite-simple-0.4.16.0@...` を `sqlite-simple-0.4.18.0` とかにする）",
        "user": "U56L7EVNY",
        "type": "message"
    },
    {
        "ts": "1594268493.123900",
        "text": "ありがとうございます！やってみます！！",
        "user": "USFQ6M2PR",
        "type": "message"
    },
    {
        "ts": "1594371824.124700",
        "text": "<@U017KL7CN72> has joined the channel",
        "user": "U017KL7CN72",
        "type": "message"
    },
    {
        "ts": "1594459062.124900",
        "text": "<@U016XNH11MY> has joined the channel",
        "user": "U016XNH11MY",
        "type": "message"
    },
    {
        "ts": "1594467677.125100",
        "text": "<@U016Y0XPWD9> has joined the channel",
        "user": "U016Y0XPWD9",
        "type": "message"
    },
    {
        "ts": "1594516358.129200",
        "text": "すこし漠然とした質問なのですが、Haskellで個人のウェブサイトを立ち上げようとした場合、どのフレームワークを使うのがおすすめですか？CMSライブラリも使いたいと考えています。\nバックとフロントをWebAPIで繋ぐヘッドレス構成にし、フロントはReasonMLを使ってみようと思います。ちなみにHaskellユーザはPureScriptを使うものなのでしょうか？",
        "user": "U0121PJA7BN",
        "type": "message"
    },
    {
        "ts": "1594517267.129400",
        "text": "<@U8JGMG1QT> has joined the channel",
        "user": "U8JGMG1QT",
        "type": "message"
    },
    {
        "ts": "1594518055.129500",
        "text": "APIを作るならservantが人気ですね。\nフロントは好きなの使えばいいんじゃないっすかね。確かにPureScriptの方がReasonより流行っている *イメージ* はありますけど。",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1594528296.129800",
        "text": "servant, ありがとうございます！！試してみます！！",
        "user": "U0121PJA7BN",
        "type": "message"
    },
    {
        "ts": "1594535803.130100",
        "text": "<@U016WTKJ2UV> has joined the channel",
        "user": "U016WTKJ2UV",
        "type": "message"
    },
    {
        "ts": "1594544835.130200",
        "text": ":pray: 進めておいてからなんで申し訳ないのですが、servantはもりもりの型レベルプログラミングを必要とする、結構しんどいフレームワークである点はご注意ください。\n<https://wiki.haskell.jp/Hikers%20Guide%20to%20Haskell#web%E3%82%A2%E3%83%97%E3%83%AA%E3%82%B1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3> にも書いたとおり難しければspockでもいいかも。\nあるいは思い切って、servantもspockもベースとしているWAI <http://hackage.haskell.org/package/wai> を直接使うのもいいでしょう。",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1594551580.130700",
        "text": "情報ありがとうございます！",
        "user": "U0121PJA7BN",
        "type": "message"
    },
    {
        "ts": "1595333310.133800",
        "text": "今使ってるMacBook Proを修理に出そうと思っていて、\n代わりにWindowsにstack.exeをDLしてstackからhlintとhoogleをインストールしようとしたところエラーが出たのですが\nこの記事\n<https://haskell.jp/blog/posts/2017/windows-gotchas.html>\nのおかげで助かりました。\n```chcp 65001```\nこれ知らないと詰まりますね…",
        "user": "U0121PJA7BN",
        "type": "message"
    },
    {
        "ts": "1595471988.134400",
        "text": "<@ULJNCPK5W> has joined the channel",
        "user": "ULJNCPK5W",
        "type": "message"
    },
    {
        "ts": "1595478634.140100",
        "text": "質問です．\nglossとgloss-juicyを入れたいのですが，Bitmap型コンストラクタの引数がgloss-1.11.1.1とgloss&gt;=1.13で変わっているため\n\ndependencies:\n- base &gt;= 4.7 &amp;&amp; &lt; 5\n- gloss == 1.11.1.1\n- gloss-juicy == 0.2.2\nの構成でstack buildしようとすると\n&gt; In the dependencies for hima-0.1.0.0:\n&gt;   gloss-1.13.1.2 from stack configuration does not match ==1.11.1.1 \n&gt;           (latest matching version is 1.11.1.1)\n&gt; needed since hima is a build target.\n&gt; \n&gt; Some different approaches to resolving this:\n&gt; \n&gt;  * Set 'allow-newer: true'\n&gt;   in /Users/vogel/.stack/config.yaml to ignore all version constraints and build anyway.\n&gt; \n&gt;  * *Recommended action:* try adding the following to your extra-deps\n&gt;   in /Users/vogel/Documents/Haskell/hima/stack.yaml:\n&gt; \n&gt; - gloss-1.11.1.1@sha256:6b5f8428b204b2c8fecba0b3dc5f49278d5c57a0003e59c46b16b356a770adaf,3840\nと返ってきます．\n・一番下のextra-deps追加　→　baseやcontainersでさらにエラーが返ってくる\nのですが，\n・config.yamlのallow-newerはtrueにしても問題ないのでしょうか(他のプロジェクトへの影響など)\n・他に解決方法はないでしょうか",
        "user": "U8JGMG1QT",
        "type": "message"
    },
    {
        "ts": "1595479130.140300",
        "text": "&gt; 他のプロジェクトへの影響など\n`allow-newer` を `true` にしてもとくに他のプロジェクトへの影響はありません。\n自力で直す気もより古いバージョン（古いGHCと合わせて）を使う気もないなら `allow-newer` する以外の方法はないでしょう。",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1595479192.140500",
        "text": "補足: baseやcontainerはGHCに付属しているパッケージなので、それらが合わない、といわれたらGHCのバージョンを下げる（古いLTS Haskellに変える）しかないです。",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1595479256.140700",
        "text": "ありがとうございます，あんまり大元のファイルをいじりたくないのでバージョン下げる方法でtryしてみます",
        "user": "U8JGMG1QT",
        "type": "message"
    },
    {
        "ts": "1595479353.140900",
        "text": "~gloss-juicyの作者に変更点を送ることも考えます~\nあれ，最新のgithubみると修正されていますね，私の設定が悪い気がしてきました，見直してみます",
        "user": "U8JGMG1QT",
        "type": "message"
    },
    {
        "ts": "1595479556.141200",
        "text": "単純にリリースを後回しにしている可能性もあります（作者に連絡してリリースをせかすのもいいでしょう）。\nGitHubに上がっているバージョンを直接使う場合は <https://haskell.e-bigmoon.com/stack/intro/extra-deps.html> に書かれている方法を参考にしてください。",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1595480920.141600",
        "text": "ありがとうございます，無事環境設定できました！",
        "user": "U8JGMG1QT",
        "type": "message"
    },
    {
        "ts": "1595483275.141800",
        "text": "趣味や民間(?)のパッケージが多いプロジェクトは、stackよりもcabal-installのほうが詰まりにくいかもしれません。StackageのLTSは新しいライブラリや処理系が出回るまでどうしてもタイムラグがあるので、cabalで最新版を使ってもらったほうがライブラリ開発者としてもありがたいです",
        "user": "U4KUNQF9N",
        "type": "message"
    },
    {
        "ts": "1595484333.142000",
        "text": "なるほど，これまでもstackで使えずに車輪の再発明したものもあるので，そろそろ真面目にcabalやり直した方がいいかもしれません．\n皆様色々とありがとうございます",
        "user": "U8JGMG1QT",
        "type": "message"
    },
    {
        "ts": "1595514860.142900",
        "text": "<@U017LTZ4XBL> has joined the channel",
        "user": "U017LTZ4XBL",
        "type": "message"
    },
    {
        "ts": "1595593351.143100",
        "text": "<@U017MJP3UTF> has joined the channel",
        "user": "U017MJP3UTF",
        "type": "message"
    },
    {
        "ts": "1595760582.154800",
        "text": "あらたに環境をUbuntu上でつくりはじめました。いままで、開発ツールとしてはstack を使っていましたが、\nこの際新しいcabalを使ってみようかなぁとか、編集環境はEmacsだったのをVS Codeにしてみようかなぁとか、\nhls と連携するにはとか、よく把握してないのです。歴は長いですが、こういうところはさっぱりだめです。\nなにか、さくっと決まる定番の組み合わせ、詰め合わせ一式としてはどのようなものがありますでしょうか？",
        "user": "U4KU9ABL0",
        "type": "message"
    },
    {
        "ts": "1595762136.155000",
        "text": "組み合わせ一式は聞いたことがないですがこの記事が参考になるかも <https://kakkun61.hatenablog.com/entry/2020/06/06/Haskell_%E7%92%B0%E5%A2%83%E6%A7%8B%E7%AF%89%E3%83%84%E3%83%BC%E3%83%AB%E3%83%95%E3%83%AD%E3%83%BC%E3%83%81%E3%83%A3%E3%83%BC%E3%83%88%E3%82%92%E4%BD%9C%E3%82%8A%E3%81%BE%E3%81%97%E3%81%9F>",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1595762269.155300",
        "text": "ありがとうございます。じっくり見てみます。",
        "user": "U4KU9ABL0",
        "type": "message"
    },
    {
        "ts": "1595766248.155600",
        "text": "vscodeと hls の連携については、以下の画面イメージのように、簡単になりつつあるそうです。\n<https://twitter.com/meeple_/status/1286046745076670465>\n（vscodeから、hls拡張を選ぶと、hlsの静的バイナリが自動ダウンロードされるそうです。）",
        "user": "U55V441FS",
        "type": "message"
    },
    {
        "ts": "1595798143.162700",
        "text": "便乗質問すみません。ghcupとstackを両方いれています。今のところ不具合なく使えていますが、両方入れる事で何か不都合な点があったりするのでしょうか？",
        "user": "U561MADLH",
        "type": "message"
    },
    {
        "ts": "1595807167.162900",
        "text": "stackの --system-ghc オプションを使わない限り両方別々の場所にあるものを使いますし、パッケージもお互いの管理している箇所にインストールしますし、特に問題はないかと。",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1595842906.173700",
        "text": "以前、stackを入れるならcabalはインストールしない方がいいというような記事を見た気がしたのですが、これでスッキリしました！ありがとうございます！",
        "user": "U561MADLH",
        "type": "message"
    },
    {
        "ts": "1595843207.174000",
        "text": "単純に混乱しそうだから両方入れない方がいい、と考える気持ちはわかりますね。でも少なくともstackはそういう併用を意識して作っているのか、原則環境変数やcabalの設定をいじるようには作られてないわけですから、安全かと。",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1596197943.182700",
        "text": "お世話になっております。\nYAML形式の設定ファイルからファイルパスのリストを読み込んで、各ファイルパスに対して存在チェックとサイズチェックを行い、\nファイルが存在しない o rサイズが大きすぎる場合にはエラーメッセージを返すようなCLIツールを書いているのですが、自分のコードのどこがイケてないのか全くわかりません。そこで、有識者の方にコードレビューをして頂きたく投稿しました。何かしらコメント頂けたら嬉しいです。\n\n<https://repl.it/@liveinwood/File-Check>\n※環境の都合で実際のコードとは違いがあります。\n\n自分としては、mainの中のパターンマッチを省略できたらいいなと思うのですが。。。\nよろしくお願いいたします。:man-bowing:",
        "user": "UTK43JS4X",
        "type": "message"
    },
    {
        "ts": "1596239257.000100",
        "text": "本質的に場合分けがなくなるわけではないですが、\n`either (putStrLn . show) return =&lt;&lt; ...`\n というイディオムで `case` 式をなくせます。\nただ、現状だと エラーがあっても標準エラー出力ではなく標準出力に出力され、exit codeも0になってしまうので、どうせ例外を吐いて終了するなら\n`either throwIO return`\nと書く方がよいでしょう。\nそのためには `import Control.Exception` した上で\n`MyException` を `instance Exception MyException` にする必要があるのでお忘れなく。",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1596239369.000400",
        "text": "しかしながら、そもそも論として `ExceptT IO` や `IO (Either ..)` を使うのに適切な場面ではないように感じます。\n`ExceptT IO` や `IO (Either ...)` は、 `either throwIO return` などのイディオムで簡単にただの `IO` に変換できるものの、関数の利用者に「この例外は必ず処理しろよ！」という強い義務を与えるものであり、今回 liveinwoodさんが検討しているような小さなツールでは、扱いが煩雑になりがちです。\n（余談ですがこれはJavaの検査例外と概ね同じ事情です）\nそのためか `IO (Either ...)` などはアンチパターンだと考える人も多くいます（私はこの点については同意してませんが）。\n\n今回書いたコードを特にライブラリーとして再利用するつもりでもなければすべて `IO` にしておいて `throwIO` すれば `case`式はいらなくなるし、それで十分じゃないでしょうか？\nもっと言えば、発生した例外によって結果を分ける、ということをしない限り自前の例外を定義する必要すらなく、 `fail` で十分だとも考えられます。",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1596250829.000800",
        "text": "Reminder: \nbeginnersチャンネルは、新しい人がスムーズにHaskellに慣れるための質問を歓迎するチャンネルです。\nHaskell-Beginners ML や IRCの#haskell-beginners  や RedditのMonthly Hask Anythingのような位置づけを意図しています。\n\nbeginnersチャンネルでの回答側は、以下の左側のような応答を厳禁とする運用です。\n• それはくだらない質問だ → くだらない質問など無い\n• その質問は以前にもあった → 質問者はそんなこと知らない\n• Google検索せよ → 検索できないから質問している\nbeginnersチャンネルでは、例えば以下のレベルの質問から歓迎します。\n• `:` とは何のことですか。\n• タプルとは何ですか。\n",
        "user": "USLACKBOT",
        "type": "message"
    },
    {
        "ts": "1596257385.001300",
        "text": "コメントありがとうございます。:man-bowing:\n&gt; `ExceptT IO` や `IO (Either ...)` は、 `either throwIO return` などのイディオムで簡単にただの `IO` に変換できるものの、関数の利用者に「この例外は必ず処理しろよ！」という強い義務を与えるものであり、\n`ExceptT IO` にそのような意味があるとこは全く意識していませんでした。`IO` の中で`Either` を使いたいって理由だけで使っていました。`Either` を使いたい理由は、最初のチェックがエラーなら次のチェックは実行したくなかったからです。\n\n&gt; もっと言えば、発生した例外によって結果を分ける、ということをしない限り自前の例外を定義する必要すらなく、 `fail` で十分だとも考えられます。\n`ExceptT IO` には検査例外の意味があるのに、私のコードでは発生した例外を無視して標準出力に出力しているだけであり、規模からしても`ExceptT IO` を使うまでもない、ということでしょうか？",
        "user": "UTK43JS4X",
        "type": "message"
    }
]