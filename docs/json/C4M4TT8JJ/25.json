[
    {
        "ts": "1539048603.000100",
        "text": ":sweat_smile: HaskellDayのハッシュタグが被ってしまったか。。。まぁ、Haskellってもともと人の名前だし、しょうがないか。。。\n<https://twitter.com/USIndianAffairs/status/1041702224534138881>",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1539048814.000100",
        "text": "どうやらプログラミング言語の方の名前の由来となったHaskell Curryさんとも関係がない、別のHaskellさんみたい。\n<https://en.wikipedia.org/wiki/Haskell_Indian_Nations_University>\n&gt; The school was named after Dudley C. Haskell, a member of the U.S. House of Representatives from the 2nd district of Kansas.",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1539054975.000100",
        "text": "ああああああ！知ってる！最初大学ぐるみでHaskellを推進しているのかと勘違いしてました。",
        "user": "U7Z4F723Z",
        "type": "message"
    },
    {
        "ts": "1539080141.000100",
        "text": "「Haskell入門ハンズオン」イベントのハッシュタグが `#Haskell` なのも他の Haskellさんと被りがち。",
        "user": "U57CGDBMG",
        "type": "message"
    },
    {
        "ts": "1539139275.000100",
        "text": "自作ライブラリをhaddockでドキュメント作ってみてみたらテンション上がりました",
        "user": "U7155GPR9",
        "type": "message"
    },
    {
        "ts": "1539143075.000100",
        "text": "あとちゃんとドキュメント書くと文明的になりますね",
        "user": "U7155GPR9",
        "type": "message"
    },
    {
        "ts": "1539162809.000200",
        "text": "<@UDC1LV887> has joined the channel",
        "user": "UDC1LV887",
        "type": "message"
    },
    {
        "ts": "1539179888.000100",
        "text": "Haskell初心者なので、見当違いのことを言っているかもしれませんが、質問させてください :bow:\n\n**※全てGHCi v8.0.2で処理を行っています**\n\n`fmap` と `ap` を用いることで、任意個の引数を持つ関数と任意個のFunctorに対して、以下のような計算が行えるかと思います：\n\n```\n(*) &lt;$&gt; Just 1 &lt;*&gt; Just 2 =&gt; Just 2\n```\n\nここで、TupleもFunctorのインスタンスであることを知り、以下のような計算を考えてみました：\n\n```\n(*) &lt;$&gt; (1, 1) &lt;*&gt; (2, 2) =&gt; (1, 2) となることを期待\n```\n\nしかしながら、上記の式はShowのインスタンスとして解決できないという趣旨のエラーにより、期待する結果が得られませんでした。\n\nそこで、ステップごとに型を確かめてみたところ：\n\n```\n:t ((*) &lt;$&gt;)\n((*) &lt;$&gt;) :: (Num a, Functor f) =&gt; f a -&gt; f (a -&gt; a)\n\n:t ((*) &lt;$&gt; (1,1))\n((*) &lt;$&gt; (1,1)) :: (Num t, Num a) =&gt; (t, a -&gt; a)\n\n:t ((*) &lt;$&gt; (1,1) &lt;*&gt;)\n((*) &lt;$&gt; (1,1) &lt;*&gt;) :: (Num t, Num b, Monoid t) =&gt; (t, b) -&gt; (t, b)\n\n:t ((*) &lt;$&gt; (1,1) &lt;*&gt; (2,2))\n((*) &lt;$&gt; (1,1) &lt;*&gt; (2,2)) :: (Num t, Num b, Monoid t) =&gt; (t, b)\n```\n\nこれより、 `ap` を適用した時点で第一要素にMonoidの型制約が入っており、これがエラーの原因かと考えています。\n\nなぜ `ap` を適用した時点でMonoidの型制約が入るのでしょうか？これは、TupleがApplicativeのインスタンスとして何か特殊化されているためなのでしょうか？\nまたもし上記が正しい場合、特殊化を回避すれば期待する計算結果は得られるのでしょうか？\n\n長文となりましたが、ご教授いただければ幸いです :haskell:",
        "user": "UDC1LV887",
        "type": "message"
    },
    {
        "ts": "1539181912.000100",
        "text": "tにMonoidが入るのは、そのApplicativeインスタンスの制約にMonoidが入るからですね！\n`Monoid t =&gt; Applicative ((,) t)`\n<https://www.stackage.org/haddock/lts-12.12/base-4.11.1.0/Prelude.html#t:Applicative>",
        "user": "U5LV76EJH",
        "type": "message"
    },
    {
        "ts": "1539183884.000100",
        "text": "ありがとうございます！\n\nこちら、最初は変な挙動に思えていましたが、第一要素を無視するのであればそもそもで文脈としてのFunctor(Maybeの様な)を使えば良いのかなと\n第一要素を活かしてApplicativeとしての連鎖を許すなら、第一要素はMonoidとして連結していく方が自然かつ有用ということなんですかね\n\nこのあたり、何か数学的・圏論的な背景もあったりしたら別途知ってみたいです :haskell:",
        "user": "UDC1LV887",
        "type": "message"
    },
    {
        "ts": "1539191111.000100",
        "text": "端的に言うと、ソース読めやおらぁ？！（大汗）　ってことになるわけですが、 `(u, f) &lt;*&gt; (v, x) = (u &lt;&gt; v, f x)` というApplicativeインスタンスの宣言（一部抜粋）がなされてたので、タプルの左側の型の  `&lt;&gt;`  の仕方わかんないんだけど（怒り）　と言われてるのだと思います。",
        "user": "U9XHWQX7Z",
        "type": "message"
    },
    {
        "ts": "1539196512.000100",
        "text": "```(*) &lt;$&gt; (1, 1) &lt;*&gt; (2, 2) =&gt; (1, 2) となることを期待```\nとのことですがこの `(1, 2)` はどういう計算結果ですか。\n2 は 1*2 の結果かなと思うのですが 1 の方は第一要素の最初に出てきた 1？",
        "user": "U57CGDBMG",
        "type": "message"
    },
    {
        "ts": "1539208918.000100",
        "text": "少し補足なのですが，\n&gt; 第一要素を活かしてApplicativeとしての連鎖を許すなら、第一要素はMonoidとして連結していく方が自然かつ有用ということなんですかね\nというのは正しいのですが，\n```\n(*) &lt;$&gt; (1, 1) &lt;*&gt; (2, 2) -- =&gt; (1, 2)\n```\nという動作で実装されていないのはそもそもこういう動作をApplicativeにすることが困難だからです．\n理由は単純でApplicativeクラスのpureを実装できないからです．つまり，以下のような式において?の要素を埋められないからです．\n```\npure 2 :: (Int, Int) -- =&gt; (?, 2)\n```\nデフォルト値として0を入れればいいのではないかという見方もできますが，デフォルト値というのは行いたい演算によって変わってくるので，Int型(や他の全ての型)でデフォルト値を一意に決めることは通常できません．\n\nMonoidのインスタンスであればデフォルト値が決まりますし，apのための演算も提供できるというのがMonoidインスタンスで実装されている主な背景です(これは圏論でのApplicative functorの捉え方とも関連性はあるのですが，あまり安易な解説をしてる文献は知らないですね… 興味があれば， <https://bartoszmilewski.com/2017/02/06/applicative-functors/> とかを読んでみるといいかもしれません)\n\nところで，全ての型に強制的にデフォルト値を足して，演算として最初の要素をただ単に返すMonoidインスタンスを持つデータ型はFirst(<https://www.stackage.org/haddock/lts-12.12/base-4.11.1.0/Data-Monoid.html#t:First>)という名前で提供されていて，これを使えばおそらく最初に期待した動作は得られます．\n```\n(*) &lt;$&gt; (First (Just 1), 1) &lt;*&gt; (First (Just 2), 2) == (First (Just 1), 1 * 2)\n```",
        "user": "U57D08Z9U",
        "type": "message"
    },
    {
        "ts": "1539237399.000100",
        "text": "<@U57D08Z9U> `pure` が実装できないというのはすごく納得です！ありがとうございます :slightly_smiling_face:",
        "user": "UDC1LV887",
        "type": "message"
    },
    {
        "ts": "1539325107.000100",
        "text": "<http://www.tsurucapital.com/en/> Tsuru Capitalはインターン(3ヶ月)の募集を再開しています。選考は難易度低めのコードサンプル(<http://www.tsurucapital.com/en/code-sample.html>)が主体で、正しい結果を出すのはもちろんですがコードの品質、速度なども評価されます。腕に自信のある方はぜひ",
        "user": "U4KUNQF9N",
        "type": "message"
    },
    {
        "ts": "1539354026.000100",
        "text": "「腕に自信のある方は」は余計だったかもしれない。比較的簡単な問題の割に応募数も正答率も低いので狙い目ですよ",
        "user": "U4KUNQF9N",
        "type": "message"
    },
    {
        "ts": "1539380019.000200",
        "text": "<@UDD6T5344> has joined the channel",
        "user": "UDD6T5344",
        "type": "message"
    },
    {
        "ts": "1539460327.000100",
        "text": "`Language.Haskell.TH.Syntax` の `addDependentFile` をStackで使ってたら `package.yaml` の `extra-source-files` に該当ファイルを書いておかないと検知してくれないという罠にかかりました",
        "user": "U7155GPR9",
        "type": "message"
    },
    {
        "ts": "1539651008.000100",
        "text": "GHC のビルドシステムが Hardian になるみたい。",
        "user": "U56MBRKR9",
        "type": "message"
    },
    {
        "ts": "1539651009.000100",
        "text": "<https://github.com/snowleopard/hadrian>",
        "user": "U56MBRKR9",
        "type": "message"
    },
    {
        "ts": "1539652583.000100",
        "text": "すみません。\nリンク先をみてよくわからなかったのですが、これを使う目的・利点はどの辺に書いてありますか？\nまた、GHC以外には使えない・使いにくい何かがあるのでしょうか。",
        "user": "U74KTAG0N",
        "type": "message"
    },
    {
        "ts": "1539652780.000100",
        "text": "Haskell Symposium 2016 paperですね。失礼しました。\n<https://dl.acm.org/authorize?N41275>",
        "user": "U74KTAG0N",
        "type": "message"
    },
    {
        "ts": "1539652933.000100",
        "text": "約２０％の確率で来年の年明けにフィリップ・ワドラー氏が来日する可能性があります。実際にはもっと可能性が低いので小ネタ程度に捉えてください。。！",
        "user": "U7Z4F723Z",
        "type": "message"
    },
    {
        "ts": "1539661883.000100",
        "text": "＞数学的・圏論的な背景\nApplicativeは自己函手の圏でDay convolutionを積とした場合のモノイド対象で、MonoidはSet圏のモノイド対象である事がちょっと関係あったりするかもしれないなあと思いました（小並感）",
        "user": "U570660KX",
        "type": "message"
    },
    {
        "ts": "1539669000.000100",
        "text": "その説はオーソドックスけど、個人的に、monoidal functor として解釈する方がわかりやすいと思う、Coendなどのことを要らなくなる",
        "user": "UACQ9J5D3",
        "type": "message"
    },
    {
        "ts": "1539677370.000100",
        "text": "GHC向けrbenv的なやつかな？stack使いたくなければこれを使え、と。\n<https://github.com/haskell/ghcup>",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1539678620.000100",
        "text": "<@UACQ9J5D3> そのあたりを調べるとあたりがつくんだろうなと考えて、 <http://www.staff.city.ac.uk/~ross/papers/Applicative.pdf> を読んでいるのですが、2-Tuple Applicativeの実装として自然に上述のものが得られる根拠は *4. Monoids are phontom Applicative functors* に記述されているのかなと理解しました\n( `newtype Accy o a = Acc { acc :: o }` に対して、 `a` を無視しない適切な構成を考えると2-Tuple Applicativeの実装になるかなと)",
        "user": "UDC1LV887",
        "type": "message"
    },
    {
        "ts": "1539692070.000100",
        "text": "ちなみに、ghc8.6やmasterブランチでも、hadrianでのビルドが可能です。\n（マシンによってはビルドが速くなります。）\n\n以下もGHC用の関連リンクです。\n<https://ghc.haskell.org/trac/ghc/wiki/Building/Hadrian/QuickStart>",
        "user": "U55V441FS",
        "type": "message"
    },
    {
        "ts": "1539738956.000100",
        "text": "<https://ryota-ka.hatenablog.com/entry/2018/10/17/103000>",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1539774662.000100",
        "text": "僕が想定していたのは，monoidal functorから導き出すものですね． <@UDC1LV887> さんが上げているPDFにある通り，Applicativeは(Strong) monoidal functorと一致します．\n\nmonoidal functor同士の積はmonoidal functorになります．(m, -) ~ Const m * Identityで，\ninstance Monoidal Identity where\n  unit = Identity ()\n  Identity x * Identity y = Identity (x, y)\nと書けますから，後はConst mからmonoidal functorが作れれば自明な(m, -)のmonoidal functorが導出できます．Const m上ではfmapは意味を為さないので，ここから算出されるmonoidal functorはHaskでは唯一で，それが 4. Monoids are phontom Applicative functors に記述されている Accy ですね．\n\nこの(m, -)の実装は一般にはWriter Monadと呼ばれています．",
        "user": "U57D08Z9U",
        "type": "message"
    },
    {
        "ts": "1539775041.000100",
        "text": "<@U57D08Z9U>\nConst m * Identity が 2-Tuple Applicativeになるよねというふわっとした理解がより補強されました、ありがとうございます！(唯一であることも気になっていたので、完全にすっきりしました :haskell: )",
        "user": "UDC1LV887",
        "type": "message"
    },
    {
        "ts": "1539843537.000200",
        "text": "<@UDG3H4X9N> has joined the channel",
        "user": "UDG3H4X9N",
        "type": "message"
    },
    {
        "ts": "1539858512.000100",
        "text": "ちょろっとやってみました：HaskellでDhallをExtensibleのレコードとして読み込めるようにする - Qiita - <https://qiita.com/A_kirisaki/items/a72cb21be08c6dd7cf92>",
        "user": "U7155GPR9",
        "type": "message"
    },
    {
        "ts": "1539874698.000100",
        "text": "自分のやつも少し詳しく考えてみました。\n\n関手(a,)から(b,)への自然変換は `forall x. (a, x) -&gt; (b, x)` ですが、これは関数 `a-&gt;b` と同型です。\nしたがってこの自然変換を射とする圏、すなわちHask^Haskの関手圏の部分圏 (*,) と、関数を射とするHask圏は圏同値になります。\na-&gt;bを上記の自然変換にマップする関数を以下の通り定義しておきます。\n\n```\niso1 :: (a-&gt;b) -&gt; (a, x) -&gt; (b, x)\niso1 f = \\(a, x) -&gt; (f a, x)\n```",
        "user": "U570660KX",
        "type": "message"
    },
    {
        "ts": "1539874737.000100",
        "text": "さらに、Data.Functor.Day (<http://hackage.haskell.org/package/kan-extensions-5.2/docs/Data-Functor-Day.html>) で定義されるDayについて、\n\n```\nDay (a,) (b,) x = forall p q. Day (a, p) (b, q) (p -&gt; q -&gt; x)\n&lt;-&gt; ((a, b) (forall p q. (p, q, p -&gt; q -&gt; x))\n&lt;-&gt; ((a, b), x)\n```\n\nという同型を考えられますが、これは前述の圏同値でHaskの `(a, b)` に対応する対象になります。つまり、圏同値によって(,)はDay convolution(の同型)に対応します。\n`Day (a,) (b,) x` を `((a,b), x)` にマップする関数を以下のように定義しておきます。\n\n```\niso2 :: Day (a,) (b,) x -&gt; ((a, b), x)\niso2 (Day (a, p) (b, q) f) = ((a, b), f p q)\n```",
        "user": "U570660KX",
        "type": "message"
    },
    {
        "ts": "1539874777.000100",
        "text": "以上より圏同値によって、(,)をモノイド積としたHaskのモノイド対象Monoidは、Day convolutionを積とした(*,)のモノイド対象Applicativeと一対一関係になります。\n\n実際、(*,) の `&lt;*&gt;` は `\\x y -&gt; iso1 (uncurry (&lt;&gt;)) . iso2 $ day x y` によって作られます。",
        "user": "U570660KX",
        "type": "message"
    },
    {
        "ts": "1539874946.000100",
        "text": "確かに、Dayという概念を理解するためにEndの概念が必要で(私もあまりちゃんとは理解できてないと思います)、 <@UACQ9J5D3> さんが仰るように直観性に欠けるとは思います。",
        "user": "U570660KX",
        "type": "message"
    },
    {
        "ts": "1539906157.000100",
        "text": "Haskell Community Priorities for GHCについてのsurveyだそうです。\n<https://docs.google.com/forms/d/e/1FAIpQLSdh7sf2MqHoEmjt38r1cxCF-tV76OFCJqU6VabGzlOUKYqo-w/viewform>\nGHC本体に6カ月間コミットしてくれる人がいたとして、何をして欲しいのか、具体的に書いて欲しいとのこと。\nHIWでも似たような議論をしたので、それをさらに広くとる試みのようです。",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1539926071.000100",
        "text": ":point_up: に対応した dhall-haskell の新しいバージョンもリリースされましたね :tada:\n<https://github.com/dhall-lang/dhall-haskell/releases/tag/1.18.0>",
        "user": "U9FAYSN12",
        "type": "message"
    },
    {
        "ts": "1540205000.000100",
        "text": "ByteStringで失敗した話：[HaskellでのQuickCheckとData\\.ByteString\\.Char8の罠 \\- Qiita](<https://qiita.com/A_kirisaki/items/ae8ac60ead2e17a87bad>)",
        "user": "U7155GPR9",
        "type": "message"
    },
    {
        "ts": "1540213801.000100",
        "text": "似た原因のバグを踏んだことがあります... <https://github.com/syucream/hastodon/issues/4> Char8.packはdeprecateした方がいい予感",
        "user": "U570660KX",
        "type": "message"
    },
    {
        "ts": "1540214588.000100",
        "text": "というかChar8使わず `Data.Word8` 使うべきなのかもしれませんね",
        "user": "U7155GPR9",
        "type": "message"
    },
    {
        "ts": "1540250601.000100",
        "text": "`OverloadedStrings` 使ってるときも同じ理由で良くハマるんですよね... :disappointed:\ncassavaみたいな、テキストファイルを扱うけど入力はByteStringなライブラリーがあって、そいつを使ったテストを書く際に入力を日本語が混ざった文字列リテラルで渡すと... :scream:",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1540268705.000100",
        "text": "私もOverloadedStringsでやられました。今更インスタンスを消すわけにはいかないので、encodeUTF8 . Data.Text.packにしてもよいような…",
        "user": "U4KUNQF9N",
        "type": "message"
    },
    {
        "ts": "1540270048.000100",
        "text": ":open_mouth: <https://www.tweag.io/posts/2018-10-04-capability.html> やっと読めたんですけど、これすごいっすね。\nこれで速度に問題がなければ事実上の標準になるのでは。",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1540272546.000100",
        "text": "HList-like indexed transformer?",
        "user": "UACQ9J5D3",
        "type": "message"
    },
    {
        "ts": "1540282051.000100",
        "text": "QuickChekが `ByteString` に `Arbitary` のインスタンスを作っていてくれればこんなことには……",
        "user": "U7155GPR9",
        "type": "message"
    },
    {
        "ts": "1540282239.000100",
        "text": "それは <http://hackage.haskell.org/package/quickcheck-instances> を使え、ということになるのでは。quickcheckとしては依存関係を絞りたいんでしょう。（もちろん `[Word8]` から簡単に作れちゃう、というのもありますし）",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1540283727.000100",
        "text": "アッこんなライブラリが！ありがとうございます",
        "user": "U7155GPR9",
        "type": "message"
    },
    {
        "ts": "1540419420.000200",
        "text": "<@UDMMH9TDH> has joined the channel",
        "user": "UDMMH9TDH",
        "type": "message"
    }
]