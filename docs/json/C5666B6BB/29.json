[
    {
        "ts": "1539238290.000100",
        "text": "Semigroup の &lt;&gt; って、なんで右結合なんですかね。\nAlternative の &lt;|&gt; は、左結合なのに。\na &lt;&gt; (b &lt;&gt; c) = (a &lt;&gt; b) &lt;&gt; c を達成するには、左が勝つようにしなければならず、嬉しくないです。\nコンフィグを Semigroup にした場合、\nconf1 &lt;&gt; conf2 &lt;&gt; conf3\nと書けば conf3 が最優先されるようにしたいです。。。",
        "user": "U56MBRKR9",
        "type": "message"
    },
    {
        "ts": "1539238454.000100",
        "text": "++もinfixrなんで、そのアナロジーかなぁ、と。",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1539239328.000100",
        "text": "あー。",
        "user": "U56MBRKR9",
        "type": "message"
    },
    {
        "ts": "1539242566.000100",
        "text": "`a &lt;&gt; (b &lt;&gt; c) = (a &lt;&gt; b) &lt;&gt; c` associativity law を要求されているので、右結合でも左結合でも `a &lt;&gt; b&lt;&gt; c` の計算結果は変わらないような？ 何か質問の意図を勘違いしているでしょうか。",
        "user": "U4MAYDV9C",
        "type": "message"
    },
    {
        "ts": "1539244610.000100",
        "text": "あー、そうですね！",
        "user": "U56MBRKR9",
        "type": "message"
    },
    {
        "ts": "1539297966.000100",
        "text": "brew install haskell-stack\nがstackをソースからコンパイルしちゃう件って、今でもそうなんでしょうか。\n本来stackはコンパイル済みの実行ファイルからインストールした方が時間もかからないし安全なやり方なんですが、以前見たときはそうなっておらず、わざわざGHCをインストールしてstackのビルドから始めるという面倒な仕様でした。",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1539298067.000100",
        "text": "で、当時報告しようと思って、「その前にDiscourseというのを使ったフォーラムがあるみたいだしそっちでの相談からするか」と思ったらバグにハマってしまったのかログインできず、どこに報告すればいいかもわからなくて詰んだ、ということがあったんですが。。。",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1539298641.000100",
        "text": "homebrew-coreは基本的にソースからビルドする方針でバイナリインストールはCIでビルドしたbottoleのみ、それ以外のバイナリはhomebrew-caskでという方針だったような気がします。方針はどこかに書いてあるかなあ。",
        "user": "U4M9NJ7QE",
        "type": "message"
    },
    {
        "ts": "1539298736.000100",
        "text": "なるほどそういうポリシーなんですね。。。確かに言われてみればどこかで聞いた気がする。。。悩ましいな。。。",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1539300747.000100",
        "text": "昔 cask に登録したんですが、 haskell-stack と重複するということで消されちゃいましたね…\n<https://github.com/Homebrew/homebrew-cask/commit/f3401525970dc2e0f3caf12b25f15ad74466f716#diff-d33387f91fa14758d5d2cd457700fcbe>",
        "user": "U578W9676",
        "type": "message"
    },
    {
        "ts": "1539305535.000100",
        "text": "むー、わざわざ消したと言うことはそれなりの理由があるってことですよね。。。\nなんでバイナリーよりソースコードからのインストールを優先したんだろう。\n「brew installで入れないで」という記事でも書こうかと思ったけどその辺踏まえてからの方が良さそうですな。。。",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1539319023.000100",
        "text": "(昔の事情はよく知りませんが，)最新のだと普通にbottleにstackのバイナリがprebuiltで入ってる気がしますね\n```\ntar tf ~/Library/Caches/Homebrew/downloads/1e4899432ad59163362a51ca3f2df23d87312f999ac5fb08948a8d0cc59e14b3--haskell-stack-1.7.1.high_sierra.bottle.tar.gz\nhaskell-stack/1.7.1/\nhaskell-stack/1.7.1/.brew/\nhaskell-stack/1.7.1/bin/\nhaskell-stack/1.7.1/ChangeLog.md\nhaskell-stack/1.7.1/INSTALL_RECEIPT.json\nhaskell-stack/1.7.1/LICENSE\nhaskell-stack/1.7.1/README.md\nhaskell-stack/1.7.1/bin/stack\nhaskell-stack/1.7.1/.brew/haskell-stack.rb\n```",
        "user": "U57D08Z9U",
        "type": "message"
    },
    {
        "ts": "1539321241.000100",
        "text": "おっ、 <https://github.com/Homebrew/homebrew-core/blob/master/Formula/haskell-stack.rb> を読んだ限り相変わらずビルドしてるのかな、と思ってましたが、違うのか。\n読んだだけじゃわからないもんですね。",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1539321351.000100",
        "text": "bottleのセクションがCIでビルドしたバイナリのハッシュです",
        "user": "U4M9NJ7QE",
        "type": "message"
    },
    {
        "ts": "1539373936.000100",
        "text": "&gt; なんでバイナリーよりソースコードからのインストールを優先したんだろう。\nstack はコマンドラインツールなので、 GUI が中心の cask ではなく brew がふさわしいという判断だったようです。ソースコードからビルドされてしまう (キャッシュされるにせよ) ことは考えられていないように見えます。\n<https://github.com/Homebrew/homebrew-cask/issues/15603#issuecomment-170067179>",
        "user": "U578W9676",
        "type": "message"
    },
    {
        "ts": "1539458331.000200",
        "text": "<@U7ZPASHB9> has joined the channel",
        "user": "U7ZPASHB9",
        "type": "message"
    },
    {
        "ts": "1539486316.000100",
        "text": "HaskellにおいてListの抽象化としてMonoidやSemigroupが導入されたんだと思うと、Listに対して foldr を使うことが多いHaskellで右結合になるのは自然な気がします",
        "user": "U61BA2X0U",
        "type": "message"
    },
    {
        "ts": "1539649521.000100",
        "text": "最後の設定が優先されるようにしたいのなら、 `Data.Monoid` にある `Last` を使ってはどうでしょうか? `Last` は `Semigroup` にもなっています。\n\n<http://hackage.haskell.org/package/base-4.12.0.0/docs/Data-Monoid.html#t:Last>",
        "user": "U4KNU6N48",
        "type": "message"
    },
    {
        "ts": "1539684786.000200",
        "text": "<@UA85G230E> has joined the channel",
        "user": "UA85G230E",
        "type": "message"
    },
    {
        "ts": "1540260050.000200",
        "text": "<@U8DR1FRRS> has joined the channel",
        "user": "U8DR1FRRS",
        "type": "message"
    },
    {
        "ts": "1540292511.000100",
        "text": "osx上でstackを使って`HDBC-postgresql`をビルドすると、`pgtypes.h` (<https://github.com/hdbc/hdbc-postgresql/blob/master/pgtypes.h>)で定義されてる定数が存在しないとのようなエラーが起きて困っています。\n環境により発生したりしなかったりするようで、私自身は再現できず、まだ深く追えてないのですが、この問題に見覚えがある方いませんでしょうか？\n\n```\n  [2 of 2] Compiling StackSetupShim   ( /Users/xxx/.stack/setup-exe-src/setup-shim-mPHDZzAJ.hs, /private/var/folders/hj/07whzwn919z_mltvgj717dy80000gp/T/stack29944/HDBC-pos\nt/x86_64-osx/Cabal-2.2.0.1/setup/StackSetupShim.o )\n    Linking /private/var/folders/hj/07whzwn919z_mltvgj717dy80000gp/T/stack29944/HDBC-postgresql-2.3.2.5/.stack-work/dist/x86_64-osx/Cabal-2.2.0.1/setup/setup ...\n    Configuring HDBC-postgresql-2.3.2.5...\n    Preprocessing library for HDBC-postgresql-2.3.2.5..\n    /private/var/folders/hj/07whzwn919z_mltvgj717dy80000gp/T/stack29944/HDBC-postgresql-2.3.2.5/PTypeConv.hsc:53:16: error: use of undeclared identifier 'PG_TYPE_CHAR'\n\thsc_const (PG_TYPE_CHAR);     \n(省略)\n    fatal error: too many errors emitted, stopping now [-ferror-limit=]\n    20 errors generated.\n    compiling .stack-work/dist/x86_64-osx/Cabal-2.2.0.1/build/Database/HDBC/PostgreSQL/PTypeConv_hsc_make.c failed (exit code 1)\n```",
        "user": "U59TQ3MJ9",
        "type": "message"
    },
    {
        "ts": "1540301141.000100",
        "text": "```\nbrew install postgres\n```\nすると，\n```\n$ brew ls postgresql | grep pgtypes.h\n/usr/local/Cellar/postgresql/10.5/include/pgtypes.h\n```\nというのが入ってきて，これが優先されてincludeされた結果，HDBC-postgresqlのpgtypes.hは読み込まれずそのままエラーになるらしいです",
        "user": "U57D08Z9U",
        "type": "message"
    },
    {
        "ts": "1540348143.000100",
        "text": "<@U57D08Z9U> ありがとうございます！",
        "user": "U59TQ3MJ9",
        "type": "message"
    },
    {
        "ts": "1540611830.000800",
        "text": "GHCの言語拡張のうち、デフォルトで有効になっているものの一覧ってどこにありましたっけ。。。user guideのどこかにあったようななかったような。。。",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1540625483.001100",
        "text": "答えになっているかわからないですが、色々調べた結果です。\n\n<https://www.stackage.org/haddock/lts-12.14/haskell-src-exts-1.20.3/src/Language.Haskell.Exts.Extension.html#ghcDefault>\n\n```\n-- Not exported, just used locally in several places.\nallLangDefault :: [KnownExtension]\nallLangDefault = [MonomorphismRestriction, MonoPatBinds, ImplicitPrelude]\n\nghcDefault :: [Extension]\nghcDefault = map EnableExtension (NondecreasingIndentation:allLangDefault)\n```\n\nghci\n\n```\n*Main&gt; :show language\nbase language is: Haskell2010\nwith the following modifiers:\n  -XNoDatatypeContexts\n  -XNondecreasingIndentation\n```\n\nghc\n\n```\nmodule Main where\n\nimport GHC\nimport GHC.Paths (libdir)\nimport MonadUtils (liftIO)\nimport EnumSet (toList)\n\nmain :: IO ()\nmain =\n  runGhc (Just libdir) $ do\n    flags &lt;- getSessionDynFlags\n    liftIO $ print $ toList $ extensionFlags flags\n\n{- 実行結果\n[ MonomorphismRestriction\n, RelaxedPolyRec\n, ForeignFunctionInterface\n, ImplicitPrelude\n, DoAndIfThenElse\n, EmptyDataDecls\n, PatternGuards\n, NondecreasingIndentation\n, TraditionalRecordSyntax\n]\n-}\n```",
        "user": "U5B3EGEFQ",
        "type": "message"
    },
    {
        "ts": "1540628086.001600",
        "text": "ありがとうございます。\n<https://twitter.com/igrep/status/1056028202722721793> で気になったExtendedDefaultRulesについては載ってなさそうですね。。。 :thinking_face:",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1540628262.001900",
        "text": "その拡張なら、 `ghci` では別途有効になるはずです。\n\n<https://github.com/ghc/ghc/blob/master/ghc/GHCi/UI.hs#L433>\n\n```\ndflags &lt;- getDynFlags\n   let dflags' = (`xopt_set` LangExt.ExtendedDefaultRules)\n               . (`xopt_unset` LangExt.MonomorphismRestriction)\n               $ dflags\n   GHC.setInteractiveDynFlags dflags'\n```",
        "user": "U5B3EGEFQ",
        "type": "message"
    },
    {
        "ts": "1540628350.002500",
        "text": "なるほどGHCi限定かー！どおりでー！",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1540645572.002800",
        "text": "wadoさんがまとめ済みですが、GHCiでの話はここみたいです。\n<https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/ghci.html#type-defaulting-in-ghci>\n\nGHC実行時のフラグ一覧と言語拡張一覧は各々以下ですが、肝心の言語拡張の方は、一覧からはデフォルトの状態はわからないですね〜。\n<https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/flags.html>\n<https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#options-language>\n\n面白そうなのでちょっと見てみました。 GHCのコードだと、たぶん、ここではないかと思います（GHCiは除いて。）\n<https://github.com/ghc/ghc/blob/ghc-8.6.1-release/compiler/main/DynFlags.hs#L2132:L2144>",
        "user": "U55V441FS",
        "type": "message"
    },
    {
        "ts": "1540737664.003300",
        "text": "<@U9XHWQX7Z> has joined the channel",
        "user": "U9XHWQX7Z",
        "type": "message"
    },
    {
        "ts": "1540738212.007400",
        "text": "ここで質問するか、randomチャンネルで質問するか迷ったのですが、 こちらで書かせて頂きますね。 どうして `data T = forall a. Show a =&gt; T a deriving Show` ってのはだめなんでしょうか、無論自分でインスタンスを書けばShowのインスタンスになるのは当然なんですが、 変数a は必ずShowのインスタンスである事が保障されてるので Showのインスタンスは機械的に導けると思うのですが。 例えば、T 型でEq を導きたいとかなら変ってくるとは思いますが。",
        "user": "U9XHWQX7Z",
        "type": "message"
    },
    {
        "ts": "1540761988.007500",
        "text": "Gadtsやexistential typeは、自動導出されたものが正しいかはtype checkしてみないと分かりません(Haskell標準のものは自動導出されるものが必ずtype checkが通ることが保証されています)。なので、構文だけからvalidか判断できる機能とできない機能を分けるため、使えないようにしたのだと思います。\n\nStandaloneDerivingを使うと、自動導出をしたものにtype checkをかけることで、deriving可能にしています。このため、自動導出で生成されたものが型エラーを吐くこともあります。これが結構大きな差異ということなのでは無いですかね?",
        "user": "U57D08Z9U",
        "type": "message"
    },
    {
        "ts": "1541157993.009600",
        "text": "<@UDVPWQ5T8> has joined the channel",
        "user": "UDVPWQ5T8",
        "type": "message"
    },
    {
        "ts": "1541158190.013000",
        "text": "初めまして、当方Slack初経験、プログラミングも初級〜中級者です。とても未熟な質問だとは思いますが、お答え出来る方いらっしゃいましたらお願いします。\n以下Yahoo知恵袋にて質問したものと同文になってます。\n---\nmacでインストールしたのにどこにも表示されないです。\n\nmacbookProを使っています。\n一年前にHakellのVer.7を持っていて、その時は有識者の方にインストールしてもらって、去年の夏に同じ方に最新版のVer.8にアップデートしてもらったはずなんですが、自分でHaskellを起動しようとしてVer.7が残っていてうまく動かなかったため、ターミナルでVer.7を消しました。（この時点で7しか動かず、8は存在していると表示されてるけど居場所はわからない状態でした）\nすると、ターミナルでghciというHaskellを起動するコマンドを打ったら、見つからないと言われたので、リセットしようと思い8も7も消しました。でも環境の再設定はやり方がわからなかったら嫌なので、全リセットはしていないと思います。\nそのあとにネットから再度haskell platformをダウンロードしたのですが、インストールが完了しましたとでても、どこに保存されているのか全くわかりません。Spolightの検索でも見つかりませんでした。\nこのmacについて＞システムレポート＞アプリケーションを開いたらhaskellは載っていなく、インストールの欄をみると、Haskell Platform 8.4.3が載っています。\n解決方法は何かありませんか？\nmacのOSは最新状態になっています。\n---\nお目汚し失礼致しました。",
        "user": "UDVPWQ5T8",
        "type": "message"
    },
    {
        "ts": "1541179400.013100",
        "text": "私もMacはあまり得意じゃないのですが、 Haskell Platform のインストール手順に従ってインストールしたのなら、stack というコマンドが使えるようになってるはずなのですが。 いかがでしょうか？",
        "user": "U9XHWQX7Z",
        "type": "message"
    },
    {
        "ts": "1541215291.015200",
        "text": "即出ならすみません。<https://haskell.jp/blog/>　のCopyrightが昨年度のままになっております。こちらは意図があっての事でしょうか。\nお忙しい中恐れ入りますが、オーナー様、ご返答のほどよろしくお願いいたします。",
        "user": "U8P5W7YP6",
        "type": "message"
    },
    {
        "ts": "1541215426.015400",
        "text": "体裁の問題はありますけど、別に法的な問題があるわけでもないので急いで更新しなくてもいいかな... という感じです。気が向いたら更新します。",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1541215563.015600",
        "text": "承知です。ハスケルに少し興味をもったプログラマーの方が気にしていらしたので少しだけ胸に留めていただけますと幸いです。お忙しい中ご返答ありがとうございました。",
        "user": "U8P5W7YP6",
        "type": "message"
    },
    {
        "ts": "1541229839.017600",
        "text": "本当に初心者でターミナルの使い方がよくわからないのですが、それは、stack Haskell 8.4.3とターミナルで打てば良いということですか？",
        "user": "UDVPWQ5T8",
        "type": "message"
    },
    {
        "ts": "1541229945.017800",
        "text": "ターミナルで `stack` と打てばいいです。",
        "user": "U9XHWQX7Z",
        "type": "message"
    },
    {
        "ts": "1541231679.018000",
        "text": "Haskell Platform って stack 入るっけ？",
        "user": "U56L7EVNY",
        "type": "message"
    },
    {
        "ts": "1541232402.018200",
        "text": "不安になって調べ直してみましたが、\n&gt; Minimal installers provide centrally the GHC compiler and the Cabal and Stack tools for installing packages. Some may install further build tools (i.e. for parsing and lexing) as well.\nと書いてあるので入ってるはずです。",
        "user": "U9XHWQX7Z",
        "type": "message"
    },
    {
        "ts": "1541233723.018400",
        "text": "へぇそうなんだ",
        "user": "U56L7EVNY",
        "type": "message"
    },
    {
        "ts": "1541234308.018600",
        "text": "ちなみに、ぼくは stack を直接インストールして使ってます\n<https://docs.haskellstack.org/en/stable/install_and_upgrade/#macos>",
        "user": "U56L7EVNY",
        "type": "message"
    },
    {
        "ts": "1541234389.018800",
        "text": "私も基本的にはそうです。。。 というかstackを直で使うっていうのが デファクトスタンダードなんじゃないんでしょうか？",
        "user": "U9XHWQX7Z",
        "type": "message"
    },
    {
        "ts": "1541234488.019000",
        "text": "あとはmacだったらHomebrew は入れといた方がいいですよね。。。(個人的には必須って言いたいところですけど)",
        "user": "U9XHWQX7Z",
        "type": "message"
    },
    {
        "ts": "1541244522.021000",
        "text": "まって神ですか？？？？？？？\nちゃんと使えるようになりました:sob::sob::sob::sob::sob::sob::sob::sob::sob:\nありがとうございました！！！！感激感謝です！",
        "user": "UDVPWQ5T8",
        "type": "message"
    },
    {
        "ts": "1541244896.025400",
        "text": "stackとHomebrewは調べましたが、インストールすることでの確実な利点がよくわからないです…\n使用履歴1年になってもまだ使い方が安い型落ちのWindows使うのと大差ないですが、できれば使いこなせるようになりたいです…！\nちなみにこんな感じだったらやっぱりmacの本とか見たほうがいいですかね？",
        "user": "UDVPWQ5T8",
        "type": "message"
    },
    {
        "ts": "1541246171.025600",
        "text": "コピーライト表記の年は公開年を示すという説もあり",
        "user": "U4L0B71L1",
        "type": "message"
    },
    {
        "ts": "1541246419.025800",
        "text": "ふむ、なにか他のプログラミング言語でプログラミングしたことはありますか？",
        "user": "U56L7EVNY",
        "type": "message"
    }
]