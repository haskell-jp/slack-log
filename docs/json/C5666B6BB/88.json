[
    {
        "ts": "1594111362.101500",
        "text": "aDestでMDをMの前に持ってきたらどうでしょうか",
        "user": "U4M9NJ7QE",
        "type": "message"
    },
    {
        "ts": "1594111566.102300",
        "text": "ソートしたくないのですね見落としていました。",
        "user": "U4M9NJ7QE",
        "type": "message"
    },
    {
        "ts": "1594112462.110600",
        "text": "あとは[Parser Dest]で定義しておいてまとめてasum . map (&lt;* (char ‘=‘))するとか、あるいはラベルとParser Destの対のリストにしてsortするとかでしょうか。モバイルからなので見にくくてすみません。",
        "user": "U4M9NJ7QE",
        "type": "message"
    },
    {
        "ts": "1594113267.110900",
        "text": "パーズする対象にものすごく見覚えがあります！　「コンピュータシステムの理論と実装」ですね。",
        "user": "UKYUFC94P",
        "type": "message"
    },
    {
        "ts": "1594115538.111300",
        "text": "なるほど教科書の誘導に乗らずにつくってらっしゃるんですね。",
        "user": "UKYUFC94P",
        "type": "message"
    },
    {
        "ts": "1594115977.111500",
        "text": "ソートするしかなさそうですが、とはいえ実際には教科書120ページの表でAMDから逆順に並べるだけでOKではないでしょうか？",
        "user": "UKYUFC94P",
        "type": "message"
    },
    {
        "ts": "1594116262.111700",
        "text": "もしくは、単にA,M,Dからなる3文字以下の文字列としてパーズしてしまって、それを機械語に変換するときになんとかする、とか。",
        "user": "UKYUFC94P",
        "type": "message"
    },
    {
        "ts": "1594116322.112000",
        "text": "Parser a 上の &lt;|&gt; 演算で合成されたパーザは、左オペランドのパーザがパーズに成功すると、右オペランドのパーザによるパーズを行わない（or パーズしても結果を捨てる)ように定義されているのではないでしょうか。だとすると、前者のようなコードにはならないと思います。古い記事ですが、<http://www.ipsj.or.jp/07editj/promenade/4702.pdf>\np.178 に少し言及している問題がおこっている思います。",
        "user": "U4KU9ABL0",
        "type": "message"
    },
    {
        "ts": "1594116713.112400",
        "text": "個人的には「もしくは」と書いた方法でやっちゃいました。なぜならAMD を並び替えた ADM とかもぜんぶ有効にしたほうが、言語として親切だと思ったからです。",
        "user": "UKYUFC94P",
        "type": "message"
    },
    {
        "ts": "1594118202.112800",
        "text": "<@U4M9NJ7QE>\nありがとうございます `asum` 試してみます\n\n<@UKYUFC94P>\nたしかにソートでできてしまうのですが\nなんというか `&lt;|&gt;` でつなげる順序に依存しない方法でいきたいのです\nAMDについてはこの並びしか許さない方針でいきます\n\n<@U4KU9ABL0>\nそうなんです\nなので各オペランドが `=` まで見るようにしないといけない\nそうすると冗長な記述になるのでどうしよう...というところです",
        "user": "ULTN48U8Y",
        "type": "message"
    },
    {
        "ts": "1594121429.113700",
        "text": "とりあえず\n```aDest = \n        M   &lt;$ \"M\"   &lt;* char '='\n    &lt;|&gt; D   &lt;$ \"D\"   &lt;* char '='\n    &lt;|&gt; MD  &lt;$ \"MD\"  &lt;* char '='```\nは\n```aDest = asum . map (&lt;* char '=') $\n            [ M   &lt;$ \"M\"\n            , D   &lt;$ \"D\"\n            , MD  &lt;$ \"MD\"\n            ]```\nと書けました",
        "user": "ULTN48U8Y",
        "type": "message"
    },
    {
        "ts": "1594164690.114500",
        "text": "さらにヘルパー演算子を入れて、だいぶスッキリしました\nありがとうございました",
        "user": "ULTN48U8Y",
        "type": "message"
    },
    {
        "ts": "1594182324.115400",
        "text": "<@U016QCYJ9SN> has joined the channel",
        "user": "U016QCYJ9SN",
        "type": "message"
    },
    {
        "ts": "1594261873.131500",
        "text": "import をインライン化したいのですが、何か既存のツールとか、使えそうなライブラリをご存知の方いらっしゃいますか？ 例えば\n\n```​-- AtCoderPrelude.hs\n​module AtCoderPrelude (readUVecLn, parseInt, otherfct) where\n​​import Control.Monad.State.Strict (StateT, runStateT)\n​​import qualified Data.ByteString as BS\n​import qualified Data.ByteString.Char8 as BSC\n​​import qualified Data.Vector.Unboxed as VU\n​​import qualified Some.Random.Module as M\n​​\n​​-- | Given a parser, parse a whole input line and give a vector.\n​​readUVecLn\n​​  :: (VU.Unbox a)\n​​  =&gt; Int                          -- ^ Expected maximum length \n​​  -&gt; StateT BS.ByteString Maybe a -- ^ Parser\n​​  -&gt; IO (VU.Vector a)\n​​readUVecLn len parser\n​​  = VU.unfoldrN len (runStateT parser) &lt;$&gt; BS.getLine\n​\n​-- | Skip spaces and control chars, and parse an Int.\n​parseInt :: StateT BS.ByteString Maybe Int\nparse​Int = StateT\n​  $ BSC.readInt . BS.dropWhile (&lt; fromIntegral (fromEnum '!'))\n​\n​otherfct :: A -&gt; Very -&gt; Useful -&gt; Function\n​​otherfct = M.usefulFunction \"SomeGoodString\"\n```\nと\n\n```​-- Main.hs\n​import AtCoderPrelude\n​\n​main :: IO ()\t\n​main = do\n​  n &lt;- readLn\n​  vec &lt;- readUVecLn n parseInt\n​  print vec\n```\nから\n\n```​-- Merged.hs\n​import qualified Control.Monad.State.Strict (StateT, runStateT) as M3a6f5d\n​​import qualified Data.ByteString as M65a7e5\n​import qualified Data.ByteString.Char8 as M47ef44\n​​import qualified Data.Vector.Unboxed as M3266e4\n​​\n​​readUVecLn_M2346ed\n​​  :: (M3266e4.Unbox a)\n​​  =&gt; Int\n​​  -&gt; M3a6f5d.StateT M65a7e5.ByteString Maybe a\n​​  -&gt; IO (M3266e4.Vector a)\n​​readUVecLn_M2346ed len parser\n​​  = M3266e4.unfoldrN len (M3a6f5d.runStateT parser) &lt;$&gt; M65a7e5.getLine\n​\n​parseInt_M2346ed :: M3a6f5d.StateT M65a7e5.ByteString Maybe Int\nparse​Int_M2346ed = M3a6f5d.StateT\n​  $ M47ef44.readInt . M65a7e5.dropWhile (&lt; fromIntegral (fromEnum '!')\n​\n​main :: IO ()\n​main = do\n​  n &lt;- readLn\n​  vec &lt;- readUVecLn_M2346ed n parseInt_M2346ed\n​  print vec\n```\nに類するもの(16進ハッシュは適当です)を作れると嬉しい、ということなのですが。\n",
        "user": "UL1HFJATE",
        "type": "message"
    },
    {
        "ts": "1594263578.131600",
        "text": "ハッシュ無くても良くて単に1つのソースコードにまとめたいと言うだけなら\nAtCoderPreludeからmodule宣言を無くして,\n```{-# LANGUAGE CPP #-}\n\n#include \"AtCoderPrelude.hs\"```\nとして\n`cpphs --noline Main.hs`\nとすれば1つにまとめられそうです.\n\nMain.hsで新しくimport出来無くなったりする問題はありますが…\n\nハッシュ付けるならTemplate Haskellで頑張るしか私には思いつきませんね",
        "user": "U57CUMWQ6",
        "type": "message"
    },
    {
        "ts": "1594267562.131900",
        "text": "makeMistakesToLearnHaskellでも :point_down: みたいな感じでその方法を採用しています。そのせいなのかカバレッジがうまくとれなかったりいろいろ難点はありますが、まぁまぁ便利です。\n<https://github.com/haskell-jp/makeMistakesToLearnHaskell/blob/master/src/imports/external.hs>\n\n早く <https://github.com/ghc-proposals/ghc-proposals/pull/283> か <https://github.com/ghc-proposals/ghc-proposals/pull/295> がacceptされるといいんですが... :disappointed:",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1594371824.132200",
        "text": "<@U017KL7CN72> has joined the channel",
        "user": "U017KL7CN72",
        "type": "message"
    },
    {
        "ts": "1594459062.132500",
        "text": "<@U016XNH11MY> has joined the channel",
        "user": "U016XNH11MY",
        "type": "message"
    },
    {
        "ts": "1594465617.140000",
        "text": "んー…なるほど。AtCoderで何百行あるテンプレートコードを使っていて、手元環境で全体のコードが長いとHIEが走るのが遅くなるんですよね。\n• 手元環境では、自作ライブラリ部分については先に別ファイルでコンパイルした状態で走ってもらう\n• AtCoder自動提出スクリプトを呼んだときに(ライブラリコードのほうはある程度のpreprocessをコンテスト開始前にやっておく前提でもいいから)オートでそれがインライン化される\nなんてことがあると嬉しい、というつもりだったのですが…難しそうですかね。",
        "user": "UL1HFJATE",
        "type": "message"
    },
    {
        "ts": "1594465709.140500",
        "text": "回答ありがとうございます。",
        "user": "UL1HFJATE",
        "type": "message"
    },
    {
        "ts": "1594467547.142800",
        "text": "使用したいモジュールも複数あるんですよね、これが…",
        "user": "UL1HFJATE",
        "type": "message"
    },
    {
        "ts": "1594467677.143100",
        "text": "<@U016Y0XPWD9> has joined the channel",
        "user": "U016Y0XPWD9",
        "type": "message"
    },
    {
        "ts": "1594471467.143400",
        "text": "うーん、なるほど、コンパイル済みであって欲しいと。となると力業でreexportなり衝突するところはrenameするパッケージを書いておいて（で、 `stack.yaml` とかにextra-depsとしてリポジトリーやtarballのURLを書いておき）、\n提出する手前で該当のパッケージのimportを適当なスクリプトでインライン化する、とかですかね...\nと、言う理解であってるかな？ :thinking_face:",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1594476959.143700",
        "text": "importの最後に自作ライブラリのimportを書いて\n提出前にsedとかでimportを置き換えるのが一番現実的…?",
        "user": "U57CUMWQ6",
        "type": "message"
    },
    {
        "ts": "1594535803.144000",
        "text": "<@U016WTKJ2UV> has joined the channel",
        "user": "U016WTKJ2UV",
        "type": "message"
    },
    {
        "ts": "1594552299.147400",
        "text": "はい、そんな感じになると思います。`AtCoderPrelude` だけじゃなくて `Numeric.LinearPrimeSieve` みたいなモジュールもあるので、単純に `sed` だとうまくいかないのが難点ですけどね・・・。",
        "user": "UL1HFJATE",
        "type": "message"
    },
    {
        "ts": "1594552631.155200",
        "text": "まあ、プラグマ、`import`、宣言群という3グループごと流し込む位置を別々にしておけばいいだけのことなので、手作りすればいいだけのことなのですが、 `import ... as` に対応するのが面倒、とか、色々面倒だなあ、と思ったんですよね・・・。",
        "user": "UL1HFJATE",
        "type": "message"
    },
    {
        "ts": "1594991326.162500",
        "text": "ある処理の実行時間を測りたい時、Haskellでよく使われるような書き方とかってありますか？\n\n以下のコードはググって書いたコードで、私の実行環境だと、\"2000\"（プラス数ミリ秒）が出力されますが、この書き方はHaskellで一般的な書き方でしょうか。\n\n```millisSinceEpoch :: UTCTime -&gt; Int \nmillisSinceEpoch =\n    floor . (1e3 *) . nominalDiffTimeToSeconds . utcTimeToPOSIXSeconds\n\nmain :: IO ()                                                                                                                                                                                                                                 \nmain = do\n  start &lt;- millisSinceEpoch &lt;$&gt; getCurrentTime\n  threadDelay $ 2 * 10 ^ 6 \n  end &lt;- millisSinceEpoch &lt;$&gt; getCurrentTime\n  print . show $ (end - start)```\n定番の書き方などがあれば、それに倣った方がよい気がするので、お伺いしたいです。",
        "user": "U012A4ALLSC",
        "type": "message"
    },
    {
        "ts": "1594998464.162600",
        "text": "実行時間を計る場合はNTPなどの影響を減らすためにもgetCurrentTimeよりmonotonicな時計を使うことをおすすめします。clockパッケージのgetTime MonotonicやGHC依存でよいならGHC.Clock.getMonotonicTimeNSecなどがあります。",
        "user": "U4M9NJ7QE",
        "type": "message"
    },
    {
        "ts": "1595036094.163300",
        "text": "念のため。遅延IOによって思わぬコードが計測するコードの外側で実行される可能性があります。\n必要に応じてdeepseqの `rnf` と `evaluate` を組み合わせて使いましょう。\n<http://hackage.haskell.org/package/deepseq-1.4.4.0/docs/Control-DeepSeq.html>\n今回そこまで求めているかわかりませんが、GHCのプロファイリング機能やベンチマーク用のパッケージ（criterionなど）も調べてみるといいかもしれません。",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1595051150.167500",
        "text": "<@U4M9NJ7QE> さん\nありがとうございます！勉強になります！\ngetCurrenttimeはNTPの影響を受けるんですね。\n\n\n<@U4LGTMTMK> さん\n貴重な情報ありがとうございます！\nまだリンク先は読みきれてないのですが、後ほど拝見しますm(__)m",
        "user": "U012A4ALLSC",
        "type": "message"
    },
    {
        "ts": "1595074987.174900",
        "text": "計測対象が綺麗に切り出せるなら igrep さんの言うように <https://hackage.haskell.org/package/criterion|https://hackage.haskell.org/package/criterion> や <https://hackage.haskell.org/package/gauge|https://hackage.haskell.org/package/gauge> を使って計測するのがいいと思います。個人的にはcriterionと <https://hackage.haskell.org/package/criterion-compare|https://hackage.haskell.org/package/criterion-compare> で変更前後の結果を比較するのによく使っています。guauge にも似たような機能があるかも知れません。\n\n実際のワークロードの一部を計測したいならmonotonicな時計を使って自分で差分を計算するのが良いと思います。",
        "user": "U4M9NJ7QE",
        "type": "message"
    },
    {
        "ts": "1595086204.176500",
        "text": "こんな感じのコードがコンパイルエラーになったんだけど、どうしてなんでしょうか？（ DerivingVia 初心者）\n```  newtype Difference = Difference { unDifference :: Int }\n    deriving stock (Eq, Ord, Bounded)\n    deriving newtype (Enum, Show, Read, Num, Real, Integral)\n    deriving (Semigroup, Monoid) via Sum Int```",
        "user": "U5LEE6C1J",
        "type": "message"
    },
    {
        "ts": "1595086280.177000",
        "text": "エラーメッセージはこんな感じです。\n```src\\Numeric\\YHSeq\\V0201.hs:32:15: error:\n    • Couldn't match representation of type 'Int'\n                               with that of 'Sum Int'\n        arising from the coercion of the method '&lt;&gt;'\n          from type 'Sum Int -&gt; Sum Int -&gt; Sum Int'\n            to type 'Difference -&gt; Difference -&gt; Difference'\n      The data constructor 'base-4.12.0.0:Data.Semigroup.Internal.Sum'\n        of newtype 'Sum' is not in scope\n    • When deriving the instance for (Semigroup Difference)\n   |\n32 |     deriving (Semigroup, Monoid) via Sum Int\n   |```",
        "user": "U5LEE6C1J",
        "type": "message"
    },
    {
        "ts": "1595088755.177200",
        "text": "データコンストラクターの import で結果が変わりました。\n\n```{-# LANGUAGE DerivingVia                #-}\n{-# LANGUAGE GeneralizedNewtypeDeriving #-}\nmodule A where\n\n-- import           Data.Monoid (Sum) -- 同様のコンパイルエラー\nimport           Data.Monoid (Sum (Sum)) -- コンパイルできる\n\nnewtype Difference = Difference { unDifference :: Int }\n  deriving stock (Eq, Ord, Bounded)\n  deriving newtype (Enum, Show, Read, Num, Real, Integral)\n  deriving (Semigroup, Monoid) via Sum Int```\n試してから気付きましたが、よく見るとエラーメッセージに\n\n&gt; The data constructor ‘base-4.12.0.0:Data.Semigroup.Internal.Sum’\n&gt;        of newtype ‘Sum’ is not in scope\nって書いてある通りですね。",
        "user": "U578W9676",
        "type": "message"
    },
    {
        "ts": "1595089202.177500",
        "text": "データコンストラクターがないと `Sum Int` の中身が `Int` だと知ることができない、って感じだと思われます。",
        "user": "U578W9676",
        "type": "message"
    },
    {
        "ts": "1595090315.178000",
        "text": "<@U4M9NJ7QE> \nありがとうございます！",
        "user": "U012A4ALLSC",
        "type": "message"
    },
    {
        "ts": "1595094389.182800",
        "text": "ここに質問を書こうと GitHub 上のソースコードへのリンクを調べてたらバグが分かった\nありがとうございます",
        "user": "U4L0B71L1",
        "type": "message"
    },
    {
        "ts": "1595123370.184100",
        "text": "ありがとうございます。エラーメッセージに乗ってるの見落としてましたね……",
        "user": "U5LEE6C1J",
        "type": "message"
    },
    {
        "ts": "1595514860.185000",
        "text": "<@U017LTZ4XBL> has joined the channel",
        "user": "U017LTZ4XBL",
        "type": "message"
    }
]