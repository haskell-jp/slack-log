[
    {
        "ts": "1567938986.050900",
        "text": "確かに、言われてみればなんの区切りもなく匿名関数が始まっているようで、普通の式とどうやって見分けるんだろうという感じがしますね...",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1567939338.051200",
        "text": "たしかに。\n括弧にくるんでるからって安心してましたけどたしかにexprASTも括弧にくるまれてるから安心できなかった",
        "user": "UMKGDJ2RZ",
        "type": "message"
    },
    {
        "ts": "1567943436.051800",
        "text": "なるほど，不思議な動作ですね… 確かに Strict の時のみ stack overflow になりました… ちょっとそれは想定してませんでしたね…",
        "user": "U57D08Z9U",
        "type": "message"
    },
    {
        "ts": "1567945497.052100",
        "text": "あ，いいのか．過去の自分に追いつけてなかった．\nまず， Strict をつけようがつけまいが，\n```\nfoldl (\\ z x -&gt; x : z) [] [1..n]\n```\nは\n```\nlet k = \\ z x -&gt; x : z in (([] `k` 1) ... `k` n)\n```\nみたいなものを生成することになります．でそれぞれの括弧の中身はサンクのままヒープにのって評価されるのを待つことになります．\n\n`evaluate` でそれが WHNF まで評価されることになりますが，まず一番外側の評価\n```\n(… `k` n) =&gt; n : ...\n```\nが実行されることになります． Strict をつけない場合 `...` は評価されませんが， Strict をつける場合 `...` の部分が評価されることになり，さらにその評価のために `k (…) (n - 1)` の評価が走りという感じで，どんどんスタックに退避された値が積み上がっていきスタックオーバーフローになります．\n\nなお，ちゃんと `foldl'` を使った場合，ヒープに積み上がるはずだったサンクが先に消化されながらループが回るため，どちらの場合もスタックオーバーフローは起きません",
        "user": "U57D08Z9U",
        "type": "message"
    },
    {
        "ts": "1567945696.052800",
        "text": "あ，だから Strict 拡張のみで stack overflow する例なんですね．前のコメントは間違いですね．失礼しました",
        "user": "U57D08Z9U",
        "type": "message"
    },
    {
        "ts": "1567955856.055000",
        "text": "初めて template Haskell を書いたのですがビルド時に 10GB 以上消費されるようになってしまいました…… :cry:\nコードレビューしてほしいです\n<https://github.com/kakkun61/tuple/pull/1>",
        "user": "U4L0B71L1",
        "type": "message"
    },
    {
        "ts": "1567962365.055200",
        "text": "Ty*等構文木のコンストラクタを直で使うとバージョンアップで壊れやすいものができあがるので，可能な限りQuasi-quotationを使って書いておいたほうが幸せになると思います．",
        "user": "U5G2BCVBN",
        "type": "message"
    },
    {
        "ts": "1567963552.055400",
        "text": "なるほど！",
        "user": "U4L0B71L1",
        "type": "message"
    },
    {
        "ts": "1567976577.055600",
        "text": "`Q` モナドは， `runQ` を使えば `IO` の元で走らせることができるようになっているので，それでデバッグできます．大体のデータ型は `Show` が実装されているので，単純に表示してみると良いと思います．\n\n```\n&gt;&gt;&gt; runQ (consType 1) :: IO [Dec]\n[TySynInstD Data.Tuple.List.Data.Cons (TySynEqn [VarT x_2,TupleT 0] (AppT (TupleT 1) (VarT x_2)))]\n```\n\nみたいな感じでそれぞれの関数の `Dec` を表示する `Main` モジュールを書いて，プロファイルを取ってみるといいと思いますね．\n\nついでにですが，無限リストの利用は計画的に行った方が良いと思いますね",
        "user": "U57D08Z9U",
        "type": "message"
    },
    {
        "ts": "1567992697.056300",
        "text": "`runQ` したのをわざわざコピーしてました……",
        "user": "U4L0B71L1",
        "type": "message"
    },
    {
        "ts": "1568007206.056600",
        "text": "できないと思う。少なくとも僕が関わっているプロジェクトではstackでインストールしたパッケージをnixの環境では利用できなかった。\n\n\n&gt; OSSでhydra使うにはどうしたらいいでしょうか。自分でたてるしかないですか？\n自分もよくわからないからきいてみます！",
        "user": "U7Z4F723Z",
        "type": "message"
    },
    {
        "ts": "1568079332.061100",
        "text": "お疲れ様です\ntype levelの関数をpropertyテストするにはどうすればいいでしょうか？\ndoctestでkinds!やtype-specで個別の値はテストできるのですが。\nあとはtemplate haskellつかうとか？",
        "user": "U74KTAG0N",
        "type": "message"
    },
    {
        "ts": "1568081220.062100",
        "text": "<https://hackage.haskell.org/package/should-not-typecheck> をうまく使えば... と思ったけど型レベルで生成する必要があるわけですよね... :gununu:\n\n確かにTemplate Haskellを使って頑張って書くしか思いつかないですね... （新しいパッケージを作るチャンス！",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1568120533.062600",
        "text": "改めて試して、\n```\nfoldr (\\x z -&gt; x : z) [] [1 .. size]\n```\nと、 `foldr` にした場合、\n`Strict` をつけた場合最適化を有効にしてもスタックがあふれますね。大体理屈は `foldl` の場合と同じ、ですよね？\n`foldr` に渡した関数 `(\\x z -&gt; x : z)` は実質的に両辺をWHNFまで評価する `:` ということでしょうから。",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1568135882.062900",
        "text": "`foldr` の場合 `foldl` の時と事情が少々異なっていて，まず strict な `foldr` 相当のものは通常リストを reverse するなどしない限り，固定スタックの再帰にできません．それは，リストの後ろの要素から得られる値が分からないと前の要素に対しての計算ができないからです． `foldr` の場合，\n```\nlet k = \\ x z -&gt; x : z in (1 `k` foldr k [] [2 .. n])\n```\nみたいなものが最初にヒープに乗ることになります．そして，このサンクを評価する時 `k` が strict なので， `foldr k [] [2 .. n]` 部分の評価が始まりこの時スタックに値が退避されます．同様の操作がされることによってスタックがどんどん積み上がっていくことになりますが，ヒープの消費量はサンクが nursery にいる間に処理されるため抑えられます．\n\n`foldr'` は `foldl` を使って実装されているため，スタックを消費しない代わりにヒープを消費する実装になっています (これは前回のやつの原理からですね．今回はリストを生成するため，そちらの方にもヒープが割かれて顕著な差がないですが， `\\ x z -&gt; x` とかだと差が出ると思います) なので，基本的に Strict 拡張下では `foldr` 系統は使ってはいけません．代わりに `foldl'` を使ってなんとかするか， lazy にするか， mutable の使用を検討すべきです．\n\n `foldl` の例は一見 strict にしたらいけそうに見えるけど，実は中身が正格消費になっていないので heap を辿りながらスタックオーバーフローしてしまう例になっていて， strict にするだけではダメで中身も正格消費なものを使わないといけないということになります．ここらへんは， (`foldl` は有名な例ですが) 遅延評価での罠を知っていないと判断できないですし，逆に strict 拡張はこういう遅延評価の罠から生まれたもので， BangPattern と strictness flag を書くのがめんどい人用の拡張なので，背景を抑えると strict 拡張がどういう動作をするのかは見えやすいのでは？ というのがあのコメントで言いたいことですね",
        "user": "U57D08Z9U",
        "type": "message"
    },
    {
        "ts": "1568137511.063100",
        "text": "なので基本的には、\n* foldr 系統は strict 下では使ってはいけない\n* foldl 系統は (strict 下でなくても) 正格消費版を使うこと\nみたいな感じですね",
        "user": "U57D08Z9U",
        "type": "message"
    },
    {
        "ts": "1568157804.063500",
        "text": "詳しい解説ありがとうございます！",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1568158296.063800",
        "text": "<@UN9L2JYPR> has joined the channel",
        "user": "UN9L2JYPR",
        "type": "message"
    },
    {
        "ts": "1568171614.064000",
        "text": "こんにちは！OSSでHydraを使うならこれを参考にするといいよっていわれました。\n<https://nixos.org/hydra/manual/#chap-installation>",
        "user": "U7Z4F723Z",
        "type": "message"
    },
    {
        "ts": "1568192880.065800",
        "text": "ありがとうございます。",
        "user": "U74KTAG0N",
        "type": "message"
    },
    {
        "ts": "1568206505.066100",
        "text": "<@UMVKD1482> has joined the channel",
        "user": "UMVKD1482",
        "type": "message"
    },
    {
        "ts": "1568250017.072200",
        "text": "```\ncutsea110@waikiki ~/.ghc/x86_64-linux-8.6.5/package.conf.d (master *)\n$ ghci -V\nThe Glorious Glasgow Haskell Compilation System, version 8.6.5\ncutsea110@waikiki ~/.ghc/x86_64-linux-8.6.5/package.conf.d (master *)\n$ ghc -V\nThe Glorious Glasgow Haskell Compilation System, version 8.6.5\n$ cabal -V\ncabal-install version 3.0.0.0\ncompiled using version 3.0.0.0 of the Cabal library\n```\n\nな環境で,cabal install criterionしたらひととおりinstallされて最後にcriterion-reportも${HOME}/.cabal/bin以下でsymlinkされた様子.\nところが肝心のCriterion関係のモジュールが見当りません.\n\n```\ncutsea110@waikiki ~/.ghc/x86_64-linux-8.6.5/package.conf.d (master *)\n$ ghci\nGHCi, version 8.6.5: <http://www.haskell.org/ghc/>  :? for help\nLoaded GHCi configuration from /home/cutsea110/.ghci\nghci&gt; :m +Criterion.Main\n\n&lt;no location info&gt;: error:\n    Could not find module ‘Criterion.Main’\n    It is not a module in the current program, or in any known package.\nghci&gt;\n```\n\n一応ghc-pkgで探してみましたが...\n\n```\ncutsea110@waikiki ~/.ghc/x86_64-linux-8.6.5/package.conf.d (master *)\n$ ghc-pkg find-module Data.Vector\n/usr/lib/ghc/package.conf.d\n    (no packages)\n/home/cutsea110/.ghc/x86_64-linux-8.6.5/package.conf.d\n    vector-0.12.0.3\ncutsea110@waikiki ~/.ghc/x86_64-linux-8.6.5/package.conf.d (master *)\n$ ghc-pkg find-module Criterion.Main\n/usr/lib/ghc/package.conf.d\n    (no packages)\n/home/cutsea110/.ghc/x86_64-linux-8.6.5/package.conf.d\n    (no packages)\n```\n\nそれとは別に\n\n```\n${HOME}/.cabal/store/ghc-8.6.5/criterion-1.5.6.0-ca84ad97c60c610760a3be5cf2c9aa3cb940af0857a14e85a3e329ed3111cd2b/lib\n```\n\nには\n\n```\n$ ls\n.   Criterion         Criterion.hi            Paths_criterion.hi                                                                                   libHScriterion-1.5.6.0-ca84ad97c60c610760a3be5cf2c9aa3cb940af0857a14e85a3e329ed3111cd2b.a\n..  Criterion.dyn_hi  Paths_criterion.dyn_hi  libHScriterion-1.5.6.0-ca84ad97c60c610760a3be5cf2c9aa3cb940af0857a14e85a3e329ed3111cd2b-ghc8.6.5.so\n```\n\nという具合でモジュールが入っている様子です.\n.cabal側のstoreってのがどうも良く分かってないのですが...\nこれはどうやればCriterion.Mainモジュールを使えるようになるんでしょうか?",
        "user": "U4MMHDSNT",
        "type": "message"
    },
    {
        "ts": "1568250446.072500",
        "text": "あう.自己解決したぽい.\ncabal replから\n\n```\n$ cabal repl\nResolving dependencies...\nBuild profile: -w ghc-8.6.5 -O1\nIn order, the following will be built (use -v for more details):\n - h2p2-0.1.0.0 (exe:h2p2) (first run)\nPreprocessing executable 'h2p2' for h2p2-0.1.0.0..\nGHCi, version 8.6.5: <http://www.haskell.org/ghc/>  :? for help\nLoaded GHCi configuration from /home/cutsea110/.ghci\n[1 of 1] Compiling Main             ( Main.hs, interpreted )\nOk, one module loaded.\nghci&gt; :m +Criterion.Main\nghci&gt; :t defaultMain\ndefaultMain :: [Benchmark] -&gt; IO ()\nghci&gt;\n```\n\nとすればうまくloadできました.",
        "user": "U4MMHDSNT",
        "type": "message"
    },
    {
        "ts": "1568250532.072700",
        "text": "build-dependsに入れてロードできなかったので調べはじめてたのに今はうまくロードできている.謎ですがひとまず解消しました.",
        "user": "U4MMHDSNT",
        "type": "message"
    },
    {
        "ts": "1568250699.072900",
        "text": "確かcabal 3.X ってnew-**がデフォルトになる(new-無しでもnew-**が呼ばれる)って話でしたよね。なので、適切な.cabalのあるディレクトリでcabal replやcabal buildをすれば、最悪インストールされていなくても宜しくやってくれるはず",
        "user": "U570660KX",
        "type": "message"
    },
    {
        "ts": "1568250814.073100",
        "text": "素のghc(i)からでもロードできるようにするには、ライブラリの `cabal  (new-)install` に  `--lib` オプションを付けるんだったと思います",
        "user": "U570660KX",
        "type": "message"
    },
    {
        "ts": "1568270158.073800",
        "text": "<@UELFKSH0V> has joined the channel",
        "user": "UELFKSH0V",
        "type": "message"
    },
    {
        "ts": "1568271504.077200",
        "text": "質問するのが初めてでありますので必要な情報が足りなければすみません。こちらの情報としてGithubのURLを貼っておきますが、ピンポイントで欲しい情報があればそこだけピックアップして貼ります。\n\nSlackBotを作ろうと思い、ネットの記事やSlackAPIのGitHubのページを参照してサンプルコードをとりあえず実行しようと思ったのですが、\n\n```\n    Not in scope: type constructor or class 'SlackHandle'\n   |\n27 | echoBot :: SlackHandle -&gt; IO ()\n   |            ^^^^^^^^^^^\n\n```\nビルド時にこのようなエラーが出てきます。検索しても同じような状況で困っている人がいなそうなので、質問させていただきます。どうか知恵を貸していただけませんでしょうか。\n\n↓GithubのURLです。\n<https://github.com/P0ngCh4ng/OkSlackBot>",
        "user": "UELFKSH0V",
        "type": "message"
    },
    {
        "ts": "1568271701.077400",
        "text": "参考にしたページがあるとありがたいです",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1568271871.077600",
        "text": "<https://qiita.com/kentahama/items/261c9c86d02161680933>\n\n<https://23prime.hatenablog.com/entry/2017/10/13/214619>\n\nこちらのページです〜〜",
        "user": "UELFKSH0V",
        "type": "message"
    },
    {
        "ts": "1568272101.078100",
        "text": "どちらの記事でも `SlackHandle` なる型は使ってないようですね...\n本当にこの記事なんでしょうか？ :thinking_face:\n\nいずれにしても、そのエラーは 「 `SlackHandle` という型が存在していない」というエラーです。\nおそらく参考にした記事の内容が古く、APIが変ってしまっているのが原因と思われます。",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1568272228.078300",
        "text": "あっ、元ネタがわかりました。\n<https://github.com/mpickering/slack-api> のREADMEですか... :cold_sweat:\n確かに `SlackHandle` 使ってる...",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1568272379.078600",
        "text": "実を言うと記事の方は依存関係を参考にしたんですが、記事のコードを丸パクしても全く違うエラーが出てくるのでそちらからのアプローチは諦めて、依存関係はそのままにAPIのGithubのExampleを参考にした形です。",
        "user": "UELFKSH0V",
        "type": "message"
    },
    {
        "ts": "1568272579.078800",
        "text": "ぱっと見Qiitaの記事の方が最新版のAPI <http://hackage.haskell.org/package/slack-api-0.12/docs/Web-Slack.html> に則っていて正しそうに見えるんですが、 <https://qiita.com/kentahama/items/261c9c86d02161680933#comment-d9420910bf8304645efd> なんて指摘されてるな..",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1568272631.079000",
        "text": "GitHub の README は新しすぎるようですね． `SlackHandle` は現状の開発版で新しく入ったもののようです．参考にすべきは，こっちの方かもしれません:\n<https://github.com/mpickering/slack-api/tree/v0.12>",
        "user": "U57D08Z9U",
        "type": "message"
    },
    {
        "ts": "1568272910.079500",
        "text": "なおリリースが 2017 年なので， Slack の現在の API に追いついてないかもしれませんね．最新のものがちゃんと動くかは分からないですが， master のを使ってみるといいかもしれません．少なくとも 0.12 では次のようなエラーが報告されてますね:\n<https://github.com/mpickering/slack-api/issues>",
        "user": "U57D08Z9U",
        "type": "message"
    },
    {
        "ts": "1568273116.080000",
        "text": "そちらのバージョンで試してみます！",
        "user": "UELFKSH0V",
        "type": "message"
    },
    {
        "ts": "1568273221.080200",
        "text": "ついでにこちらの方は一応メンテされてそうですね:\n<https://hackage.haskell.org/package/slack-web>\n\nexample はなさそうですが…",
        "user": "U57D08Z9U",
        "type": "message"
    },
    {
        "ts": "1568273271.080500",
        "text": "使用する場合は `stack.yaml` に\n\n```\nextra-deps:\n- git: <https://github.com/mpickering/slack-api.git>\n  commit: &lt;使用したいコミットのSHA&gt;\n```\n\nと書き加えてください。\n参考: <https://docs.haskellstack.org/en/stable/yaml_configuration/#extra-deps>",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1568273313.080700",
        "text": "slack-webの方はSlack Web API向けのライブラリーです。bot作りには向いてません（我らが <https://github.com/haskell-jp/slack-log> を作るのにはぴったりでしたが）",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1568273597.081200",
        "text": "0.12の一番新しいコミットSHAを登録して今ビルドし直しています。\nコードは0.12のexampleを使いました。",
        "user": "UELFKSH0V",
        "type": "message"
    },
    {
        "ts": "1568273671.081600",
        "text": "```\nuser error (When parsing the record Preferences of type Web.Slack.Types.Preferences.Preferences the key email_misc was not present.)\n```\nこのエラーが出てきました；；\n記事を丸パクしたやつと同じエラーでした。正直これはslackAPI側の権限とかそっち周りな気がするんですが見たことある方いらっしゃいますか？",
        "user": "UELFKSH0V",
        "type": "message"
    },
    {
        "ts": "1568273903.081800",
        "text": "<https://github.com/mpickering/slack-api/commit/5fbc7732272289d5bdde9227b68c9ec362115f27>\nこのコミットで修正されている問題だと思われます。\nmasterの最新版を使わないとダメなのかも知れません... :fearful:",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1568273906.082000",
        "text": "多分これですね．現状の master では治ってるようですが，リリースはないと思うので master のコミットを使うしかないような気がします\n<https://github.com/mpickering/slack-api/pull/99>",
        "user": "U57D08Z9U",
        "type": "message"
    },
    {
        "ts": "1568274030.082400",
        "text": "こっちでビルドし直してみます！",
        "user": "UELFKSH0V",
        "type": "message"
    },
    {
        "ts": "1568274214.082700",
        "text": "```\nuser error (When parsing the record Preferences of type Web.Slack.Types.Preferences.Preferences the key full_text_extracts was not present.)\n```\nこ、今度は違うkeyのエラーが、、\n最新版でこれだと直近のバージョンだとslackbotは作れないのでしょうか,,,",
        "user": "UELFKSH0V",
        "type": "message"
    },
    {
        "ts": "1568274288.082900",
        "text": "要するに最近のSlackの仕様変更に追いついてない、ということなので\n<https://github.com/mpickering/slack-api/pull/99> みたいに直すPull requestを送るしかなさそうですね... :disappointed_relieved:",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1568274298.083200",
        "text": "それも修正が入ってるようです\n<https://github.com/mpickering/slack-api/pull/100>",
        "user": "U57D08Z9U",
        "type": "message"
    },
    {
        "ts": "1568274335.083500",
        "text": "多分使うコミットは <https://github.com/mpickering/slack-api/commit/d084fdbf1ab1a9e705dbd1f43645175fab0d5940> がいいのではないでしょうか？",
        "user": "U57D08Z9U",
        "type": "message"
    },
    {
        "ts": "1568274630.083800",
        "text": "ずっとghciで確認してて、ロードできなくて、cabal replしてみたらうまくいったので、そのあとでemacsからC-cC-lしたら通ったんだけど、もしかしてcabal replしたことで活が入った??",
        "user": "U4MMHDSNT",
        "type": "message"
    }
]