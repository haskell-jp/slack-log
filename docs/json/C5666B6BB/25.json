[
    {
        "ts": "1531901547.000342",
        "text": "行けました！\n```\nderiving instance ToFormKey a =&gt; ToFormKey (Identity a)\n```\n追加したら動くました。ありがとうございます！",
        "user": "U7155GPR9",
        "type": "message"
    },
    {
        "ts": "1531901609.000241",
        "text": "しかし疑問なのですが[Data\\.Csv](<https://hackage.haskell.org/package/cassava-0.5.1.0/docs/Data-Csv.html#t:ToField>)が `Identity` のインスタンスを持たず、 `extensible` のソースでもインスタンスを作っていないように見えるですがどういう仕組みなんでしょう",
        "user": "U7155GPR9",
        "type": "message"
    },
    {
        "ts": "1531916659.000068",
        "text": "みなさんこんにちは。初歩的な質問で恐縮ですが、 モナドを使う関数の書き方について教えて下さい。\n\n自分で高階関数（ hof::a-&gt;(a-&gt;b)-&gt;b )を作ったところ、　引数となる関数に モナドを返す関数　f::a-&gt;m b   を使いたくなりました。\n\nここで、以下のような対応でやってみたのですが、このようなやり方でよいのでしょうか？\n\n(1)  hof をコピペして、  hofM::a-&gt;(a-&gt;m b)-&gt;m b  を作る。\n(2) hofMテストするときは  hofのテストに使った関数を再利用（？）して、Identity モナドでつつんで使う。",
        "user": "U7GSVRQ6S",
        "type": "message"
    },
    {
        "ts": "1531917180.000181",
        "text": "逆に hof を hofM で定義すると、(1)でコピペする必要がなくなってよいのではないかと思います。\n\n一旦 `Identity` にくるんで `runIdentity` で剥がすみたいなことができないでしょうか？",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1531917690.000255",
        "text": "hof x f = runIdentity $ hofM x (return . f)\n\nで行けました。",
        "user": "U7GSVRQ6S",
        "type": "message"
    },
    {
        "ts": "1531923768.000310",
        "text": "`hofM`の実装に依りますが、型だけ見ると `hof` の時点で `f :: a -&gt; m b` を渡せませんか？",
        "user": "U56L7EVNY",
        "type": "message"
    },
    {
        "ts": "1531953959.000061",
        "text": "Data.Csv.Conversionに入っているのがData.Csvにインポートされています。\n<https://github.com/haskell-hvr/cassava/pull/158>",
        "user": "U5LEE6C1J",
        "type": "message"
    },
    {
        "ts": "1531954451.000284",
        "text": "その場合、hofの中で最後にモナドを剥がすことになりますが、mがIOの場合はそれができないのでhofMが必要かなと考えました。",
        "user": "U7GSVRQ6S",
        "type": "message"
    },
    {
        "ts": "1531964671.000174",
        "text": "定義によりますよね\n```\nPrelude&gt; let hof a ab = ab a\nPrelude&gt; :i hof\nhof :: t1 -&gt; (t1 -&gt; t) -&gt; t \nPrelude&gt; let hof' = hof \"hello\" print\nPrelude&gt; hof'\n\"hello\"\nPrelude&gt; :i hof'\nhof' :: IO () \n```",
        "user": "U74KTAG0N",
        "type": "message"
    },
    {
        "ts": "1531964744.000184",
        "text": "なるほど、そういう仕組みだったのですね。ありがとうございます",
        "user": "U7155GPR9",
        "type": "message"
    },
    {
        "ts": "1531968008.000153",
        "text": "まともな実装としては， hof = flip ($) ; hofM = (&gt;&gt;=)  しかないような気がします．．．",
        "user": "U4KU9ABL0",
        "type": "message"
    },
    {
        "ts": "1531977732.000098",
        "text": "どういう関数かかわかないけど、hof をそのまま使ってはダメ？",
        "user": "UACQ9J5D3",
        "type": "message"
    },
    {
        "ts": "1531978053.000095",
        "text": "そして、仮にhofとhofMが挙動が違ったとしても、Applicativeで十分だと思う",
        "user": "UACQ9J5D3",
        "type": "message"
    },
    {
        "ts": "1531991424.000022",
        "text": "みなさんありがとうございます。もともとのhofはこんな感じでした。\n\n```\nhof::Integer-&gt;(Integer-&gt;[String])-&gt;[String]\nhof init f = \n    let result = f init\n    in\n        case length result &gt; 5 of\n            True -&gt; result ++ (hof (init+1) f)\n            False -&gt; result\n```",
        "user": "U7GSVRQ6S",
        "type": "message"
    },
    {
        "ts": "1532012810.000032",
        "text": "<@UA1D0NZK6> has joined the channel",
        "user": "UA1D0NZK6",
        "type": "message"
    },
    {
        "ts": "1532044028.000158",
        "text": "あれ？そうか． hofM の引数 m a じゃないんだ．それなら <@UACQ9J5D3> さんがおっしゃっているとおり hof そのままでいいと思います．",
        "user": "U4KU9ABL0",
        "type": "message"
    },
    {
        "ts": "1532508879.000070",
        "text": "<@UBWDFG17D> has joined the channel",
        "user": "UBWDFG17D",
        "type": "message"
    },
    {
        "ts": "1532656407.000100",
        "text": "どこのバグなのかよくわからないんですが、extensibleを使った :point_down: のコードでなぜか型エラーになってしまいます。\n```\n{-# OPTIONS_GHC -fno-warn-simplifiable-class-constraints #-}\n\n{-# LANGUAGE DataKinds         #-}\n{-# LANGUAGE FlexibleContexts  #-}\n{-# LANGUAGE OverloadedLabels  #-}\n{-# LANGUAGE OverloadedStrings #-}\n\nimport qualified Data.Extensible as E\nimport           Lens.Micro      ((^.))\n\nhoge\n    :: E.Associate \"pageId\" String e\n    =&gt; E.Record e\n    -&gt; IO ()\nhoge e = do\n    let (h : _) = (e ^. #pageId)\n    print (h :: Char)\n```",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1532656434.000166",
        "text": "エラーは次のようなものです。\n\n```\ntest.hs:20:25: error:\n    • Couldn't match type ‘E.Elaborate\n                             \"pageId\" (E.FindAssoc 0 \"pageId\" e)’\n                     with ‘'E.Expecting (n0 'E.:&gt; [Char])’\n        arising from the overloaded label ‘#pageId’\n      The type variable ‘n0’ is ambiguous\n    • In the second argument of ‘(^.)’, namely ‘#pageId’\n      In the expression: (e ^. #pageId)\n      In a pattern binding: (h : _) = (e ^. #pageId)\n    • Relevant bindings include\n        e :: E.Record e (bound at test.hs:19:6)\n        hoge :: E.Record e -&gt; IO () (bound at test.hs:19:1)\n   |\n20 |     let (h : _) = (e ^. #pageId)\n   |                         ^^^^^^^\n```",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1532657781.000095",
        "text": "いちよ，予想として書いておきます(合ってるかは分からないので，もうちょっとextensibleを使ってる人の意見があったらそっちを信用してもらいたいのですが)\nextensibleのキーとなるAssociateクラスやMemberクラスは，closed type familyとambiguousなcontextを使って，実現されています．つまり，今回の場合 `e` のどの位置に “pageId” があるかをtype familyで調べ，その位置をambiguousに型レベルの情報としてキャプチャし，それを用いてMembershipという情報を作ります．",
        "user": "U57D08Z9U",
        "type": "message"
    },
    {
        "ts": "1532657905.000102",
        "text": "しかし，この方法は(Overlappingを使う手法も同じ問題があるのですが)，多相型(多相レコード)と非常に相性が悪いです(なぜなら多相型のままでは型レベルの位置情報を具体的に取り出せないため，GHCの型システム上では一意に決定できないからです)",
        "user": "U57D08Z9U",
        "type": "message"
    },
    {
        "ts": "1532658181.000030",
        "text": "なので，今回の場合Associate制約によってキャプチャされることが保証された位置情報と， `(^. #pageId)` (IsLabelの制約)で必要な位置情報が同じであることがGHCには分からず( `e` が多相であるため，位置情報を一意に決定できないため)，IsLabelの制約の方が位置情報が分からない（ `n0` は位置情報をGHCが一時的にmono化した変数で，この変数はAssociateの情報からキャプチャできるのですが，そのような推論をGHCからできないので怒られている)\nというのが原因だと思います",
        "user": "U57D08Z9U",
        "type": "message"
    },
    {
        "ts": "1532658301.000141",
        "text": "解決策は，明示的に `Membership` 情報をAssociate制約から取ってきて( `association` メソッドを呼び出して)それを明示的に使用するか，Associate制約を使ったユーティリティを使用することだと思います(が，extensibleそんなに使ったことがないので，他に解決策があるかもしれません)",
        "user": "U57D08Z9U",
        "type": "message"
    },
    {
        "ts": "1532659062.000177",
        "text": "ありがとうございます！\n仮説通りの理由かどうかわかりませんが、:point_down: のように、 `e ^. #pageId` の結果を別の変数に束縛すると解決できました\n\n```\nhoge\n    :: E.Associate \"pageId\" String e\n    =&gt; E.Record e\n    -&gt; IO ()\nhoge e = do\n    let s :: String\n        s = e ^. #pageId\n        (h : _) = s\n    print (h :: Char)\n```",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1532659112.000039",
        "text": "ちょっと不思議なのは、 `(e ^. #pageId) :: String` と書いても同じエラーになってしまうんですよねぇ :disappointed:",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1532659756.000127",
        "text": "MonoLocalBindsを有効にするとできましたね．以下が通りました．ちょっとGHCのインスタンス解決の仕方の理解が間違ってたかもしれないです…こういう場合できるんですね…\n\n```\nhoge\n    :: E.Associate \"pageId\" String e\n    =&gt; E.Record e\n    -&gt; IO ()\nhoge e = do\n    let h :: Char\n         (h : _) = e ^. #pageId\n    print h\n```\n\n```\nhoge\n    :: E.Associate \"pageId\" String e\n    =&gt; E.Record e\n    -&gt; IO ()\nhoge e = do\n    let (h : _) = e ^. #pageId :: String\n    print h\n```\n\nMonoLocalBindsがない状態だと，IsLabelが解決できないようですね．",
        "user": "U57D08Z9U",
        "type": "message"
    },
    {
        "ts": "1532751333.000029",
        "text": "いつもお世話になります。並列処理時の設計について質問です。\n\n実行時に決定されるリスト xs と、そのリストの要素を引数とするIOアクション  f::x-&gt;IO()  があり、 mapConcurrently_  で並列化しました。\n\nここで、f が他のリストの要素に影響与えないように縛る(？)にはどうしたら良いでしょうか？  f の中ではxをキーとして複数の外部資源にアクセスしますが、例えば f のどこかで x+1 を使うというようなことを避けたい。これが守られない場合、並列で動かした時、デッドロックや外部資源上のデータの破損などが発生します。\n\nfは規模が大きくなって、複数の開発者が携わる可能性があります。「コードレビュー時に気をつける」という以上に、完璧でなくてもいいのですが、何らかの仕組みを考えたいです。\n\n以下、なけなしのhaskellの知識で考えた対策案ですが、よりhaskellらしい方法もあろうかと思います。よろしくお願いします。\n\n案１）f 内で使われる外部資源にアクセスする関数（例えば g::x-&gt;y-&gt;IO(),   y は更新したい内容）について、予めxを部分適用した g’  を、f に渡して、f内では直接 xに触らないようにする。この場合、fが大きくなると、部分適用した関数をあちこち取り回さないといけないので、ちょっと面倒な感じもします。\n\n案２）Readerモナドにxを入れて、外部資源にアクセスする関数は x をモナド経由で取り出す。Readerモナドは、ネストした関数に適用するときはlocalで上書きできてしまうので、localのないReaderモナドのようなものがあればいいのかもしれませんが、いまのところ探せていません。",
        "user": "U7GSVRQ6S",
        "type": "message"
    },
    {
        "ts": "1532758447.000035",
        "text": "Operationalモナドを使ってみてはどうでしょうか？",
        "user": "U5LEE6C1J",
        "type": "message"
    },
    {
        "ts": "1532945428.000230",
        "text": "疑問の内容がいまひとつ理解できないでいます．\n「f が他のリストの要素に影響与え」てしまう具体的な例はありますか？",
        "user": "U4KU9ABL0",
        "type": "message"
    },
    {
        "ts": "1532945544.000164",
        "text": "恣意的かつ単純な例で示していただけると理解できるかもしれません．",
        "user": "U4KU9ABL0",
        "type": "message"
    },
    {
        "ts": "1532962519.000125",
        "text": "<@U5LEE6C1J> Operationalモナドのチュートリアル読み始めました。プログラム内のIOアクションの抽象化という切り口ですね。これは面白そうです。",
        "user": "U7GSVRQ6S",
        "type": "message"
    },
    {
        "ts": "1532962967.000325",
        "text": "<@U4KU9ABL0> 「他のリストの要素を引数とするIOアクションに影響を与えない」と書くべきでした。\n\n極端な例ですと、\n```\nfx = g (x+1) \"newvalue\"\n```\nみたいなバグが考えられます。",
        "user": "U7GSVRQ6S",
        "type": "message"
    },
    {
        "ts": "1532991016.000187",
        "text": "「他のリストの要素を引数とするIOアクションに影響を与え」る例がやっぱり良くわかりません．\n\n```\nf x = g (x+1) \"newvalue\"\n```\n\ng は具体例としてはどのような定義が考えられますか？",
        "user": "U4KU9ABL0",
        "type": "message"
    },
    {
        "ts": "1532993743.000060",
        "text": "ああ，わかりました．\n```\nf :: Int -&gt; IO ()\nf x = writeFile (show (x+1)) =&lt;&lt; readFile (show x)\n```\nということですね．",
        "user": "U4KU9ABL0",
        "type": "message"
    },
    {
        "ts": "1532994896.000201",
        "text": "はい、そんな感じです。x を取り回しているので、如何様にも変えることができてしまいます。",
        "user": "U7GSVRQ6S",
        "type": "message"
    },
    {
        "ts": "1532995584.000172",
        "text": "与り知らない別プロセスが操作できてしまうファイルなどの外部リソースを操作するプログラムを考える場合，その外部リソースのある時点での状態をそのプログラムの意味に含めようとすること自体に無理がありそうな感じですね．プログラムの型が IO () 型ですし．．．",
        "user": "U4KU9ABL0",
        "type": "message"
    },
    {
        "ts": "1533350098.000028",
        "text": "`ForeignObj#` はいったい何だろう、ググっても、GHCのgitを全部検索しても見つからない <https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/ffi-chap.html#unboxed-types>",
        "user": "UACQ9J5D3",
        "type": "message"
    },
    {
        "ts": "1533391591.000019",
        "text": "多分、古のGHC(GHC 4 とか GHC 5 とかの時代)の FFI で使われていた型かと。",
        "user": "U4MA78F6X",
        "type": "message"
    },
    {
        "ts": "1533435185.000026",
        "text": "<@UC42RRAVC> has joined the channel",
        "user": "UC42RRAVC",
        "type": "message"
    },
    {
        "ts": "1533436366.000046",
        "text": "いくつか質問させてください。\n\n1. このコードで `:: Int` を推論してもらうことはできないのでしょうか？Intを受け取るものしか定義していないのでしてくれても良さそうに感じるのですが…\n<https://repl.it/repls/EnormousStimulatingCalculator>\n\n2. Maybeでラップしたものを返したいのですがどのように定義したら良いのでしょうか？\n<https://repl.it/repls/MassiveAssuredBootstrapping>\n\n3. そもそもこういうことができるクラスは標準で用意されていたりしないのでしょうか？RustのFromトレイトみたいなことがしたいのですが…\n\nよろしくお願い致します。",
        "user": "UC42RRAVC",
        "type": "message"
    },
    {
        "ts": "1533438245.000063",
        "text": "1はなんか言語拡張があったきするな",
        "user": "U56L7EVNY",
        "type": "message"
    },
    {
        "ts": "1533438654.000040",
        "text": "1 はこれ <https://wiki.haskell.org/Functional_dependencies>",
        "user": "U56L7EVNY",
        "type": "message"
    },
    {
        "ts": "1533441248.000016",
        "text": "2 は FlexibleInstance 使えば\n<https://repl.it/repls/CourteousSmartFlashdrives>",
        "user": "U56L7EVNY",
        "type": "message"
    },
    {
        "ts": "1533441499.000002",
        "text": "3 は知らないや、それぞれのはあるけど ToString や FromString みたいな",
        "user": "U56L7EVNY",
        "type": "message"
    },
    {
        "ts": "1533441524.000038",
        "text": "近いのは <https://www.stackage.org/haddock/lts-12.4/base-4.11.1.0/Data-Coerce.html> かな？",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1533441581.000040",
        "text": "あと、１はこんな感じ\n<https://repl.it/repls/MildGrouchyListener>",
        "user": "U56L7EVNY",
        "type": "message"
    },
    {
        "ts": "1533470545.000005",
        "text": "お返事遅れてしまいすみません！\nお二人ともありがとうございます！\nとても勉強になります！",
        "user": "UC42RRAVC",
        "type": "message"
    },
    {
        "ts": "1533531842.000188",
        "text": "<https://haskell-jp.slack.com/archives/C707P67R7/p1533525889000105> こちらの質問に答えるにあたり気になったのですが、\nVS CodeでHIEを起動した場合、HIEのデバッグオプションはどうやって設定するんでしょうか...?\nNeovimの場合languageclientの設定でいけるんですけど...\nさっと <https://github.com/alanz/vscode-hie-server/blob/master/src/extension.ts> のソースを読んでもわからず。",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1533534947.000060",
        "text": "VSCode は使っていないのでわからないですが Custom Wrapper を作るといけそう？ <https://github.com/alanz/vscode-hie-server#custom-wrapper>",
        "user": "U4M598NHM",
        "type": "message"
    },
    {
        "ts": "1533535124.000013",
        "text": "`\"languageServerHaskell.trace.server\": \"verbose\"` でなんか出ます。",
        "user": "U5B3EGEFQ",
        "type": "message"
    }
]