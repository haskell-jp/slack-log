[
    {
        "type": "message",
        "user": "U03DUKNQL3H",
        "ts": "1681055436.507129",
        "text": "こんばんは。学習のために色々な処理をfunctionalなアプローチで書いてみる中で浮かんだ疑問です。\n\n手続き的な書き方は難しくないのに、functionalに書こうと思うと急に難度があがる処理があるように感じ始めています。\n当たり前のことなのですが、これは慣れるしかないのですよね……？\n自分には到底書けないよと思う処理も、関数型言語に慣れ親しむうちに処理が書けるようになっていくのでしょうか？:smiling_face_with_tear:\n\n例えば`List.GroupBy`をあえて自分で実装するとなると、\n手続き型では「forループを回して、毎要素ペアを条件判定し、適宜新しい配列を作成したり既存の配列に追加したり」で済むところが、\n関数型では下記のように(*私にとっては*)難しい書き方になってしまいます。\n```myGroupBy :: (a -&gt; a -&gt; Bool) -&gt; [a] -&gt; [[a]]\nmyGroupBy p xs = foldl step [] xs\n    where step ys x | null ys = (x:[]):ys\n                    | p (head (last ys)) x = (init ys) ++ (((last ys) ++ (x:[])):[])\n                    | otherwise = ys ++ ((x:[]):[])```\n自力では書けなかったので、<https://www.mkamimura.com/2013/02/haskell-datalistgroupby.html> を引用しています(正直、このコードにバグがあるかどうかも私には自信を持っては分かりません)。\nこのような処理を書けるようになるためには、他言語の習得と同様に練習するしかないのですよね……！\n\nすみません、とても当たり前のことしか言っていないのですが、難しさに圧倒されて思わず何かご意見を伺いたくなってしまい……:eyes:"
    },
    {
        "type": "message",
        "user": "U4L0B71L1",
        "ts": "1681061580.168419",
        "text": "canalun さんの直面している大変さすごく分かります\n自分も最初はループを回して書き換えていく発想しかできなかったのですが、今は `foldr` や何やらを使って書くのがしっくりくるようになりました\n誰もがそうなるかどうかは分からないですが、今 Haskell を書いてる多くの人はそういう経緯をたどったのではないかなと想像します\n再現性のある学習かは分かりませんが、自分の場合でいうと、『Scheme 手習い』はリスト操作を再帰的に行うやり方を理解するのにとても助けになりました\nScheme 言語を使った書物ですが学べることは言語に依存しません\ncanalun さんが勉強していく中で見るコードで「これどういう発想して書いてるんだろう」みたいなことをこのチャンネルとかで聞いてみるのもいいかもしれません\n例に挙げた `groupBy` を書くとしたらまず何から考えるのかとかはコードから読みとるのが難しいですからね\n<https://www.ohmsha.co.jp/book/9784274068263/|https://www.ohmsha.co.jp/book/9784274068263/>"
    },
    {
        "type": "message",
        "user": "U4LGTMTMK",
        "ts": "1681081800.152409",
        "text": "総論はさておき、実際 `Data.List` の `groupBy` はもうちょっとシンプルな実装になっているようです。\n\n```groupBy                 :: (a -&gt; a -&gt; Bool) -&gt; [a] -&gt; [[a]]\ngroupBy _  []           =  []\ngroupBy eq (x:xs)       =  (x:ys) : groupBy eq zs\n                           where (ys,zs) = span (eq x) xs```\n問題を分割して、 `span` という、「リストにおける指定した条件にマッチする要素まで含んだリストとそれ以降のリスト」を分割する補助関数を使うのがポイントです。\n`groupBy` はその `span` を繰り返しをグループを一つ作るごとに繰り返し適用することに他なりませんから。\n\n参考:\n• <https://hackage.haskell.org/package/base-4.17.0.0/docs/src/Data.OldList.html#groupBy>\n• <https://hackage.haskell.org/package/base-4.17.0.0/docs/Data-List.html#v:span>"
    },
    {
        "type": "message",
        "user": "U4LGTMTMK",
        "ts": "1681082086.764389",
        "text": "ちなみに不運なことに、挙げていただいた `myGroupBy` はお手本としては好ましくないです。\n現代のHaskellの世界であまり使わない方がいいとされている `foldl` や `head`, `last` を使っている上に、実際の `Data.List` の `groupBy` と比べるに、必要上以上に複雑なようなので..."
    },
    {
        "type": "message",
        "user": "U4LGTMTMK",
        "ts": "1681082618.917829",
        "text": "総論について、できれば具体的に書き換える例を用意したいものですが、時間がないので手短にお話ししますと、よくある `for` ループから純粋な関数に書き換えるコツは、\n• とりあえず再帰で考える（`foldr` や `map` などについては慣れないうちは後でリファクタリングするときに使う。）\n• `for`文などでは、変数を書き換えることでループを進めていたところ、「純粋な関数」の再帰呼び出しでは、*引数の値を変えることでループを進める*、という点を意識する\nの2点です。ちょっと具体例がないと分かりづらいかもですが取り急ぎ"
    },
    {
        "type": "message",
        "user": "U02CE9YGEAU",
        "ts": "1681084053.759639",
        "text": "意図的なのか分かりませんが、不必要な括弧や冗長な記述があります。（例えば`x:[]`は`[x]`と書ける）これがなくなるだけでも見た目はスッキリするのではないでしょうか。\n分かりやすくなるかは分かりませんが、以下のように書き換えてみました。foldrではなく、foldlを使っていますが、リストは前から処理するのが普通なので、計算効率を無視するならfoldlの方がわかりやすいと思います\n\n```myGroupBy :: (a -&gt; a -&gt; Bool) -&gt; [a] -&gt; [[a]]\nmyGroupBy p xs = reverse (foldl step [] xs)\n    where\n        step [] x = [[x]]\n        step ((y : ys) : acc) x\n                | p y x = (y : ys ++ [x]) : acc\n                | otherwise = [x] : (y : ys) : acc```"
    },
    {
        "type": "message",
        "user": "U4LGTMTMK",
        "ts": "1681088144.789819",
        "text": "&gt; リストは前から処理するのが普通なので、計算効率を無視するならfoldlの方がわかりやすいと思います\nよく誤解されるんですが、 `foldr` も前からの処理ですよ"
    },
    {
        "type": "message",
        "user": "U02CE9YGEAU",
        "ts": "1681096751.640469",
        "text": "すみません。誤解を生む書き方でした。\n`step`関数の引数は「現在見ているリストの要素」と「返り値のリスト」ですが、`foldl`の場合は前から計算した「返り値のリスト」を受け取る一方で、`foldr`は後ろから計算した「返り値のリスト」を受け取るため、上のような書き方をしました。"
    },
    {
        "type": "message",
        "user": "U4KU9ABL0",
        "ts": "1681100617.176789",
        "text": "groupBy は foldr より unfoldr のほうがすっきりしますね。\n<https://scrapbox.io/Haskell-Misc/span%E3%81%AE%E5%B0%8F%E3%83%8D%E3%82%BF%EF%BC%88%E4%BD%BF%E3%81%84%E6%96%B9%E7%B7%A8%EF%BC%89>"
    },
    {
        "type": "message",
        "user": "U03DUKNQL3H",
        "ts": "1681173185.885049",
        "text": "みなさんありがとうございます……！！\n\n具体的なコツから、コードが読みやすくなる書き方、foldl/foldrの具体的な使い方まで大変勉強になりました:sob:ご紹介いただいた本も読んでみようと思います！\n\n分からないことたくさんあり、今後もここでご質問させて頂くかと思います。その際もまたよろしくお願いいたします:man-bowing::man-bowing:"
    }
]