[
    {
        "text": "ただ実際使おうにも、 1 文字を表すのに `Char` を使うべきか `Text.singleton` かなど迷う点が多くありそうです。",
        "type": "message",
        "ts": "1667135853.108099",
        "user": "U03H9PH8FRP"
    },
    {
        "text": "Textにおける一文字を表すのであれば、原則 `Char` しか選択肢はないと思います。 `singleton` は型ではなく `Char` を受け取る関数なので。",
        "type": "message",
        "ts": "1667170004.983089",
        "user": "U4LGTMTMK"
    },
    {
        "text": "Text においては `Char` が 1 文字なのですね。 `Char` も自信が無かったですし、 Parsec と組み合わせると、 `Parser Char` と `Parser Text` の選択などで迷います。\nまずは人のコードをざっと (100 ~ 400 行くらい) 読めればと思うのですが :grimacing: (Haskell 難しい)",
        "type": "message",
        "ts": "1667219773.252779",
        "user": "U03H9PH8FRP"
    },
    {
        "text": "えっと、ご所望のparsecを使ったものではないですが、パーサーコンビネーターの初歩的な概念を学ぶために、 <https://www.lambdanote.com/products/haskell> の第13章などの本を読むのがおすすめです。Haskellの世界にはparsec以外にも、もっと新しいmegaparsecなどいろいろなパーサーコンビネーターがありますが、基本的な使い方や考え方は全く変わらないので、サンプルとしては十分だと思います。 `Text` でやろうと `String` でやろうとも基本は変わりませんし。",
        "type": "message",
        "ts": "1667220676.193419",
        "user": "U4LGTMTMK"
    },
    {
        "text": "あと <https://zenn.dev/lotz/articles/91e377138fc4a94f956c> の「正規表現」の節も参考になるかも",
        "type": "message",
        "ts": "1667220802.313959",
        "user": "U4LGTMTMK"
    }
]