[
    {
        "text": "ライブラリを書いており、テスト用にライブラリ内で定義した型の <https://hackage.haskell.org/package/QuickCheck-2.14.2/docs/Test-QuickCheck-Arbitrary.html#t:Arbitrary|QuickCheckの >`Arbitrary`<https://hackage.haskell.org/package/QuickCheck-2.14.2/docs/Test-QuickCheck-Arbitrary.html#t:Arbitrary| インスタンス>を作成しようと考えています。 `Arbitrary` インスタンスをどこに書くのが良いのかで悩んでいます。\nこのライブラリを他のプロジェクトから使った時にも `Arbitrary` インスタンスを使えるようにしたいので、テストコード側ではなくライブラリ側に書きたいと考えています。\nしかし、インスタンスを書く為に必要な <https://hackage.haskell.org/package/quickcheck-instances|quickcheck-instances>ライブラリがそれ自身を他のライブラリの依存パッケージとしないことを推奨しているため、「ライブラリ側に書く」のを躊躇しています。\n別のライブラリとして記述するという方法もあると思いますが、それだと後々整合性を持たせるのを忘れそうなのであまり使いたくないなぁと思っています。\n\nこの場合どこに書くのが適切なのでしょうか",
        "type": "message",
        "ts": "1662787201.859309",
        "user": "ULTBB86UC"
    },
    {
        "text": "よくある方法は、一つのリポジトリーにおける別のパッケージにしてしまう方法だと思います。それなら整合性の問題は解決しやすいかと（まとめてCIでテストしたりできるでしょうし）\nあと、似たようなものですが最近のcabalは一つのパッケージに複数のライブラリーをおけるはず... ですがこちら使用した例を全く聞いた事がないのでちょっと分からないです。",
        "type": "message",
        "ts": "1662808124.605569",
        "user": "U4LGTMTMK"
    },
    {
        "text": "そうか、レポジトリを一つにすることが出来るんですね\nstack だと `packages` あたり、cabalだと `cabal.project` の `packages` あたりでしょうか。\ncabalの複数ライブラリは、調べた所<https://cabal.readthedocs.io/en/3.8/cabal-package.html#sublibs|inner library>というのがあるようですね。これはそのパッケージのみから参照出来るライブラリを定義するようなので、今回の例だと違いそうです。\n今はstackを使っているので、stack.yamlの `packages` で試してみようかと思います!ありがとうございます!",
        "type": "message",
        "ts": "1662884040.987359",
        "user": "ULTBB86UC"
    },
    {
        "text": "&gt; cabalの複数ライブラリは、調べた所<https://cabal.readthedocs.io/en/3.8/cabal-package.html#sublibs|inner library>というのがあるようですね。\nいや、その直後のセクションに書いてある、「*Multiple public libraries*」のことです。",
        "type": "message",
        "ts": "1662884803.249579",
        "user": "U4LGTMTMK"
    },
    {
        "text": "本当だ!見逃しており気が付いていませんでした...orz",
        "type": "message",
        "ts": "1662889403.302879",
        "user": "ULTBB86UC"
    }
]