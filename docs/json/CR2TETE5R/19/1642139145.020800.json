[
    {
        "text": "ghciに`3 = 4`と入力してもエラーになりませんでしたが，`3`を評価させるとやはり`3`になります．`4` になると思ったのですが．GHCIは`3=4`をどのように処理したのでしょうか?",
        "type": "message",
        "ts": "1642139145.020800",
        "user": "U01TZ1XM7MG"
    },
    {
        "text": "何もわかりませんが、 `'a' = 1` はエラーになりますね。関係あるんでしょうか。",
        "type": "message",
        "ts": "1642140312.021100",
        "user": "U021XMH7NDT"
    },
    {
        "text": "",
        "type": "message",
        "ts": "1642140332.021300",
        "user": "U021XMH7NDT"
    },
    {
        "text": "無意味なパターンマッチをしています。\n```f 3 = 4```\nみたいな定義から `f` を取り去ったものだと考えてください。\nこの場合は `f` は `3` を受け取ったら `4` を返す関数と定義されるので\n```&gt; f 3\n4```\nとなります。\n`'a' = 1` の件は私はちょっとぱっと見で分からないですね...",
        "type": "message",
        "ts": "1642143528.021600",
        "user": "U4LGTMTMK"
    },
    {
        "text": "うーむ、`'a' = 1` の件から類推するに実はちょっと違う話なのでは、という気がしてきました。ずっとそう信じていたんですが....。\n言った直後にすみません",
        "type": "message",
        "ts": "1642143725.021800",
        "user": "U4LGTMTMK"
    },
    {
        "text": "例えば `x@3 = 4` と打ち込むと、変数 `x` に何かが束縛されます。この `x` を評価するとパターンマッチ失敗のエラーが出ますが、トップレベルの束縛は非正格なので束縛しただけではエラーになりません。この `x@3 = 4` から `x` への束縛を削除したのが `3 = 4` で、`3` というパターンに `4` をマッチさせている（が非正格なので評価は起こらない）、ということになります。変種として、BangPatternsの下で `let !3 = 4` と打ち込むとパターンマッチが正格に行われてその場でエラーが出ます。",
        "type": "message",
        "ts": "1642143748.022000",
        "user": "UGM9F7XQS"
    },
    {
        "text": "`'a' = 1` が型エラーになるのは `x@'a' = 1` が型エラーになるのと同じです。",
        "type": "message",
        "ts": "1642143774.022200",
        "user": "UGM9F7XQS"
    },
    {
        "text": "なるほど！ありがとうございます！\n```&gt; :set -XBangPatterns\n&gt; let !3 = 4 in 9\n*** Exception: &lt;interactive&gt;:17:5-10: Non-exhaustive patterns in 3\n\n&gt; let !4 = 4 in 9\n9```",
        "type": "message",
        "ts": "1642143906.022700",
        "user": "U4LGTMTMK"
    }
]