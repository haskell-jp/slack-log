[
    {
        "ts": "1563202511.098300",
        "text": "`--write-ghc-environment-files=always`でいけました。ありがとうございました。",
        "user": "U74KTAG0N",
        "type": "message"
    },
    {
        "ts": "1563243381.100300",
        "text": "おそらく無理だろうと思うのですが、何か妙案や回避策があったら教えてください :pray:\n↓みたいな定義の型の値を、IOをなるべく行わないテスト用に作りたくなったとします。\n\n```\ndata Client = Client {\n    clientConnection :: SomeConnectionToExternalService\n  , clientState :: IORef SomeState\n}\n```\n\nこのうち、 `clientState` の変化についてテストするために `Client` の値を作ろうとしたのですが、\n`clientConnection` については、 `IO` を伴わずに生成するのが難しいので、 `error` 関数を使って無効な値で埋めておき、テスト時には一切参照しない、ということにしました。\n\nしかし、この `clientConnection` フィールドが `StrictData` 拡張などを使って `Client` 定義時に正格に評価されるフィールドとして定義されていた場合、必ず `error` 関数が評価され、テストが実行できません。\n\nこういう場合において、 `Client` や `SomeConnectionToExternalService` の *型定義を変えずに* `clientConnection` を `undefined` などの簡単に作れる値で埋めつつテストを実行することはできないでしょうか？\n\nあるいは、そもそもそうならないようにうまいこと設計するのがいいんでしょうけども...\n頭の中でうまく一般化できません。",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1563243605.100800",
        "text": "よくあるオブジェクト指向言語で、 stub や mock を作る問題と本質的に同じ問題だと思うのですが、Haskellでどうそれを達成したものか...",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1563243962.101000",
        "text": "何もしない `SomeConnectionToExternalService` をテスト時にIO伴う形で作ってそれを入れておくというのはどうでしょう。 `SomeConnectionToExternalService` がどんな型なのかわからないとなんとも言えませんが",
        "user": "U7155GPR9",
        "type": "message"
    },
    {
        "ts": "1563244625.101300",
        "text": "確かに。 `SomeConnectionToExternalService` の側を作りやすいように変えるのが一番応用が利いて良さそうですね... 現行の実装だと\n- `withSomeConnectionToExternalService` みたいないわゆるwith系の関数を伴わないと作れない\n- 作成時にバックグラウンドで動くスレッドを作る\n\nといった重い部分があるので避けていたのですが、そっちから変えましょう。",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1563245410.101500",
        "text": "unsafeCoerceで誤魔化すと上手く行ったりしないでしょうか(試してないので分かりませんが)",
        "user": "U560KD6DN",
        "type": "message"
    },
    {
        "ts": "1563246763.101800",
        "text": "(Haskeller型大好きな癖に型検査器を騙すことばっか考えてるな)",
        "user": "U5G2BCVBN",
        "type": "message"
    },
    {
        "ts": "1563247386.102200",
        "text": "<https://twitter.com/cutsea110/status/1150965674392428544>",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1563248351.102900",
        "text": "`data Client h = Client (h Connection) (h (IORef SomeState))` のようなHKDにして、`h` にテスト用の構造に変化させる型をはめるのとかはいかがでしょう？",
        "user": "U4KUNQF9N",
        "type": "message"
    },
    {
        "ts": "1563249173.103400",
        "text": "それもそれでいろいろ応用が利いて面白そうですが、型定義を変える手間を思うとStrictDataやめた方が簡単そうですね…:sweat:\n少なくとも今回に関してはどうせ数個しか作らない値なので、リークしたところで全く問題にならないはずだし…",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1563252296.103700",
        "text": "`unsafeCoerce`, どうせ `error` と大して変わらんやろ、と思いつつ試してみたらイケそうですね... :open_mouth:\n<https://ideone.com/MYims5>\n\n```\n{-# LANGUAGE StrictData #-}\n\nimport Unsafe.Coerce\n\ndata Hoge = Hoge\n  { foo1 :: Foo\n  , foo2 :: Foo\n  }\n\ndata Foo = Foo Int Int deriving Show\n\nmain :: IO ()\nmain = print . foo2 $ Hoge (unsafeCoerce ()) (Foo 1 2)\n```",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1563266166.104100",
        "text": "俺は騙そうとしないぞ.\n<https://haskell-jp.slack.com/archives/C5666B6BB/p1563246763101800?thread_ts=1563243381.100300&amp;cid=C5666B6BB>",
        "user": "U4MMHDSNT",
        "type": "message"
    },
    {
        "ts": "1563266303.104900",
        "text": "結局最後まで騙しきれない.と思うから.",
        "user": "U4MMHDSNT",
        "type": "message"
    },
    {
        "ts": "1563330760.105700",
        "text": "<@UL5BYTF4J> has joined the channel",
        "user": "UL5BYTF4J",
        "type": "message"
    },
    {
        "ts": "1563335176.106100",
        "text": "<@UL5D01VL2> has joined the channel",
        "user": "UL5D01VL2",
        "type": "message"
    },
    {
        "ts": "1563384302.106500",
        "text": "<@ULKNZRRSS> has joined the channel",
        "user": "ULKNZRRSS",
        "type": "message"
    },
    {
        "ts": "1563461781.106800",
        "text": "<@ULJNCPK5W> has joined the channel",
        "user": "ULJNCPK5W",
        "type": "message"
    },
    {
        "ts": "1563522280.119300",
        "text": "GHC.TypeLits を使ってNat上の型レベルかけ算をしようとして，失敗してます．\nなにか勘違いしてますかねぇ．\n```\n% stack exec -- ghci\nGHCi, version 8.6.5: <http://www.haskell.org/ghc/>  :? for help\nLoaded GHCi configuration from /home/nobsun/.ghci\n&gt; :set -XDataKinds\n&gt; :set -XTypeOperator\n&gt; :kind! 2 + 3\n2 + 3 :: Nat\n= 5\n&gt; :kind! 2 * 3\n\n&lt;interactive&gt;:1:1: error:\n    • Expected kind ‘* -&gt; Nat -&gt; k0’, but ‘2’ has kind ‘Nat’\n    • In the type ‘2 * 3’\n```",
        "user": "U4KU9ABL0",
        "type": "message"
    },
    {
        "ts": "1563522660.119500",
        "text": "GHC 8.6で型レベル `*` を演算子として使うには `NoStarIsType` 拡張が必要です。",
        "user": "UGM9F7XQS",
        "type": "message"
    },
    {
        "ts": "1563522909.121000",
        "text": "```\n&gt; :set -XNoStarIsType\n&gt; :kind! 2 * 3\n2 * 3 :: Nat\n= 6\n```\nありがとうございます．",
        "user": "U4KU9ABL0",
        "type": "message"
    },
    {
        "ts": "1563640098.000400",
        "text": "<@ULLRCJRSR> has joined the channel",
        "user": "ULLRCJRSR",
        "type": "message"
    },
    {
        "ts": "1563640622.000600",
        "text": "Data.List.cycleってなんでこんな風に定義されてるんでしょう．\nData.List.cycleってGHC Library(GHC.List)だとこんな感じに定義されてて，Rewrite Ruleも持ってないんですけど，cycle2みたいに定義することもできるんですよね．\ncycle2みたいに定義するかまたはこの形に書き換えるようRewrite Ruleを設定すると，外側のbuildがcycle2を食ったconsumerとfoldr/build fusionできて美味しいはずで，逆にData.List.cycleの定義のままだと再帰が外側に露出しているせいでfoldr/build ruleがfireしないんですよね．なんでこんな定義になってるんでしょう．",
        "user": "UL1HFJATE",
        "type": "message"
    },
    {
        "ts": "1563704803.003300",
        "text": "<@ULM2MJ8G0> has joined the channel",
        "user": "ULM2MJ8G0",
        "type": "message"
    },
    {
        "ts": "1563768311.003700",
        "text": "<@ULP7LFS4F> has joined the channel",
        "user": "ULP7LFS4F",
        "type": "message"
    },
    {
        "ts": "1563799283.005800",
        "text": "cycle2の方がとても美味しい具体例ってどんなものがあるでしょうか．",
        "user": "U4KU9ABL0",
        "type": "message"
    },
    {
        "ts": "1563847346.006100",
        "text": "<@ULN5BGD7W> has joined the channel",
        "user": "ULN5BGD7W",
        "type": "message"
    },
    {
        "ts": "1563853567.007200",
        "text": "例えば， `len :: Int` の時，\n```\nlast $ take len $ cycle [1..100::Int]\n```\nは `cycle=cycle2` ならば二つの `Int#` に関する単純なループに展開されます． `cycle=Data.List.cycle` ならば `take len` が ~`cycle` で出てきたリストを食いつぶす（consして直ちにパターンマッチで消費する）~ ヒープ上に存在し続ける `cycle [1..100]` を舐め回すコードになりますね．",
        "user": "UL1HFJATE",
        "type": "message"
    },
    {
        "ts": "1563857289.007600",
        "text": "実行速度とかアロケーション量に大きな差がでますか？",
        "user": "U4KU9ABL0",
        "type": "message"
    },
    {
        "ts": "1563860504.007800",
        "text": "このコードを\n```\n$ ghc -O2 CycleTest.hs\n$ time ./CycleTest &gt; dev/null\n```\nで実行すると，手元環境(MacBook Pro 2017, 8GB memory)で\n```\nreal\t0m12.438s\nuser\t0m12.189s\nsys\t0m0.021s\n```\nになりますが，myCycleをcycleに書き換えて実行すると\n```\nreal\t0m35.823s\nuser\t0m34.861s\nsys\t0m0.087s\n```\nになります．",
        "user": "UL1HFJATE",
        "type": "message"
    },
    {
        "ts": "1563860905.008400",
        "text": "多分 `rep = 1, cycleLen = 107` では，いくら `takenLen` を大きくしても， `cycle` のresultがGCが必要なほど長くならず，固定されたcircular listをunconsしてるだけになるので，そこまで遅くはなりません．allocation量はそこまで大きくならないだろうと想像します．\nここでは `rep` を大きくすることで，allocationが増大し，GCをtriggerして時間がかかるようになったんだと思います．(memory usage analysisをやってないので，正確なことはわかりませんが）",
        "user": "UL1HFJATE",
        "type": "message"
    },
    {
        "ts": "1563861313.008700",
        "text": "まあ，早くなるかあんまり改善しないだけなんだったら，気づいてないんだろうから普通にpull-req投げちゃおうかな，と思っているんですが，パフォーマンスを悪化させるケースがあったら怖いんですよねえ…．",
        "user": "UL1HFJATE",
        "type": "message"
    },
    {
        "ts": "1563861926.009300",
        "text": "上の返信の内容を訂正しました．cycleによって構成されるリストがfoldr/build fusionによる生成抑制を受けないというのは，ポインタレベルでcircularなリストがヒープに生成されて，使用されている間中保存され続けるということですので、適当なことを言っていました．",
        "user": "UL1HFJATE",
        "type": "message"
    },
    {
        "ts": "1563865653.009900",
        "text": "<@ULBC77RC3> has joined the channel",
        "user": "ULBC77RC3",
        "type": "message"
    },
    {
        "ts": "1563870287.011100",
        "text": "Alternativeのあの演算子 `&lt;|&gt;` ってなんて発音しますか？\n演算子の発音と言えばおなじみの <https://wiki.haskell.org/Pronunciation> には載ってませんでした... :cry:",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1563870405.011200",
        "text": "すみません、ちょっと検索方法を変えてみたら <https://stackoverflow.com/questions/7746894/are-there-pronounceable-names-for-common-haskell-operators> という回答がありました。\n\"or\" か \"alternative\", と。確かに違和感ない。",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1563872139.011600",
        "text": "私はただ「or」って読んでましたが、気になりますね",
        "user": "ULKNZRRSS",
        "type": "message"
    },
    {
        "ts": "1563874770.013300",
        "text": "演算子だけを敢えて口にするときは 「less than pipe greater than」と言ってましたが。。。",
        "user": "U9XHWQX7Z",
        "type": "message"
    },
    {
        "ts": "1563876754.014000",
        "text": "<http://hackage.haskell.org/package/stm-2.5.0.0/docs/Control-Monad-STM.html#v:orElse> stmにはorElseというシノニム関数があるので、or elseと呼んでいます",
        "user": "U4KUNQF9N",
        "type": "message"
    },
    {
        "ts": "1563887264.014900",
        "text": "自分もor elseって呼んでますね…",
        "user": "ULBC77RC3",
        "type": "message"
    },
    {
        "ts": "1563921093.016000",
        "text": "念の為。\n<https://haskell-jp.slack.com/archives/C5666B6BB/p1563870405011200?thread_ts=1563870287.011100&amp;cid=C5666B6BB> のとおりでございます。\n（回答は原則スレッド機能を使いましょう :bow: ）",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1563923108.016200",
        "text": "<https://wiki.haskell.org/Pronunciation> も更新しておきました。",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1563926698.021300",
        "text": "or else は左への偏りを感じますね。そういう実装も少くないですが、リスト上の``&lt;|&gt;``を or else というのは微かにもにょもにょします。:expressionless:",
        "user": "U4KU9ABL0",
        "type": "message"
    },
    {
        "ts": "1563927778.021400",
        "text": "リストも“とりえる可能性の列挙“なのでまぁゴニョゴニョ",
        "user": "U5G2BCVBN",
        "type": "message"
    },
    {
        "ts": "1563950869.028200",
        "text": "またまた、教えて君です。\nGHC.TypeLits の Natカインド上の加法 + が結合的であることを実装(証明)しようとして、どうやるんだっけ？となってます。\n:disappointed_relieved:",
        "user": "U4KU9ABL0",
        "type": "message"
    },
    {
        "ts": "1563951843.028400",
        "text": "AgdaとかCoqでやるような方法は使えません．GHC.TypeLitsのNatはペアノ数になっていない構造不明のマジカル自然数なので帰納法は回せません．自分で普通に定義したNatを使って証明しておいても，そのNatとGHC.TypeLitsのNatとの対応はunsafe云々による決め付け抜きには取れないので，その決め付けを受け入れるかあきらめましょう．",
        "user": "U5G2BCVBN",
        "type": "message"
    },
    {
        "ts": "1563953000.028700",
        "text": "&gt; GHC.TypeLitsのNatはペアノ数になっていない構造不明のマジカル自然数なので帰納法は回せません．\n\nああ．そういうことなんですね．GHC.TypeLits はあきらめることにします．",
        "user": "U4KU9ABL0",
        "type": "message"
    },
    {
        "ts": "1563960514.029200",
        "text": "<@ULS3QFFT9> has joined the channel",
        "user": "ULS3QFFT9",
        "type": "message"
    },
    {
        "ts": "1564029784.029400",
        "text": "ところで「帰納法を回す」っていい表現ですね",
        "user": "U4KUNQF9N",
        "type": "message"
    },
    {
        "ts": "1564029876.029700",
        "text": "あれ？あんまり一般的じゃなかったりします？",
        "user": "U5G2BCVBN",
        "type": "message"
    },
    {
        "ts": "1564031108.030400",
        "text": "何度か見たことはありますが、久しぶりに見て趣深いなと。本題に戻ると、型族を使ってペアノ流の型と相互変換することはできます　\n```\ndata Nat' = Z | S Nat'\ntype family ConvertNat n :: Nat' where\n  ConvertNat 0 = 'Z\n  ConvertNat n = 'S (ConvertNat (n - 1))\n```",
        "user": "U4KUNQF9N",
        "type": "message"
    }
]