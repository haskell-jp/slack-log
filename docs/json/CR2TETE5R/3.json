[
    {
        "ts": "1577004105.017200",
        "text": "初心者ですが\nはじめテキトーに書いてコンパイラが怒ってくれるのを導きに修正していくという書き方ができるので\n楽だし、すごく楽しいですね\nあまりに嬉しいので投稿しました",
        "user": "ULTN48U8Y",
        "type": "message"
    },
    {
        "ts": "1577006526.017900",
        "text": "<@URZCHQGGM> has joined the channel",
        "user": "URZCHQGGM",
        "type": "message"
    },
    {
        "ts": "1577038606.022200",
        "text": "すごいH本にMonoidの章があると思いますが、Monoidは実際のプログラムでどのように役立つのでしょうか？\nすごいH本には色々なデータ構造に対して畳み込みができる！みたいな例を出していましたが、他の例も知りたいです！",
        "user": "URB930G94",
        "type": "message"
    },
    {
        "ts": "1577055940.022700",
        "text": "Monoidの結合則を利用した応用方法として <https://chrispenner.ca/posts/wc> を挙げておきます。\nざっくり言うと、Monoidの重要な法則である結合則は「どんな順番で結合（ `&lt;&gt;` を適用）しても、各演算の左辺と右辺さえ変わっていなければ結果は変わらない」という性質なので、この記事では、単語や行を数える問題をMonoid則を満たすように分割することで、並列処理してバラバラに実行しても、結合するときは正しく計算されるようにした、という例です。",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1577058883.023000",
        "text": "なるほど！とても面白そうな使い方で驚きました\nありがとうございます！！",
        "user": "URB930G94",
        "type": "message"
    },
    {
        "ts": "1577062829.023500",
        "text": "<@UJ8P66TRP> has joined the channel",
        "user": "UJ8P66TRP",
        "type": "message"
    },
    {
        "ts": "1577079597.023700",
        "text": "`Non-exhaustive patterns`はコンパイル通ることがあるのですね、気をつけなければ",
        "user": "ULTN48U8Y",
        "type": "message"
    },
    {
        "ts": "1577079767.023900",
        "text": "GHCに `-Werror` と `-Wall` オプションを付ければエラーにすることができます。\n`stack build --pedantic` はそのショートカットです。",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1577079828.024200",
        "text": "ありがとうございます！",
        "user": "ULTN48U8Y",
        "type": "message"
    },
    {
        "ts": "1577259274.024900",
        "text": "Persistent で `Integer` 型のフィールドを定義する方法はあるのでしょうか\nテーブル定義で Integer とすると、そんなものはないと言われるので仕方なく Int にしています\nPostgreSQLの場合、内部的には bigint で扱ってくれているようです\nところがHaskell側にもってくると、やはり正体は Int です\n20億は超えてくる可能性があるので、Integer で定義したいのですが...",
        "user": "ULTN48U8Y",
        "type": "message"
    },
    {
        "ts": "1577259395.025100",
        "text": "persistentは全く使ったことがないので伺いたいのですが、\n&gt; そんなものはないと言われる\nというのはどんなエラーですか？",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1577259424.025300",
        "text": "はい、少々お待ち下さい",
        "user": "ULTN48U8Y",
        "type": "message"
    },
    {
        "ts": "1577259564.025500",
        "text": "おまたせしました、そのまま貼ります",
        "user": "ULTN48U8Y",
        "type": "message"
    },
    {
        "ts": "1577259622.025900",
        "text": "`Int64` もありそうでないのです",
        "user": "ULTN48U8Y",
        "type": "message"
    },
    {
        "ts": "1577259733.026200",
        "text": "terminal というのはフィールド名です",
        "user": "ULTN48U8Y",
        "type": "message"
    },
    {
        "ts": "1577260093.026400",
        "text": "`No instance for (persistent-2.9.2:Database.Persist.Sql.Class.PersistFieldSql Integer`\nこれはやはり `Integer` を `persistent` パッケージの `Database.Persist.Sql.Class.PersistFieldSql` のインスタンスにするのが正解、ってことなんでしょうね。ただ、一般にRDBがサポートする整数型に多倍長のもの（最大値が無限のもの）はないため、自明なインスタンス定義がない、ということなんでしょう。",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1577260122.026600",
        "text": "でも、 `Int64` については <https://hackage.haskell.org/package/persistent-2.10.4/docs/Database-Persist-Sql.html#t:PersistFieldSql> を読む限り定義されている、ような...？ :thinking_face:",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1577260229.026800",
        "text": "そうなのです\n`Int64` とするとまた別の短いメッセージがあります",
        "user": "ULTN48U8Y",
        "type": "message"
    },
    {
        "ts": "1577260340.027300",
        "text": "`import <http://Data.Int|Data.Int>` が必要ですね。\n`Int64` は `Prelude` にありません...",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1577260589.027700",
        "text": "定義できたみたいです、ありがとうございます",
        "user": "ULTN48U8Y",
        "type": "message"
    },
    {
        "ts": "1577260892.027900",
        "text": "Haskell の型との対応表はこの辺にまとまってるので参考にどうぞ.\n<https://github.com/yesodweb/persistent/blob/master/docs/Persistent-entity-syntax.md#conversion-table-migrations>",
        "user": "U5B3EGEFQ",
        "type": "message"
    },
    {
        "ts": "1577260948.028200",
        "text": "一つ忘れてた。\n`Int` は64bitな環境であればちゃんと64bitになります... まぁ、精度を明示するのはいい作戦だと思いますが。",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1577329229.029100",
        "text": "<@UMKGDJ2RZ> has joined the channel",
        "user": "UMKGDJ2RZ",
        "type": "message"
    },
    {
        "ts": "1577343366.029300",
        "text": "<@UFPRHDT8X> has joined the channel",
        "user": "UFPRHDT8X",
        "type": "message"
    },
    {
        "ts": "1577343366.029300",
        "text": "<@UFPRHDT8X> has joined the channel",
        "user": "UFPRHDT8X",
        "type": "message"
    },
    {
        "ts": "1577442188.029600",
        "text": "<@US388KN85> has joined the channel",
        "user": "US388KN85",
        "type": "message"
    },
    {
        "ts": "1577517404.030300",
        "text": "ghciを起動すると、`Prelude&gt;`  と表示されます。これはどういう意味・意図ですか？   [連載QA]",
        "user": "U55V441FS",
        "type": "message"
    },
    {
        "ts": "1577517510.030400",
        "text": "これは、ghciが現在読み込んでいるモジュール（importしているモジュール）を表しています。\nつまり現在、\"Prelude\"モジュールが、importされていることを示しています。\nghciは起動時に暗黙的・自動的に、\"Prelude\"モジュールをimportするため、それが表示されています。\n\n例えば、次のように、\"Data.List\"モジュールを追加でimportすると、それらがプロンプトに追加されます。\n```Prelude&gt; import Data.List\n\nPrelude Data.List&gt; ```\nなお、次のように、`set prompt`コマンドにより、プロンプトを変更することが出来ます。\n```Prelude&gt; :set prompt \"ghci&gt; \"\n\nghci&gt; ```\nまた、`~/.ghci` ファイルを作り、次のように設定を書いておくと、ghciのデフォルトのプロンプトを変えることが出来ます。\n```:set prompt \"ghci&gt; \"```",
        "user": "U55V441FS",
        "type": "message"
    },
    {
        "ts": "1577533253.030700",
        "text": "<@U56S6UK28> has joined the channel",
        "user": "U56S6UK28",
        "type": "message"
    },
    {
        "ts": "1577547656.031000",
        "text": "<@US439GT0Q> has joined the channel",
        "user": "US439GT0Q",
        "type": "message"
    },
    {
        "ts": "1577702977.031200",
        "text": "<@US4UKMB29> has joined the channel",
        "user": "US4UKMB29",
        "type": "message"
    },
    {
        "ts": "1577847629.031300",
        "text": "Reminder: \nbeginnersチャンネルは、新しい人がスムーズにHaskellに慣れるための質問を歓迎するチャンネルです。\nHaskell-Beginners ML や IRCの#haskell-beginners  や RedditのMonthly Hask Anythingのような位置づけを意図しています。\n\nbeginnersチャンネルでの回答側は、以下の左側のような応答を厳禁とする運用です。\n• それはくだらない質問だ → くだらない質問など無い\n• その質問は以前にもあった → 質問者はそんなこと知らない\n• Google検索せよ → 検索できないから質問している\nbeginnersチャンネルでは、例えば以下のレベルの質問から歓迎します。\n• `:` とは何のことですか。\n• タプルとは何ですか。\n",
        "user": "USLACKBOT",
        "type": "message"
    },
    {
        "ts": "1577968732.031500",
        "text": "<@U5BD9TTA6> has joined the channel",
        "user": "U5BD9TTA6",
        "type": "message"
    },
    {
        "ts": "1578193202.031700",
        "text": "<@URZC2G59P> has joined the channel",
        "user": "URZC2G59P",
        "type": "message"
    },
    {
        "ts": "1578235426.031900",
        "text": "<@URZHY2K97> has joined the channel",
        "user": "URZHY2K97",
        "type": "message"
    },
    {
        "ts": "1578282693.032100",
        "text": "<@U7YMV774J> has joined the channel",
        "user": "U7YMV774J",
        "type": "message"
    },
    {
        "ts": "1578493466.000200",
        "text": "<@USFQ6M2PR> has joined the channel",
        "user": "USFQ6M2PR",
        "type": "message"
    },
    {
        "ts": "1578557611.000400",
        "text": "<@USHD32BM4> has joined the channel",
        "user": "USHD32BM4",
        "type": "message"
    },
    {
        "ts": "1578655051.000600",
        "text": "<@USH4Z5NUD> has joined the channel",
        "user": "USH4Z5NUD",
        "type": "message"
    },
    {
        "ts": "1578655563.003500",
        "text": "stack を使い始めたのですが、いつの間にか ${HOME}/.stack ディレクトリ以下にいろんなバージョンの ghc　がインストールされて、とんでもないサイズになっていました。特にこだわりはないので、最新の ghc だけを利用するようにしたいのですが、どうしたらよいでしょうか？",
        "user": "USH4Z5NUD",
        "type": "message"
    },
    {
        "ts": "1578656264.003700",
        "text": "「絶対に古いGHCをインストールしたくない！」というのはstackの設計思想上難しいです。\nstackは、パッケージのバージョンとGHCのバージョンを組み合わせて「resolver」としてまとめて固定することで確実にビルドすることを保証する、というソフトウェアなので。\n\n単純にもう使わないであろうGHCを消したい、という場合は、単純に対象のGHCがインストールされているディレクトリーを探して削除しましょう。\n\n手元の環境はWindowsなのでMacやLinuxの場合は自信がないのですが、\n`~/.stack` 以下のどこかに `ghc-8.6.5` などといったディレクトリーがあるはずです。\n\nただし、そうして削除した後でも、もう一度対象のGHCに依存したパッケージのディレクトリーで `stack build` を実行すると、再度インストールすることになってしまうので「このバージョンのGHCに依存するパッケージはもうビルドしない！」と確信が持てているときだけ削除してください。",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1578657244.003900",
        "text": "ご回答有り難うございます！該当ディレクトリを見つけて古いバージョンのものを削除しました。が、stack run するとまた古いバージョンのものをダウンロードしにいってしまいます。。。通信費も馬鹿になりません。おそらく、プロジェクトの設定ファイルに ghc のバージョンなどが記載されていると思うのですが、適切な設定の仕方がわかりません。。。教えていただけると幸いです。",
        "user": "USH4Z5NUD",
        "type": "message"
    },
    {
        "ts": "1578657484.004100",
        "text": "特に `stack.yaml` ファイルがあるディレクトリーではない、ってことですよね？\nであれば、 `~/.stack/global-project/stack.yaml` に、そのresolverの情報があります。\n`resolver: lts-XX.X` などと書かれている行を、\n`resolver: lts-14.20` と、最新のLTS Haskellのresolverに書き換えてください。\nなお、最新のLTS Haskellは <https://www.stackage.org/> から確認できます。",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1578657631.004300",
        "text": "stack で作ったプロジェクトに stack.yaml があり、resolver ghc-x.x.x とバージョンの指定があるのは発見したのですが、実際にダウンロードされるバージョンが違うので、？？？となっているところです。グローバルな設定の場所を教えていただいたので、確認してみます。",
        "user": "USH4Z5NUD",
        "type": "message"
    },
    {
        "ts": "1578658369.004500",
        "text": "解決しました！\nグローバルな設定は最新になっていました。その状態で stack new でプロジェクトを作ったら ghc-8.6.5 （つまり最新版）でビルドできました。しかし、以前作ったプロジェクトでビルドすると、古い ghc をダウンロードしようとします。\n私のミスは、stack.yaml で ghc のバージョンを見ていたのですが\nそもそもこの行はこめんとになっていました。有効な行には lts のバージョンが resolver 指定されていました。古いバージョンで。（笑い　なので、このバージョンを最新の lts-14.20 に指定したところ、最新版でビルドできました。\n\nありがとうございました！",
        "user": "USH4Z5NUD",
        "type": "message"
    },
    {
        "ts": "1578665663.005100",
        "text": "<@USKGMKYJJ> has joined the channel",
        "user": "USKGMKYJJ",
        "type": "message"
    }
]