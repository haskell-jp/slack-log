[
    {
        "ts": "1581045679.081100",
        "text": "そうですね。正確には、 `[e| |]` のなかで束縛されてない変数が自動で `unboundVarE $ mkName \"e\"` されるところが、です。",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1581047019.081300",
        "text": "うーんと，検討外れの答えをしていたらすいません．QuasiQuote の中の式は，\n1. パース時そのまま一緒に Haskell の式として解析され Ast になります．\n2. で，そのままリネームされます．\n3. その時に，値の変数は，スコープ内にない変数は unboundVarE 相当に，スコープ内に変数がある場合はそのままその変数に解決され varE 相当で解決されます．\nQuasiQuote はあまりドキュメントがないですが，基本的に変数の解決の挙動は， ~`Language.Haskell.TH.lookupValueName` に合わせてありますね~ 通常のHaskell 式としてのスコープ解決に合わせてあるが正解ですね．なので， `lookupValueName` とは異なる挙動になるのですね",
        "user": "U57D08Z9U",
        "type": "message"
    },
    {
        "ts": "1581048785.082000",
        "text": "訂正はどっちかというと lookupValueName の挙動を僕が誤解してたからなんですが、 QuasiQuote の挙動の方は個人的には割と自然な挙動だと思っていて、quote を書いたところで解決できる変数が解決されず、splice 時まで遅延されるのはむしろ特殊な挙動な気がします",
        "user": "U57D08Z9U",
        "type": "message"
    },
    {
        "ts": "1581048950.082200",
        "text": "&gt;  quote を書いたところで解決できる変数が解決されず、splice 時まで遅延されるのはむしろ特殊な挙動\nん？それって `[e| |]` の挙動では？",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1581049440.082400",
        "text": "~話をドキュメントの話に戻しますが、これが件の挙動についての記述かなぁ。~\n~<https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#extension-TemplateHaskellQuotes>~\n&gt; ~Local names, which are not in scope at splice locations, are actually evaluated when the quotation is processed.~\n~なんか \"splice\" と \"quotation\" という用語の使い方が違う気がしますが...~\nすみません、やっぱ違うっぽいですね...",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1581049685.082800",
        "text": "splice と言うのは TH 式を実際に Haskell の式に展開するフェーズのことで、quote を TH 式に展開するフェーズとは異なることに注意です",
        "user": "U57D08Z9U",
        "type": "message"
    },
    {
        "ts": "1581049840.083000",
        "text": "thE = [e|v|]\nf v = $(thE)\nにおいて、thE の値を計算するのが quotation processing / f の式を計算するのが splice です",
        "user": "U57D08Z9U",
        "type": "message"
    },
    {
        "ts": "1581049921.083200",
        "text": "lookupValueName は splice 時に与えられた名前を解決し、quote 中の変数は quote processing 時に名前を解決します",
        "user": "U57D08Z9U",
        "type": "message"
    },
    {
        "ts": "1581050004.083400",
        "text": "あっ、もしかしてquoteの中の束縛されてない変数の話じゃなくてquoteの中で見える変数の話、ということですか？\nそれなら納得です。",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1581051934.083700",
        "text": "ここまでの話は，`v` が見えない状況で `[e|v|]` が `unboundVarE $ mkName \"v\"` 相当になるのは何故かという説明のつもりでしたが，元の質問は\n```&gt;&gt;&gt; :set -XTemplateHaskell\n&gt;&gt;&gt; import <http://Language.Haskell.TH|Language.Haskell.TH>\n&gt;&gt;&gt; let e = () in $(unboundVarE $ mkName \"e\")\n()```\nの挙動がなぜこうなってるのか単純に分からないということですか？\n&gt; 正確には、 [e| |] のなかで束縛されてない変数が自動で unboundVarE $ mkName “e” されるところが、です。\nの文面がどういうことを言いたいのかいまいち分かってないです",
        "user": "U57D08Z9U",
        "type": "message"
    },
    {
        "ts": "1581053139.083900",
        "text": "ここまでの話は、splice においてTH 式の内容を Haskell の式に設置させる時にどう名前解決されるかの話はしていなくて、lookupValueName の話も含め TH 式の Name がどう解決されるかの話をしています",
        "user": "U57D08Z9U",
        "type": "message"
    },
    {
        "ts": "1581054673.084100",
        "text": "&gt; ここまでの話は，`v` が見えない状況で `[e|v|]` が `unboundVarE $ mkName \"v\"` 相当になるのは何故かという説明のつもりでしたが\nはい、その認識で合っています。\n\nそしてようやく気づきましたが\n&gt; lookupValueName は splice 時に与えられた名前を解決し、quote 中の変数は quote processing 時に名前を解決します\nどうやらここがわかっていないようです。\n念のため確認ですがここでいう「quote 中の変数」とは`[e|v|]` における `v` ですよね？\nquote processingが（`v`が `[e|v|]` の外には定義されてない状態で） `[e|v|]` を`unboundVarE $ mkName \"v\"` に変換するという意味ならば、`v`は定義されてないのですし、「quote processing 時に名前を解決」できず、結局spliceするときに解決することになるのでは？",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1581058743.084300",
        "text": "quote processing での名前解決と言ってるのは，正確には変数が quote processing 時に解決できるならその名前 n で varE n に，それ以外の時は unboundVarE n にするということを言っています．で， unboundVarE n の splice 時の解決方法に，quote で書かれた変数かということは関係ありません．\nunboundVarE n は，unresolved identifier を表すということになっていますが，正確には identifier expected to be resolved というニュアンスが正しく， splice 時のリネーム時に通常のリネームと同じように (元々の Haskell プログラムも最初変数部分は全て unboundVarE で構成され，リネーム時に varE に解決されます) 解決されるため，\n```&gt;&gt;&gt; let e = () in $(unboundVarE $ mkName \"e\")\n()```\nという挙動になります",
        "user": "U57D08Z9U",
        "type": "message"
    },
    {
        "ts": "1581141363.084800",
        "text": "<@UTT86DWLE> has joined the channel",
        "user": "UTT86DWLE",
        "type": "message"
    },
    {
        "ts": "1581399821.085100",
        "text": "<@UTW2WMSMD> has joined the channel",
        "user": "UTW2WMSMD",
        "type": "message"
    },
    {
        "ts": "1581659634.085400",
        "text": "<@UU21TJHHV> has joined the channel",
        "user": "UU21TJHHV",
        "type": "message"
    },
    {
        "ts": "1581685762.085700",
        "text": "<@UU0KWNXRN> has joined the channel",
        "user": "UU0KWNXRN",
        "type": "message"
    },
    {
        "ts": "1581742658.086000",
        "text": "<@UU1R63GSU> has joined the channel",
        "user": "UU1R63GSU",
        "type": "message"
    },
    {
        "ts": "1581838903.086300",
        "text": "<@UU2DVL332> has joined the channel",
        "user": "UU2DVL332",
        "type": "message"
    },
    {
        "ts": "1582017946.086900",
        "text": "<@UAEUE6AFM> has joined the channel",
        "user": "UAEUE6AFM",
        "type": "message"
    },
    {
        "ts": "1582249919.087200",
        "text": "<@UTXJK93BL> has joined the channel",
        "user": "UTXJK93BL",
        "type": "message"
    },
    {
        "ts": "1582386783.000200",
        "text": "<@UU12WCQ3V> has joined the channel",
        "user": "UU12WCQ3V",
        "type": "message"
    },
    {
        "ts": "1582418554.000400",
        "text": "モジュール名の決定についての質問です\nライブラリ内のモジュール名を決めるとき、特に一番上のモジュール(`Data`とか`Control`とか)を決めるときに則った方が良いルールなどあるのでしょうか\n具体的には、今分散型SNSであるMisskeyのAPI用ライブラリを書いているのですが、これは`Network`以下か`Web`以下かどちらが適切なのでしょうか…\n（とりあえず`Network.Misskey`にしているのですが、Hastodonが`Web.Hastodon`であることに気づいて気になった次第です）\nどちらでも良いのなら今のままにしようと思っています",
        "user": "ULTBB86UC",
        "type": "message"
    },
    {
        "ts": "1582420309.000500",
        "text": "私が知る限り、決まりなくみんなめいめいにやってる感じですね。。。\nただ今回に限っていえば、いわゆるWeb APIのクライアントは `Web` を使う傾向があるようなので私は `Web` の方がいいと思います。\n例:\n• <http://hackage.haskell.org/package/slack-web> \n• <http://hackage.haskell.org/package/twitter-types>",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1582420389.000800",
        "text": "成程ありがとうございます！\n`Web`に変えておきます",
        "user": "ULTBB86UC",
        "type": "message"
    },
    {
        "ts": "1582424231.001100",
        "text": "Haskell での mealy machine (`newtype Mealy a b = Mealy { runMealy :: a -&gt; (b, Mealy a b) }`) ですが、これをモナドにする方法って何かあるでしょうか？\n• `ArrowMonad` を使えるが、その場合では a が () になってしまうので問題がある\n• Free Monad 系もあるが、それ以外で何かがないか",
        "user": "U5LEE6C1J",
        "type": "message"
    },
    {
        "ts": "1582425455.001300",
        "text": "無限ストリーム的な構造をモナドにする方法として対角化が考えられます。例えば[1,2,3..]を出力する機械にkをバインドすると、k 0の0番目、k 1の1番目、k 2の2番目の要素を採取していくような操作です。ムーアマシンでは実装できることが知られていますが(cf. <http://hackage.haskell.org/package/machines-0.7/docs/src/Data.Machine.Moore.html#line-100>)、ミーリマシンについてはわかりません",
        "user": "U4KUNQF9N",
        "type": "message"
    },
    {
        "ts": "1582427204.001500",
        "text": "んー、なるほど、そのまま扱わず streaming 系に変換するのが現実的ですかね",
        "user": "U5LEE6C1J",
        "type": "message"
    },
    {
        "ts": "1582462646.001800",
        "text": "a ~ () で定義できるならReaderTと合成すれば一般に行けそうな感じがします",
        "user": "U570660KX",
        "type": "message"
    },
    {
        "ts": "1582463179.002000",
        "text": "```pure x = Mealy $ \\_ -&gt; (x, pure x)\nMealy p &gt;&gt;= fq = Mealy $ \\x -&gt; let {(y, p') = p x; (z, q') = runMealy (fq y) x} in (z, p' &gt;&gt;= q')```\n",
        "user": "U570660KX",
        "type": "message"
    },
    {
        "ts": "1582463186.002200",
        "text": "だとどうだろう",
        "user": "U570660KX",
        "type": "message"
    },
    {
        "ts": "1582463616.002400",
        "text": "あと、YampaのSFがMealy machineで、`switch` <https://hackage.haskell.org/package/Yampa-0.13.1/docs/FRP-Yampa-Switches.html#v:switch> を継続モナド `Cont`  で書くとモナドチェインが出来て嬉しい、という話もあります",
        "user": "U570660KX",
        "type": "message"
    },
    {
        "ts": "1582464302.002700",
        "text": "<@UU1H0UC75> has joined the channel",
        "user": "UU1H0UC75",
        "type": "message"
    },
    {
        "ts": "1582534910.002900",
        "text": "Yampa のやつの話はモナドとして `Cont (Mealy a b)`  を使った方がいいみたいな感じですかね。 `a -&gt; Mealy a b`  の newtype ならモナドになれるかですが、モナド則を満たせずになれなさそうな気がします。",
        "user": "U5LEE6C1J",
        "type": "message"
    },
    {
        "ts": "1582539541.011500",
        "text": "プロファイリングをしようとして，\n```ghc-options:\n- -rtsopts\n- -prof\n- -fprof-auto```\nを指定したら，\n```ghc: panic! (the 'impossible' happened)\n  (GHC version 8.6.5 for x86_64-unknown-linux):\n\tlookupGlobal\n  Failed to load interface for 'GHC.Integer.Type'\n  Perhaps you haven't installed the \"p_dyn\" libraries for package 'integer-gmp'?\n  Use -v to see a list of the files searched for.\n  Call stack:\n      CallStack (from HasCallStack):\n        callStackDoc, called at compiler/utils/Outputable.hs:1160:37 in ghc:Outputable\n        pprPanic, called at compiler/typecheck/TcEnv.hs:132:32 in ghc:TcEnv\n\nPlease report this as a GHC bug:  <http://www.haskell.org/ghc/reportabug>```\n最小の再現状況を作ろうと思うのですが，この場合どこから手をつけるのがいいでしょうか．",
        "user": "U4KU9ABL0",
        "type": "message"
    },
    {
        "ts": "1582540538.014800",
        "text": "are you using cabal? then you shouldn't pass `-prof` directly in the `ghc-options` but use `--enable-profiling`",
        "user": "USBAF8CM9",
        "type": "message"
    },
    {
        "ts": "1582540765.015300",
        "text": "<https://github.com/haskell/cabal/issues/2827>",
        "user": "U5G2BCVBN",
        "type": "message"
    },
    {
        "ts": "1582541001.015600",
        "text": "I'm using stack. how can i use 'stack build' ?",
        "user": "U4KU9ABL0",
        "type": "message"
    },
    {
        "ts": "1582541121.015800",
        "text": "`stack build --profile`",
        "user": "U5G2BCVBN",
        "type": "message"
    },
    {
        "ts": "1582541653.016000",
        "text": "ありがとうございます．Thank you.\nうまくビルドできました．",
        "user": "U4KU9ABL0",
        "type": "message"
    },
    {
        "ts": "1582594723.017200",
        "text": "失礼、上の奴はだいぶボケてました。\n\n`ArrowMonad Mealy` のMonadインスタンスは、 `Mealy` の `ArrowApply` インスタンスから導出されるので、\n問題はMealyがArrowApplyになるかどうかです。\n\nとりあえず型合わせで `app` を定義してみます。\n\n```app = Mealy $ \\(f, x) -&gt; let (y, g) = f x in (y, ???)```\n???に合う型の変数にはfまたはgがあるのですが、\n\n• fを選ぶと、内部状態が毎回リセットされてしまう。\n• gを選ぶと、2回目以降の入力値fが捨てられてしまうため、fが変化しても追従しない\nと、いずれも問題があります。",
        "user": "U570660KX",
        "type": "message"
    },
    {
        "ts": "1582594794.017400",
        "text": "これは単に直観的な問題だけではなく、実際にArrowApplyのlawどれかを満たさないはずです <https://hackage.haskell.org/package/base-4.12.0.0/docs/Control-Arrow.html#t:ArrowApply>",
        "user": "U570660KX",
        "type": "message"
    },
    {
        "ts": "1582594870.017600",
        "text": "Yampaのやつは、Contはあまり本質じゃなくて\n\n```newtype Switch a b c = Switch (Mealy a (b, Maybe c))```",
        "user": "U570660KX",
        "type": "message"
    },
    {
        "ts": "1582595007.017800",
        "text": "と置いてやると、「cがJustの時だけ内部状態をリセットしてやる事で、必要に応じた動作ができる」というのがやりたい事でした",
        "user": "U570660KX",
        "type": "message"
    }
]