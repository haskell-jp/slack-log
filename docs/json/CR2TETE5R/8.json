[
    {
        "ts": "1589336050.049800",
        "text": "<@U0133EY6LPR> has joined the channel",
        "user": "U0133EY6LPR",
        "type": "message"
    },
    {
        "ts": "1589491465.050000",
        "text": "<@U013PEFKSG3> has joined the channel",
        "user": "U013PEFKSG3",
        "type": "message"
    },
    {
        "ts": "1589619346.053700",
        "text": "<@U013KEH28TG> has joined the channel",
        "user": "U013KEH28TG",
        "type": "message"
    },
    {
        "ts": "1589848262.053900",
        "text": "<@U013VMYK5QS> has joined the channel",
        "user": "U013VMYK5QS",
        "type": "message"
    },
    {
        "ts": "1590111595.054100",
        "text": "<@U014TBBSRBJ> has joined the channel",
        "user": "U014TBBSRBJ",
        "type": "message"
    },
    {
        "ts": "1590148449.054300",
        "text": "<@U01448XBRMY> has joined the channel",
        "user": "U01448XBRMY",
        "type": "message"
    },
    {
        "ts": "1590291572.054500",
        "text": "<@U5LV76EJH> has joined the channel",
        "user": "U5LV76EJH",
        "type": "message"
    },
    {
        "ts": "1590455175.054700",
        "text": "<@UR1U3B6LU> has joined the channel",
        "user": "UR1U3B6LU",
        "type": "message"
    },
    {
        "ts": "1590980416.056800",
        "text": "Reminder: \nbeginnersチャンネルは、新しい人がスムーズにHaskellに慣れるための質問を歓迎するチャンネルです。\nHaskell-Beginners ML や IRCの#haskell-beginners  や RedditのMonthly Hask Anythingのような位置づけを意図しています。\n\nbeginnersチャンネルでの回答側は、以下の左側のような応答を厳禁とする運用です。\n• それはくだらない質問だ → くだらない質問など無い\n• その質問は以前にもあった → 質問者はそんなこと知らない\n• Google検索せよ → 検索できないから質問している\nbeginnersチャンネルでは、例えば以下のレベルの質問から歓迎します。\n• `:` とは何のことですか。\n• タプルとは何ですか。\n",
        "user": "USLACKBOT",
        "type": "message"
    },
    {
        "ts": "1591014469.057100",
        "text": "<@U015AEMNU4Q> has joined the channel",
        "user": "U015AEMNU4Q",
        "type": "message"
    },
    {
        "ts": "1591030808.072400",
        "text": "初めまして！mshojiと申します。\nHaskellを学んで日が浅いのですが、Haskellの美しさに魅力を感じて少しずつ勉強をしています。\n\n漠然とした質問で申し訳ないのですが、上級者の皆さんはどのような学習をして、今のレベルまで到達したのでしょうか？\n興味があるので、お聞きしてみたいです。\n\n入門書で基本的な文法を学習し終えても、SpockやYesodといったフレームワークを使ったアプリケーションを作成するには、\nTypeFamiliesやDataKinsなど様々なGHC拡張を知らないと、バグが出てきた時エラーの解消が難しいのではないか、というのが思うところです。\n\n参考までに、「すごいH本」や「Haskell入門 関数型プログラミング言語の基礎と実践」などは読みました。（完璧に理解しているとは言えないですが。。）\n今は、自分の知らない概念や上記のGHC拡張などを、少しずつ消化する形で勉強しています。\n次のステップとして、オススメの学習方法とかありますか？（とは言え、こういう概念を少しずつ勉強するのもHaskellの楽しさだと思ったりしています）\n\n※質問自体がふわっとしているので、皆さんの体験談とか聞けるだけでも非常に参考になります。",
        "user": "U012A4ALLSC",
        "type": "message"
    },
    {
        "ts": "1591034787.072500",
        "text": "体験談の一つとして :raising_hand:\n僕はいつもRedditでupvoteがある程度ついてる投稿を見て気になるものがあったら深堀りしてます :eyes:\n<https://www.reddit.com/r/haskell/>\nで、Redditは話題が多岐に渡るので面白かった記事とか読めてない記事も含めて分類しながらGitHubにまとめている感じです\n<http://lotz84.github.io/haskell/>\n他の人の体験談も :kininaru: :wakuwaku:",
        "user": "U4KPPQW7K",
        "type": "message"
    },
    {
        "ts": "1591055277.073200",
        "text": "いろいろやりましたが、GHC User Guideを通読したのは割と大きかったと思います。全部理解しなくてもいいので。\nあと体験談じゃないっすけどその他の各論は <https://wiki.haskell.jp/Links> によい情報をぎゅっとまとめたつもりです。\n「ライブラリなどの解説」あたりが特におすすめです。",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1591094867.074000",
        "text": "はじめまして！\n私は入門書に乗っていないものが出てきて困ったときに、このサイトも役立ちました。\nWHAT I WISH I KNEW WHEN LEARNING HASKELL <http://dev.stephendiehl.com/hask/>\n\n（因みに、入門書終えたらすぐフレームワークとか使いました。おっしゃるとおりで、知らない機能や複雑なエラーが出たら都度頑張る事にはなりましたが、なんとかなりました",
        "user": "U59TQ3MJ9",
        "type": "message"
    },
    {
        "ts": "1591095932.078000",
        "text": "<@U4KPPQW7K> \nありがとうございます！\nRedditはあまり読んだことがないので、とても参考になります！見てみます:smile:\n\n<@U4LGTMTMK> \nGHC User Guide、通読とはレベルが高いですね！数年単位かかりそうです。。でも、これを通読したらかなりレベルアップしそうです:smile:\nリンクもありがとうございます！とても参考になりそうです！",
        "user": "U012A4ALLSC",
        "type": "message"
    },
    {
        "ts": "1591102245.080000",
        "text": "<@U59TQ3MJ9> \nリンク見てみましたが、内容がとても充実していますね！:smile:\n勉強する際にとても参考になりそうです！ありがとうございます！",
        "user": "U012A4ALLSC",
        "type": "message"
    },
    {
        "ts": "1591177805.081100",
        "text": "<@UKVSCFEEA> has joined the channel",
        "user": "UKVSCFEEA",
        "type": "message"
    },
    {
        "ts": "1591320095.081400",
        "text": "<@U01528668KE> has joined the channel",
        "user": "U01528668KE",
        "type": "message"
    },
    {
        "ts": "1591329133.081600",
        "text": "<@UEW4CKSLX> has joined the channel",
        "user": "UEW4CKSLX",
        "type": "message"
    },
    {
        "ts": "1592038671.082400",
        "text": "<@U0155JPRS4E> has joined the channel",
        "user": "U0155JPRS4E",
        "type": "message"
    },
    {
        "ts": "1592467725.084500",
        "text": "<@U015L5JEP8D> has joined the channel",
        "user": "U015L5JEP8D",
        "type": "message"
    },
    {
        "ts": "1592629840.084900",
        "text": "<@UELFKSH0V> has joined the channel",
        "user": "UELFKSH0V",
        "type": "message"
    },
    {
        "ts": "1593074145.085100",
        "text": "<@U016QSXFF96> has joined the channel",
        "user": "U016QSXFF96",
        "type": "message"
    },
    {
        "ts": "1593243213.085300",
        "text": "<@U016BP1N6KE> has joined the channel",
        "user": "U016BP1N6KE",
        "type": "message"
    },
    {
        "ts": "1593512177.085500",
        "text": "<@U016ZKYFQ00> has joined the channel",
        "user": "U016ZKYFQ00",
        "type": "message"
    },
    {
        "ts": "1593572422.085600",
        "text": "Reminder: \nbeginnersチャンネルは、新しい人がスムーズにHaskellに慣れるための質問を歓迎するチャンネルです。\nHaskell-Beginners ML や IRCの#haskell-beginners  や RedditのMonthly Hask Anythingのような位置づけを意図しています。\n\nbeginnersチャンネルでの回答側は、以下の左側のような応答を厳禁とする運用です。\n• それはくだらない質問だ → くだらない質問など無い\n• その質問は以前にもあった → 質問者はそんなこと知らない\n• Google検索せよ → 検索できないから質問している\nbeginnersチャンネルでは、例えば以下のレベルの質問から歓迎します。\n• `:` とは何のことですか。\n• タプルとは何ですか。\n",
        "user": "USLACKBOT",
        "type": "message"
    },
    {
        "ts": "1593575176.085800",
        "text": "<@U015X47HJHM> has joined the channel",
        "user": "U015X47HJHM",
        "type": "message"
    },
    {
        "ts": "1593672664.086000",
        "text": "<@U016D5S559B> has joined the channel",
        "user": "U016D5S559B",
        "type": "message"
    },
    {
        "ts": "1593757926.086200",
        "text": "<@U016P3BHTNG> has joined the channel",
        "user": "U016P3BHTNG",
        "type": "message"
    },
    {
        "ts": "1593974679.086400",
        "text": "<@U016HRXCR8V> has joined the channel",
        "user": "U016HRXCR8V",
        "type": "message"
    },
    {
        "ts": "1594023867.086600",
        "text": "<@U59SA2UF9> has joined the channel",
        "user": "U59SA2UF9",
        "type": "message"
    },
    {
        "ts": "1594098010.100900",
        "text": "Data.Vector.Unboxedについて質問です。\n\n最近競技プログラミングのAtCoderを始めたのですが、Data.Listの計算速度が遅いということで\n時折Data.Vector.UnboxedやData.Vector.Unboxed.Mutableを利用しています。\n\n今回は AtCoder Beginner Contest 173 E - Multiplication 4\n<https://atcoder.jp/contests/abc173/tasks/abc173_e>\nを解くことを試みました。\n\nListを使って書いたものが以下です。\n<https://atcoder.jp/contests/abc173/submissions/15057521>\n問題には制限時間があり、一定時間内に計算を終えなくてはいけません。\n黄色いTLEのマークが時間オーバーを示していて、Data.Listでは上手くいかないのでData.Vector.Unboxedの利用を検討しました。\n\nData.ListをData.Vector.Unboxedに置き換えるために、\ngksatoさんの回答\n<https://atcoder.jp/contests/abc173/submissions/15013762>\nを参考にしました。\n\n回答では大きな数をmodで小さくするように要求されており\ngksatoさんの回答では、型を作って対応しているようなのですが、\n私には少し難しいので、出てきた数字に対して直接modを適用したいと考えています。\n\n起きている問題としては\n```import qualified Data.ByteString.Char8 as BS\nimport Data.Maybe\nimport qualified Data.Vector.Unboxed as VU\n\nreadInt = fst . fromJust . BS.readInt\nreadIntList = map readInt . BS.words\ngetIntList = readIntList &lt;$&gt; BS.getLine\n\nprod :: VU.Vector Int -&gt; Integer\nprod = mod1G7 . VU.product . VU.map fromIntegral\n\nmod1G7 :: Integral a =&gt; a -&gt; a\nmod1G7 n = n `mod` (10 ^ 9 + 7)\n\nmain :: IO ()\nmain = do\n  [n, k] &lt;- getIntList\n  as &lt;- getIntList\n  let as' = VU.fromList as\n  print $ prod as'```\n入力例\n```4 2\n1 2 -3 -4```\nとしたときに、\n```abc/173/E.hs:31:17: error:\n    • No instance for (VU.Unbox Integer)\n        arising from a use of 'VU.product'\n    • In the first argument of '(.)', namely 'VU.product'\n      In the second argument of '(.)', namely\n        'VU.product . VU.map fromIntegral'\n      In the expression: mod1G7 . VU.product . VU.map fromIntegral\n   |\n31 | prod = mod1G7 . VU.product . VU.map fromIntegral\n   |                 ^^^^^^^^^^```\nというエラーが出てしまい、走らないことです。\n\n```prod :: VU.Vector Int -&gt; Int```\nとすると、動作はするのですが、大きい数が来た場合に答えが一致しません。\n\n関数の型のアノテーションを消すと\n```    • Ambiguous type variable 'a0' arising from a use of 'VU.product'\n      prevents the constraint '(VU.Unbox a0)' from being solved.\n      Relevant bindings include\n        prod :: VU.Vector Int -&gt; a0 (bound at abc/173/E.hs:31:1)\n      Probable fix: use a type annotation to specify what 'a0' should be.\n      These potential instances exist:\n        instance VU.Unbox a =&gt; VU.Unbox (Down a)\n          -- Defined in 'Data.Vector.Unboxed.Base'\n        instance VU.Unbox () -- Defined in 'Data.Vector.Unboxed.Base'\n        instance (VU.Unbox a, VU.Unbox b) =&gt; VU.Unbox (a, b)\n          -- Defined in 'Data.Vector.Unboxed.Base'\n        ...plus 10 others\n        ...plus 24 instances involving out-of-scope types\n        (use -fprint-potential-instances to see them all)\n    • In the first argument of '(.)', namely 'VU.product'\n      In the second argument of '(.)', namely\n        'VU.product . VU.map fromIntegral'\n      In the expression: mod1G7 . VU.product . VU.map fromIntegral\n   |\n31 | prod = mod1G7 . VU.product . VU.map fromIntegral\n   |                 ^^^^^^^^^^```\nのようなエラーが出てアノテーションを利用することを薦められます。\n\nVU.productでVU.Vector Int型の引数からInteger型の返り値を得るためにはどうすればよいでしょうか。\nよろしくお願いします。\n\nちなみに、VU.toListで一度Listにしてproductを適用したものは動いたのですが、同じく時間切れでした。\n<https://atcoder.jp/contests/abc173/submissions/15058952>",
        "user": "U0121PJA7BN",
        "type": "message"
    },
    {
        "ts": "1594100907.101100",
        "text": "unboxed vectorほど動作は速くないですが、unboxedじゃない普通のVector <https://hackage.haskell.org/package/vector-0.12.1.2/docs/Data-Vector.html> はいかがでしょうか？\nこちらなら `Integer` も格納できます。",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1594104448.101400",
        "text": "この問題では、Vector の要素は Int で十分ですが、product をすべてとったあとに mod しようとすると Int ではあふれてしまうのと、Integer をつかったとしてもすごい桁数になって時間内におさまらない可能性が高いです。\n\nなので、掛け算のたびに mod をとってやればよく、*<https://app.slack.com/team/U0121PJA7BN|Nagatatz>* さんのコードでいうと、prod を次のように書いてやればいいように思います。\n`prod = VU.foldl1' (\\x y -&gt; x * y `mod` (10^9+7))`\n\nこれで、とりあえず TLE はしなくなったのですが、 WA がでちゃってますね…\n<https://atcoder.jp/contests/abc173/submissions/15061195>\n\nわたし、まだ ABC173E 解いてないんすよ…。",
        "user": "USS5JD12Q",
        "type": "message"
    },
    {
        "ts": "1594105132.101800",
        "text": "Modular Arithmetic の乗算(かけ算ごとにmodをとる)を定義してしまえば、それでIntの範囲に収まります。しかし、Vectorを使う必要がありますか？ ランダムアクセスしないのなら、[Int]でもよいのではという気がすこしします。確認してませんが(をぃ^^;)、アルゴリズムを少しみなおせば、[Int]でもLTEが出なくなったりしませんか？",
        "user": "U4KU9ABL0",
        "type": "message"
    },
    {
        "ts": "1594105246.102000",
        "text": "ソートする必要があるので、[Int] のままではきつそう…",
        "user": "USS5JD12Q",
        "type": "message"
    },
    {
        "ts": "1594105335.102200",
        "text": "（AtCoder の C 以降でリストでいけちゃうケースは、あんまり無いような印象があります）",
        "user": "USS5JD12Q",
        "type": "message"
    },
    {
        "ts": "1594105487.102500",
        "text": "Vectorのソートの方がずっと速いということですか。なるほど。どのくらい違うんだろう。計測してみよう &gt; 私",
        "user": "U4KU9ABL0",
        "type": "message"
    },
    {
        "ts": "1594109929.103100",
        "text": "答えていただいたみなさま、ありがとうございました。\n結論から言えば、Vectorを使わずに行くことができました。計算時間の問題はunnohideyukiさんのおっしゃるとおり、かけ算毎にmodを取ることで解消できました。\nもちろん、modを取ると崩れる関係もあるので、そこも修正する必要がありました。また、nobsunさんのおっしゃる通り、[Int]のままでも時間内に収めることができました。\n\nVector周りが原因だと思っていたのですが、そんなことはなかったようです。igrepさんもVectorの型について教えてくださりありがとうございました。\n\n<https://atcoder.jp/contests/abc173/submissions/15062863>",
        "user": "U0121PJA7BN",
        "type": "message"
    },
    {
        "ts": "1594111664.103800",
        "text": "&gt; modを取ると崩れる関係もあるので\n10^18は64bit Intの範囲なので、絶対値が10^9以下の2つの数の積なら、modを取らずともIntの範囲におさまります。modをとる積を使うのは、最後の最大値を求めるところだけですみそうですね。",
        "user": "U4KU9ABL0",
        "type": "message"
    },
    {
        "ts": "1594146039.105800",
        "text": "え？ 最後の最大値を求めるまでに、3つ以上の数の積は普通に取られますよ？",
        "user": "UL1HFJATE",
        "type": "message"
    },
    {
        "ts": "1594151804.106100",
        "text": "最後の最大値を構成する組合せを見つけるのには、3つ以上の数の積を計算する必要がないような気がしたのですが。。。",
        "user": "U4KU9ABL0",
        "type": "message"
    }
]