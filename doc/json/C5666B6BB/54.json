[
    {
        "ts": "1552802234.296900",
        "text": "<@UH195J82Y> has joined the channel",
        "user": "UH195J82Y",
        "type": "message"
    },
    {
        "ts": "1552802641.299900",
        "text": "Data.Map型の実装はList Tuple a bを低レイヤーで効率化(btreeに)したもののように見えるのですが，\nこれをfoldableでパターンマッチングするときに(\\acc (a, b) -&gt; --process)というような書き方をMapでできないでしょうか．",
        "user": "UH195J82Y",
        "type": "message"
    },
    {
        "ts": "1552804021.300300",
        "text": "<@UH2P6TMD4> has joined the channel",
        "user": "UH2P6TMD4",
        "type": "message"
    },
    {
        "ts": "1552814581.300600",
        "text": "Mapをキーと値のペアについてfoldしたい、という事ならば、Data.Map.toListで一度リスト化してからfoldするか、またはData.Map.foldlWithKeyなどの関数があるのでこれを使うか、でどうでしょう",
        "user": "U570660KX",
        "type": "message"
    },
    {
        "ts": "1552831769.301100",
        "text": "ありがとうございます．\nやはりそういった方向になるんですね．\n今回は[(a, b)]で実装しました．",
        "user": "UH195J82Y",
        "type": "message"
    },
    {
        "ts": "1552892042.301800",
        "text": "<@UH1L934RZ> has joined the channel",
        "user": "UH1L934RZ",
        "type": "message"
    },
    {
        "ts": "1552968004.302300",
        "text": "<@UH2T18UM9> has joined the channel",
        "user": "UH2T18UM9",
        "type": "message"
    },
    {
        "ts": "1552991814.306500",
        "text": "stackでbackpackをサポートしてほしいのですが\n地道にコマンドを追いかけるしかないですかね\n<https://github.com/commercialhaskell/stack/issues/2540>\n作者も忙しそうなので自分で頑張るしかない気がしております",
        "user": "U74KTAG0N",
        "type": "message"
    },
    {
        "ts": "1553056998.307300",
        "text": "もしかして、 foldrWithKey が相当するものではないでしょうか?",
        "user": "U4KNU6N48",
        "type": "message"
    },
    {
        "ts": "1553171993.308500",
        "text": "<@UH5R84WKC> has joined the channel",
        "user": "UH5R84WKC",
        "type": "message"
    },
    {
        "ts": "1553226562.309200",
        "text": "foldrWithKeyのようです．\nありがとうございます!",
        "user": "UH195J82Y",
        "type": "message"
    },
    {
        "ts": "1553307947.309500",
        "text": "<@UGZ0PUZA5> has joined the channel",
        "user": "UGZ0PUZA5",
        "type": "message"
    },
    {
        "ts": "1553487346.310300",
        "text": "Haskellライブラリ公開に向けてのベストプラクティスみたいな記事とかありますか？\n自分でライブラリを開発して、最終的にHackageにて公開、逐次バージョンアップデートする方法を紹介してくれるとありがたいです。",
        "user": "U7Z4F723Z",
        "type": "message"
    },
    {
        "ts": "1553489150.310600",
        "text": "日本語記事なかったら書くべき事案っぽい気がしますね（書ける人が",
        "user": "U4L0B71L1",
        "type": "message"
    },
    {
        "ts": "1553493091.311300",
        "text": "hackage upload とか検索すると、色々出てくる気がするけど",
        "user": "U56L7EVNY",
        "type": "message"
    },
    {
        "ts": "1553495362.311600",
        "text": "出てくるけど、ベストプラクティスというには程遠いと思う。\n<http://hackage.haskell.org/upload>\n理想的には読めばHaskell初心者でも実務で利用可能なライブラリを公開できるような記事が望ましいです。",
        "user": "U7Z4F723Z",
        "type": "message"
    },
    {
        "ts": "1553504707.311900",
        "text": "パッケージのユーザーから見てよいパッケージが何かを知れば、概ねそのまま作る側のベストプラクティスを教えることになるかと思うのですがいかがでしょうか？\n（と、自分の記事を推す）\n<https://wiki.haskell.jp/Hikers%20Guide%20to%20Haskell#%E3%83%91%E3%83%83%E3%82%B1%E3%83%BC%E3%82%B8%E3%81%A8%E3%81%AE%E4%BB%98%E3%81%8D%E5%90%88%E3%81%84%E6%96%B9>",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1553505548.312300",
        "text": "最低限cabal sdistコマンドでワーニングが出なければOKだと思います。ただし必要物を.cabalに書き忘れるのは注意っぽい。hpackを使えば自動でファイルリストを書いてくれるのでベター",
        "user": "U570660KX",
        "type": "message"
    },
    {
        "ts": "1553505832.312600",
        "text": "<@UH65CARPS> has joined the channel",
        "user": "UH65CARPS",
        "type": "message"
    },
    {
        "ts": "1553506735.312900",
        "text": "<https://scrapbox.io/haskell-shoen/%E3%83%A9%E3%82%A4%E3%83%96%E3%83%A9%E3%83%AA%E4%BD%9C%E6%88%90%E3%83%81%E3%83%A3%E3%83%BC%E3%83%88>　軽くまとめてみました。もっと書くことはありそう",
        "user": "U4KUNQF9N",
        "type": "message"
    },
    {
        "ts": "1553509814.313600",
        "text": "<@U4KUNQF9N> ありがとうございます！",
        "user": "U7Z4F723Z",
        "type": "message"
    },
    {
        "ts": "1553512888.313900",
        "text": "<@UH8KHK1KN> has joined the channel",
        "user": "UH8KHK1KN",
        "type": "message"
    },
    {
        "ts": "1553533818.318000",
        "text": "AWS Lambda上でHaskellを動かす知見をお持ちの方はいらっしゃらないでしょうか・・・\n\naws-lambda-haskell-runtime（<https://github.com/theam/aws-lambda-haskell-runtime）>\nや\nServerless Haskell（<https://github.com/seek-oss/serverless-haskell）>\nを試してみて、単純なサンプルは動作するのですがDynamoDBにアクセスしてみると90秒などという長大な時間がかかってしまい、とても使い物にならないのです。\nDynamoDBだけでなくHTTPS通信全般がどうも遅いようで、S3へのアクセスや単なるWebサイトのデータを取ってくるだけでも非常に時間がかかってしまいます。",
        "user": "U87QYA152",
        "type": "message"
    },
    {
        "ts": "1553583486.324600",
        "text": "https全般はtlsがおそいのでopenssl使ってますが、それ以外は気にならないですね\nnodeとかでかいたものよりメモリも使わず快適に動いています\n",
        "user": "U74KTAG0N",
        "type": "message"
    },
    {
        "ts": "1553584416.324800",
        "text": "haskell-runtimeつかってません。\nnode.jsからデータを渡してつかっています。\nruntimeの問題かもですね。",
        "user": "U74KTAG0N",
        "type": "message"
    },
    {
        "ts": "1553585194.326600",
        "text": "Travisなどで複数バージョンのGHCに対してテストすると良いと思います <https://github.com/haskell-CI/haskell-ci> が便利です。",
        "user": "U4M9NJ7QE",
        "type": "message"
    },
    {
        "ts": "1553585274.328400",
        "text": "cabal sdist してビルドしたりcabal checkもしてくれるので簡単なミスも気がつけます",
        "user": "U4M9NJ7QE",
        "type": "message"
    },
    {
        "ts": "1553609423.329000",
        "text": "<@UHAJ3KE3F> has joined the channel",
        "user": "UHAJ3KE3F",
        "type": "message"
    },
    {
        "ts": "1553658157.340400",
        "text": "Either モナドの使い方をお尋ねします。\n\nEitherを返す複数の関数を組み合わせ Eitherを返す関数を作るとき、組み合わせに含まれるどの関数のLeftで処理が中断されたかわかるようにする方法はありますか？\n\n例えば以下のようなコードがあったとき、\n```\ncaller x= do\n      case someFunc x of\n            Left err -&gt; print err\n            Right y -&gt; ..\n\nsomeFunc:: MyType -&gt; Either String OtherType\nsomeFunc mt = do\n       first &lt;- SomeEitherFunc mt\n       second &lt;- AnotherEitherFunc first\n       …\n```\n\ncaller 側でLeftを受け取ったとき、 SomeEitherFuncから来たか、AnotherEitherFuncから来たかを区別したいです。\n区別する目的は、デバッグや障害時の原因究明で、どこでLeftが発生したかを把握するためです。SomeEitherFunc の Left や、 AnotherEitherFunc  の Leftは、どのようなメッセージを持つか事前に分かりません。\n\n```\n     case SomeEitherFunc mt of\n          Left err -&gt; Left ( \"from SomeEitherFunc:\" ++ err)\n```\n\nとしていけば目的達成できますが、書き方として冗長な気がするので、別の方法があれば教えていただきたいです。",
        "user": "U7GSVRQ6S",
        "type": "message"
    },
    {
        "ts": "1553659195.340600",
        "text": ".o( 何らかソースコードを書き換えないとムリかなぁ",
        "user": "U4L0B71L1",
        "type": "message"
    },
    {
        "ts": "1553661037.340800",
        "text": "結論から言うと直接実現するのは無理です。\n挙げていただいた :point_down: 相当のことを行う、errorsパッケージの `Data.EitherR.fmapL` 関数を使って頑張るしかないでしょう。\n同じような関数はほかのパッケージにもたくさんあるので、探して依存するなりコピペするなりするとよいかと思います。\n\n```\ncase SomeEitherFunc mt of\n\n         Left err -&gt; Left ( \"from SomeEitherFunc:\" ++ err)\n```",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1553661184.341000",
        "text": "&gt; デバッグや障害時の原因究明\nのためならロガーをしこむのが順当な対応ですかね",
        "user": "U4L0B71L1",
        "type": "message"
    },
    {
        "ts": "1553661321.341300",
        "text": "someFuncをいじって良いなら、こんな感じに書きます(例として挙がっているやつを関数化しただけ)\n\n```haskell\nePrefix :: String -&gt; Either String r -&gt; Either String r\nePrefix pfx (Left orig) = Left (pfx ++ orig)\nePrefix _ r = r\n\nsomeFunc:: MyType -&gt; Either String OtherType\nsomeFunc mt = do\n       first &lt;-  ePrefix \"someEitherFunc\"    $ someEitherFunc mt\n       second &lt;- ePrefix \"anotherEitherFunc\" $ anotherEitherFunc first\n```",
        "user": "U570660KX",
        "type": "message"
    },
    {
        "ts": "1553662309.341800",
        "text": "自分ならEither String OtherTypeからEither MyException OtherTypeに変換して、caller側でMyExceptionの値に応じて場合分けするかなー。こんな感じ\n\n```\ncaller x= do\n      case someFunc x of\n            Left err -&gt; print err\n            Right y -&gt; print y\n\ntype MyType = Int\ntype OtherType = String\n\nsomeFunc:: MyType -&gt; Either MyException OtherType\nsomeFunc mt = do\n       first &lt;- someEitherFuncWithException mt\n       second &lt;- anotherEitherFuncWithException first\n       return second\n  where\n    someEitherFuncWithException = convert SomeEitherError . someEitherFunc\n    anotherEitherFuncWithException first = convert AnotherEitherFuncError (anotherEitherFunc first)\n    someEitherFunc _    = Left \"wrong\"\n    anotherEitherFunc _ = Right \"Correct!\"\n\ndata MyException = SomeEitherError | AnotherEitherFuncError\n    deriving Show\n\nconvert :: MyException -&gt; Either String a -&gt; Either MyException a\nconvert myException (Left _)      = Left myException\nconvert _           (Right other) = return other\n```",
        "user": "U7Z4F723Z",
        "type": "message"
    },
    {
        "ts": "1553671756.342600",
        "text": "今来ました。こんな風にコールスタックを使うのはいかが？\n```\nimport GHC.Stack\n\nthrow :: HasCallStack =&gt; String -&gt; Either (CallStack, String) a\nthrow msg = Left (popCallStack callStack, msg)\n\nfoo :: HasCallStack =&gt; Either (CallStack, String) ()\nfoo = throw \"err\"\n\nbar :: HasCallStack =&gt; Either (CallStack, String) ()\nbar = throw \"err\"\n\nmain = case foo &gt;&gt; bar of\n  Left (e, msg) -&gt; do\n    putStrLn $ prettyCallStack e\n    putStrLn msg\n  Right a -&gt; print a\n```",
        "user": "U4KUNQF9N",
        "type": "message"
    },
    {
        "ts": "1553671784.342800",
        "text": "実行するとこんな感じで場所がわかります\n```\nCallStack (from HasCallStack):\n  foo, called at stack.hs:12:13 in main:Main\nerr\n```",
        "user": "U4KUNQF9N",
        "type": "message"
    }
]