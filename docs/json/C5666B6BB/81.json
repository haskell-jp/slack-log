[
    {
        "ts": "1583666327.077700",
        "text": "いえ 何もしてないのにいつのまにかこうなってしまったので……それにいくら再インストールしても同じ問題が発生しちゃうんですよ もう手詰まりで",
        "user": "UFMV026NR",
        "type": "message"
    },
    {
        "ts": "1583666429.077900",
        "text": "何のコマンドを実行したら発生したんですか？それともコマンドじゃなくてエディターを起動したときとか？\nあと、GHCはどうやってインストールしましたか？",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1583672131.078200",
        "text": "<@UV1S80CKX> has joined the channel",
        "user": "UV1S80CKX",
        "type": "message"
    },
    {
        "ts": "1583714881.078500",
        "text": "<@UV26V0YD6> has joined the channel",
        "user": "UV26V0YD6",
        "type": "message"
    },
    {
        "ts": "1583916124.078800",
        "text": "<https://teratail.com/questions/246485|https://teratail.com/questions/246485>",
        "user": "ULGDZNXS7",
        "type": "message"
    },
    {
        "ts": "1583916141.079400",
        "text": "この件に関する回答を募集しています。",
        "user": "ULGDZNXS7",
        "type": "message"
    },
    {
        "ts": "1583916194.080800",
        "text": "調べてもなかなか分からなくて…",
        "user": "ULGDZNXS7",
        "type": "message"
    },
    {
        "ts": "1583984783.084300",
        "text": "<https://github.com/haskell/bytestring/blob/95fe6bdf13c9cc86c1c880164f7844d61d989574/Data/ByteString/Builder/Internal.hs#L348-L353>\nbytestring パッケージの Builder の実装ってどうしてこうなっているんですか？　予想としては差分リストと BufferRange を状態に持つアロー的な何か ( <http://hackage.haskell.org/package/arrows-0.4.4.2/docs/Control-Arrow-Transformer-CoState.html> ) の組み合わせだと思っています。",
        "user": "U5LEE6C1J",
        "type": "message"
    },
    {
        "ts": "1584024050.093000",
        "text": "おひさしぶりです\n\nHaskellで、repl付きのinterprerを実装するときの話です。\n以下の、HaskellでSchemeを作るサイトでは、inteprerの環境の型にIORefを使用しています。\n<https://ja.wikibooks.org/wiki/48%E6%99%82%E9%96%93%E3%81%A7Scheme%E3%82%92%E6%9B%B8%E3%81%93%E3%81%86/%E5%A4%89%E6%95%B0%E3%81%A8%E4%BB%A3%E5%85%A5>\n\n\nここで3つ質問があります。\n1. なぜStateが適していなくて、IORefが適しているのか\n2. IORefを使った場合にenvを持ち回らない方法はあるのか\n3. Stateを使ったときにreplが正しく動かないのはそういうものなのか、単純に僕の実装が悪いのか\n特に、1,2についてお聞きしたいです。\n質問はさておき、最終的にやりたいことは「envを持ち回らずにreplでevalを実行すること」です\n\n\n1に関しては、上記のページの上の方に解説がありますが、理由をよく理解できませんでした。\n関数の呼び出しの際にenvが入れ子になっていくのはわかりますが、そのときになぜStateではだめで、IORefならうまく機能するのかがわかりません\n\n\n2に関して、上のサイトを少し参考にして実装していっているものが以下です。IORefを使っていてeval関数はenvを引き回しています。StateモナドやReaderモナドを使うときのようにenvを隠蔽する必要はあるのでしょうか\n<https://github.com/mrsekut/Hytl/blob/86cca753fc/src/Eval.hs>\n\n\n3に関して、「これIORefじゃなくてStateにすればenv隠蔽できるやん！」と早とちりして途中まで実装したものが以下になります。Stateを使うことでenvを持ち回る事がなくなりましたが、replで動かしたときに変数呼び出しがうまく機能しません。というのも、一行入力する毎にStateあるEnvが空になっているようです。これは単に僕のreplの実装が悪いだけなのか、IOが絡む場合はStateだけではうまく動かないのか、というのをお聞きしたいです。\n<https://github.com/mrsekut/Hytl/blob/2bbf7c4058/src/Eval.hs>\n\n\n\nよろしくおねがいします。",
        "user": "UCM4G8PGW",
        "type": "message"
    },
    {
        "ts": "1584056490.093500",
        "text": "取り急ぎ。\n&gt; なぜStateが適していなくて、IORefが適しているのか\n例外が発生したときに、途中まで更新していたstateを保存する方法がないためです。\nちなみに、`StateT` を重ねたMonad stackが `MonadUnliftIO`のインスタンスじゃないのも同じ理由です。\n\n&gt; IORefを使った場合にenvを持ち回らない方法はあるのか\n`ReaderT` を使いましょう。\nここまでのことはいわゆる「ReaderT Design Pattern」の原典である <https://www.fpcomplete.com/blog/2017/06/readert-design-pattern> でも触れられています。",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1584057448.093800",
        "text": "<@U4LGTMTMK>さんが言ってるのは一般的な State の問題点でここでの問題点としてはかなりズレてると思います\n\n今回 IORef を使用することのポイントは、式を評価する際環境を容易に変えられ、かつ環境を可変に保てるという点だと思います。State では強制的に全環境が共通のものになってしまいますが、IORef を使った場合は eval に渡す環境を変えるだけでクロージャの評価にも流用できます。それがおそらく元文献が言いたいことだと思います。\n\nところで、通常 Env の引回しを明示的にしたくなくて、でもたまに局所的に環境を変えたいという需要が、Reader モナドで実現できるというのは同意です。Eval = ReaderT Env IO とすれば前者はそのまま実現できて、後者は Reader の local メソッド で実現できます \n\nところで3番目のはコメントアウトしてる部分は型が合って内容に見えるんですが、変数の参照はどうやって実装したんでしょう?",
        "user": "U57D08Z9U",
        "type": "message"
    },
    {
        "ts": "1584057723.094200",
        "text": "実際REPLの実装にStateを使ったら間違いなく該当する問題にハマりますし（だから、Haskelineは `ReaderT IO` を使っている）、挙げている文献を読まず意図を汲まなかったのは私の落ち度ですが、「ずれている」という言い方はちょっと引っかかりますね...。 :confused:",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1584059700.094500",
        "text": "<@U4LGTMTMK> すいません、言葉選びが悪かったですが、上の「ずれている」は全く役に立たないと言っているわけではなく、<@UCM4G8PGW>さんに対して元文献で言ってることとは話が違うと言うことが分かるようにという意図での発言でした。元文献で言ってること以上に State ではなく Reader を使う意義があるというのは、私も同意です",
        "user": "U57D08Z9U",
        "type": "message"
    },
    {
        "ts": "1584063006.094800",
        "text": "BuildStepはADT版Freeのように操作を再帰的に繋げたコルーチン的構造で、そのままだと結合が遅いので差分リストのようにしているのだと理解しています",
        "user": "U4KUNQF9N",
        "type": "message"
    },
    {
        "ts": "1584067451.098200",
        "text": "頭から抜けていたんですが、操作というのが先でした。この理解であっているみたいですね。全称量化されている r は ST モナドのような操作を制限するためのものですかね？",
        "user": "U5LEE6C1J",
        "type": "message"
    },
    {
        "ts": "1584068842.098600",
        "text": "igrepさん、mizunashi-manaさん、ご返事ありがとうございます。なるほど、Readerを使うのが良さそうですね。僕の実装ではまだ例外処理を書いていないのでStateを使ったときの問題に出くわしていなかったので気づけてよかったです（この辛さもまた試してみたいですが）\n\n\n実装するときに以下のような経過をたどりました\nIORefが良いらしい→できた→env消したい→Readerを使うと良いらしい→Readerつかう→え、これStateじゃないとムリでは？→Stateつかう→replが動かんくなった、ムリなのかなやっぱりIORefにするか→env復活するじゃん嫌だ→質問\n\n３番目のリンクのコメントアウトの型がずれているのはこの経過で前の段階のものが残っているからです\n\nReaderのlocalなどに対する理解が甘かったようです。Readerの理解と実装を今晩トライしてみて躓いたらまた質問させていただきます。",
        "user": "UCM4G8PGW",
        "type": "message"
    },
    {
        "ts": "1584072790.099000",
        "text": "補足ですが、コメントで言っている Reader を使うとは IORef を使った Env を Reader で渡すということです。Reader 単体では読み込みしかできないので、環境への書き込みが行なえませんが、IORef を読み込むことで可変にできます",
        "user": "U57D08Z9U",
        "type": "message"
    },
    {
        "ts": "1584072986.099300",
        "text": "あえてStateTモナドで実装するなら、runEvalの型を`Exp -&gt; StateT Env IO Int` として、Repl.hsの方でevalStateTしてやる感じになるかと思います。evalStateTを抜けたら状態は消えてしまいますので。",
        "user": "U570660KX",
        "type": "message"
    },
    {
        "ts": "1584096697.099700",
        "text": "同じモジュールにあるPutモナドの実装との兼ね合いなのか、結果を持たせられるようになっているようです",
        "user": "U4KUNQF9N",
        "type": "message"
    },
    {
        "ts": "1584148905.100300",
        "text": "<https://github.com/haskell/bytestring/blob/95fe6bdf13c9cc86c1c880164f7844d61d989574/Data/ByteString/Builder/Internal.hs#L438-L456>\nあー、なるほど。ありがとうございました！",
        "user": "U5LEE6C1J",
        "type": "message"
    },
    {
        "ts": "1584159088.100800",
        "text": "<@U01021LKUH5> has joined the channel",
        "user": "U01021LKUH5",
        "type": "message"
    },
    {
        "ts": "1584191331.101100",
        "text": "<@UE4JVGDRP> has joined the channel",
        "user": "UE4JVGDRP",
        "type": "message"
    },
    {
        "ts": "1584212837.101300",
        "text": "<@UV35RL3V1> has joined the channel",
        "user": "UV35RL3V1",
        "type": "message"
    },
    {
        "ts": "1584489695.102200",
        "text": "<@U0106UE4MJQ> has joined the channel",
        "user": "U0106UE4MJQ",
        "type": "message"
    },
    {
        "ts": "1584574648.104600",
        "text": "お久しぶりです。\n指定した時刻までスレッドを休止してくれる関数をご存知ですか？\nthreadDelayは、指定した時間間隔になりますが、例えば毎分０５秒に処理をしたい、というような場合は「次の分の０５秒　ー　現在時刻」の秒数を計算してセットしてあげる必要があります。",
        "user": "U7GSVRQ6S",
        "type": "message"
    },
    {
        "ts": "1584574673.105200",
        "text": "それでもよいのですが、既存の関数があれば使いたいです。",
        "user": "U7GSVRQ6S",
        "type": "message"
    },
    {
        "ts": "1584574907.105300",
        "text": "<https://hackage.haskell.org/package/cron-0.6.2/docs/System-Cron-Schedule.html> が割とメンテされている方です。\nただこれ、もともとcronの時刻指定の文字列をパースするという目的のパッケージだったためか、単に「指定した時刻に実行する」という目的にはオーバーキルなんですよねぇ :confused:\nなので、実はちょうど私も同じようなニーズがあったこともあり、一部の関数をexportするよう提案しています。\n<https://github.com/MichaelXavier/cron/issues/43>",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1584658781.105800",
        "text": "<@U0100JBRCFL> has joined the channel",
        "user": "U0100JBRCFL",
        "type": "message"
    }
]