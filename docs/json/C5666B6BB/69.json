[
    {
        "ts": "1567591381.026700",
        "text": "あともう一つのアプローチとして、Alexが返す例外をパーサーコンビネーターなどでパースしてしまう、というやや遠回しな手もあるかと思います :sweat:",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1567596587.028700",
        "text": "お疲れ様です\nnixを使ったhaskell のベストな開発フローが知りたいです\ncabal v1 or v2\nどちらがお勧めでしょうか\nエディタはホストのものをつかうのがいいですか\nそれともnixのなかに入れ込むのがいいのでしょうか",
        "user": "U74KTAG0N",
        "type": "message"
    },
    {
        "ts": "1567596669.030200",
        "text": "あとnixによるいいci環境があれば合わせてお願いします",
        "user": "U74KTAG0N",
        "type": "message"
    },
    {
        "ts": "1567600888.031300",
        "text": "これの招待リンクってどこかにありますか？",
        "user": "UL3EYH36Z",
        "type": "message"
    },
    {
        "ts": "1567601053.031500",
        "text": "最初のメッセージのリンクが招待リンクのはずですが...",
        "user": "UMKGDJ2RZ",
        "type": "message"
    },
    {
        "ts": "1567610941.031800",
        "text": "GHCでも使われてるし字句解析と構文解析が別れるからわかりやすいのかなーと思った次第です。エラーメッセージのパースは考えましたが本末転倒すぎるので見なかったことにします……",
        "user": "U7155GPR9",
        "type": "message"
    },
    {
        "ts": "1567641138.032300",
        "text": "パーサのエラー出力って割とホットな問題なんですよね。GHCですらパースエラーについては、最初の一個をぶん投げて終わり、にしてる奴なので。",
        "user": "U570660KX",
        "type": "message"
    },
    {
        "ts": "1567641171.032500",
        "text": "なので妥協するか、または良いアプローチを自力で探ってみるかの2択かと思います",
        "user": "U570660KX",
        "type": "message"
    },
    {
        "ts": "1567641979.032700",
        "text": "招待リンクは\n<http://bit.ly/2GwPFrs|bit.ly/2GwPFrs>\nでした",
        "user": "UE1SBEZTR",
        "type": "message"
    },
    {
        "ts": "1567643653.033000",
        "text": "Safe/Trustworthy プラグマに関する質問です。\nある時点で、importしているモジュールがTrustworthyであったために、そのモジュールも Trustworthy にしていたとします。\nimportしているモジュールがパージョンアップして、Safe に変わりました。\nすると、\n'XXX' is marked as Trustworthy but has been inferred as safe!\nみたいな警告が出るようになります。\nこの警告を消すスマートな方法はありますか？\nプラグマ部分に #ifdef って有効なんですかね？",
        "user": "U56MBRKR9",
        "type": "message"
    },
    {
        "ts": "1567643980.033100",
        "text": "なるほど……ありがとうございます。とりあえずMegaparsecあたりを触ってみて、それでもしっくりこないようなら言語仕様に沿ったパーサを自前で書く、といった方向で試してみます",
        "user": "U7155GPR9",
        "type": "message"
    },
    {
        "ts": "1567648189.033500",
        "text": "<https://github.com/ekmett/lens/blob/60b89993903af95f138411a0721e952e84047a6c/src/Control/Lens/Internal/Setter.hs#L4> のように、Trustworthyを切り替えるのはしばしば見られます。あるいは-Wno-trustworthy-safeで無視するのもありだと思います",
        "user": "U4KUNQF9N",
        "type": "message"
    },
    {
        "ts": "1567653675.034000",
        "text": "ベストプラクティスかはわからないけど、自分が関わっているプロジェクトの開発環境はこうなっているという回答でもいいかな。。？",
        "user": "U7Z4F723Z",
        "type": "message"
    },
    {
        "ts": "1567661704.034300",
        "text": "megaparsec で簡単な言語をパースする例としては、ぼくにはこれがわかりやすかったです <https://markkarpov.com/megaparsec/parsing-simple-imperative-language.html>",
        "user": "UKYUFC94P",
        "type": "message"
    },
    {
        "ts": "1567661844.034500",
        "text": "ありがとうございます！読んでみます",
        "user": "U7155GPR9",
        "type": "message"
    },
    {
        "ts": "1567661973.034800",
        "text": "う・・でも改めて見たら冒頭に「The text here may be obsolete. See this tutorial instead.」とありました。",
        "user": "UKYUFC94P",
        "type": "message"
    },
    {
        "ts": "1567661978.035000",
        "text": "<https://haskell.e-bigmoon.com/posts/2019/07-14-megaparsec-tutorial.html>",
        "user": "UKYUFC94P",
        "type": "message"
    },
    {
        "ts": "1567662047.035500",
        "text": "さっきのはバージョンやらスタイルやらが古いかもしれません。こちらのほうが網羅的でよいようです。長いですが…。",
        "user": "UKYUFC94P",
        "type": "message"
    },
    {
        "ts": "1567665842.036300",
        "text": "大丈夫です\nお願いします",
        "user": "U74KTAG0N",
        "type": "message"
    },
    {
        "ts": "1567669632.037400",
        "text": "megaparsecで書いたパーサーがeofで止まらず無をパースしようとして死ぬんですが、助けてください\n<https://github.com/1inguini/mud/blob/detailedAST/src/Parse.hs>",
        "user": "UMKGDJ2RZ",
        "type": "message"
    },
    {
        "ts": "1567669834.037600",
        "text": "詳細ぱっとわかりませんが、 `many` には本当に慎重になった方がいいです。",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1567670823.037800",
        "text": "思い出した。普通のパーサコンビネータだと左再帰がうまく書けそうにないような気がしたのでAlex+Happyで自動生成にしたんでした。やりたいことは `x y z` を右結合の指定なしに `Apply (Apply x y) z` という構文木にしたいのです。そのへんHappyがうまくやってくれます",
        "user": "U7155GPR9",
        "type": "message"
    },
    {
        "ts": "1567671043.038400",
        "text": "Elmが（Idrisもらしい）Happy使わずパーサコンビネータだけであの文法をパースしてるのを見るとできないこともなさそうなんですが……",
        "user": "U7155GPR9",
        "type": "message"
    },
    {
        "ts": "1567671076.038600",
        "text": "たしかに many のどれかを some にしたら急に動いたりするかもしれないですね。",
        "user": "UKYUFC94P",
        "type": "message"
    },
    {
        "ts": "1567671103.038800",
        "text": "左再帰とかもろもろの演算子のあれこれを、演算子の結合と優先順位を指定するだけでどうにかしてくれる `makeExprParser` という関数がparser-combinatorsというパッケージにありまして :smirk:\n<http://hackage.haskell.org/package/parser-combinators-1.2.0/docs/Control-Monad-Combinators-Expr.html#v:makeExprParser>",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1567671142.039000",
        "text": "『右結合の指定なしに』",
        "user": "U7155GPR9",
        "type": "message"
    },
    {
        "ts": "1567672523.039300",
        "text": "お、ifdef が効くのですね。ありがとうございます！",
        "user": "U56MBRKR9",
        "type": "message"
    },
    {
        "ts": "1567672619.039500",
        "text": "ご存知かもしれませんが。\n<https://kazu-yamamoto.hatenablog.jp/entry/20110127/1296098875>",
        "user": "U56MBRKR9",
        "type": "message"
    },
    {
        "ts": "1567672822.040000",
        "text": "ちょうどそこに行き着いたところでした！",
        "user": "U7155GPR9",
        "type": "message"
    },
    {
        "ts": "1567672832.040300",
        "text": "(一旦諦めました)",
        "user": "UMKGDJ2RZ",
        "type": "message"
    },
    {
        "ts": "1567680958.040600",
        "text": "(全然関係ないけど、GitHub 上のコードを貼るときはコミットハッシュ込みの方がいいよ（あとでみた時に変わってしまう）)",
        "user": "U56L7EVNY",
        "type": "message"
    },
    {
        "ts": "1567681456.040800",
        "text": "あと、出だしがよくわからないや\n例えば、ghci でこういう風に実行したら止まらない（理想はこう）とかを書いてくれると実装を追いやすいです。",
        "user": "U56L7EVNY",
        "type": "message"
    },
    {
        "ts": "1567749043.041400",
        "text": "nixを使ったhaskell のベストな開発フローが知りたいです\n&gt; cabal v1 or v2どちらがお勧めでしょうか\nｖ２ってnew-* がついてるコマンド郡のことですよね。。？その場合であればv2を使用しています\n\n\n&gt; エディタはホストのものをつかうのがいいですか、それともnixのなかに入れ込むのがいいのでしょうか (edited)\nホストのものを使ってます。nix-buildを使ってnix環境に入り込みつつ、既存のエディタにもアクセスできるようにしてます。\n\n\n&gt; あとnixによるいいci環境があれば合わせてお願いします\n<https://hydra.iohk.io/>\n弊社ではhydraを使ってます",
        "user": "U7Z4F723Z",
        "type": "message"
    },
    {
        "ts": "1567749156.041600",
        "text": "BuildKiteも使ってるけど、これはArtifactの生成だけに使ってるっぽくて、ビルドができるかどうかしかチェックしてないです。",
        "user": "U7Z4F723Z",
        "type": "message"
    },
    {
        "ts": "1567762723.041800",
        "text": "ありがとうございます。\n\n技術的なところがよくわかってなくてすみません。\ncabal v1 or v2のところでnixでhaskellのパッケージをインストールした場合でもv2でインストールしたパッケージを\n利用できますか？\n\nOSSでhydra使うにはどうしたらいいでしょうか。自分でたてるしかないですか？",
        "user": "U74KTAG0N",
        "type": "message"
    },
    {
        "ts": "1567767987.042000",
        "text": "<https://www.haskell.org/cabal/users-guide/nix-integration.html>",
        "user": "U74KTAG0N",
        "type": "message"
    },
    {
        "ts": "1567903688.042300",
        "text": "esqueletoでwhere句を作れずに困っています。makeWhereでwhere句を返したいのですが、個々の検索条件式は良いのですが、E.&amp;&amp;.でまとめて返したいのですがどのように記述すれば良いか困っています。よろしくお願いします。",
        "user": "UCDHJ6R6X",
        "type": "message"
    },
    {
        "ts": "1567904091.043100",
        "text": "まだ公開の準備が整ってないコードなので断片的ですし的外れかもしれませんが私はこのように`fordr`で検索条件をくっつけていました",
        "user": "U57CUMWQ6",
        "type": "message"
    },
    {
        "ts": "1567904177.043500",
        "text": "Nothingの場合適当にTrueでも埋め込んでおけば良いかと",
        "user": "U57CUMWQ6",
        "type": "message"
    },
    {
        "ts": "1567904841.043700",
        "text": "ありがとうございます。 Nothing側にE.val Trueを入れてやってみたら、今回の主旨とは違うコンパイルエラーが出たのでちょっとそちら側を処理してからまた報告します。\n\n    • Couldn't match type ‘Text’ with ‘Maybe Text’\n        arising from a use of ‘ClientCompany’",
        "user": "UCDHJ6R6X",
        "type": "message"
    },
    {
        "ts": "1567906584.043900",
        "text": "ありがとうございます。where句きちんと作成できました！\nコンパイルエラーで多少型合わせの調整しましたが、なんとかなりました。",
        "user": "UCDHJ6R6X",
        "type": "message"
    },
    {
        "ts": "1567909674.046900",
        "text": "<https://github.com/haskell-jp/blog/issues/167>\nこちらの件で、「Strictを指定していようといまいとStackOverflowを起こす」という実験のために、GHCのRTSのスタックサイズを減らすよう `-K1k` と指定してみたのですが、うまくStackOverflowを起こすことができません。\nどこで間違ったのか、教えてください！\n\nソースコード: <https://github.com/haskell-jp/blog/blob/8c1db1af41df8eca8753bb9bcee38691ad13988c/examples/strict-gotchas/stackoverflow.hs>\nコンパイル時のコマンド:\n`stack exec ghc -- -O0 -rtsopts -with-rtsopts=-K1k          .\\stackoverflow.hs`",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1567910287.047300",
        "text": "`-XStrict` をつけたら溢れた。 :thinking_face:",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1567910903.047500",
        "text": "なお、GHCのバージョンは8.6.5です。\nコマンドにバックスラッシュが混ざっていることから察せられるとおり、Windows版を使っています。",
        "user": "U4LGTMTMK",
        "type": "message"
    }
]