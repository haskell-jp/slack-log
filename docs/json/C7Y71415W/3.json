[
    {
        "ts": "1512626729.000003",
        "text": "ですよね。ありがとうございます。",
        "user": "U61BA2X0U",
        "type": "message"
    },
    {
        "ts": "1512735222.000206",
        "text": "<@U8CJWHF0E> has joined the channel",
        "user": "U8CJWHF0E",
        "type": "message"
    },
    {
        "ts": "1513944803.000238",
        "text": "あれ？素体Z_pからZ_pへの自己同型写像ってidしかない……のか？",
        "user": "U61BA2X0U",
        "type": "message"
    },
    {
        "ts": "1513945080.000199",
        "text": "f(1)=1 かつ f(1+1)=f(1)+f(1) を満たそうとするとidにしかならない気がする",
        "user": "U61BA2X0U",
        "type": "message"
    },
    {
        "ts": "1513985831.000100",
        "text": "この質問が関連ありそうですね <https://math.stackexchange.com/questions/665275/is-an-automorphism-on-the-prime-field-the-identity-map>",
        "user": "U5LEE6C1J",
        "type": "message"
    },
    {
        "ts": "1514071340.000030",
        "text": "<@U6J19L2MR> has joined the channel",
        "user": "U6J19L2MR",
        "type": "message"
    },
    {
        "ts": "1514166334.000028",
        "text": "LをK上の有限拡大としたときに “|Aut(L/K)| ≤ [L : K] and equality holds if and only if L is Galois.” だったと思うので、 |Aut(Z_p / Z_p)| ≤ [Z_p : Z_p] = 1 になりそうな気がする。",
        "user": "U4MA78F6X",
        "type": "message"
    },
    {
        "ts": "1514168479.000010",
        "text": "体の準同型写像の定義:\nf : X→Y\nf(0_X)=0_Y\nf(1_X)=1_Y\nf(a+b)=f(a)+f(b)\nf(a・b)=f(a)・f(b)\nがほぼ線型写像の性質そのもので、素体は線型ベクトル空間としての基底が1つしかないのでfの行列表現がA=(1)しかなくなるという風に理解しています",
        "user": "U61BA2X0U",
        "type": "message"
    },
    {
        "ts": "1514183680.000034",
        "text": "<@U8JGMG1QT> has joined the channel",
        "user": "U8JGMG1QT",
        "type": "message"
    },
    {
        "ts": "1514447722.000168",
        "text": "<@U8EJKMNVA> has joined the channel",
        "user": "U8EJKMNVA",
        "type": "message"
    },
    {
        "ts": "1514515225.000008",
        "text": "じょんどろさんの「詳説word2vec」、lotzさんの「作って学ぶBitcoin」、すごくよくて有り難いです！\nHaskell communityからの情報はimpressiveですねー:star:",
        "user": "U55V441FS",
        "type": "message"
    },
    {
        "ts": "1514912849.000022",
        "text": "<@U561MADLH> has joined the channel",
        "user": "U561MADLH",
        "type": "message"
    },
    {
        "ts": "1515047126.000018",
        "text": "Frobenius Automorphism <http://mathonline.wikidot.com/the-frobenius-automorphism-for-a-finite-field> という便利な道具があるのを今更知った件",
        "user": "U61BA2X0U",
        "type": "message"
    },
    {
        "ts": "1515049300.000049",
        "text": "<@U57D08Z9U> has joined the channel",
        "user": "U57D08Z9U",
        "type": "message"
    },
    {
        "ts": "1515323787.000020",
        "text": "ほぼポエムなんですけどHask categoryについての記事を書いてみました\n<https://myuon.github.io/posts/versus-hask-category/>",
        "user": "U560KD6DN",
        "type": "message"
    },
    {
        "ts": "1515323816.000015",
        "text": "Hask is not a category\n↑これすき",
        "user": "U560KD6DN",
        "type": "message"
    },
    {
        "ts": "1515478558.000063",
        "text": "<@U7KC05QBH> has joined the channel",
        "user": "U7KC05QBH",
        "type": "message"
    },
    {
        "ts": "1515647959.000052",
        "text": "<@U4KNX1LQ0> has joined the channel",
        "user": "U4KNX1LQ0",
        "type": "message"
    },
    {
        "ts": "1516167643.000165",
        "text": "<@U4L0B71L1> has joined the channel",
        "user": "U4L0B71L1",
        "type": "message"
    },
    {
        "ts": "1516762974.000033",
        "text": "<@U8X01G6FJ> has joined the channel",
        "user": "U8X01G6FJ",
        "type": "message"
    },
    {
        "ts": "1516766939.000070",
        "text": "<@U8XGRJ3DZ> has joined the channel",
        "user": "U8XGRJ3DZ",
        "type": "message"
    },
    {
        "ts": "1516877325.000076",
        "text": "<@U8YBE1TTM> has joined the channel",
        "user": "U8YBE1TTM",
        "type": "message"
    },
    {
        "ts": "1516943634.000086",
        "text": "<@U57A2859S> has joined the channel",
        "user": "U57A2859S",
        "type": "message"
    },
    {
        "ts": "1517122356.000002",
        "text": "<@U7GCPTF3J> has joined the channel",
        "user": "U7GCPTF3J",
        "type": "message"
    },
    {
        "ts": "1517122851.000023",
        "text": "<@U5R6YLRT2> has joined the channel",
        "user": "U5R6YLRT2",
        "type": "message"
    },
    {
        "ts": "1517175523.000012",
        "text": "<@U8ZBMSPPB> has joined the channel",
        "user": "U8ZBMSPPB",
        "type": "message"
    },
    {
        "ts": "1517195885.000130",
        "text": "<@U90FHSDFG> has joined the channel",
        "user": "U90FHSDFG",
        "type": "message"
    },
    {
        "ts": "1517200530.000065",
        "text": "<@U900NGTV0> has joined the channel",
        "user": "U900NGTV0",
        "type": "message"
    },
    {
        "ts": "1517234846.000231",
        "text": "<@U90881C13> has joined the channel",
        "user": "U90881C13",
        "type": "message"
    },
    {
        "ts": "1517378608.000032",
        "text": "<@U91F1FSJH> has joined the channel",
        "user": "U91F1FSJH",
        "type": "message"
    },
    {
        "ts": "1517462855.000109",
        "text": "圏論の圏の定義で、射の合成に関してはきちんと定義を要請しますが、射の=については、結合律、単位律を満たすように定義するべきですよね？",
        "user": "U900NGTV0",
        "type": "message"
    },
    {
        "ts": "1517492428.000384",
        "text": "`=` は何を表す記号ですか? 射の等しさ?",
        "user": "U578W9676",
        "type": "message"
    },
    {
        "ts": "1517493937.000302",
        "text": "その、圏の定義をを見てたら、=が出てきたので、なんなんだこいつみたいな感じが。",
        "user": "U900NGTV0",
        "type": "message"
    },
    {
        "ts": "1517493965.000294",
        "text": "射の等しさなんでしょうけど。",
        "user": "U900NGTV0",
        "type": "message"
    },
    {
        "ts": "1517494698.000862",
        "text": "例えば射 `f : a -&gt; b` について `f・id_a = f` といったりするときの `=` ですよね。「この両辺を等しくするよう射の合成・恒等射を考える」の代わりに「この両辺を等しくみなすよう射の等しさを考える」と思うような…? あまり深く考えたことなかったです…",
        "user": "U578W9676",
        "type": "message"
    },
    {
        "ts": "1517529870.000163",
        "text": "CoqだとSetoid(Haskellで言うEq)を使ってその辺処理したりするっぽい <https://qiita.com/mathink/items/2067c162fb7cf8f6c83f#setoid-%E3%82%92%E3%83%99%E3%83%BC%E3%82%B9%E3%81%AB%E3%81%97%E3%81%A6%E3%81%84%E3%82%8B%E7%90%86%E7%94%B1>",
        "user": "U570660KX",
        "type": "message"
    },
    {
        "ts": "1517529982.000454",
        "text": "反射律、推移律、対称律は普通前提になってますけど、これらがない場合に何を失うのかはよく分からないです",
        "user": "U570660KX",
        "type": "message"
    },
    {
        "ts": "1517543538.000211",
        "text": "上にもあるとおり圏を与える時についでに同値関係=を与えてしまう方法と、ロジックに元々組み込みの=を使う方法があると思います。\nSetoidでやる場合はid, compositionがSetoidの=を保つみたいな条件がいるので数学では組み込みの=を使い、必要があれば拡張したりするという立場を取るのが普通な気がします\n\n(いずれにせよ同値関係になるようにはするので反射律とか諸々は満たします)",
        "user": "U560KD6DN",
        "type": "message"
    },
    {
        "ts": "1517554061.000137",
        "text": "なるほど。ありがとうございます。",
        "user": "U900NGTV0",
        "type": "message"
    },
    {
        "ts": "1517554487.000177",
        "text": "ついでなんですが、圏C において、射f,gがあり、f=gのとき、dom(f) = dom(g), cod(f) = cod(g)って成り立ちますかね?",
        "user": "U900NGTV0",
        "type": "message"
    },
    {
        "ts": "1517555478.000197",
        "text": "代入原理から成り立ちます",
        "user": "U57D08Z9U",
        "type": "message"
    },
    {
        "ts": "1517555518.000133",
        "text": "通常，=は同値律 + 代入原理を満たす関係として導入するのが一般的ですね",
        "user": "U57D08Z9U",
        "type": "message"
    },
    {
        "ts": "1517556416.000085",
        "text": "ありがとうございます!",
        "user": "U900NGTV0",
        "type": "message"
    },
    {
        "ts": "1517561275.000478",
        "text": "* 代入原理\n* みょんさんの「id, compositionがSetoidの=を保つみたいな条件」\n* 「Coqと圏論」のページの `Proper`\nこの3つは同じ物を指している、と考えていいのかな",
        "user": "U570660KX",
        "type": "message"
    },
    {
        "ts": "1517569574.000032",
        "text": "みょんさんのはちょっと分からないですが，CoqのProperに関しては代入原理と同じだと思います(あまり詳しくないので断言はできませんが)．要はrewriteがsubstitutionにあたるので．まあ，Coqの場合Properを明示しなければいけないので，一般に暗黙的な代入原理を認めてるわけではないと思いますが",
        "user": "U57D08Z9U",
        "type": "message"
    },
    {
        "ts": "1517572082.000132",
        "text": "<@U570660KX> 1つめ≠2つめ=3つめです Properは単にproper conditionを満たせばrewriteルールが使えるようになるってだけです\n「普通の」数学は=とはrefl+substをみたす組み込みのrelationと考えるし、これだけあれば圏論するには十分ですが、Coqでは(というか構成的数学の立場では)implicitな=を扱うのが苦手で「同一視」が欲しくなる時に不便なのでじゃあMorを与える時に一緒に同値関係も与えればいいやんけ！という考え方が上のリンクのやつですね(ただしSetoidの場合は与えられた同値関係がcompositionとcompatibleとかそういう条件がないと上手く機能しないっていうのが上の説明, これはsubstがあるなら自動的に成り立つので組み込みの立場だと不要)\n\nという感じの説明でどうでしょうか(自分でもわかりやすいとは思ってない)",
        "user": "U560KD6DN",
        "type": "message"
    },
    {
        "ts": "1517606688.000165",
        "text": "こんなことちゃんと考える分野があるんですね…なるほど，知りませんでした\n<http://staff.math.su.se/palmgren/czf_and_setoids_final_lmcs.pdf>",
        "user": "U57D08Z9U",
        "type": "message"
    },
    {
        "ts": "1517658064.000003",
        "text": "技術的にはSetoid-enriched category theoryだと思えばいいので難しくはないんですが、何を言語として使うか(ZFCで扱える範囲に限定するか、それとも圏論自体を言語として捉えるか)みたいなのを反映しようとするとこういうのも真面目に考えないといけないというアレですね",
        "user": "U560KD6DN",
        "type": "message"
    },
    {
        "ts": "1517800873.000101",
        "text": "Setoidでやろうとすると、何か新しい物を導入するたびにProperを証明しないと駄目になる感じで面倒だったので、組み込みの=を活かす方向性で次はやってみたいですね",
        "user": "U570660KX",
        "type": "message"
    },
    {
        "ts": "1517963601.000299",
        "text": "<@U94E58PKK> has joined the channel",
        "user": "U94E58PKK",
        "type": "message"
    }
]