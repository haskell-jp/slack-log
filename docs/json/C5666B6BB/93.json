[
    {
        "ts": "1604410736.138100",
        "text": "なるほど〜\n整理して考えるとたしかに！\n`name` は `env` に依存してないってだけなのに、それだけで、`AnyBot`の定義のせいで異質なメソッドになっちゃってる感じですね༼;´༎ຶ ༎ຶ༽\n\n(ちなみにpackってなんですか？:exploding_head:)",
        "user": "U8G16FA59",
        "type": "message"
    },
    {
        "ts": "1604411412.143900",
        "text": "`env`が多相的なのは Has Type Class Pattern とかいうしきたりを真似してみたかんじです:sob:\nメソッドの呼び出し元によって具体的な`env`の型が変わり得るので多相的にしたい感じです:sob:",
        "user": "U8G16FA59",
        "type": "message"
    },
    {
        "ts": "1604414976.147500",
        "text": "`QuantifiedConstraints`なんて拡張があるんですね！\nなんかへんなとこに`forall`ついてる:exploding_head:\n調べながら読んでたんですけど今のところわけわかめです༼;´༎ຶ ༎ຶ༽×999",
        "user": "U8G16FA59",
        "type": "message"
    },
    {
        "ts": "1604569571.148000",
        "text": "何がどうなってるのかさっぱりわからないです:shocked_face_with_exploding_head: :joy:\n```AnyBot :: forall b. (Bot b, forall env. Dep AnyBot env =&gt; BotDep b env) =&gt; b -&gt; AnyBot```\nこれって一体何を意味してるんですか?:exploding_head::x::one::zero::zero::zero:",
        "user": "U8G16FA59",
        "type": "message"
    },
    {
        "ts": "1604585342.148200",
        "text": "&gt; (ちなみにpackってなんですか？:exploding_head:)\nAnyBot のような、ある型の値を existential type の値に変換する操作のことですね。AnyBot の適用と読み替えてもらって構わないです\n\n&gt; これって一体何を意味してるんですか?\nGADTSyntax 使わず existential type で書き直すなら、\n```data AnyBot = forall b. (Bot b, forall env. Dep AnyBot env =&gt; BotDep b env) =&gt; AnyBot b```\nと同じですね。`(Bot b, forall env. Dep AnyBot env =&gt; BotDep b env)` の部分は、\n* `Bot b` の制約が成り立つ\n* 任意の `env` 型について、`Dep AnyBot env` 制約が成り立つならば `BotDep b env` 制約が成り立つ\nの両方が成り立つみたいな意味ですね。`forall env. Dep AnyBot env =&gt; BotDep b env` の部分が `QuantifiedConstraints` 拡張により表現可能になる制約です",
        "user": "U57D08Z9U",
        "type": "message"
    },
    {
        "ts": "1604603465.149000",
        "text": "ウ～ン(+_+)\n\n1. `AnyBot` の型パラメタに `env`  をもたせると、`env` を必要としない `name` メソッドの呼び出しがえらいことになるから、`AnyBot` に `env`  をもたせない。\n2. すると `reply` メソッドの呼び出しに必要な `Dep b env` が足りなくなっちゃうから、`AnyBot`  にパターンマッチしたときに使える制約に `forall env. Dep b env`  的なものを入れたい。\n3. `QuantifiedConstraints`  拡張では `Dep b env`  みたいな型族をかけないから、仕方なく `BotDep`  型クラスを追加して、`instance Dep AnyBot env =&gt; BotDep AnyBot env` とかやって `BotDep`  から `Dep`  が得られるようにしてる。\nって感じのアイディアで大体あってますか?\nむずすぎてむりちゃづけです༼;´༎ຶ ༎ຶ༽",
        "user": "U8G16FA59",
        "type": "message"
    },
    {
        "ts": "1604618745.150100",
        "text": "`forall env. Dep AnyBot env =&gt; BotDep b env` というのは、気持ち的には `forall env. Dep AnyBot env =&gt; Dep b env` と同じですね。これは、\n\n`Dep AnyBot env` 制約が成り立つ場合に、`Dep b env` 制約が成り立つ\n\nつまり、`AnyBot` コンストラクタで pack できる型は、\n\n* `Bot` 制約を満たし\n* `AnyBot` の `Dep` 制約 (今回は `HasLogFunc`) だけから、`Dep` に必要な制約を導ける (今回は例えば `Dep MarkovChain env` は `HasLogFunc env` と同じなので、`Dep MarkovChain env` は `HasLogFunc env`、つまり `Dep AnyBot env` の制約から導けます。もし `Dep MarkovChain env` が `(HasLogFunc env, HasWriteRef Task env)` みたいな制約を必要としていた場合、これは `HasLogFunc env` 制約からは導けないので AnyBot コンストラクタでの pack は失敗します)\n\nみたいな条件のものだけということになります。この条件を守っているなら、各ボットの `reply :: Dep b env =&gt; ...` は `reply :: Dep AnyBot env =&gt; ...` と書いても実装ができるはずなので、`AnyBot` の `Bot` インスタンスが実装できます。そして、上の `AnyBot` コンストラクタで pack される時の条件は `Dep` が成り立つ必要は特に要求していなくて、*もし `Dep AnyBot env` が成り立つならば* `Dep b env` が成り立つことを要求しているだけなので、`Dep` は成り立たなくても pack はでき、`name` も特に `Dep` 制約を必要としないので呼び出せるということになりますね",
        "user": "U57D08Z9U",
        "type": "message"
    },
    {
        "ts": "1604619115.150400",
        "text": "ああ、それと `BotDep` 型クラスについてですが、これは本質的なものではなくて `QuantifiedConstraints` の制約でこういうのを作らないといけないというだけですね。<https://ghc.gitlab.haskell.org/ghc/doc/users_guide/exts/quantified_constraints.html#termination> に制約の内容がありますが、`QuantifiedConstraints` の実装上の制約で `forall env. Dep AnyBot env =&gt; ...` の `...` の部分には type family は書けません。なので、`forall env. Dep AnyBot env =&gt; Dep b env` とは書けないので、代わりに `Dep b env` に相当する型クラス `BotDep b env` を作ってそれを指定しています。",
        "user": "U57D08Z9U",
        "type": "message"
    },
    {
        "ts": "1604696865.151400",
        "text": "わあ!そういうことか!完全に理解しました!:serval:\n`forall env. Dep AnyBot env =&gt; BotDep b env` ってのは、左辺の `Dep AnyBot env` の制約が右辺の `BotDep b env` より厳しい、即ち、`type Dep AnyBot env = ...` で羅列されてる制約の中に、packされようとしている `Bot` インスタンスの `Dep`  の制約が含まれてることを要求してるんですね!\n\n`BotDep` 型クラスのあたりもいまいちどういう発想て゛そんなこと考えついたのかわかりません:sob:\n`go :: Bot b =&gt; BotDep b env =&gt; b -&gt; String -&gt; RIO env (Maybe String)` の部分の `=&gt;` が重なっているのはなぜなのでしょうか?",
        "user": "U8G16FA59",
        "type": "message"
    },
    {
        "ts": "1604720450.152200",
        "text": "<@U01EEFP2KT6> has joined the channel",
        "user": "U01EEFP2KT6",
        "type": "message"
    },
    {
        "ts": "1604722111.152300",
        "text": "&gt; go :: Bot b =&gt; BotDep b env =&gt; b -&gt; String -&gt; RIO env (Maybe String) の部分の =&gt; が重なっているのはなぜなのでしょう\nああ、すいません。癖で書いちゃいましたが、`Bot b =&gt; BotDep b env =&gt;` は `(Bot b, BotDep b env) =&gt;` と同じです",
        "user": "U57D08Z9U",
        "type": "message"
    },
    {
        "ts": "1604731271.152600",
        "text": "<@U01E1MFRX8E> has joined the channel",
        "user": "U01E1MFRX8E",
        "type": "message"
    },
    {
        "ts": "1604911576.153200",
        "text": "ありがとうございます:arigatougozaimasu:\nそうだったんですね!文脈のところもカリー化みたいな感じなことできるんですね!\n\n後もう一つ、`UndecidableSuperClasses` スーパークラスとして型族指定しているのも初めて見ました・・・\n調べているんですけどこれもどう考えればいいのかイマイチまだつかめてないです:sob:",
        "user": "U8G16FA59",
        "type": "message"
    },
    {
        "ts": "1604977000.153500",
        "text": "<@U01ED8J2PQB> has joined the channel",
        "user": "U01ED8J2PQB",
        "type": "message"
    },
    {
        "ts": "1605066217.153700",
        "text": "<@U01EV0SRHPT> has joined the channel",
        "user": "U01EV0SRHPT",
        "type": "message"
    },
    {
        "ts": "1605092063.155100",
        "text": "わあーごめんなさい:woman-bowing:\n一呼吸おいて冷静に考えてみたら全部理解できました༼;´༎ຶ ༎ຶ༽\nすごい勉強になりましたありがとうございます！！！🥳:star-struck:",
        "user": "U8G16FA59",
        "type": "message"
    },
    {
        "ts": "1605334722.162000",
        "text": "<@U01EJPV0E2J> has joined the channel",
        "user": "U01EJPV0E2J",
        "type": "message"
    },
    {
        "ts": "1605575950.163500",
        "text": "GHC 9.0.0-alpha1 は bytestring-0.10 を使っているようですが、最新の 0.11 が含まれるのは alpha2 からでしょうか？",
        "user": "U56MBRKR9",
        "type": "message"
    },
    {
        "ts": "1605683225.163600",
        "text": "新しくBotを追加するたびに`allBots`だけでなく`AnyBot`のインスタンス定義まで書き換えなきゃいけないのが少しイヤだったので、自分なりに作ってみたら難しくなっちゃいました:sob:\n\nもっと上手に書くやり方ありませんか?\nあと変数名や関数名などももっと良いのありますか?:exploding_head:",
        "user": "U8G16FA59",
        "type": "message"
    },
    {
        "ts": "1605700699.164100",
        "text": "<@U01F0HBGLHZ> has joined the channel",
        "user": "U01F0HBGLHZ",
        "type": "message"
    },
    {
        "ts": "1605703967.164200",
        "text": "",
        "user": "U57D08Z9U",
        "type": "message"
    },
    {
        "ts": "1605704015.164600",
        "text": "なるほど， `AnyBot` を constraint 持てるようにしておくと，後から変えられて確かに便利ですね．HList のところは，単に一々 `SomeBot` を `allBots` の全てのボットで書くのが面倒という理由で使ってるなら，ビルダをそもそも定義すればいいだけだと思いますね．その例が上に post したやつです",
        "user": "U57D08Z9U",
        "type": "message"
    },
    {
        "ts": "1605884874.165400",
        "text": "<@U01F7FAG2TC> has joined the channel",
        "user": "U01F7FAG2TC",
        "type": "message"
    },
    {
        "ts": "1605928592.165600",
        "text": "<@U01F5V08U6R> has joined the channel",
        "user": "U01F5V08U6R",
        "type": "message"
    },
    {
        "ts": "1605931184.165700",
        "text": "HListの代わりに、BotとBotの組み合わせを表すBot `(Bot a, Bot b) =&gt; Bot (a, b)` を作ってみるのはどうでしょう？型クラスはこのような一般性のあるインスタンスにおいて力を発揮します(nameがリストを返すようにするなどの変更は必要かもしれませんが)",
        "user": "U4KUNQF9N",
        "type": "message"
    },
    {
        "ts": "1605977651.166000",
        "text": "<@U01FZAHP480> has joined the channel",
        "user": "U01FZAHP480",
        "type": "message"
    },
    {
        "ts": "1606031546.172600",
        "text": "ghcupを使ってみています．ghcupをインストールしたのち，これに付随するcabalコマンド(`~/.ghcup/bin/cabal`)で\n```cabal new-install pandoc```\nのようにすると，`~/.cabal` 以下にパッケージやコマンドがインストールされますが，これらを\n```cabal list --installed```\nとしても確認できません．上記コマンドでは`~/.ghcup/ghc/8.8.4/lib/ghc-8.8.4` 以下のパッケージがリストアップされます．~/.cabal 以下に入っているパッケージを確認するにはどうするとよいか，どなたかおわかりでしょうか．使用しているコマンドのバージョンは以下の通りで，OSはmacOS 10.15.7 です．\nHaskell関連のファイル（`~/.cabal`, `~/.ghc`, `~/.stack`等）や，Homebrew等で入れたHaskell関連のパッケージはいったん全部削除してから作業しています．\n```$ ghcup --version\nThe GHCup Haskell installer, version v0.1.12\n$ cabal --version\ncabal-install version 3.2.0.0\ncompiled using version 3.2.0.0 of the Cabal library ```",
        "user": "U56LT20RJ",
        "type": "message"
    },
    {
        "ts": "1606034106.173100",
        "text": "多分 `cabal list --installed` が正しくnix-style local build（いわゆる `new-install` インストールしたりするやつですね）でインストールしたパッケージを正しく認識していないのが原因なんだと思われます。\nただ、いずれにしてもこれで確認できなくとも `pandoc` コマンドは多分に問題なく使えるでしょうし、 `pandoc` に依存したプロジェクトを作る場合でもcabalファイルに `pandoc` を書けば問題なく使えるはずです（必要なバージョンがインストールされてない場合はビルド時に再度インストールされるだけ）。\nなので、あまり確認する必要性が感じられていないから `cabal list --installed` が修正されていないのではないかと推測しています。\n（でも紛らわしいので何らかの対応は欲しいですね... :cold_sweat: ）",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1606034426.173300",
        "text": "あるいは、 `cabal new-install --lib pandoc`  であればもしかしたら結果が変わるかも知れません。どちらにしても問題なく使えるとはは思いますが",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1606055778.173600",
        "text": "ありがとうございます．たしかに `~/.cabal` 以下にインストールされたものはちゃんと使えるのですが，何となく変な感じですよね．",
        "user": "U56LT20RJ",
        "type": "message"
    },
    {
        "ts": "1606057267.174000",
        "text": "代替案として `cabal new-exec` （もしかしたら最近のcabalだともう `new-` は要らないかも）を使って、  `cabal new-exec ghc-pkg list` はいかがでしょうか？自分がインストール済みのパッケージの一覧をとるときは大抵 `ghc-pkg list` を使いますね。（ぶっちゃけ `cabal list` コマンド自体初めて見たかもしれない... :sweat_smile: ）",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1606058056.176300",
        "text": "<https://haskell-jp.slack.com/archives/CR2TETE5R/p1605992173052400>\nこの一連のスレッドに回答していて気になったんですけど、ghcって、アセンブリーを生成してからランタイムなどをリンクさせるためにgcc（と、gccがラップしているリンカーやアセンブラー）を呼んでオブジェクトコードを生成しているんですかね？",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1606098012.176600",
        "text": "GHCでのコンパイル時には、ターゲットCPUがx86であれば、まず、GHCが直接にx86ネイティブのアセンブリコードを生成します。 （ターゲットCPUがArmなどの場合であれば、ネイティブアセンブリでなくLLVMコードを生成します。）\nアセンブリコードをアセンブルしてオブジェクトコードを生成するには、OSプラットフォームのアセンブラを使用します。（通常そのアセンブラは、GCCやClangなどのコンパイラ経由で呼び出されます。）\nオブジェクトコード間の最終リンクについては、OSプラットフォームごとのリンカ（goldやlld）が呼ばれます。\nGHCがどういう外部ツールを使用するかは、`ghc --info` コマンドで見えます。\nあと参考に、その辺の処理を担当しているのは、GHCの `compiler/GHC/Driver/Pipeline.hs` 付近のコードになります。",
        "user": "U55V441FS",
        "type": "message"
    },
    {
        "ts": "1606225433.177500",
        "text": "<@U01FEQHLVDG> has joined the channel",
        "user": "U01FEQHLVDG",
        "type": "message"
    },
    {
        "ts": "1606392856.180900",
        "text": "ありがとうございます！なるほど！`HList`定義しなくてもビルダーで書けばかなりスッキリシンプルになりますね！\nただその代わり値からの型推論はできなくなっちゃうみたいですね…\nどうしよう…\n",
        "user": "U8G16FA59",
        "type": "message"
    },
    {
        "ts": "1606393069.184400",
        "text": "わあありがとございます！たしかに！タプルで十分できそうですね！\nそういうインスタンス定義するだけで\n`(HogeBot,(FugaBot,PiyoBot))`とかすればリストみたいにできちゃいますね〜ふむふむ…",
        "user": "U8G16FA59",
        "type": "message"
    },
    {
        "ts": "1606452843.184700",
        "text": "<@U01F7AKBH0F> has joined the channel",
        "user": "U01F7AKBH0F",
        "type": "message"
    },
    {
        "ts": "1606462288.184800",
        "text": "本質的には変わりませんが、HListにこだわるのであればHListをBotのインスタンスにするのも一興ですね",
        "user": "U4KUNQF9N",
        "type": "message"
    },
    {
        "ts": "1606492583.185000",
        "text": "わああたしかに良さそうですね!:owl:\n\nHList にしてるのは\n```allBots = MarkovChain :+: Shiritori :+: HNil```\nとかから型推論させてみたいからです〜\nまあでもこれだと型推論はできても\n```allBots :: HList HasLogFunc```\nとか書いたときにエラーになっちゃうんですよね〜\n```type family (:&amp;&amp;:) c1 c2 :: Type -&gt; Constraint where\n  (:&amp;&amp;:) c1 CEmpty = c1\n  (:&amp;&amp;:) CEmpty c2 = c2\n  (:&amp;&amp;:) c c = c\n  (:&amp;&amp;:) c1 c2 = c1 :&amp;: c2\n\ndata HList :: (Type -&gt; Constraint) -&gt; Type where\n  HNil :: HList CEmpty\n  (:+:) :: (Bot b) =&gt; b -&gt; HList c -&gt; HList (Dep b :&amp;&amp;: c)```\nとかにすればある程度 (`HList (HasLogFunc :&amp;: (HasLogFunc :&amp;: CEmpty))`とか) はエラーじゃなくなるんですけど、もっとちゃんとやるには型レベルのnub関数みたいなの作らなきゃいけなくなってしんどいです・・・\nmanaさんの書いてくれたコードの感じぐらいに落ち着かせるのがいいんですかね〜:eyes:",
        "user": "U8G16FA59",
        "type": "message"
    },
    {
        "ts": "1606572499.186000",
        "text": "<@U01FQCD9X0A> has joined the channel",
        "user": "U01FQCD9X0A",
        "type": "message"
    },
    {
        "ts": "1606576089.186200",
        "text": "<@U01FWJ90CKE> has joined the channel",
        "user": "U01FWJ90CKE",
        "type": "message"
    },
    {
        "ts": "1606671906.186300",
        "text": "ふと思ったんですけど、麻那さんのプログラムの\n```go :: Bot b =&gt; BotDep b env =&gt; b -&gt; String -&gt; RIO env (Maybe String)```\nってとこ、どうして普通の `Dep b env` じゃ動かないんでしょうか?",
        "user": "U8G16FA59",
        "type": "message"
    },
    {
        "ts": "1606792564.186600",
        "text": "github actions で CI を回している人はいますか？\nHaskell CIを実行すると `MIN_VERSION_conduit` でひっかかるのですが、理由が分かる人はいませんか？\n\n<https://github.com/kazu-yamamoto/wai-app-file-cgi/runs/1477613399>",
        "user": "U56MBRKR9",
        "type": "message"
    },
    {
        "ts": "1606798639.187100",
        "text": "手元では落ちないんですよね？となると、cabal のバージョンが古いor新しいとか？？\n<https://github.com/actions/setup-haskell>\ncabal-version で手元と同じバージョンにすれば動作しないですかね。。。？",
        "user": "U56L7EVNY",
        "type": "message"
    },
    {
        "ts": "1606799080.187400",
        "text": "cabal は 3.2 で、手元も github actions も同じです。。。",
        "user": "U56MBRKR9",
        "type": "message"
    },
    {
        "ts": "1606804278.187700",
        "text": "これは、単に cabal v2-test で doctest がうまく動かない問題でした。CI で doctest を実行するのを止めて解決しました。",
        "user": "U56MBRKR9",
        "type": "message"
    },
    {
        "ts": "1606806793.188000",
        "text": "<https://github.com/notogawa/haiji/blob/df7fe2135adec2518f6797c7c4911d70f2fe5ad0/test/doctests.hs> こんな感じので動かないですか？",
        "user": "U5G2BCVBN",
        "type": "message"
    },
    {
        "ts": "1606806823.188300",
        "text": "ちょっと雑なのでパスちゃんと取れる手段があるならそのほうがいいけど",
        "user": "U5G2BCVBN",
        "type": "message"
    },
    {
        "ts": "1606831152.189700",
        "text": "build-type: Customを許容できるのであれば <https://hackage.haskell.org/package/cabal-doctest|https://hackage.haskell.org/package/cabal-doctest> がおすすめです",
        "user": "U4M9NJ7QE",
        "type": "message"
    },
    {
        "ts": "1606960187.195300",
        "text": "自分で定義した型の値を他の直積型のフィールドにする際にUNPACKプラグマをつけるかどうかで違いは出てきますか？\n例えば以下のような状況です\n```data Foo = Foo {-# UNPACK #-} !Int {-# UNPACK #-} !Int\ndata Bar = Bar {-# UNPACK #-} !Int !Foo```\n```data Foo = Foo {-# UNPACK #-} !Int {-# UNPACK #-} !Int\ndata Bar = Bar {-# UNPACK #-} !Int {-# UNPACK #-} !Foo```\nFooがどう定義されているかによっても変わってくるのでしょうか?",
        "user": "UP6J2B1LL",
        "type": "message"
    }
]