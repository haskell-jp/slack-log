[
    {
        "ts": "1582715671.026900",
        "text": "実装を見ると、入力値を全て記憶していますね。これはfumievalさんに上で説明頂いた対角化のようです <https://www.stackage.org/haddock/lts-15.1/machines-0.7/src/Data.Machine.Mealy.html#driveMealy>",
        "user": "U570660KX",
        "type": "message"
    },
    {
        "ts": "1582715810.027100",
        "text": "ArrowApplyインスタンスが正しく定義できる場合、`k a b` と `a -&gt; k () b` が同型になるので、ArrowMonadで一般のMealyを表現できます",
        "user": "U570660KX",
        "type": "message"
    },
    {
        "ts": "1582721720.028600",
        "text": "今日同僚と話して気になったんですが、構文とか、表面的な要素を除いて、型レベルプログラミングにできてTemplate Haskellにできないこと、って何がありますかね。あるのは間違いないんですが、なんかうまく言語化できないので、お知恵を拝借したいです。",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1582722789.028700",
        "text": "一言で表すなら「型に応じて挙動を変えること」ではないでしょうか。Template Haskellは型検査の前にあるので、構文として見えている型が実際は何であるか、既知のデータから推測しかできない一方、型レベルプログラミングなら型に依存した振る舞いを拡張性のある形で表現できます",
        "user": "U4KUNQF9N",
        "type": "message"
    }
]