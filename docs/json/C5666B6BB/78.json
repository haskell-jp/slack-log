[
    {
        "ts": "1579674288.041000",
        "text": "前悩んだ時は `LANG=C` で言語指定したらビルドできました",
        "user": "U57CUMWQ6",
        "type": "message"
    },
    {
        "ts": "1579674403.041200",
        "text": "フォローアップを忘れていました。have-quartz-gtkフラグが必要です。cabalなら\n`cabal build --with-gcc=gcc-9 --constraint=\"gtk +have-quartz-gtk\"` でいけると思います。",
        "user": "U4M9NJ7QE",
        "type": "message"
    },
    {
        "ts": "1579674551.041500",
        "text": "ちなみに`cabal install gtk --with-gcc=gcc-9` を試されていますがcabal v3以降ではプロジェクト外での cabal install は実行ファイルをインストールするコマンドです。ライブラリをインストールする場合は `cabal install --lib` を使う必要があります。",
        "user": "U4M9NJ7QE",
        "type": "message"
    },
    {
        "ts": "1579695907.046100",
        "text": "競プロ用に`Data.Vector.Fusion.Bundle.Monadic`を弄っていて，\n```-- | Monadic streams\ndata Bundle m v a = Bundle { sElems  :: Stream m a\n                           , sChunks :: Stream m (Chunk v a)\n                           , sVector :: Maybe (v a)\n                           , sSize   :: Size\n                           }```\nを見たんですが，この第三フィールド(`sVector`)，なんで存在するのか分かる方っていらっしゃいます？ `Data.Vector.Generic.unstream`でさえこれを消費しているように見えないので，本当になんのためにあるのか分からなくて……．",
        "user": "UL1HFJATE",
        "type": "message"
    },
    {
        "ts": "1579701801.046400",
        "text": "<@UT17P5TRU> has joined the channel",
        "user": "UT17P5TRU",
        "type": "message"
    },
    {
        "ts": "1579764984.046600",
        "text": "詳しいことは分からないですが `sVector` ができた経緯としては `fromVector` でもらった vector をそのまま保存するためみたいですね\n<https://github.com/haskell/vector/commit/f375eff766f1fbecfc2944da3a7034c22658590a#diff-a5466f1eaf4aa39e68b2095915f3fde1L1590-R1594>",
        "user": "U4L0B71L1",
        "type": "message"
    },
    {
        "ts": "1579766903.046900",
        "text": "試しに `sVector` を消してコンパイル通してみましたが、確かに取り出してないように見えますね\n<https://github.com/haskell/vector/compare/master...kakkun61:remove-svector>",
        "user": "U4L0B71L1",
        "type": "message"
    },
    {
        "ts": "1579777889.049600",
        "text": "ですよね…。ありがとうございます。まあ、fromVectorで代入されてるのは見てるんですけど、やっぱよくわからないですね…。外部ライブラリで使用させてあげるためとか？　それとも歴史的な理由か…。",
        "user": "UL1HFJATE",
        "type": "message"
    },
    {
        "ts": "1579906992.049900",
        "text": "英語で聞くのは大変かとは思いますがどうやらここにvectorパッケージのメンテナはいないようなので\n<https://github.com/haskell/vector/issues|https://github.com/haskell/vector/issues> か適当なML（恐らくlibraries@haskell.org あたり？）で聞かないとこれ以上のことはわからないと思います:disappointed_relieved:",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1579945531.050200",
        "text": "<@UT3D6KADS> has joined the channel",
        "user": "UT3D6KADS",
        "type": "message"
    },
    {
        "ts": "1579966853.050400",
        "text": "ですよね………．でも，英語で聞くのは問題ないんですが，「存在することに問題(issue)がある」というふうには思えなかったので，とりあえずここで聞いてみたんですよね",
        "user": "UL1HFJATE",
        "type": "message"
    },
    {
        "ts": "1579967817.050600",
        "text": "と思ったけど，issueはproblemじゃないんだから，バグでも改善点でもない単なる疑問点でも聞いていいのか………？",
        "user": "UL1HFJATE",
        "type": "message"
    },
    {
        "ts": "1579994137.050900",
        "text": "「存在することに問題(issue)」は十分ありえますよ。余計なフィールド（実際にはまだ容疑だけですが）があると言うことはそれだけでこうして意味を調べる時間を割かないといけない原因になりますし、新しい機能を追加したりするときに検討事項を増やす要因になり得ます。\nユーザーに直接影響を与えることは（多分）ないでしょうがメンテナンスの負荷を多かれ少なかれ上げることになるので立派な問題だと思います。",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1580015626.051100",
        "text": "ふむ",
        "user": "UL1HFJATE",
        "type": "message"
    },
    {
        "ts": "1580016168.051300",
        "text": "<https://github.com/haskell/vector/issues/269> とりあえずissueにしました．",
        "user": "UL1HFJATE",
        "type": "message"
    },
    {
        "ts": "1580017122.051600",
        "text": "正直忙しそうで申し訳ないのですけどね………",
        "user": "UL1HFJATE",
        "type": "message"
    },
    {
        "ts": "1580023135.052000",
        "text": "<@UT6747D2B> has joined the channel",
        "user": "UT6747D2B",
        "type": "message"
    },
    {
        "ts": "1580192957.052500",
        "text": "<@UB5UV511U> has joined the channel",
        "user": "UB5UV511U",
        "type": "message"
    },
    {
        "ts": "1580315147.052800",
        "text": "<@USZA2JQF3> has joined the channel",
        "user": "USZA2JQF3",
        "type": "message"
    },
    {
        "ts": "1580343114.055900",
        "text": "基本的なことなのですが、たとえば\n```\nmain :: IO ()\nmain = do\n                 putStrLn “string”\n                 putStrLn “string”\n```\nがメモイズされないのってなぜですか？\nIO独自で阻害する何かがあるのか、もっと一般的なことなのでしょうか。",
        "user": "UH195J82Y",
        "type": "message"
    },
    {
        "ts": "1580346074.056100",
        "text": "何がメモ化されるべきだと考えているのですか？",
        "user": "U56MBRKR9",
        "type": "message"
    },
    {
        "ts": "1580346254.056300",
        "text": "一つ目の `putStrLn \"string\"` がメモ化されて1回しか出力されないのでは、という話ですかね？",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1580347091.058000",
        "text": "そうです！\nメモ化されるべきではないですが、メモ化されるべきではないという明示がない同引数の関数をメモ化していないのはIO自体に細工があるのでしょうか？",
        "user": "UH195J82Y",
        "type": "message"
    },
    {
        "ts": "1580347603.059600",
        "text": "うーん。フィボナッチの計算などでいうメモ化のことであれば、Haskellでもメモ化のためのライブラリなどを使わないとメモ化されないと思います。",
        "user": "U56MBRKR9",
        "type": "message"
    },
    {
        "ts": "1580347630.060100",
        "text": "参考： <https://www.ipsj.or.jp/07editj/promenade/4608.pdf>",
        "user": "U56MBRKR9",
        "type": "message"
    },
    {
        "ts": "1580347701.061600",
        "text": "あれ、そうでしたっけ。\n資料ありがとうございます。\n読んでみます。\n\nもう少しHaskellのメモ化戦略について調べてみますorz",
        "user": "UH195J82Y",
        "type": "message"
    },
    {
        "ts": "1580347817.061800",
        "text": "（もう回答済みで恐縮ですが）そもそも、別々の場所にあるたまたま同じ形の式が自動でメモ化されるなんてことはありません。\nじゃぁどういう条件だとメモ化されるの、というと、結構複雑です、こちらのスレッドや記事なども参考にどうぞ、とだけ :sweat_smile:\n<https://haskell-jp.slack.com/archives/C5666B6BB/p1564340963043600>\n<http://www.kotha.net/hperf/basics.html>\n<https://kakkun61.hatenablog.com/entry/2019/07/29/%E9%96%A2%E6%95%B0%E3%81%AE%E3%83%A1%E3%83%A2%E5%8C%96>",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1580347830.062100",
        "text": "これも： <https://github.com/kazu-yamamoto/recursion-drill/blob/master/drill/7.md>",
        "user": "U56MBRKR9",
        "type": "message"
    },
    {
        "ts": "1580347914.063700",
        "text": "たぶん、メモイズが提供される高階関数とHaskell自体の機能を混同してました。\nありがとうございました。\n\n<https://stackoverflow.com/questions/13059381/an-option-to-make-memoization-the-default-behaviour-of-haskell|https://stackoverflow.com/questions/13059381/an-option-to-make-memoization-the-default-behaviour-of-haskell>",
        "user": "UH195J82Y",
        "type": "message"
    },
    {
        "ts": "1580347943.064200",
        "text": "自動的にメモ化されるとなると、コンパイラが動的計画法を自動的に実装してくれることになりますが、一般的にそんなことはしません。",
        "user": "U56MBRKR9",
        "type": "message"
    },
    {
        "ts": "1580347980.064800",
        "text": "資料ありがとうございます！\n助かります！",
        "user": "UH195J82Y",
        "type": "message"
    },
    {
        "ts": "1580349241.068000",
        "text": "すみません、高階関数の機能ではなくcommon subexpression eliminationについてでした！\n\n&gt; So GHC does do CSE, but only in specific circumstances --- see the GHC manual. (Section??)\n詳細への参照が「セクション？？」になってます笑\n\n単純にこのIOのケースではCSEは動かないし、そんなにCSEが動く場面はないよ、ということでした。\n\n<https://wiki.haskell.org/GHC_optimisations#Common_subexpression_elimination|https://wiki.haskell.org/GHC_optimisations#Common_subexpression_elimination>",
        "user": "UH195J82Y",
        "type": "message"
    },
    {
        "ts": "1580350731.068400",
        "text": "ところで，CSE が動けば IO はメモ化されますが，IO のメモ化とIO effect のメモ化は異なる概念なので，effect がメモ化されるわけではありません:\n```main = let e = putStrLn \"string\" in e &gt;&gt; e```\nで，e の二回目の呼び出しは (最適化を考えなければ)メモ化されますが， string は2回出力されます．GHC の場合，IO は単純な State モナドで実装されているので，e は状態操作関数が束縛されていると思えば良くて，状態操作関数をメモ化したところで，関数の実行は2回行われるので作用は2回行われるというのが，作用がメモ化されない要因ですね\n(ただし，この前提は最適化次第では崩れる場合があり，特にインライン展開の順番には GHC は気を使っていて，IO 相当の状態操作関数はインライン展開が幾つか阻害される場合があります)",
        "user": "U57D08Z9U",
        "type": "message"
    },
    {
        "ts": "1580350852.068600",
        "text": "最適化を考えない場合の話は，State モナドでも同様なので，State モナドの作用がメモ化されないのはなぜか考えてみるのがいい気がします",
        "user": "U57D08Z9U",
        "type": "message"
    },
    {
        "ts": "1580378035.069500",
        "text": "<@UTAPYCPDW> has joined the channel",
        "user": "UTAPYCPDW",
        "type": "message"
    },
    {
        "ts": "1580547253.069900",
        "text": "<@UTDPQTK36> has joined the channel",
        "user": "UTDPQTK36",
        "type": "message"
    },
    {
        "ts": "1580714826.070100",
        "text": "stackでgccを指定するやり方がちょっと調べてもわからないんですよね、、\n\n\nいただいたbuildコマンドを試したところ\n```unrecognized 'build' option `--constraint=gtk +have-quartz-gtk'```\nと言うエラーが出ました。\n\ncabalのバージョンが\n```cabal-install version 2.4.1.0\ncompiled using version 2.4.1.0 of the Cabal library ```\n遅れてるのでしょうか？",
        "user": "UELFKSH0V",
        "type": "message"
    }
]