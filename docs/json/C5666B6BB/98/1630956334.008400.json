[
    {
        "ts": "1630956334.008400",
        "text": "お疲れ様です。\npythonとかのfor文 とbreak / continue / returnのコード（for ループから脱出するコード）をhaskellに持ってくる場合に\n再帰をつかわないならthrow, catchしかないですかね。\n（それで置き換えている人はひとはみたことがないですが。）\n初学者ではよく変数の代入が問題になりますが、\nこのあたり(for文)を初学者は悩んでないのか、どう折り合いをつけているのか気になっております。\nocamlさんもscalaさんもfor ループから脱出するという概念がないようですね。\n<https://ocaml.org/learn/tutorials/if_statements_loops_and_recursion.ja.html>\n<https://scala-text.github.io/scala_text/control-syntax.html>\nfor文を再帰に置き換えるテンプレとかあるのでしょう？",
        "user": "U74KTAG0N",
        "type": "message"
    },
    {
        "ts": "1630969743.009200",
        "text": "<https://booth.pm/ja/items/829369> に `ContT` を使って再現した例があります。\n<https://github.com/kakkun61/procedural-haskell-sample-code/blob/master/lib/Procedural.hs> がライブラリーで、\n<https://github.com/kakkun61/procedural-haskell-sample-code/blob/master/control/Main01.hs> がその使用例。",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1630990186.010000",
        "text": "Haskellで例外を出してしまうと、まっとうな方法ではIOの文脈でしかキャッチできないので例外でどうこうするのはあんまり見たことが無いですね\n`Cont` とかも良いですが、再帰の場合は明示的に次を呼び出さないとループにならないので次を呼び出さずに打ち切るとか、 `unfoldr` でNothingを返すとか、 `Nothing` を返すようにして `takeWhile` するとかですかね",
        "user": "U57CUMWQ6",
        "type": "message"
    },
    {
        "ts": "1631080782.012100",
        "text": "`EitherT` で `forM_` するとかもアリかもしれないですね",
        "user": "UL1HFJATE",
        "type": "message"
    }
]