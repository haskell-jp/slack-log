[
    {
        "ts": "1541120228.032200",
        "text": "はい，let-束縛で変数を束縛するのは値ではなく，計算であるというのは理解できました．\n「サンク」であることと「停止しない計算」とは区別できないように思いますがどうでしょう．",
        "user": "U4KU9ABL0",
        "type": "message"
    },
    {
        "ts": "1541121468.032400",
        "text": "それと，let x = 1 のときx に束縛されるのは 1 という式で表される計算であって，値ではないと考えていいように思います．\n&gt;オブジェクトは大きく分けて2種類ある\n計算の1種類だけでよいような気がしますがどうですか？",
        "user": "U4KU9ABL0",
        "type": "message"
    },
    {
        "ts": "1541123752.032800",
        "text": "&gt; 「サンク」であることと「停止しない計算」とは区別できないように思いますがどうでしょう．\nHaskellの関数は基本的には値を取るため、オブジェクトがサンクかどうかを判定することはできません(GHCにはunpackClosure#のような例外あり)が、書き手が区別しないわけではないというのが重要だと思います。\n&gt; 計算の1種類だけでよいような気がしますがどうですか？\nサンクは計算を指し示していますが、計算そのものとは別に扱うべきで、実際のモデルと乖離した定義をする(GHCなら17種類あるものを全部\"計算\"と呼ぶ)ことには賛成できません。",
        "user": "U4KUNQF9N",
        "type": "message"
    },
    {
        "ts": "1541124254.033100",
        "text": "本文中では、「代入が」オブジェクトに関するものだとしており、この束縛と計算の議論とは直接関係ないので、あえてオブジェクトの定義に触れる必要はないと思います。",
        "user": "U4KUNQF9N",
        "type": "message"
    },
    {
        "ts": "1541126593.033700",
        "text": "ああ．またやらかしました．すみません．変数にバインドできるものをオブジェクトと読んでしまってました．",
        "user": "U4KU9ABL0",
        "type": "message"
    },
    {
        "ts": "1541139155.033900",
        "text": "評価完了していない値を_|_と書くのは、Wikipediaに載ってる不動点意味論の流儀なのかなあと思うのですが、確かにHaskellの一般的な用法とちょっと違う感じがしますね <https://ja.wikipedia.org/wiki/%E8%A1%A8%E7%A4%BA%E7%9A%84%E6%84%8F%E5%91%B3%E8%AB%96>",
        "user": "U570660KX",
        "type": "message"
    },
    {
        "ts": "1541140401.034200",
        "text": "&gt; 評価完了していない値を_|_と書くのは、Wikipediaに載ってる不動点意味論の流儀なのかなあと思うのですが\nなるほど、これは僕の勉強不足でした :bow: ",
        "user": "U57D08Z9U",
        "type": "message"
    },
    {
        "ts": "1541151009.034700",
        "text": "QuasiQuoteのいい活用方法だと思う。\n<https://github.com/ryota-ka/duration>",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1541157914.035000",
        "text": "<@UDVPWQ5T8> has joined the channel",
        "user": "UDVPWQ5T8",
        "type": "message"
    },
    {
        "ts": "1541161411.035300",
        "text": "⊥の話は，R.Bird \"Introduction to Functional Programming using Haskell\" に少し出てきます．",
        "user": "U4KU9ABL0",
        "type": "message"
    },
    {
        "ts": "1541170370.036000",
        "text": "Hackage に上がりました <http://hackage.haskell.org/package/pixela>",
        "user": "U4L0B71L1",
        "type": "message"
    },
    {
        "ts": "1541170407.036400",
        "text": "CI したい",
        "user": "U4L0B71L1",
        "type": "message"
    },
    {
        "ts": "1541200168.036800",
        "text": "&gt;Haskellでは let x = 1 * 2 はxに(1 * 2を計算した)値を束縛しているのではなく，言うとしたら(call by name的には)1 * 2という式自体への束縛，または(call by need的には)1 * 2という計算自体への束縛というのが正しいと思います(なので記事の値への束縛というのが誤った使用法というのはHaskellでは誤りというのに同意です)．\n\n「変数の値へのバインド」ではcall-by-needを実現できないということでしょうか？変数と値の対(バインディング)のリストを環境として，式を環境下で解釈して値を得る意味関数ではcall-by-need流の意味論を構成できないということでしょうか？",
        "user": "U4KU9ABL0",
        "type": "message"
    },
    {
        "ts": "1541206098.037300",
        "text": "議論が後退している気がします。値をバインドするとしてしまうと、評価していないものをバインドできない（したがってcall-by-needにならない）というのは本文でもこの議論でも触れたとおりです。",
        "user": "U4KUNQF9N",
        "type": "message"
    },
    {
        "ts": "1541206313.037500",
        "text": "また、「λ変数」「意味関数」のような一般的に使われていない用語を定義せずに持ち込むのは、議論が困難になるので避けていただきたいです",
        "user": "U4KUNQF9N",
        "type": "message"
    },
    {
        "ts": "1541207589.037700",
        "text": "&gt;また、「λ変数」「意味関数」のような一般的に使われていない用語を定義せずに持ち込むのは、議論が困難になるので避けていただきたいです\nすみません．「λ変数」は「束縛変数」，「意味関数」は「評価器」と読みかえてください．今後は，この用語は使いません．",
        "user": "U4KU9ABL0",
        "type": "message"
    },
    {
        "ts": "1541207844.037900",
        "text": "&gt;値をバインドするとしてしまうと、評価していものをバインドできない（したがってcall-by-needにならない）というのは本文でもこの議論でも触れたとおりです。\nここのところは「値をバインドするとしてしまうとcall-by-needになるような評価器を作成できない」と解釈してもいいですか？",
        "user": "U4KU9ABL0",
        "type": "message"
    },
    {
        "ts": "1541210715.038500",
        "text": "はい、実装してみようとしてみるとできないことが比較的簡単にわかると思います",
        "user": "U4KUNQF9N",
        "type": "message"
    },
    {
        "ts": "1541211173.038700",
        "text": "ありがとうございます．ちょっとやってみます．",
        "user": "U4KU9ABL0",
        "type": "message"
    },
    {
        "ts": "1541221427.039500",
        "text": "<https://www.tweag.io/posts/2018-10-04-capability.html>",
        "user": "U5LV76EJH",
        "type": "message"
    },
    {
        "ts": "1541221524.041100",
        "text": "deriving via句にMonadReaderが出てきて :thinking_face: ってなったけど、capabilityのMonadReader m aはm aのnewtypeなのか！",
        "user": "U5LV76EJH",
        "type": "message"
    },
    {
        "ts": "1541221531.041300",
        "text": "<https://github.com/tweag/capability/blob/master/src/Capability/Reader/Internal/Strategies.hs>",
        "user": "U5LV76EJH",
        "type": "message"
    },
    {
        "ts": "1541225309.041500",
        "text": "Lazyな(おもちゃ)言語を作ってみました．\n変数を値にバインドしたバインディングのリストで環境を構成しています．",
        "user": "U4KU9ABL0",
        "type": "message"
    },
    {
        "ts": "1541225331.041700",
        "text": "<https://gist.github.com/nobsun/5b310dd4a397af624690b6ca4b0af2c8>",
        "user": "U4KU9ABL0",
        "type": "message"
    },
    {
        "ts": "1541227130.042300",
        "text": "Bindの定義を見るとわかる通り、これは変数名と「Valueの計算」の対(タプルは要素について非正格なため)になっていますね",
        "user": "U4KUNQF9N",
        "type": "message"
    },
    {
        "ts": "1541227419.042500",
        "text": "「Value」と「Valueの計算」は別ものですか？",
        "user": "U4KU9ABL0",
        "type": "message"
    },
    {
        "ts": "1541227601.042700",
        "text": "別物であるがゆえに、その評価器はcall-by-needを実現しています。",
        "user": "U4KUNQF9N",
        "type": "message"
    },
    {
        "ts": "1541227624.042900",
        "text": "どうやって区別するのですか？",
        "user": "U4KU9ABL0",
        "type": "message"
    },
    {
        "ts": "1541227721.043100",
        "text": "タプルはその要素が値である必要はなく、サンクも入れることができます。<http://hackage.haskell.org/package/ghc-heap-view-0.5.10/docs/GHC-HeapView.html>　を使えばプログラムの中で判別することもできますよ。",
        "user": "U4KUNQF9N",
        "type": "message"
    },
    {
        "ts": "1541227726.043300",
        "text": "書くのに全く区別を意識したわけではなです．",
        "user": "U4KU9ABL0",
        "type": "message"
    },
    {
        "ts": "1541227815.043500",
        "text": "区別を意識して実装しなければ議論が成り立ちません。",
        "user": "U4KUNQF9N",
        "type": "message"
    },
    {
        "ts": "1541228026.043700",
        "text": "区別する必要が全くなかったので意識しませんでした．私が議論が理解できなかったのはそこですね．なぜ区別するのかが判らないんです．",
        "user": "U4KU9ABL0",
        "type": "message"
    },
    {
        "ts": "1541228069.043900",
        "text": "申し訳ないのですが、これ以上議論を進められる気がしないのでこれ以上のコメント(おそらく同じ説明を繰り返すことになるでしょう)は控えさせていただきます。",
        "user": "U4KUNQF9N",
        "type": "message"
    },
    {
        "ts": "1541228197.044100",
        "text": "はい．ここからは，自分で考えてみたいとおもいます．長々とお付き合いいただきありがとうございます．",
        "user": "U4KU9ABL0",
        "type": "message"
    },
    {
        "ts": "1541228268.044300",
        "text": "おそらく実装する言語を正格な言語(例えばRustやOCamlなど)にしてみるのがいいのではないでしょうか?",
        "user": "U57D08Z9U",
        "type": "message"
    },
    {
        "ts": "1541228809.044500",
        "text": "正格な言語を使えば意識せざるを得ないだろうことは想像できますが，非正格の言語を使うときにどう考えるのかという話であったように思います．それで，ふつうにHaskellで実装しました．Haskellを使っている限りにおいて意識しませんし，しなくてよいのではという思いが私の根底にあるようです．だからこそ，Haskellを使っているのに何故，意識しなければならないのかを理解したかったのです．",
        "user": "U4KU9ABL0",
        "type": "message"
    },
    {
        "ts": "1541229216.044700",
        "text": "式が評価ずみであろうが評価中であろうが，式が表す値は値だという考え方に，何か不都合があるのならそれを知りたかったということです．アドバイスありがとうございます．",
        "user": "U4KU9ABL0",
        "type": "message"
    },
    {
        "ts": "1541229291.044900",
        "text": "うーん、ではcall by valueを実装してみればよいのでは無いでしょうか?今回のはHaskellで意識しなくていいという話というより、たまたまHaskellでcall by needの実装だったからだと思います",
        "user": "U57D08Z9U",
        "type": "message"
    },
    {
        "ts": "1541229310.045100",
        "text": "Haskellから機械語へのコンパイラをHaskellで作れば絶対に理解できます。",
        "user": "U4KUNQF9N",
        "type": "message"
    },
    {
        "ts": "1541230198.045300",
        "text": "&gt;Haskellから機械語へのコンパイラをHaskellで作れば絶対に理解できます。\nはい，是非挑戦してみたいです．\n\n&gt;call by valueを実装してみればよいのでは無いでしょうか?\nこれもちょっとやってみます．",
        "user": "U4KU9ABL0",
        "type": "message"
    },
    {
        "ts": "1541234492.045500",
        "text": "call-by-valueを実装してみました．",
        "user": "U4KU9ABL0",
        "type": "message"
    },
    {
        "ts": "1541234574.045700",
        "text": "<https://gist.github.com/nobsun/1f2535d5f191f6733df0039cede9face>",
        "user": "U4KU9ABL0",
        "type": "message"
    },
    {
        "ts": "1541235858.046000",
        "text": "本質的に変更したのは，関数適用式の評価に際して，関数部分の式を評価して得られる関数値を，引数部分の式を評価して得られる値に「正格に」適用しただけです．もう一箇所，Valueの関数ではない方は，裸のIntと同型になるようにbangを付けています．これはLazyの方も修正してあり，Valueの定義自身は両方で同じです．",
        "user": "U4KU9ABL0",
        "type": "message"
    },
    {
        "ts": "1541235912.046200",
        "text": "<https://github.com/tweag/capability/blob/f1529d502d7c6a3c3eb0feaf488973999b3f6297/src/Capability/Reader/Internal/Strategies.hs#L47> のことね。\n（こういうときは該当のソースを表示させているときに「y」を押すといい）",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1541235993.046600",
        "text": "通常call by valueでは，let x = e in e’ ~ (\\x -&gt; e’) eな気がするので，let bot = bot in botが無限ループしないのはあまりcall by valueと言えない気がします",
        "user": "U57D08Z9U",
        "type": "message"
    },
    {
        "ts": "1541236101.046800",
        "text": "あらら．",
        "user": "U4KU9ABL0",
        "type": "message"
    },
    {
        "ts": "1541236476.047000",
        "text": "手元では無限ループしますが．．．doctestの記述を修正しわすれた．",
        "user": "U4KU9ABL0",
        "type": "message"
    },
    {
        "ts": "1541236588.047200",
        "text": "あ，すいません．無限ループしますね．ちょっと勘違いでした．言いたかったのは次のパターンですね\n```\neval $ Let [(\"bot\",Div (Con 1) (Con 0))] (Con 0)\n```\nこれがexceptionを吐かないのはおかしな気がします",
        "user": "U57D08Z9U",
        "type": "message"
    },
    {
        "ts": "1541236849.047400",
        "text": "あちゃーっ!!",
        "user": "U4KU9ABL0",
        "type": "message"
    },
    {
        "ts": "1541248464.047900",
        "text": "修正．Valueの関数を正格関数として生成．interpの際はそのまま適用．",
        "user": "U4KU9ABL0",
        "type": "message"
    }
]