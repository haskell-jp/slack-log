[
    {
        "type": "message",
        "user": "UL5PAB0F9",
        "ts": "1680713459.208939",
        "text": "GHCについてくるライブラリ群で現環境では使えるが新環境では使えない状態のものがあるので対応しておきたいです\n```import Data.Binary () -- binary\nimport Data.Time () -- time\nimport System.Directory () -- directory\nimport System.FilePath () -- filepath\nimport System.Posix () -- unix\nimport System.Process () -- process\nimport Text.PrettyPrint () -- pretty\n\nmain=pure()```\n"
    },
    {
        "type": "message",
        "user": "UL1HFJATE",
        "ts": "1680736340.027829",
        "text": "あーそれ，（競プロに関係あるかわかんなくて）入れるか迷ってたんですよね．入れる側に一票入ったので入れることにしましょう！"
    },
    {
        "type": "message",
        "user": "UL1HFJATE",
        "ts": "1680744242.989739",
        "text": "あと， GHC-bundled library で現環境で使えるけど新環境では使えない，というと `ghc-boot`, `ghc-boot-th`,  `hpc`,  `integer-gmp`,  `terminfo`, `ghc-prim` あたりもそうなはずですね．ここら辺も入れた方がいいでしょうか？\n\n現環境は `cabal install --lib` を用いているので， GHC-bundled library (<https://gitlab.haskell.org/ghc/ghc/-/wikis/commentary/libraries/version-history> で確認できます)のうち，`cabal-install &lt;= 3.8.1.0` が <https://hackage.haskell.org/package/cabal-install-3.8.1.0/docs/src/Distribution.Client.CmdInstall.html#globalPackages|Distribution.Client.CmdInstall.globalPackages> 変数によって明示的に global package とみなしていたものは利用可能だったはずです．\n\nほかには，現環境では使用できない GHC-bundled package (一度も `cabal install --lib` を投げたことのない裸の `ghc` では使えるが，一度でも `cabal install --lib` を投げてしまうと top-level `ghc` から不可視になってしまうタイプのGHC-bundled package．`globalPackages` 変数に名前が挙がってないとそうなる)もありますが，そこら辺についてはどうしましょうか．"
    },
    {
        "type": "message",
        "user": "UL5PAB0F9",
        "ts": "1680755540.798959",
        "text": "GHC-bundled packageは入れてしまってもいいんじゃないでしょうか\n\n競プロでの使用例としては\ntimeは制限時間ギリギリまで乱択するときとか，日付関連の問題でたまに使います。これはないと困ると思う。\nprocessはインタラクティブ系問題のローカルデバッグで使ってました。\nCabal-syntaxはDistribution.Compat.Preludeでimportを減らしたり，ライブラリがあまり入ってない環境でlensとか使えるなみたいなことは考えていました"
    },
    {
        "type": "message",
        "user": "UL1HFJATE",
        "ts": "1680783614.872259",
        "text": "なるほど． Windows 環境下でないとビルドできない `Win32` を除き，\n• `Cabal`\n• `Cabal-syntax`\n• `binary`\n• `directory`\n• `filepath`\n• `ghc` \n• `ghc-boot` \n• `ghc-boot-th`\n• `ghc-compact`\n• `ghc-heap`\n• `ghc-prim`\n• `ghci`\n• `haskelline`\n• `hpc`\n• `integer-gmp`\n• `libiserv`\n• `pretty`\n• `process`\n• `stm`\n• `terminfo`\n• `time`\n• `unix`\n• `xhtml`\nを全て追加する，ということですか． `ghc-compact` をただ追加するのもアレなので，\n• `compact`\nを追加してもいいかもしれませんね．\n\nさしあたって気にすべき点は，特に `ghc-prim` などの `ghc*` 系が GHC のバージョン間で安定したAPIを提供しそうに見えない，ということでしょうか．\n\n細かい反論としては:\n• `ghc` とか `terminfo`  とか本当に要るの？  → 「本当に」要る要らないの線引きは難しいので，「GHC-bundled」という明確な線引きがあるのは良いこと\n• `ghc*` 系はHackageにアップロードされていないことが多い（ 「GHC-bundled version しか使えないからHackageからのダウンロードの需要がない以上，面倒だからいいよね〜」という理由なのかは知らない）ので，`cabal-plan license-report`  が自動でライセンスを拾ってこれないため，License report の Human-written caveat を手書きで追加執筆しなければならないのが面倒 → 頑張れ\nという点もありますが，ここら辺は簡単に再反論できるところですね．とくに「GHC-bundled」という明確な線引きがある，というのは結構な美点っぽいです．\n\nみなさんのご意見もお聞きしたいので，よろしくお願いします．"
    },
    {
        "type": "message",
        "user": "UL1HFJATE",
        "ts": "1680792625.725789",
        "text": "GHCのバージョンごとにAPIが大きく変動するのは `ghc-prim` の時点でそうで， `ghc-prim` を入れないのはどうなんだ，というのがあるので今更な気がしてきました…"
    },
    {
        "type": "message",
        "user": "UL5PAB0F9",
        "ts": "1680792697.127759",
        "text": "haskell-platformではGHC-bundledなものであっても区別して扱ってますね。\nこれにならってterminfoやghc*系は含めないという判断はありかもしれないです。\nghc自体はいろんなデータ構造が入ってるので，あったらあったで面白いとは思っています。UnionFindとかもあるし\n<https://github.com/haskell/haskell-platform/blob/master/hptool/src/Releases2018.hs>"
    },
    {
        "type": "message",
        "user": "UL5PAB0F9",
        "ts": "1680793270.810299",
        "text": "ghc-primはbaseのGHC.Extsから使えるのがほとんどなので直接使えなくても大丈夫だとは思います"
    },
    {
        "type": "message",
        "user": "UL1HFJATE",
        "ts": "1680793581.519999",
        "text": "Haskell-platform も stability guarantee に入れてないってだけで，アクセスできるようになってる，とは言えるんですけどね…"
    },
    {
        "type": "message",
        "user": "UL1HFJATE",
        "ts": "1680820013.553969",
        "text": "`libiserv` が GHC master から library として消滅していて焦りましたが，Hackage にないやつは一応全部 GHC 9.4.4 codebase の `libraries/` に存在したので，手書きで license report を弄るのも難しくなさそうです．"
    },
    {
        "type": "message",
        "user": "UL1HFJATE",
        "ts": "1680825293.140969",
        "text": "なんかunstableだとかいう警告をどっかに書ければいいんですけど…。どうせ `cabal.project.freeze` の公開ページを作るんだからそこに書けば良いか？"
    }
]