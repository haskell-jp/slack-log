[
    {
        "ts": "1545795012.020700",
        "text": "これは機械的導出じゃないから機械的に保障は出来無いんだけど、パッケージ作成者がしっかり SemVar のルールを守ってバージョン付けしてくれてる(という仮定)なら、 `allow-newer` 無しでも勝手に上のバージョンを選んでも良いと思うのだけれど",
        "user": "U9XHWQX7Z",
        "type": "message"
    },
    {
        "ts": "1545795271.024900",
        "text": "allow-newerはとりあえず上のバージョンみたいなのだったと思うので、 `rely-on-version` みたいなフラグを作ってさ、 それがtrueの時は同一メジャーバージョンなら上のバージョンを代用(って言葉が正しいのかは不明だけど)してインストールしても みたいな？",
        "user": "U9XHWQX7Z",
        "type": "message"
    },
    {
        "ts": "1545795583.027100",
        "text": "依存が == A.B.* みたいになってれば SemVar ルール上インターフェース互換なバージョンのうちは許されるので，\nその案の必要性がわからないのですが何か違うものを意図してるんでしょうか？",
        "user": "U5G2BCVBN",
        "type": "message"
    },
    {
        "ts": "1545795924.030500",
        "text": "あれ？んじゃ私が知らないだけなのかな？ いや、ライブラリをインストールする時に、 `base-4.8`  とかって依存が書かれてて 結局 cabal getして依存のところを書きかえるか、 allow-newerしないとインストール出来なかった気がしたので、その状態でもallow-newerする事なく、インストールしたいなぁと。",
        "user": "U9XHWQX7Z",
        "type": "message"
    },
    {
        "ts": "1545807154.031200",
        "text": "あ、いや私の勘違いだった ようです お騒せしました:broken_heart:",
        "user": "U9XHWQX7Z",
        "type": "message"
    },
    {
        "ts": "1545809060.031500",
        "text": "allow-newerのザ・ビースト感",
        "user": "U4KUNQF9N",
        "type": "message"
    },
    {
        "ts": "1545809936.032600",
        "text": "この手の技はリミッター解除、トランザム、野生解放など作品によって呼び方がまちまちなので、どう言えばいいかちょっと迷いました",
        "user": "U4KUNQF9N",
        "type": "message"
    },
    {
        "ts": "1545835308.033500",
        "text": "`git push -f`",
        "user": "U7155GPR9",
        "type": "message"
    },
    {
        "ts": "1545874959.034200",
        "text": "30代前後には界王拳が一番しっくり来る気がします！",
        "user": "U570660KX",
        "type": "message"
    },
    {
        "ts": "1545893103.035100",
        "text": "出遅れたAdvent Calendarのネタです。ご査収ください。\n<https://haskell.jp/blog/posts/2018/super-precure-monad.html>",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1545900548.035500",
        "text": "<@UF29CNR1Q> has joined the channel",
        "user": "UF29CNR1Q",
        "type": "message"
    },
    {
        "ts": "1545953623.036300",
        "text": "今週のHaskell Weekly入りおめでとうございます！ :tada:\n<http://haskell.1045720.n5.nabble.com/Happy-Haskell-Programming-for-GHC-8-x-td5888460.html>",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1545968638.037400",
        "text": "<http://fumieval.hatenablog.com/entry/2018/12/27/213853> Haskellに関係のない話も半分くらい混じっていますが今年を振り返る記事を書きました。みなさんもHaskell-jpの一年を振り返ってみませんか",
        "user": "U4KUNQF9N",
        "type": "message"
    },
    {
        "ts": "1546064070.039600",
        "text": "これについて思った事があるので少々、パッケージ間のシグネチャの同一性で解決できないかな？と、 あるパッケージには、A, B, C, Dのバージョンがあるとして、 どうにかして Aの全てのシグネチャはBに含まれる、Bの全てのシグネチャはCに含まれる、けど、DはCの全てのシグネチャを含まない みたいなとき Aが要求されるなら 勝手にCをインストールしても安全だよなぁ と。 ただ、TemplateHaskell とかでビルド状況に依存するような場合は全てのシグネチャを追うのが不可能だよなぁ。。。とも この辺どうにかならないかなぁ",
        "user": "U9XHWQX7Z",
        "type": "message"
    }
]