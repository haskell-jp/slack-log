[
    {
        "ts": "1636342237.050300",
        "text": "Haskell Day 2021 お疲れさまでした。私の発表 `take k (sort xs)` in Haskell has O(n + k log k) time complexity の間にクイックソートと遅延評価が組み合わさったときの計算量がどうなるかというコメントが <@U570660KX> さんからあったと思うので、この場を借りて回答します。（チャットで書いたつもりが、リンクを含んでいたせいかアーカイブに残っていなかったもので……）\n結論としては、クイックソートの場合も実装が適切であれば `take k (sort xs)` の平均時間計算量を O(n + k log k) にできそうです。詳細な説明は <https://apfelmus.nfshost.com/articles/quicksearch.html#message-2---quicksort|Heinrich Apfelmus の投稿> や <https://youtu.be/2MWWgDfE3KE?t=3185|Peter Van Roy の講義動画> にありますが、いずれの場合も「平均時間計算量を考えているので、partition はリストを大体同じ長さの2つの部分に分割するものと考える」というクイックソートの平均時間計算量の証明でありがちなごまかし（だと自分は思っているんですが、これって妥当なんでしょうか？）が見られるので、証明をより精緻にする余地があると思います。",
        "user": "U58BK72FL",
        "type": "message"
    },
    {
        "ts": "1636354133.050900",
        "text": "Peter Van Roy の講義動画は今年のも上がってました。もしかしたら、こっちの方が分かりやすいかもしれません。 <https://youtu.be/4-u64wT3Jxk>",
        "user": "U58BK72FL",
        "type": "message"
    },
    {
        "ts": "1636354954.051200",
        "text": "もうしばらく考えて、スライド内でも最初の方に引用していた [Paredes and Navarro 2006] と全く同じ議論で lazy quicksort に関して同様の結論が導けるような気がしました（が実はこれも p.1 しか読んでいない）。時間があればもう少し読んで考えてみます。 <https://doi.org/10.1137/1.9781611972863.16>",
        "user": "U58BK72FL",
        "type": "message"
    },
    {
        "ts": "1636427933.054800",
        "text": "なるほど、ありがとうございます。「`take k` が手前のリストで足りれば後ろのリストは触らないから……」くらいの雑な推測でしたが、きちんとやれば面白いテーマのようですね",
        "user": "U570660KX",
        "type": "message"
    }
]