[
    {
        "ts": "1560917795.025200",
        "text": "適宜その場所で log 出力したい派だったので\n全部 Either にして最後に error ログだったら ExceptT でも良いと思います",
        "user": "U56L7EVNY",
        "type": "message"
    },
    {
        "ts": "1560949274.026000",
        "text": "ありがとうございます。authenticateメソッドの定義自体が無い状態ですので調べて実装してみます。",
        "user": "UCDHJ6R6X",
        "type": "message"
    },
    {
        "ts": "1560950295.026400",
        "text": "<@UKS07QBSA> has joined the channel",
        "user": "UKS07QBSA",
        "type": "message"
    },
    {
        "ts": "1560995611.026600",
        "text": "なさそうなので自作するか。",
        "user": "U56L7EVNY",
        "type": "message"
    },
    {
        "ts": "1561010023.027100",
        "text": "<https://haskell.e-bigmoon.com/posts/2018/06-26-cont-param.html>　演算子として使えるとさらに便利なのでぜひ :bikeshed:",
        "user": "U4KUNQF9N",
        "type": "message"
    },
    {
        "ts": "1561010167.027400",
        "text": "演算子、センスが求められる…！",
        "user": "U56L7EVNY",
        "type": "message"
    },
    {
        "ts": "1561011634.027700",
        "text": "思い切ってPull request送ってerrorsパッケージの一部にしちゃうのはいかがでしょう :smirk:",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1561013677.028100",
        "text": "なるほど？\nでも僕、errors 使わないですよ。。。\nどっちかというと rio に入れて欲しいw",
        "user": "U56L7EVNY",
        "type": "message"
    },
    {
        "ts": "1561018058.028500",
        "text": "以下のようにauthenticateを作ってみたのですが、Invalid username/password combinationの\nエラーになって行き詰まっています。\n```\nauthenticate creds = liftHandler $ runDB $ do\n  maybeClientAuth &lt;- getBy $ UniqueClientAuth $ credsIdent creds\n    case maybeClientAuth of\n      Just (Entity clientAuthId _) -&gt; return $ Authenticated clientAuthId\n      Nothing -&gt; return $ UserError InvalidUsernamePass\n```\nドキュメントのauthenticateの説明が２行だけなのでどのように書くと正しく認証されるのかが分からず、困っています。\n&gt; Perform authentication based on the given credentials.\n&gt; Default implementation is in terms of getAuthId\n古いバージョンでは以下のように書くサンプルを見かけたのですが、\n`getAuthId creds = getAuthIdHashDB AuthR (Just . UniqueUser) creds`\ngetAuthIdは廃止予定のようですし、getAuthIdHashDBは既に無いようです。\nどのようにauthenticateを実装するときちんと認証されるのでしょうか？",
        "user": "UCDHJ6R6X",
        "type": "message"
    },
    {
        "ts": "1561018479.028700",
        "text": "ContTから脱出する部分は独立して実装できるので、こんな感じにするといいのではと思いました ```\n{-# LANGUAGE TypeFamilies #-}\nimport Control.Monad.Trans.Cont\n\nclass Fallible f where\n  type Failure f :: *\n  tryFallible :: f a -&gt; Either (Failure f) a\n\ninstance Fallible Maybe where\n  type Failure Maybe = ()\n  tryFallible = maybe (Left ()) Right\n\ninstance Fallible (Either e) where\n  type Failure (Either e) = e\n  tryFallible = id\n\n(??=) :: (Applicative f, Fallible t) =&gt; t a -&gt; (Failure t -&gt; f a) -&gt; f a\nt ??= k = either k pure $ tryFallible t\n{-# INLINE (??=) #-}\ninfixl 1 ??=\n\n(???) :: (Applicative f, Fallible t) =&gt; t a -&gt; f a -&gt; f a\nt ??? k = t ??= const k\n{-# INLINE (???) #-}\ninfixl 1 ???\n\n(!?=) :: (Monad m, Fallible t) =&gt; m (t a) -&gt; (Failure t -&gt; m a) -&gt; m a\nt !?= k = t &gt;&gt;= (??=k)\n{-# INLINE (!?=) #-}\ninfixl 1 !?=\n\n(!??) :: (Monad m, Fallible t) =&gt; m (t a) -&gt; m a -&gt; m a\nt !?? k = t &gt;&gt;= (???k)\n{-# INLINE (!??) #-}\ninfixl 1 !??\n\nexit :: m r -&gt; ContT r m a\nexit = ContT . const\n{-# INLINE exit #-}\n```",
        "user": "U4KUNQF9N",
        "type": "message"
    },
    {
        "ts": "1561020855.029100",
        "text": "sqlite + hashDB の最小のサンプルが手元にあったので、参考になれば・・・。",
        "user": "U5B3EGEFQ",
        "type": "message"
    },
    {
        "ts": "1561022486.029600",
        "text": "ひょえぇ抽象度が一気に上がったw\n今回のユースケースで実際に使うのは `!??` だけっすね\n```\n-- さっきの疑似コードがこうなる\nmain :: IO ()\nmain = evalConstT $ do\n  target &lt;- List.lookup isTarget &lt;$&gt; Http.get \"<http://example.com/api/fuga>\" !?? exit (pure ())\n  hoge &lt;- List.lookup (isHoge target) &lt;$&gt; Http.get \"<http://example.com/api/hoge>\" !?? exit (pure ())\n  lift $ <http://Logger.info|Logger.info> (show hoge)\n```",
        "user": "U56L7EVNY",
        "type": "message"
    },
    {
        "ts": "1561080708.029900",
        "text": "ありがとうございます。参考にさせて頂きます。\n\n見た所、`authenticate`の実装はほぼ同じ内容なので原因は別の所にありそうですね。",
        "user": "UCDHJ6R6X",
        "type": "message"
    },
    {
        "ts": "1561083748.030200",
        "text": "&gt; psqlで手入力で認証情報をテーブルにinsertしました。\n\n`settings.yml` の DB とは違うところに insert してる可能性もあるかもしれないですね。\nこれ以上は実際のコード見てみないと、僕には解決できなさそうです。",
        "user": "U5B3EGEFQ",
        "type": "message"
    },
    {
        "ts": "1561102568.030400",
        "text": "ということで99%上記の fumi san のコードまんまですがパッケージを作成しました！（GitHub にしか置いてませんけど）\n<https://github.com/matsubara0507/fallible>",
        "user": "U56L7EVNY",
        "type": "message"
    },
    {
        "ts": "1561105655.031700",
        "text": "<https://github.com/matsubara0507/fallible#usage> にある `slack` は `stack` のtypeですかね :thinking_face:",
        "user": "UK0LLUCE6",
        "type": "message"
    },
    {
        "ts": "1561105710.032300",
        "text": "ほんとだw どうもありがとう！",
        "user": "U56L7EVNY",
        "type": "message"
    },
    {
        "ts": "1561105733.032400",
        "text": "いえいえｗ",
        "user": "UK0LLUCE6",
        "type": "message"
    },
    {
        "ts": "1561107399.032600",
        "text": "すごく今更なんですが\n\n```\nfromMaybeWith :: Monad m =&gt; m (Maybe b) -&gt; m r -&gt; ContT r m b\nfromMaybeWith m e = withCont (maybe e) $ lift m\n\nfromEitherWith :: Monad m =&gt; m (Either a b) -&gt; (a -&gt; m r) -&gt; ContT r m b\nfromEitherWith m act = withContT (either act) $ lift m\n```\n\nって書けますね",
        "user": "U570660KX",
        "type": "message"
    },
    {
        "ts": "1561107570.033100",
        "text": "個人的には、fumiさんのexitだけを何処かで定義しておいて\n\n```\ndo\n...\nmr &lt;- action\nr &lt;- maybe (exit \"なんとか\") return mr\n```\n\nみたいに書く事が多いです",
        "user": "U570660KX",
        "type": "message"
    },
    {
        "ts": "1561171236.033800",
        "text": "返信ありがとうございます。\n\nマイグレーションでYesodが生成してくれたテーブルにpsqlで手入力したのでDBが違うという事はないと思います。\n\nauth-hashdbが勝手にsaltとかつけてるのかも知れないと思い、psqlから手入力ではなくてyesodから管理者アカウントを登録してみようと思っています。migration時に管理者アカウントを追加できれば良いのですが、モナドトランスフォーマーの理解が不十分なので上手く行かなくて苦戦しています。\n\nそれで入力フォームを先に作成しようと頑張っているのですが、まだHaskell自体に不慣れなので苦戦しています。\n\n```\n--認証情報のフォーム(src/Handler/ClientAuth.hs)\nclientAuthForm :: Html -&gt; MForm Handler (FormResult ClientAuth, Widget)\nclientAuthForm = renderDivs $ ClientAuth\n    &lt;$&gt; areq (selectFieldList clients) \"クライアント\" Nothing\n    &lt;*&gt; areq (selectFieldList systems) \"システム\" Nothing\n    &lt;*&gt; areq textField \"Username\" Nothing\n    &lt;*&gt; areq textField \"Password\" Nothing\n    where\n \tclients :: [(Text,Key Client)]\n        clients = do\n            list &lt;- runDB $ selectList [] [Asc ClientId]\n            fmap (\\(Entity clientId c) -&gt; (clientName c::Text,clientId)) list\n\t\n\tsystems :: [(Text,Key System)]       \n        systems = do\n            list &lt;- runDB $ selectList [] [Asc SystemId]\n            fmap (\\(Entity systemId s) -&gt; (systemType s::Text,systemId)) list\n\n --認証情報のモデル(config/models)\nClientAuth                                                      \n    clientId ClientId\n    systemId Int       \n    username Text      \n    password Text      \n    UniqueClientAuth username\n    deriving Show    \n ```\n\nこのフォームがコンパイルできないんですが、ClientIdやSystemIdはIntに変えないとダメなんでしょうか？\nそうすると正しくない数値を受け付けてしまいそうなんですが、、、。\n\n```\n    • Couldn't match type ‘Int’ with ‘Key Client’\n      Expected type: AForm (HandlerFor App) (Key Client)\n        Actual type: AForm (HandlerFor App) Int\n    • In the second argument of ‘(&lt;$&gt;)’, namely\n        ‘areq (selectFieldList clients) \"クライアント\" Nothing’\n      In the first argument of ‘(&lt;*&gt;)’, namely\n        ‘ClientAuth &lt;$&gt; areq (selectFieldList clients) \"クライアント\" Nothing’\n      In the first argument of ‘(&lt;*&gt;)’, namely\n        ‘ClientAuth &lt;$&gt; areq (selectFieldList clients) \"クライアント\" Nothing\n           &lt;*&gt; areq (selectFieldList systems) \"システム\" Nothing’\n   |\n11 |     &lt;$&gt; areq (selectFieldList clients) \"クライアント\" Nothing\n```",
        "user": "UCDHJ6R6X",
        "type": "message"
    },
    {
        "ts": "1561172515.034000",
        "text": "&gt; auth-hashdbが勝手にsaltとかつけてるのかも知れないと思い\n\n内部では特に `salt` とかは付けていなかったと思います。\n\n&gt; このフォームがコンパイルできないんですが、ClientIdやSystemIdはIntに変えないとダメなんでしょうか？\n\nこれは `models` で `systemId Int` と宣言しているのに、form では `Key System` の値を返しているからだと思います。\n\n```\nClientAuth                                                      \n    clientId ClientId\n    systemId Int       \n    username Text      \n    password Text      \n    UniqueClientAuth username\n    deriving Show    \n```\n\nけど、エラーメッセージは、なんか違いますね・・・。\n\n```\n• Couldn't match type 'Int' with 'Key Client'\n      Expected type: AForm (HandlerFor App) (Key Client)\n        Actual type: AForm (HandlerFor App) Int\n```",
        "user": "U5B3EGEFQ",
        "type": "message"
    },
    {
        "ts": "1561183369.034300",
        "text": "ありがとうございます。ご指摘の通り modelの\n`systemId Int`\nの部分に問題がありました。それを直したらエラーがそれぞれ１箇所だけになりました。\n\n\n```\n-- ソース\nclientAuthForm :: Html -&gt; MForm Handler (FormResult ClientAuth, Widget)\nclientAuthForm = renderDivs $ ClientAuth\n    &lt;$&gt; areq (selectFieldList clients) \"クライアント\" Nothing\n    &lt;*&gt; areq (selectFieldList systems) \"システム\" Nothing\n    &lt;*&gt; areq textField \"Username\" Nothing\n    &lt;*&gt; areq textField \"Password\" Nothing\n    where\n        clients :: [(Text,Key Client)]\n        clients = do\n            list &lt;- runDB $ selectList [] [Asc ClientId]\n            fmap (\\(Entity clientId c) -&gt; (clientName c::Text,clientId)) list\n\n        systems :: [(Text,Key System)]\n        systems = do\n            list &lt;- runDB $ selectList [] [Asc SystemId]\n            fmap (\\(Entity systemId s) -&gt; (systemType s::Text,systemId)) list\n```\n\n```\n-- エラー\n/Users/you/haskell/CustomerLedger/src/Handler/ClientAuth.hs:18:21: error:\n    • Couldn't match type ‘HandlerFor site1’ with ‘[]’\n      Expected type: [[Entity Client]]\n        Actual type: HandlerFor site1 [Entity Client]\n    • In a stmt of a 'do' block:\n        list &lt;- runDB $ selectList [] [Asc ClientId]\n      In the expression:\n        do list &lt;- runDB $ selectList [] [Asc ClientId]\n           fmap\n             (\\ (Entity clientId c) -&gt; (clientName c :: Text, clientId)) list\n      In an equation for ‘clients’:\n          clients\n            = do list &lt;- runDB $ selectList [] [Asc ClientId]\n                 fmap\n                   (\\ (Entity clientId c) -&gt; (clientName c :: Text, clientId)) list\n   |\n18 |             list &lt;- runDB $ selectList [] [Asc ClientId]\n   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n/Users/you/haskell/CustomerLedger/src/Handler/ClientAuth.hs:23:21: error:\n    • Couldn't match type ‘HandlerFor site0’ with ‘[]’\n      Expected type: [[Entity System]]\n        Actual type: HandlerFor site0 [Entity System]\n    • In a stmt of a 'do' block:\n        list &lt;- runDB $ selectList [] [Asc SystemId]\n      In the expression:\n        do list &lt;- runDB $ selectList [] [Asc SystemId]\n           fmap\n             (\\ (Entity systemId s) -&gt; (systemType s :: Text, systemId)) list\n      In an equation for ‘systems’:\n          systems\n            = do list &lt;- runDB $ selectList [] [Asc SystemId]\n                 fmap\n                   (\\ (Entity systemId s) -&gt; (systemType s :: Text, systemId)) list\n   |\n23 |             list &lt;- runDB $ selectList [] [Asc SystemId]\n   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n```\n\nなぜこのコードでExpected typeが２重のリストになってしまうのでしょうか？\nデータベースからEntityのリストを所得してそれをタプルのリストにするという処理のつもりなのですが、\nどこに問題があるのでしょうか？_",
        "user": "UCDHJ6R6X",
        "type": "message"
    },
    {
        "ts": "1561186499.034500",
        "text": "どこから説明するべきか悩みますが、以下の `clients` は明らかにコンパイルが通らないコードです。\n\n```\nclients :: [(Text,Key Client)]\nclients = do\n    list &lt;- runDB $ selectList [] [Asc ClientId]\n    fmap (\\(Entity clientId c) -&gt; (clientName c::Text,clientId)) list\n```\n\nなぜなら `do` と `runDB` があるので、正しい `clients` の型は `HandlerFor site a` のような型になっていて欲しいはずです。\nまずは、実際にそれぞれの式の型がどのようになっているか、ghci で確認してみると良いと思います。\n\n```\n# クラス制約は省略しているので、正確な結果ではありません。\n\nghci&gt; :t selectList\n  [Filter record]\n    -&gt; [SelectOpt record]\n    -&gt; ReaderT backend m [Entity record]\n\nghci&gt; :t selectList []\n  [SelectOpt record]\n    -&gt; ReaderT backend m [Entity record]\n\nghci&gt; :t selectList [] []\n  ReaderT backend m [Entity record]\n\nghci&gt; :t runDB\n  ReaderT (YesodPersistBackend site) (HandlerFor site) a\n     -&gt; HandlerFor site a\n```\n\nここで `runDB (selectList [] [])` の型は `HandlerFor site [Entity record]` になります。\n型変数はそれぞれ `backend` が `YesodPersistBackend site`, `m` が `HandlerFor site`, `a` が `[Entity record]` に対応します。\n\n```\nlist &lt;-runDB (selectList [] [])\n```\n\nこの時の `list` の型は当然 `[Entity record]` です。(この辺りが良くわからない場合は、モナドの *使い方* を簡単に復習しておくと良いと思います。)\n\n&gt; なぜこのコードでExpected typeが２重のリストになってしまうのでしょうか？\n\n`fmap` の型から考えてみましょう。\n\n```\nghci&gt; :t fmap\n   Functor f =&gt; (a -&gt; b) -&gt; f a -&gt; f b\n```\n\n`fmap` の第二引数は `f a` の型である必要があるので、 `list` の型は `f a` になりますよね。\nそして、さらに\n\n```\nlist &lt;- runDB (...)\n```\n\nというコードになっているため、 `runDB (...)` の結果の型 (clients の型) は `m (f a)` になっている必要がありますよね。\nこの `m` と `f` が両方とも `リスト ([])` に推論され、二重のリストを期待するというコンパイルエラーになっています。\n\nこんな感じで伝わりますか？",
        "user": "U5B3EGEFQ",
        "type": "message"
    },
    {
        "ts": "1561195159.034800",
        "text": "ローカルで試したら問題無く動きました。\nサンプルコードあげておきます。\n<https://github.com/waddlaw/yesod-hashdb-example-psql>",
        "user": "U5B3EGEFQ",
        "type": "message"
    },
    {
        "ts": "1561195484.035100",
        "text": "```\npostgres-hashdb-example=# select * from \"user\";\n id | ident  |                                    password                                     \n----+--------+---------------------------------------------------------------------------------\n 1 | admin | sha256|17|gQ3ny1p2WBkGrxrz5krLXg==|bKJ2rPrKczl3eFjQLRwsZi3OpiVepEH0511ocjcAO98=\n(1 rows)\n```\n\n`user` テーブルはこんな感じです。",
        "user": "U5B3EGEFQ",
        "type": "message"
    },
    {
        "ts": "1561209227.041400",
        "text": "Haskell初心者です\nHaskellのデータ構造についての質問です。\nhaskellを使って簡単なparserを書きたいと考えていています\n\n```\nparser :: [String] -&gt; Ast\n```\n\nですが、このAstがどんな感じの表現になるのかがわかりません。\n普段はTypeScriptを書いていて、jsonに慣れているのでつい\n\n```\nconst ast = {\n    lhs: {\n        lhs: 2,\n        op: '*',\n        rhs: 3\n    },\n    op: '+',\n    rhs: {\n        lhs: 2,\n        op: '-',\n        rhs: 4\n    }\n}\n```\n\nのように、「プロパティ名: 値」の入れ子の構造を考えてしまいます。\nそして、tsなら `console.log(ast)` で、上のような文字列が表示されるので、なるほどってなるのですが、Haskellの場合はどうやって表現し、それを出力(?)するのでしょうか。\n\n上の例のように\n\n```\ndata Ast = Ast {\n    op :: TokenType,\n    lhs :: String,\n    rhs :: String\n} deriving (Show, Eq)\n```\nのようにするのかもしくはもっと簡潔にS式のような構造で表現したりするのでしょうか。\n\n`1+2*3`のような簡単な数式をAstに変換した際の文字列を示して頂けると、すぐにわかる気がします。\n\n自分でもどこがわかっていないのかわかっていない状態なので、すごくわかりにくい質問文になってしまってます。すみません。\n\nよろしくおねがいします",
        "user": "UCM4G8PGW",
        "type": "message"
    },
    {
        "ts": "1561209691.041500",
        "text": "Haskell と json の違いというよりは、静的な型がある言語と無い言語での発想の違いかな、という気がします。\n```\ndata Expr = Add Expr Expr -- \"+\" 演算子を表現\n          | Sub Expr Expr -- \"-\" 演算子を表現\n          | Mul Expr Expr -- \"*\" 演算子を表現\n          | Div Expr Expr -- \"/\" 演算子を表現\n         | LitInt Integer -- リテラルの整数値を表現\n```\nみたいな感じにするのがよくあるパターンなんじゃないかなと思います",
        "user": "UF8SE896V",
        "type": "message"
    },
    {
        "ts": "1561209977.041700",
        "text": "あえて `data Ast =` と書かなかったのは、たぶんこの `Expr` という型は Ast 全体ではなくてその一部になるだろう、という予想をしたからです。おそらく Ast としては「式」以外に「文」とかも扱うことになると思うのですがそれはそれでさらに別の型を必要とすることになり、そういうものを組み合わせてようやく目的の Ast 型を作ることができると思います。",
        "user": "UF8SE896V",
        "type": "message"
    },
    {
        "ts": "1561210031.041900",
        "text": "json は、 json さえあれば何でも表現できてしまうので、そういう発想をしないんですよね…。",
        "user": "UF8SE896V",
        "type": "message"
    },
    {
        "ts": "1561210332.042100",
        "text": "printデバッグをしたい場合は `Debug.Trace` パッケージの `traceShowId` という関数が使えます。 `Show` なやつは `traceShowId (hoge)` みたいにくるんでやると `hoge` が評価される時にprintされます。",
        "user": "U7155GPR9",
        "type": "message"
    },
    {
        "ts": "1561215631.042300",
        "text": "なるほど！！ありがとうございます\nちょっと試してみます",
        "user": "UCM4G8PGW",
        "type": "message"
    },
    {
        "ts": "1561233611.042500",
        "text": "詳しい説明とサンプルコードありがとうございます。問題解決致しました。\n\n意外な所にミスがあってお恥ずかしい限りなのですが、DBに登録されているpasswordのダブルコーテーションが問題でした。:sweat_smile:\n\n誤\n\"sha256|17|gQ3ny1p2WBkGrxrz5krLXg==|bKJ2rPrKczl3eFjQLRwsZi3OpiVepEH0511ocjcAO98=\"\n\n正\nsha256|17|gQ3ny1p2WBkGrxrz5krLXg==|bKJ2rPrKczl3eFjQLRwsZi3OpiVepEH0511ocjcAO98=\n\nフォームに関してはモナドとモナドトランスフォーマー辺りの勉強が足りてないのが原因だと思うので頂いた情報を元にghciで型を調べながら進めていこうと思います。\n\n丁寧にご回答頂いてとても助かりました。ありがとうございました。",
        "user": "UCDHJ6R6X",
        "type": "message"
    },
    {
        "ts": "1561302551.043400",
        "text": "<@UKT595KRA> has joined the channel",
        "user": "UKT595KRA",
        "type": "message"
    },
    {
        "ts": "1561312944.043800",
        "text": "<@UKTLHFBG8> has joined the channel",
        "user": "UKTLHFBG8",
        "type": "message"
    },
    {
        "ts": "1561327355.044100",
        "text": "<@UKVSCFEEA> has joined the channel",
        "user": "UKVSCFEEA",
        "type": "message"
    },
    {
        "ts": "1561432976.048500",
        "text": "こちらのコミット <https://github.com/iij-ii/direct-hs/commit/4f45018eb92bc557de3e563e90db2637f46d02eb> に書いたcabal.projectを用意して、開発中のパッケージをGHC 8.8.1-alpha2でビルドしてみてるところなのですが、\n下記のようなエラーで依存関係の解決に失敗してしまいます。\ncomonadパッケージがSetup.hsでCabalパッケージに依存していることが原因のようなんですが、\n実際にComonadパッケージのcabalファイルの該当箇所 <https://github.com/ekmett/comonad/blob/d9aeb5e09d3e98f0efccffda52c63ceed2a2ec9e/comonad.cabal#L43> を読む限り、特にCabalパッケージのバージョンに制約を加えてはいません。これはどう回避すればいいでしょうか？\n\n```\n&gt; cabal v2-build direct-hs\nResolving dependencies...\ncabal.exe: Could not resolve dependencies:\n[__0] trying: skews-0.1.0.2 (user goal)\n... 省略 ...\n[__6] next goal: comonad:setup.Cabal (dependency of comonad)\n[__6] rejecting: comonad:setup.Cabal-3.0.0.0 (constraint from maximum version\nof Cabal used by Setup.hs requires &lt;2.6)\n[__6] rejecting: comonad:setup.Cabal-2.4.1.0, comonad:setup.Cabal-2.4.0.1,\ncomonad:setup.Cabal-2.4.0.0, comonad:setup.Cabal-2.2.0.1,\n... 省略 ...\ncomonad:setup.Cabal-1.1.6, comonad:setup.Cabal-1.24.1.0 (constraint from\nproject config TODO requires &gt;=3)\n[__6] fail (backjumping, conflict set: comonad, comonad:setup.Cabal)\nBackjump limit reached (currently 2000, change with --max-backjumps or try to\nrun with --reorder-goals).\n```",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1561435619.048800",
        "text": "<@UKV54B929> has joined the channel",
        "user": "UKV54B929",
        "type": "message"
    },
    {
        "ts": "1561439895.050200",
        "text": "こんにちは。どなたか、もしこのライブラリの使い方のサンプルコードご存知でしたら教えてください。  AWS SecretsManagerから、SecretString を取得することができるはずなのですが。。　ソース読まないとだめかな。\n<http://hackage.haskell.org/package/amazonka-secretsmanager-1.6.1/docs/Network-AWS-SecretsManager-GetSecretValue.html>",
        "user": "U7GSVRQ6S",
        "type": "message"
    },
    {
        "ts": "1561442307.050600",
        "text": "もしかするとhead.hackageの内容に食い違いがあるのかもしれないですね… 以下を追加したらghc-pathsで止まるようになりました\n```\nsource-repository-package\n  type: git\n  location: <https://github.com/ekmett/comonad.git>\n  tag: d9aeb5e09d3e98f0efccffda52c63ceed2a2ec9e\n```",
        "user": "U4KUNQF9N",
        "type": "message"
    },
    {
        "ts": "1561443492.050900",
        "text": "cabalの3.0ブランチの54464304b707c57b233eb910210b79a9ba5154b3を使い、cabal-installをインストールしたらビルドできるようになりました",
        "user": "U4KUNQF9N",
        "type": "message"
    },
    {
        "ts": "1561443630.051200",
        "text": "exitというContTのコンビネータは唐突すぎるので、名前を変えたり別のところに移したほうが良い気がしてきました…",
        "user": "U4KUNQF9N",
        "type": "message"
    },
    {
        "ts": "1561445122.051500",
        "text": "いじっているうちに出来ました。お騒がせしました。",
        "user": "U7GSVRQ6S",
        "type": "message"
    },
    {
        "ts": "1561445359.051800",
        "text": "ありがとうございます！試してみます！",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1561452748.052500",
        "text": "需要あるかどうかわかりませんが、一応公開。\n<https://github.com/smasuda/haskell-aws-secretsmanager>",
        "user": "U7GSVRQ6S",
        "type": "message"
    }
]