[
    {
        "ts": "1626744914.004600",
        "text": "<@U028RHBT7TN> has joined the channel",
        "user": "U028RHBT7TN",
        "type": "message"
    },
    {
        "ts": "1626746071.010100",
        "text": "persistentについて、というよりデータベースについての質問です。\n直和型のデータをデータベースに保存したい場合、どのデータベースを使うのがいいのでしょうか？\n\npersistentだとpersistValue型に直和を表すものがなく、というよりそもそもRDBでは直和型を直接サポートしていない(RDBの元となった関係モデルでは演算として直和を考慮していないと思われる)ので、Maybe型などを使って無理やり表現する以外に方法がないように思えるのですが、\nRDB以外のデータベースならサポートしているのかなと。\n\n何か意見をいただければ幸いです。",
        "user": "U01R1UNMVT5",
        "type": "message"
    },
    {
        "ts": "1627123361.013400",
        "text": "<@U029FC0MNSD> has joined the channel",
        "user": "U029FC0MNSD",
        "type": "message"
    },
    {
        "ts": "1627477751.014200",
        "text": "<@U029TR373Q9> has joined the channel",
        "user": "U029TR373Q9",
        "type": "message"
    },
    {
        "ts": "1627495619.014400",
        "text": "<@U02A69TE1NU> has joined the channel",
        "user": "U02A69TE1NU",
        "type": "message"
    },
    {
        "ts": "1627983207.003000",
        "text": "上の質問の直和型をデータベースに保存する話ですが、返答いただいた方法と別の方法(私がやりたかった方法)を見つけたので、Qiitaで記事にしてみました。\nこの方法ならHaskell上で自然に直和型が扱えると思います。\nぜひ、ご意見などいただけると幸いです。\n<https://qiita.com/nekonibox/items/297c1d2d44b273be2571>",
        "user": "U01R1UNMVT5",
        "type": "message"
    },
    {
        "ts": "1628448546.006000",
        "text": "<@U02AXB3D9T3> has joined the channel",
        "user": "U02AXB3D9T3",
        "type": "message"
    },
    {
        "ts": "1628844222.006400",
        "text": "<@U02B9UAPCQ4> has joined the channel",
        "user": "U02B9UAPCQ4",
        "type": "message"
    },
    {
        "ts": "1628948307.013400",
        "text": "<@U02B78W3F7U> has joined the channel",
        "user": "U02B78W3F7U",
        "type": "message"
    },
    {
        "ts": "1629203519.013600",
        "text": "<@U02C4FQFQSC> has joined the channel",
        "user": "U02C4FQFQSC",
        "type": "message"
    },
    {
        "ts": "1629382086.013800",
        "text": "<@U02CE9YGEAU> has joined the channel",
        "user": "U02CE9YGEAU",
        "type": "message"
    },
    {
        "ts": "1629445493.014000",
        "text": "<@U02BM7FC8HL> has joined the channel",
        "user": "U02BM7FC8HL",
        "type": "message"
    },
    {
        "ts": "1629447450.023800",
        "text": "はじめまして、Kasshiと申します。\nある時Free Arrowをつかいたくなって次のようなコードを書いてみたのですが、\n`{-# LANGUAGE RankNTypes #-}`\n`import Control.Category hiding (id ,(.))`\n`import qualified Control.Category as Cat`\n\n`newtype A f a b = Arr {unA :: forall r. Arrow r =&gt; (forall x y. f x y -&gt; r x y) -&gt; r a b}`\n`instance Category (A f) where`\n   `id = Arr $ const Cat.id`\n   `Arr g . Arr f = Arr $ \\p -&gt; f p &gt;&gt;&gt; g p`\nCategoryのidのconst関数のところでGHCに\n&gt; Couldn't match type 'b0' with 'forall x y. f x y -&gt; r x y'\nと怒られてしまいました。\n\nそこで`const Cat.id` を`\\ _ -&gt; Cat.id` と書き換えるとコンパイルが通りました。\n多相関数がうまく型推論されていないことが原因と思われますが、これは仕様なのかバグなのかが分かりません。\n知見をお持ちの方はご意見頂けると幸いです。",
        "user": "U02BM7FC8HL",
        "type": "message"
    },
    {
        "ts": "1629445493.014000",
        "text": "<@U02BM7FC8HL> has joined the channel",
        "user": "U02BM7FC8HL",
        "type": "message"
    },
    {
        "ts": "1629447450.023800",
        "text": "はじめまして、Kasshiと申します。\nある時Free Arrowをつかいたくなって次のようなコードを書いてみたのですが、\n`{-# LANGUAGE RankNTypes #-}`\n`import Control.Category hiding (id ,(.))`\n`import qualified Control.Category as Cat`\n\n`newtype A f a b = Arr {unA :: forall r. Arrow r =&gt; (forall x y. f x y -&gt; r x y) -&gt; r a b}`\n`instance Category (A f) where`\n   `id = Arr $ const Cat.id`\n   `Arr g . Arr f = Arr $ \\p -&gt; f p &gt;&gt;&gt; g p`\nCategoryのidのconst関数のところでGHCに\n&gt; Couldn't match type 'b0' with 'forall x y. f x y -&gt; r x y'\nと怒られてしまいました。\n\nそこで`const Cat.id` を`\\ _ -&gt; Cat.id` と書き換えるとコンパイルが通りました。\n多相関数がうまく型推論されていないことが原因と思われますが、これは仕様なのかバグなのかが分かりません。\n知見をお持ちの方はご意見頂けると幸いです。",
        "user": "U02BM7FC8HL",
        "type": "message"
    },
    {
        "ts": "1629622740.025700",
        "text": "<@U02BHPK5FC7> has joined the channel",
        "user": "U02BHPK5FC7",
        "type": "message"
    },
    {
        "ts": "1629627147.025900",
        "text": "<@U02BHQWT7FH> has joined the channel",
        "user": "U02BHQWT7FH",
        "type": "message"
    },
    {
        "ts": "1629960259.000200",
        "text": "<@U02CEDPRE2F> has joined the channel",
        "user": "U02CEDPRE2F",
        "type": "message"
    },
    {
        "ts": "1630058889.000400",
        "text": "<@U02CYC28073> has joined the channel",
        "user": "U02CYC28073",
        "type": "message"
    },
    {
        "ts": "1630128883.000600",
        "text": "<@U55U5BL3A> has joined the channel",
        "user": "U55U5BL3A",
        "type": "message"
    },
    {
        "ts": "1630432098.002600",
        "text": "<@U02D4U38VA8> has joined the channel",
        "user": "U02D4U38VA8",
        "type": "message"
    },
    {
        "ts": "1630833330.002800",
        "text": "<@U02DU0C2JEM> has joined the channel",
        "user": "U02DU0C2JEM",
        "type": "message"
    },
    {
        "ts": "1630956334.008400",
        "text": "お疲れ様です。\npythonとかのfor文 とbreak / continue / returnのコード（for ループから脱出するコード）をhaskellに持ってくる場合に\n再帰をつかわないならthrow, catchしかないですかね。\n（それで置き換えている人はひとはみたことがないですが。）\n初学者ではよく変数の代入が問題になりますが、\nこのあたり(for文)を初学者は悩んでないのか、どう折り合いをつけているのか気になっております。\nocamlさんもscalaさんもfor ループから脱出するという概念がないようですね。\n<https://ocaml.org/learn/tutorials/if_statements_loops_and_recursion.ja.html>\n<https://scala-text.github.io/scala_text/control-syntax.html>\nfor文を再帰に置き換えるテンプレとかあるのでしょう？",
        "user": "U74KTAG0N",
        "type": "message"
    },
    {
        "ts": "1631025477.010600",
        "text": "<@U02DJEVKQ2Z> has joined the channel",
        "user": "U02DJEVKQ2Z",
        "type": "message"
    },
    {
        "ts": "1631109881.012500",
        "text": "<@U02DS2FBKQT> has joined the channel",
        "user": "U02DS2FBKQT",
        "type": "message"
    },
    {
        "ts": "1631310973.013000",
        "text": "<@U02E9R6AZ36> has joined the channel",
        "user": "U02E9R6AZ36",
        "type": "message"
    },
    {
        "ts": "1631682935.013200",
        "text": "<@U02E1JRGKEK> has joined the channel",
        "user": "U02E1JRGKEK",
        "type": "message"
    },
    {
        "ts": "1631807873.021100",
        "text": "あるバイナリファイル(xmobarの実行可能ファイル)をxmonad(正確には `xmonad-contrib` ) の `XMonad.Hooks.DynamicLog.statusBar` を用いて実行した場合と、直接バイナリを叩いた場合(bashから、 `/bin/sh -c \"与えられた実行可能ファイル\"`) の挙動が違う現象に遭遇して困っています。(xmonadからの場合はUTF8文字列が描画できず、直接ならできる)\n\n`statusBar` は内部では  `System.Posix.Process.ExecuteFile` を叩いており(<https://hackage.haskell.org/package/xmonad-contrib-0.16/docs/src/XMonad.Util.Run.html#spawnPipe|該当コード>)、 `/bin/sh -c \"与えた実行可能ファイル\"` を(execvシステムコールを用いて)実行しています。\nなので直叩きする際も念のためshから呼びだしていますが同じにならず...\nシステムコール周りの違いとか...?くらいしか思い付かず...\nあまりHaskellな質問ではない気もしてしまいますが、似たような現象があったりした程度でも教えていただきたいです...!\n\n（参考、画像最上部がxmonadを用いた時で画像最下部が直叩きの時の結果です）\n<https://twitter.com/Cj_bc_sd/status/1438519917846822923|https://twitter.com/Cj_bc_sd/status/1438519917846822923>",
        "user": "ULTBB86UC",
        "type": "message"
    },
    {
        "ts": "1631807873.021100",
        "text": "あるバイナリファイル(xmobarの実行可能ファイル)をxmonad(正確には `xmonad-contrib` ) の `XMonad.Hooks.DynamicLog.statusBar` を用いて実行した場合と、直接バイナリを叩いた場合(bashから、 `/bin/sh -c \"与えられた実行可能ファイル\"`) の挙動が違う現象に遭遇して困っています。(xmonadからの場合はUTF8文字列が描画できず、直接ならできる)\n\n`statusBar` は内部では  `System.Posix.Process.ExecuteFile` を叩いており(<https://hackage.haskell.org/package/xmonad-contrib-0.16/docs/src/XMonad.Util.Run.html#spawnPipe|該当コード>)、 `/bin/sh -c \"与えた実行可能ファイル\"` を(execvシステムコールを用いて)実行しています。\nなので直叩きする際も念のためshから呼びだしていますが同じにならず...\nシステムコール周りの違いとか...?くらいしか思い付かず...\nあまりHaskellな質問ではない気もしてしまいますが、似たような現象があったりした程度でも教えていただきたいです...!\n\n（参考、画像最上部がxmonadを用いた時で画像最下部が直叩きの時の結果です）\n<https://twitter.com/Cj_bc_sd/status/1438519917846822923|https://twitter.com/Cj_bc_sd/status/1438519917846822923>",
        "user": "ULTBB86UC",
        "type": "message"
    },
    {
        "ts": "1632012847.029400",
        "text": "モナドについての質問です。(既出だったらすみません。)\n以下の型を持つ関数は一般に存在しますかね？",
        "user": "U01R1UNMVT5",
        "type": "message"
    },
    {
        "ts": "1632030465.030400",
        "text": "<@U02FM2G52D6> has joined the channel",
        "user": "U02FM2G52D6",
        "type": "message"
    },
    {
        "ts": "1632032922.030800",
        "text": "はじめまして。\n\n<https://github.com/jabbalaci/SpeedTests>\nこのリポジトリを見つけ、Haskellだけ妙に遅いのが気になり高速化してみようと思ったのですが、それ以前にわからないところもあり質問させてください。\n\nmapM_ print $ filter (\\i -&gt; isMunchausen i i 0 cache) [0 .. 440000000]\nなぜこれで順次数値が表示されるのでしょうか?\nfilterのイメージではTrueの要素だけか格納された[0,1,3435,438579088]というものがまず生成されて、その後いっぺんにprintされると思ったのですが。\n\n{-# LANGUAGE Strict #-}\n{-# LANGUAGE StrictData #-}\nを有効にし、cacheをData.Vector.Unboxedにしてみたところ最初2分のものが1分くらいになったのですが、Goは8秒切り、Zigは4秒を切ります。\nHaskellとはこのくらいの速度差があるものなのでしょうか?\n\nよろしくお願いします。",
        "user": "U02FM2G52D6",
        "type": "message"
    },
    {
        "ts": "1632111175.035500",
        "text": "<@U02EVE5LNSZ> has joined the channel",
        "user": "U02EVE5LNSZ",
        "type": "message"
    },
    {
        "ts": "1632151792.047000",
        "text": "Stream fusionというときのMonadicな `Stream` の質問で，リストに変換する方法を二つほど思いついたんです．ひとつはふつうにやる方法(下のコードの `streamToList`)，もう一つは，Monadが `PrimMonad` であることを前提にして 書き込み可能配列に書いておく方法 (下のコードの `streamToList2`)です．Monadic Stream の Monad が `PrimMonad` であるとき，これらの方法って一致するのかどうかがわからなくて…どなたか反例を思いつく方っていらっしゃいます？\n\n```import Control.Monad.Primitive\n\nimplementationOmitted :: a\nimplementationOmitted = undefined\n\n\n------------------- Growable Vector API --------------------------------\n\n\n-- | Extendable boxed vector.\ndata GrowableVector s a = DefinitionOmitted\n\ncreateEmpty' :: ST s (GrowableVector s a)\ncreateEmpty' = implementationOmitted\n\nlength' :: GrowableVector s a -&gt; ST s Int\nlength' = implementationOmitted\n\n-- append to a vector. The length of the vector will be incremented by one.\nappend' :: GrowableVector s a -&gt; a -&gt; ST s ()\nappend' = implementationOmitted\n\n-- write into a vector. The index shall be within the length of the vector;\n-- otherwise the behavior is undefined.\nwrite' :: GrowableVector s a -&gt; Int -&gt; a -&gt; ST s ()\nwrite' = implementationOmitted\n\nappendOrWrite' :: GrowableVector s a -&gt; Int -&gt; a -&gt; ST s ()\nappendOrWrite' v i a | i &lt; 0 = error \"Negative index not allowed\"\n                     | otherwise = do\n                         l &lt;- length' v\n                         if i &lt; l then write' v i a else append v a\n\n-- Safely copies the current snapshot of a vector into a list.\nfreeze' :: GrowableVector s a -&gt; ST s [a]\nfreeze' v = implementationOmitted\n\nfreezeTill' :: Int -&gt; GrowableVector s a -&gt; ST s [a]\nfreezeTill' i v = fmap (take i) $ freeze' v\n\n\n---------------- PrimMonad wrappers for Growable Vector --------------\n\ncreateEmpty\n  :: PrimMonad m\n  =&gt; m (GrowableVector (PrimMonad m) a)\ncreateEmpty = stToPrim createEmpty'\n\nappendOrWrite\n  :: PrimMonad m\n  =&gt; GrowableVector (PrimMonad m) a\n  -&gt; Int -&gt; a -&gt; m ()\nappendOrWrite = stToPrim appendOrWrite'\n\nfreezeTill\n  :: PrimMonad m\n  =&gt; Int\n  -&gt; GrowableVector (PrimMonad m) a\n  -&gt; m [a]\nfreezeTill = stToPrim freezeTill'\n\n\n-------------- Stream and its conversion to list ---------------\n\ndata Stream m a = forall s. Stream (s -&gt; m (Step s a)) s\ndata Step s a = Yield a s | Skip s | Done\n\n-- convert a stream to a list.\nstreamToList\n  :: Monad m\n  =&gt; Stream m a\n  -&gt; m [a]\nstreamToList (Stream step s0) = go s0\n  where\n    go s = do\n      r &lt;- step s\n      case r of\n        Yield a t -&gt; (:) a &lt;$&gt; go t\n        Skip t -&gt; go t\n        Done -&gt; return []\n\n-- convert a stream to a list.\nstreamToList2\n  :: PrimMonad m\n  =&gt; Stream m a\n  -&gt; m [a]\nstreamToList2 (Stream step s0) = do\n  mem &lt;- createEmpty\n  let go !n s = do\n        r &lt;- step s\n        case r of\n          Yield a t -&gt; do appendOrWrite mem n a\n                          go (n+1) t\n          Skip t -&gt; go n t\n          Done -&gt; freezeTill n mem\n  go 0 s0```",
        "user": "UL1HFJATE",
        "type": "message"
    },
    {
        "ts": "1632185023.047400",
        "text": "<@U02F2NM6EKC> has joined the channel",
        "user": "U02F2NM6EKC",
        "type": "message"
    },
    {
        "ts": "1632233831.048200",
        "text": "<@U02FHKCM32M> has joined the channel",
        "user": "U02FHKCM32M",
        "type": "message"
    },
    {
        "ts": "1632872950.049700",
        "text": "Hackageには最近テスト機能がついていますが、ログはどうやったら見れますか？ HTTP3 がどうして fail なのか知りたいのです。これには、テストの部分がありませんでした。\n<https://hackage.haskell.org/package/http3-0.0.0/reports/1>",
        "user": "U56MBRKR9",
        "type": "message"
    },
    {
        "ts": "1633238142.051000",
        "text": "<@U02G96VNDFG> has joined the channel",
        "user": "U02G96VNDFG",
        "type": "message"
    },
    {
        "ts": "1633247122.051200",
        "text": "<@U02G1B0Q7PZ> has joined the channel",
        "user": "U02G1B0Q7PZ",
        "type": "message"
    },
    {
        "ts": "1633323700.053100",
        "text": "cabal-install 3.4 から v1 コマンドが削除されました。v2コマンドは、v1コマンドのsupersetだというのが、その理由だそうです。v2コマンドでNixスタイルじゃなくて、v1のようなあるパッケージは1つしかインストールされないスタイルは使えるのでしょうか？",
        "user": "U56MBRKR9",
        "type": "message"
    }
]