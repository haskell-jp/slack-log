[
    {
        "ts": "1561621843.063700",
        "text": "こんにちは。いつもお世話になります。\n関数の定義で型変数を使った場合、実際にどの型が使われたかを、その関数内部で取得することはできますか？  ログ出力を目的としていて、`typeOf`を使えばよいのですが、それだと冗長になるケースがありまして、お尋ねしています。\n\n以下のケースで`f`の中で`typeOf g`とすれば`String-&gt;IO [Integer]`が取れるのですが、関心があるのは `Integer` だけなので、それを取得する方法がないか探しています。\n\n```\ng::String-&gt;IO [Integer]\ng = ...\n\nf::(Eq a)=&gt;String-&gt;(String-&gt;IO [a])-&gt;IO Bool\nf x g = ..   -- \"Integerだよ\"というメッセージを表示したい。 \n```",
        "user": "U7GSVRQ6S",
        "type": "message"
    },
    {
        "ts": "1561621997.063800",
        "text": "`g` を実行した後だけになっちゃいますが、 `typeOf &lt;$&gt; g x` すればよいのではないかと。",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1561622154.064000",
        "text": "あるいは、 `funResultTy` やその辺りの関数を使えばできそうです（詳細確認中）。\n<https://hackage.haskell.org/package/base-4.12.0.0/docs/Data-Typeable.html#v:funResultTy>\nおそらくこっちがより正当な方法でしょうね。。。",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1561622372.064200",
        "text": "`funResultTy` の第2引数はなんなんだろう、と思ったら、引数の型を表すみたいです。\nGHCiで試したところ :point_down: となってました。\n\n```\n&gt; import Data.Typeable\n&gt; import Data.Proxy\n&gt; funResultTy (typeRep (Proxy :: Proxy (String -&gt; IO [Integer]))) (typeRep (Proxy :: Proxy String))\nJust (IO [Integer])\n```",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1561622671.064700",
        "text": "<@UKXF4D5UL> has joined the channel",
        "user": "UKXF4D5UL",
        "type": "message"
    },
    {
        "ts": "1561622900.064900",
        "text": "Typeableを使って良いならば、ScopedTypeVariableを使って書けます。\n\n```\n{-# LANGUAGE ScopedTypeVariables #-}\n...\nf :: forall a. (Typeable a, Eq a) =&gt; String -&gt; (String-&gt;IO [a]) -&gt; IO Bool\nf _ _ =\n  do\n    print $ typeOf (undefined :: a)\n    return True\n```",
        "user": "U570660KX",
        "type": "message"
    },
    {
        "ts": "1561623233.065700",
        "text": "undefinedはダサいので `typeRep (Proxy :: Proxy a)` としたり、さらにTypeApplicationsを有効にして `typeRep (Proxy @a) ` にするともっと良さそうです",
        "user": "U570660KX",
        "type": "message"
    },
    {
        "ts": "1561626075.066100",
        "text": "いずれにせよ `Typeable a` は必要ですね。 `Typeable` 制約のない型変数から型の名前を取得することはできないので。\n`f` が普通の関数であれば定義を変えれば良いだけですが、型クラスのメソッドだったりするとちょっと厄介かもしれません。",
        "user": "UGM9F7XQS",
        "type": "message"
    },
    {
        "ts": "1561627141.066300",
        "text": "ScopedTypeVariablesを使わない方法としては\n```\nfnToProxy :: (String -&gt; IO [a]) -&gt; Proxy a\nfnToProxy _ = Proxy\n```\nという補助関数を用意して `typeRep (fnToProxy g)` とするという手があります。",
        "user": "UGM9F7XQS",
        "type": "message"
    },
    {
        "ts": "1561637543.066500",
        "text": "とんでもなく邪悪ですが、RULESプラグマを使って型制約の追加を回避する方法があったり……\n\n```\nprintType :: Proxy a -&gt; IO ()\nprintType _ = putStrLn \"&lt;unknown&gt;\"\n{-# NOINLINE printType #-}\n\nprintTypeT :: Typeable a =&gt; Proxy a -&gt; IO ()\nprintTypeT p = print $ typeRep p\n\n{-# RULES\n\"T-String\" forall (p::Proxy String). printType p = printTypeT p\n\"T-Integer\" forall (p::Proxy Integer). printType p = printTypeT p\n#-}\n{-以下来そうな型を列挙-}\n\nf :: forall a. Eq a =&gt; String -&gt; (String-&gt;IO [a]) -&gt; IO Bool\nf _ _ =\n do\n   printType (Proxy :: Proxy a)\n   return True\n```",
        "user": "U570660KX",
        "type": "message"
    },
    {
        "ts": "1561675035.069700",
        "text": "この件、まだ試せてないのですが思いつきました。\nTemplate Haskellをコンパイル時ではなく実行時に実行すればできるはずです。 `Q` モナドは `runQ` 関数で `IO` に変換できるので。\nプロファイリングもできるはず。",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1561706911.070500",
        "text": "みなさん、ありがとうございいました。\n\n今回は、 <@U570660KX> さんの、 `typeRep (Proxy :: Proxy a)`  の方法で対応することにしました。\n\n`typeOf (undefined :: a)` は、hlint 2.1では何もいわれなかったのですが、2.2に上げたら、  `typeRep (Proxy :: Proxy a)`  をサジェスチョンしてきました。",
        "user": "U7GSVRQ6S",
        "type": "message"
    },
    {
        "ts": "1561781497.071100",
        "text": "<@UKTMVQCTT> has joined the channel",
        "user": "UKTMVQCTT",
        "type": "message"
    },
    {
        "ts": "1561807775.071400",
        "text": "<@UKTR8GV8R> has joined the channel",
        "user": "UKTR8GV8R",
        "type": "message"
    },
    {
        "ts": "1561823512.071800",
        "text": "<@UKTTJAGBT> has joined the channel",
        "user": "UKTTJAGBT",
        "type": "message"
    },
    {
        "ts": "1561858731.072100",
        "text": "お願いします <https://stackoverflow.com/questions/56821863/what-should-feed-for-pattern-synonyms-types-of-complete-pragma>",
        "user": "U4L0B71L1",
        "type": "message"
    },
    {
        "ts": "1561947676.072600",
        "text": "日本人主語抜かしがち",
        "user": "U4L0B71L1",
        "type": "message"
    },
    {
        "ts": "1561989232.072900",
        "text": "<@UL1A66L56> has joined the channel",
        "user": "UL1A66L56",
        "type": "message"
    },
    {
        "ts": "1562035365.073500",
        "text": "<@UL1HFJATE> has joined the channel",
        "user": "UL1HFJATE",
        "type": "message"
    },
    {
        "ts": "1562042607.073700",
        "text": "やはり多相な型は書けなかった。\nただし、単相な型を複数書くことが許されてた。\nでも、孤児プラグマはダメだった。\n`Single` クラスとインスタンスの `Only` をパッケージ分けようとしてたのにな。\n```\n{-# COMPLETE Single :: Only #-}\n{-# COMPLETE Single :: Identity #-}\n```",
        "user": "U4L0B71L1",
        "type": "message"
    },
    {
        "ts": "1562136295.074200",
        "text": "<@UL3EYH36Z> has joined the channel",
        "user": "UL3EYH36Z",
        "type": "message"
    },
    {
        "ts": "1562163345.074500",
        "text": "<@UL5PAB0F9> has joined the channel",
        "user": "UL5PAB0F9",
        "type": "message"
    },
    {
        "ts": "1562201404.075500",
        "text": "みなさんこんにちは。\n以下のようなコードで、 “process” 関数の型を変えずに “server”関数の結果をキャッシュするような方法はありますか？\nIOモナドが登場するのは “server”関数のが原因なので、どうせなら “server”関数内部でキャッシュを実現したい。\n[CachedIO](<http://hackage.haskell.org/package/cached-io-1.1.0.0/docs/Control-Concurrent-CachedIO.html>)というパッケージをみましたが、これは `cachedIO` でIOアクションを包んでキャッシュを実現するもので、 `cachedIO` そのものを、関数呼び出しをまたがって、誰かがが保持していないといけないので、ちょっと違いました。\n\n```\nmodule Main where\n\nimport           Control.Monad (forM_)\n\nmain :: IO ()\nmain = forM_ [1..] $ \\_ -&gt;\n  do putStrLn \"[Enter your key]\"\n     key &lt;- getLine\n     process key &gt;&gt;= putStrLn\n\nprocess::String-&gt;IO String\nprocess key = do\n  ret &lt;- server key\n  return $ if ret then \"Success\" else \"Failure\"\n\nserver::String-&gt;IO Bool\n-- ^このIOアクションの引数ー結果をキャッシュしたい。\nserver key\n  | key == \"ABC\" = putStrLn \"Accessing heavy resource.\" &gt;&gt; return True\n  | otherwise = putStrLn \"Yet another heavy resource access.\" &gt;&gt; return False\n```",
        "user": "U7GSVRQ6S",
        "type": "message"
    },
    {
        "ts": "1562206217.076100",
        "text": "可変なハッシュテーブルでいけそうかと思いましたけど、それを渡さないといけませんね……\nunsafe な関数でグローバルな可変参照作れば何とかなるでしょうが、おすすめしません。",
        "user": "U4L0B71L1",
        "type": "message"
    },
    {
        "ts": "1562209769.076300",
        "text": "おっしゃるとおり `unsafePerformIO` を使わない限り無理かと思います。\nそういう、「すべての関数が意識するべきでない値」は、いわゆるReaderT IOパターンで隠すのが得策かと。\n\n`IORef (HashMap String Bool)` みたいな型を `Env` に含める形になるでしょう。\n更新時は `atomicModifyIORef'` を使うのを忘れずに！",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1562218706.076700",
        "text": "最近そういうことしたかったのでファイルにシリアライズしてぶちこみました\n<https://github.com/ncaq/dic-nico-intersection-pixiv/blob/d5f240c3f4bdcb657c5c852b77b42d3a292c1abe/src/Main.hs#L94>",
        "user": "U57CUMWQ6",
        "type": "message"
    },
    {
        "ts": "1562223631.077200",
        "text": "<@U57CUMWQ6> さんの例をみて思いついたのですが、私の場合はキャッシュさせたいデータが少量なので、`setEnv` で環境変数を使ってキャッシュさせる方法もありそうです。使い方として筋悪な気がする一方、もともとキャッシュさせたいデータが、環境変数の外部化みたいなものなので、意味的にそれほど遠いわけでもない。",
        "user": "U7GSVRQ6S",
        "type": "message"
    }
]