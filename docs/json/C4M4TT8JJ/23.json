[
    {
        "ts": "1535717588.000100",
        "text": "（私もちょっと寄稿しています）",
        "user": "U4M598NHM",
        "type": "message"
    },
    {
        "ts": "1535735544.000100",
        "text": "すげーいいなー！",
        "user": "U4M4XHKB8",
        "type": "message"
    },
    {
        "ts": "1535780459.000100",
        "text": "ほんとすごい！！！",
        "user": "U5LV76EJH",
        "type": "message"
    },
    {
        "ts": "1535901092.000200",
        "text": "<@UCM4G8PGW> has joined the channel",
        "user": "UCM4G8PGW",
        "type": "message"
    },
    {
        "ts": "1536082662.000100",
        "text": "ここで聞く話なのかは微妙ですが、 Ix のインスタンスに (Bounded a, Enum a) =&gt; a が無いのは何故なのでしょう？ それだけあれば 必要要件は書けるはずなんですが。。。",
        "user": "U9XHWQX7Z",
        "type": "message"
    },
    {
        "ts": "1536082770.000100",
        "text": "あ、要件だけで言えば、Bounded a の部分は要らないですね。",
        "user": "U9XHWQX7Z",
        "type": "message"
    },
    {
        "ts": "1536104244.000100",
        "text": "FlexibleInstancesが必要になっちゃうのを避けたいという信念じゃないっすかね。。。\n実害があるのかは知りませんが。\nDerivingViaでその辺の問題が解決してIxのインスタンスをderiveしやすくなるかも！",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1536125511.000200",
        "text": "<@UCLGS5XGQ> has joined the channel",
        "user": "UCLGS5XGQ",
        "type": "message"
    },
    {
        "ts": "1536130696.000100",
        "text": "一般論として、具体的でない型のインスタンスを定義するのは避けられています。もし`instance (Bounded a, Enum a) =&gt; Ix a`を定義してしまうと、それより特殊化された効率の良い実装を与えることができなくなってしまいますからね。もちろんigrepさんの言う通り、newtypeのラッパーを定義して、DerivingViaを活用するのも面白いと思います",
        "user": "U4KUNQF9N",
        "type": "message"
    },
    {
        "ts": "1536136672.000100",
        "text": "Haskell Symposium 2018のproceedingsの一覧を作りました。PDFが公開されている論文にはURL付きです。\n<https://gitlab.com/igrep/papers-notes>\n個人的なメモを追記していく予定ですが、参考までにどうぞ。",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1536137874.000100",
        "text": "`instance (Bounded a, Enum a) =&gt; Ix a` って `{-# LANGUAGE UndecidableInstances #-}` も必要な奴では。\n\nUndecidableInstancesは、型推論が停止しなくなる可能性があるのがデメリットですね。\n<https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#instance-termination>\n\nもっとも、モダンな型関係ライブラリほとんどで使われてる `RankNTypes` を入れた時点で型推論は停止しなくなるので、最近のHaskellでは「型推論の停止性(笑)」状態っぽいですけど",
        "user": "U570660KX",
        "type": "message"
    },
    {
        "ts": "1536139296.000100",
        "text": "いっそIxクラスをなくしてrangeやindexを `range :: Enum a =&gt; (a, a) -&gt; [a]`  等にしてしまったらどうか、と思ったんですが、例えばVoidはIxではあるけどEnumではないんですね",
        "user": "U570660KX",
        "type": "message"
    },
    {
        "ts": "1536151293.000100",
        "text": "良いですね！、英語版のredditに貼っておけば喜ばれるのではないかと。:haskell:",
        "user": "U55V441FS",
        "type": "message"
    },
    {
        "ts": "1536160316.000100",
        "text": "ふっと思った事を聞いてみただけですが、色んな理由や考えがあるんですね。 まだまだ知らない事だらけだ",
        "user": "U9XHWQX7Z",
        "type": "message"
    },
    {
        "ts": "1536200927.000100",
        "text": "いっその事、型変数の量で選ばれる 0個が一番強くて大きくなると選ばれにくくなるみたいなのがあればいいんでしょうね。",
        "user": "U9XHWQX7Z",
        "type": "message"
    },
    {
        "ts": "1536201124.000100",
        "text": "型変数の量っていうのは少々間違いで、正確には抽象度の少さ で選ぶ その基準の一つとして上げられるのが型変数の種類 っていう話です",
        "user": "U9XHWQX7Z",
        "type": "message"
    },
    {
        "ts": "1536209910.000100",
        "text": "<https://github.com/serokell/universum#gotchas->\n&gt; You can't call some Foldable methods over Maybe and some other types. Foldable generalization is useful but potentially error-prone. Instead we created our own fully compatible with Foldable Container type class but that restricts the usage of functions like length over Maybe, Either, Identity and tuples.\n:thinking_face: :thinking_face: :thinking_face: :thinking_face: :thinking_face:",
        "user": "U4KUNQF9N",
        "type": "message"
    },
    {
        "ts": "1536210052.000100",
        "text": "MaybeにmapM_できないの、反知性的と言いたくなるデザインだ…",
        "user": "U4KUNQF9N",
        "type": "message"
    },
    {
        "ts": "1536210268.000100",
        "text": "<https://twitter.com/igrep/status/1022732186510811137> こういう話ですよね。\nエラーは絶対無視したくないっていうGo言語からきた発想だと、気持ちはわからなくもないです。",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1536210404.000100",
        "text": "でもリスクをわかった上でMaybeにmapM_する自由ぐらい与えてやれよって気持ちもわかります。 :sweat_smile:",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1536210801.000100",
        "text": "何か制約を課す場合、それは論理に沿ったものあるべきと考えていて、このライブラリのように人間本位の制限を付けるのは好きにはなれないです。値を捨てたくないなら線形型のようにもっと筋の通った概念があるわけですし",
        "user": "U4KUNQF9N",
        "type": "message"
    },
    {
        "ts": "1536217616.000100",
        "text": "どのインスタンスが選ばれるかはプログラムの意味を変えうる重要な問題なので、その基準が複雑になるほどプログラムの論証は難しくなります。書き換え規則(RULESプラグマ)のような補助的な機能でさえその問題は深刻なので、Haskellの根幹をなす型クラスは、できる限り簡潔にするのがよい設計だと思います",
        "user": "U4KUNQF9N",
        "type": "message"
    },
    {
        "ts": "1536219346.000100",
        "text": "なるほどね。そういう抽象化が進めばボイラープレートが減るんじゃないかなと思ったんですが、実装が複雑化するのは否めないですね。",
        "user": "U9XHWQX7Z",
        "type": "message"
    },
    {
        "ts": "1536239519.000100",
        "text": "今見てみたら、gitlabの表示で、レンダリングが崩れてるようですよ。",
        "user": "U55V441FS",
        "type": "message"
    },
    {
        "ts": "1536272234.000100",
        "text": "`&lt;details&gt;` 入れてからかな... 確認します",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1536473096.000200",
        "text": "<@UCP4R9U3A> has joined the channel",
        "user": "UCP4R9U3A",
        "type": "message"
    },
    {
        "ts": "1536473922.000100",
        "text": "ちょっと視点がずれますが，Haskell の Enum 型クラスはちょっと直感に反するところがあるような気がしますね．Double や Float が具体例だったり，列挙方法が与えられていなかったりします．列挙方法が示されるという意味では Ix の方が 「Enum」 の印象に近いですね．",
        "user": "U4KU9ABL0",
        "type": "message"
    },
    {
        "ts": "1536510844.000200",
        "text": "<@UCPNXSSGL> has joined the channel",
        "user": "UCPNXSSGL",
        "type": "message"
    },
    {
        "ts": "1536663969.000100",
        "text": ":kininaru: <https://www.infoq.com/presentations/haskell-jvm-system-performance?utm_source=infoqemail&amp;utm_medium=java&amp;utm_campaign=newsletter&amp;utm_content=09112018>",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1536723294.000200",
        "text": "<@UCSPW8XLP> has joined the channel",
        "user": "UCSPW8XLP",
        "type": "message"
    },
    {
        "ts": "1536738438.000100",
        "text": "<https://twitter.com/public_ai000ya/status/1039772704159674368?s=19>",
        "user": "U5LV76EJH",
        "type": "message"
    },
    {
        "ts": "1536738447.000100",
        "text": "サークルチェックできるようになってた",
        "user": "U5LV76EJH",
        "type": "message"
    },
    {
        "ts": "1536738831.000100",
        "text": "一昨日らしい",
        "user": "U56L7EVNY",
        "type": "message"
    },
    {
        "ts": "1536751653.000100",
        "text": "さすぎじ",
        "user": "U5LV76EJH",
        "type": "message"
    },
    {
        "ts": "1536903016.000100",
        "text": "GHC 8.2に追加されたもののあまり話題に上がらないCompact regions (<http://hackage.haskell.org/package/compact-0.1.0.1/docs/Data-Compact.html>) について、最近いい使い方がわかってきたのでシェアします:\n・一秒に数回以下の低頻度で更新するデータをcompactする(Mapなど、ポインタ数が多いものによく効く)\n・IORefに突っ込む\n・GCが速い！:v:('ω':v:)三:v:('ω'):v:三(:v:'ω'):v:\n不変データを格納するイメージに反して、参照型と相性がよいです。大規模なプログラムはどうしてもGCで止まる時間が長くなってしまう宿命がありましたが、それを打開しうる非常に強力な機能です",
        "user": "U4KUNQF9N",
        "type": "message"
    },
    {
        "ts": "1536904582.000100",
        "text": "一度compactすると、その時点でそこから参照で繋がっている塊を一つのでかいメモリオブジェクトだと考える＝ＧＣが楽できるから早い、みたいなイメージですね。すごい、使ってみたい",
        "user": "U570660KX",
        "type": "message"
    },
    {
        "ts": "1536905810.000100",
        "text": "確かに 音沙汰無いって感じですよね。 面白そうな感じで使ってみたいです",
        "user": "U9XHWQX7Z",
        "type": "message"
    },
    {
        "ts": "1536908893.000100",
        "text": "そういえば、そもそも GHC がどういう GC 戦略なのか知らないな",
        "user": "U4L0B71L1",
        "type": "message"
    },
    {
        "ts": "1536909017.000100",
        "text": "<http://hackage.haskell.org/package/compact> こういうラッパーがあるみたいですけど、使いましたか？",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1536909562.000100",
        "text": "GCの頻度よりもデータの更新頻度が低ければ効果が出るので、使える場面は少なくないと思うのですが、そもそも低レイテンシを求める人が少ないがゆえに取り沙汰されないのかもしれませんね",
        "user": "U4KUNQF9N",
        "type": "message"
    },
    {
        "ts": "1536909572.000100",
        "text": "GHC は、回る黒板みたいに、生きてる(？)アイテムを裏にコピーしてコピーが終わったら回すっていうやつが標準で、RTSオプション(だったと思う)で(黒板の例えで言うと)使わなくなったのを消すみたいな戦略だったと思います。",
        "user": "U9XHWQX7Z",
        "type": "message"
    },
    {
        "ts": "1536909936.000100",
        "text": "ですね、Haskell は一度きりのデータ生成が多い(ほか言語のと違いstatic変数の使用が少いと個人的に思ってる)ので、実質的にこれが一番という事なんでしょうね。",
        "user": "U9XHWQX7Z",
        "type": "message"
    },
    {
        "ts": "1536910037.000100",
        "text": "デフォルトでは2世代の世代別GC(したがってりんご姫さんの言う通りコピーGC)ですね。メモリ確保などでスレッドがyieldしたとき、条件を満たした場合に並列で処理されます",
        "user": "U4KUNQF9N",
        "type": "message"
    },
    {
        "ts": "1536910157.000100",
        "text": "並列で処理されるのは知らなかったや。 そんな機能もあるんですね",
        "user": "U9XHWQX7Z",
        "type": "message"
    },
    {
        "ts": "1536931117.000100",
        "text": "実用してる人の生情報は興味深いです！ 不変データの格納と参照型の相性の良さというのは面白いですね！\n\nあと、うろ覚えですが、確か速さ的には、こんな感じだったと思います。\n・Compact regionに入れるときに、全てを完全評価済みにした上で、連続的なメモリに配置するので次からの参照が速い。キャッシュが荒れない。\n・Compact region内のどれかへの参照があるかぎり、塊ごと、GCの対象から外れる。GCの量が減る。\n\nあと補足共有情報です。 Compact region作者による（論文出ない方の）説明資料です。\n<http://ezyang.com/slides/ezyang15-cnf-slides.pdf>\n\nあと、GHCのcopying GCの、雰囲気イメージ図と、\n<https://takenobu-hs.github.io/downloads/haskell_ghc_illustrated.pdf#page=41>\n\nGHCの２世代のGCの、雰囲気イメージ図です。\n<https://takenobu-hs.github.io/downloads/haskell_ghc_illustrated.pdf#page=71>",
        "user": "U55V441FS",
        "type": "message"
    },
    {
        "ts": "1536989603.000200",
        "text": "<@UCTKCHDMX> has joined the channel",
        "user": "UCTKCHDMX",
        "type": "message"
    },
    {
        "ts": "1537055875.000100",
        "text": "hfmtのビルドにひたすら時間がかかるなどした（stack使っているはずなのにcabal hellみたいなことになった）",
        "user": "U8EJKMNVA",
        "type": "message"
    },
    {
        "ts": "1537055926.000100",
        "text": "最終的に <http://hackage.haskell.org/package/hfmt-0.2.3.1/reports/1> に書いてあるバージョンで全部揃えてやっと成功（それまでに4880行を費やした）",
        "user": "U8EJKMNVA",
        "type": "message"
    },
    {
        "ts": "1537066040.000100",
        "text": "最近のnewtypeの盛り上がりに触発されて、newtype, data, typeでカジュアルに遊ぶ内容を書いてみました。enjoy:haskell:\n<https://qiita.com/takenobu-hs/items/14101cabf313e6d594ca>",
        "user": "U55V441FS",
        "type": "message"
    },
    {
        "ts": "1537342616.000100",
        "text": "unsafePerformIO（を用いた式）が正当化される式への条件みたいなの、定式化されて欲しいな",
        "user": "U5LV76EJH",
        "type": "message"
    }
]