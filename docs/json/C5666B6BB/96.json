[
    {
        "ts": "1615540248.006100",
        "text": "<@U01R1UNMVT5> has joined the channel",
        "user": "U01R1UNMVT5",
        "type": "message"
    },
    {
        "ts": "1615570535.006300",
        "text": "<@U01QNU81DE3> has joined the channel",
        "user": "U01QNU81DE3",
        "type": "message"
    },
    {
        "ts": "1615609238.006700",
        "text": "質問はこちらの方が良いでしょうかね？",
        "user": "U01R1UNMVT5",
        "type": "message"
    },
    {
        "ts": "1615610001.014200",
        "text": "まず、Haskellというよりももっと一般的な質問なのですが、\nwebアプリのバックエンドって、フロントから呼び出されるたびに起動して、データベースを読み込んだりするものなのでしょうか？\n\n何がいいたいかというと、バックエンドでフロントから送られてきたデータを使ってリストを作りたいのですが、このリストは毎回データベースに保存しなければならないのか、それともバックエンドのプログラム内に保持しておくことができるのか、という質問です。",
        "user": "U01R1UNMVT5",
        "type": "message"
    },
    {
        "ts": "1615610091.015600",
        "text": "しかもHaskellでデータを保持するとはどういうことなのか（参照等価なので）もよく分かっていないです。",
        "user": "U01R1UNMVT5",
        "type": "message"
    },
    {
        "ts": "1615610103.016000",
        "text": "すみません、あまりうまく説明できないです...",
        "user": "U01R1UNMVT5",
        "type": "message"
    },
    {
        "ts": "1615610558.016300",
        "text": "やりたいことは、関数型言語Elmみたいな構造をバックエンドでもやりたくて以下の構造を作ってみたのですが、\n'sが状態の型\n'iが入力の型\n'oが出力の型\nで、バックエンドでやりたいのは、\n初期状態がinit::'sと\n状態state::'sと入力input::'iに対して、次の状態と出力を返す関数update::'s -&gt; 'i -&gt; 's,'oで定義できるのではと考えて、型を実装してみました。\n\n問題はこの構造から具体的にデータベースへアクセスしたりJSONなどに変換したりする実装をどうするかというところで止まっています。",
        "user": "U01R1UNMVT5",
        "type": "message"
    },
    {
        "ts": "1615610619.017400",
        "text": "ちなみにこのコードは、形式検証をするために定理証明支援系Coqと呼ばれるもので記述したコードをHaskellのコードに変換したものになっています。",
        "user": "U01R1UNMVT5",
        "type": "message"
    },
    {
        "ts": "1615612695.020100",
        "text": "理想としては、Architecture型の引数をもらって、それに応じてデータベースのやりとりとJSONの入出力を行ってくれる関数を定義したい感じです。\n\nデータベースから's型の変数を作り、入力のJSONを'i型に変換し、updateを施した後、返り値の's型のデータをデータベースに保存し、'o型の返り値をJSONに変換して出力。",
        "user": "U01R1UNMVT5",
        "type": "message"
    },
    {
        "ts": "1615735084.022300",
        "text": "<@U01RK9CHY1F> has joined the channel",
        "user": "U01RK9CHY1F",
        "type": "message"
    },
    {
        "ts": "1615862877.000200",
        "text": "<@U01QX9TFNFR> has joined the channel",
        "user": "U01QX9TFNFR",
        "type": "message"
    },
    {
        "ts": "1616317363.001400",
        "text": "persistent 関連のテストを書いてるんですけど、なんかいい感じに ~モック~ テスト用データを作ったりできるテストライブラリってあるんですかね？\nRuby (Rails) とかだと <https://github.com/thoughtbot/factory_bot|factory_bot> とかを使うんですけど、パッと探した感じ、そういうの見つかりませんでした。",
        "user": "U56L7EVNY",
        "type": "message"
    },
    {
        "ts": "1616399255.005500",
        "text": "CloudWatch logのJSON形式で良い感じにログを出力させるOSSって既にありますか?\n[amazonka-cloudwatch-logs: Amazon CloudWatch Logs SDK.](<https://hackage.haskell.org/package/amazonka-cloudwatch-logs>)\nは出力するのではなく逆に出力を解析する方みたいで不適に見えます\nちゃんとフォーマットするかはともかく作ること自体は簡単そうですが、車輪の再発明はしたくないなと思ったのです\n無いなら作ります",
        "user": "U57CUMWQ6",
        "type": "message"
    },
    {
        "ts": "1616430017.009000",
        "text": "<@U01S215169G> has joined the channel",
        "user": "U01S215169G",
        "type": "message"
    },
    {
        "ts": "1616568538.009300",
        "text": "<@U01RTQG4GBH> has joined the channel",
        "user": "U01RTQG4GBH",
        "type": "message"
    },
    {
        "ts": "1616580232.009900",
        "text": "stack における下記のようなものって cabal にありますか？\n```stack ide targets```",
        "user": "U4L0B71L1",
        "type": "message"
    },
    {
        "ts": "1616685563.010700",
        "text": "`fused-effects`を用いて`callCC`をサポートするEffectを作ろうとしているのですが\n実装がうまく行きません. どうすれば実装できるか知りたいです. 質問の詳細はスレッドに\n続きます.",
        "user": "UP6J2B1LL",
        "type": "message"
    },
    {
        "ts": "1617033943.018800",
        "text": "<@U01SMHCTZN1> has joined the channel",
        "user": "U01SMHCTZN1",
        "type": "message"
    },
    {
        "ts": "1617034812.019000",
        "text": "<@U01S9U2ENS3> has joined the channel",
        "user": "U01S9U2ENS3",
        "type": "message"
    },
    {
        "ts": "1617262797.019600",
        "text": "<@U01T1F8PCTV> has joined the channel",
        "user": "U01T1F8PCTV",
        "type": "message"
    },
    {
        "ts": "1617520312.022700",
        "text": "<@U01TLQGSE3B> has joined the channel",
        "user": "U01TLQGSE3B",
        "type": "message"
    },
    {
        "ts": "1617945954.030600",
        "text": "<@U01UG7SDAPJ> has joined the channel",
        "user": "U01UG7SDAPJ",
        "type": "message"
    },
    {
        "ts": "1618213390.030800",
        "text": "<@U01TZ1XM7MG> has joined the channel",
        "user": "U01TZ1XM7MG",
        "type": "message"
    },
    {
        "ts": "1618213908.033500",
        "text": "はじめまして，本日参加させていただきました．いきなりですが質問失礼します．\nこちらと同じ機能をcaseを使って書くことはできるのでしょうか?",
        "user": "U01TZ1XM7MG",
        "type": "message"
    },
    {
        "ts": "1618213973.033600",
        "text": "",
        "user": "U01TZ1XM7MG",
        "type": "message"
    },
    {
        "ts": "1618214773.033800",
        "text": "すべて`x`でマッチしてガード式を使うというのは自分で思いつきました",
        "user": "U01TZ1XM7MG",
        "type": "message"
    },
    {
        "ts": "1618242059.036000",
        "text": "<@U01TU7EMWT0> has joined the channel",
        "user": "U01TU7EMWT0",
        "type": "message"
    },
    {
        "ts": "1618282578.036300",
        "text": "<@U01UT3LUW80> has joined the channel",
        "user": "U01UT3LUW80",
        "type": "message"
    },
    {
        "ts": "1618539160.036900",
        "text": "cabal v1-test で起動されるテストの CWD は、パッケージのトップディレクトリでした。テスト中にファイルパスを書くとき、パッケージのトップディレクトリから相対パスを書けばOKでした。\n\ncabal v2-test で起動されるテストの CWD は、パッケージのトップディレクトリではないようです。ファイルパスは、どうやって書くのが正しいでしょうか？ できれば、v1-test と共存できる方法が知りたいです。",
        "user": "U56MBRKR9",
        "type": "message"
    },
    {
        "ts": "1618609497.038000",
        "text": "<@U01UHUCK269> has joined the channel",
        "user": "U01UHUCK269",
        "type": "message"
    },
    {
        "ts": "1618637380.047800",
        "text": "前ここで質問させていただいた、\n<https://haskell-jp.slack.com/archives/C5666B6BB/p1594261873131500|https://haskell-jp.slack.com/archives/C5666B6BB/p1594261873131500>\nに関連するのですが、haskellのlayout付きコードをbraces and semicolonsに完全に変換するのって、自分で例のレポートのL関数を(悪名高いparse-error(t)含め)実装するしかないのでしょうか？ ghcの拡張をふんだんに使ったコードを変換するので、あんまり車輪の再発明はしたくなくて…",
        "user": "UL1HFJATE",
        "type": "message"
    },
    {
        "ts": "1618734832.054000",
        "text": "ulidというパッケージについてrandom-1.2以降への対応を試みています\n（背景: <https://zenn.dev/autotaker/articles/random-1-2-is-awesome> ）\nどなたか、できればCPP使って1.2より前のバージョンと1.2以後両方の対応をやったことがあれば修正例として参考にさせていただけないでしょうか？",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1618819482.061300",
        "text": "<@U58BK72FL> has joined the channel",
        "user": "U58BK72FL",
        "type": "message"
    },
    {
        "ts": "1618901141.068300",
        "text": "こんにちは。GHC である計算 `act :: IO ()` を走らせたときに、それによってヒープ上に確保されたバイト数の総量（の近似）を知る方法をご存知の方がいたら教えてください。最初 `GHC.Stats` の `allocated_bytes` がそれかなと思っていたのですが、`act` を実行している間に勝手に GC が走らないように `+RTS -T -I0 -A8G -G1 -m1` を渡してみたところ、最初から 8GB の領域が確保された状態になり（従って `allocated_bytes` は 8 * 1024^3 になる？）、その中でどれだけのメモリが実際に使われているかが分かりません。 <https://hackage.haskell.org/package/base-4.15.0.0/docs/GHC-Stats.html>",
        "user": "U58BK72FL",
        "type": "message"
    },
    {
        "ts": "1618901594.068400",
        "text": "関数呼び出しに対してヒープアロケーション量をはかる場合だと、ぼくはよく weigh を使いますね\n<https://hackage.haskell.org/package/weigh>",
        "user": "UK0MXUCAV",
        "type": "message"
    }
]