[
    {
        "ts": "1558658628.093400",
        "text": "こんにちは。型クラスについて質問です。\nInt64をラップしたMyNumberという型をつくりました。\nこの型について、以下のような操作を定義したいのですが、どうもうまくいきません。そもそもこのようなことが可能なのか、可能であればどうしたらよいのか、ぜひ教えてください。\n\nやりたいこと：\n- 許可：MyNumber 同士の 足し算、引き算\n- 許可：MyNumber の整数倍\n- 許可：MyNumber 同士の大小比較\n- 不許可： MyNumber と整数の足し算、引き算\n- 不許可：MyNumberと 整数の大小比較\n- 不許可：MyNumber同士の掛け算。\n\n不許可については、コンパイル時にエラーとなるのが理想です。\n\nこんな感じで書き進めてみたものの、なにか根本的に違うような気がしています。\n作戦として、MyNumberをNumやOrdのインスタンスにして、不許可の操作を実装しない、もしくは何らかの方法でコンパイルエラーにする、ということを考えました。\n\n```haskell\nmodule Main where\n\nimport qualified <http://GHC.Int|GHC.Int> as GI (Int64)\n\nnewtype MyNumber = MyNumber { getNumber::GI.Int64} deriving(Eq, Show)\ninstance Num MyNumber where\n    (+) (MyNumber x) (MyNumber y) = MyNumber $ x + y\n    -- (*) _ _ = undefined -- not sure how to achieve \"MyNumber 150 * 2\"\n    -- fromInteger x = undefined -- to avoid comparison against Num\n\ninstance Ord MyNumber where\n    (&lt;=) (MyNumber x) (MyNumber y) = x &lt;= y\n\nmain :: IO ()\nmain = do\n    putStrLn $ (++) \"Allow MyNumber + MyNumber : \" $ show $ MyNumber 100 + MyNumber 200 == MyNumber 300\n    putStrLn $ (++) \"Allow MyNumber &gt; MyNumber : \" $ show $ MyNumber 330 &gt; MyNumber 100 -- not detected by compiler\n    putStrLn $ (++) \"Allow MyNumber * Integer :\" $ show $ (MyNumber 150) * 2  -- show can I do this?\n    putStrLn $ (++) \"Don't allow MyNumber &gt; Integger : \" $ show $ (MyNumber 330) &gt; 100 -- not detected by compiler\n    putStrLn $ (++) \"Don't allow MyNumber * MyNumber : \" $ show $ (MyNumber 330) * (MyNumber 100) -- not detected by compiler?\n```",
        "user": "U7GSVRQ6S",
        "type": "message"
    },
    {
        "ts": "1558659783.093500",
        "text": "```\n1. 許可：MyNumber 同士の 足し算、引き算\n2. 許可：MyNumber の整数倍\n3. 許可：MyNumber 同士の大小比較\n4. 不許可： MyNumber と整数の足し算、引き算\n5. 不許可：MyNumberと 整数の大小比較\n6. 不許可：MyNumber同士の掛け算。\n```\n便宜上ナンバリング。\n`Num a` 型クラスは型 `a` 同士の足し算 `(+)` と掛け算 `(*)` を両方定義する必要があるので、その方針( `Num` のインスタンスにする)で 1 と 6 を実現することはできないです。",
        "user": "U56L7EVNY",
        "type": "message"
    },
    {
        "ts": "1558659954.093700",
        "text": "まぁ方法としては\n(1) 足し算だけの型クラス `Add a` なんかを独自で定義する\n(2) 足し算を `Monoid a` 型クラスかなんかで定義する(演算子が `(&lt;&gt;)` に変わってしまうが)\n\nがあるかなぁ。。。",
        "user": "U56L7EVNY",
        "type": "message"
    },
    {
        "ts": "1558664779.094100",
        "text": "演算子の見かけにこだわりたいのであれば、カスタムPreludeを作って(+)や(-)を上書きすればいいでしょうね。\n（やり過ぎ感は否めませんが…）\n<https://haskell.e-bigmoon.com/posts/2018/05-23-extended-prelude.html>",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1558666437.094500",
        "text": "<http://hackage.haskell.org/package/vector-space> 演算子は変わりますがvector-space を使ってみてはどうでしょうか？まさに加算とスカラー倍のためのインターフェイスです",
        "user": "U4KUNQF9N",
        "type": "message"
    },
    {
        "ts": "1558693882.000400",
        "text": "Numに全部ぶちこんだのはHaskellの初期設計過ち四天王に入りそうで入らなさそう",
        "user": "U57CUMWQ6",
        "type": "message"
    },
    {
        "ts": "1558758303.000700",
        "text": "Numeric Prelude ってどうなんですか？",
        "user": "U6JPU2DD2",
        "type": "message"
    },
    {
        "ts": "1558963421.001100",
        "text": "<@UJPKD2R2P> has joined the channel",
        "user": "UJPKD2R2P",
        "type": "message"
    },
    {
        "ts": "1559009020.001400",
        "text": "<@UJQ0WEJG2> has joined the channel",
        "user": "UJQ0WEJG2",
        "type": "message"
    },
    {
        "ts": "1559011117.003200",
        "text": "Haskellで｢送られてきたメールアドレスの少なくともドメインがメールサーバとして成立しているかどうか(DNSでMXもしくはAもしくはAAAAを持つか)｣どうか調べる必要があって,汎用性があるからOSSにしようかと思ってるのですが既出なら教えてください\n後DNS周りで楽に取れるやつが欲しい…パフォーマンス気にしなければ <http://hackage.haskell.org/package/resolv-0.1.1.2/docs/Network-DNS.html> で良いんですが…いや別に気にしなくても良いのか",
        "user": "U57CUMWQ6",
        "type": "message"
    },
    {
        "ts": "1559011160.003300",
        "text": "いやパフォーマンスの問題ではなく使い勝手の問題ですねこれは",
        "user": "U57CUMWQ6",
        "type": "message"
    },
    {
        "ts": "1559017840.006300",
        "text": "&gt; which is why we recommend using `try` rather than `catch` for ordinary exception recovery.\n&gt; <https://www.stackage.org/haddock/lts-13.23/base-4.12.0.0/Control-Exception.html#g:3>\nとあるので `try` の方を使うかという気持ちなんですが、複数の型の例外を捕捉したいとき何かイディオムあるんですかね？\nつまり `catch` ならこう ↓ なるケース（ `catches` を使ってもいい）\n```\nprint $ (head []) `div` (0 :: Int)\n  `catch` (\\e -&gt; putStrLn $ \"arith \" &lt;&gt; displayException (e :: ArithException))\n  `catch` (\\e -&gt; putStrLn $ \"some \" &lt;&gt; displayException (e :: SomeException))\n```\n`try` でベタで書くとこうなる\n```\ndo\n  v &lt;- try $ do\n    v &lt;- try $ print $ (head []) `div` (0 :: Int)\n    case v of\n      Right _ -&gt; pure ()\n      Left e -&gt; putStrLn $ \"arith \" &lt;&gt; displayException (e :: ArithException)\n  case v of\n    Right _ -&gt; pure ()\n    Left e -&gt; putStrLn $ \"some \" &lt;&gt; displayException (e :: SomeException)\n```\n<https://wandbox.org/permlink/FSlRioZ1EPWcWXjf>",
        "user": "U4L0B71L1",
        "type": "message"
    },
    {
        "ts": "1559018427.006500",
        "text": "dns: DNS library in Haskell - <http://hackage.haskell.org/package/dns> もありますが、使い勝手は似たようなものっぽいですね",
        "user": "U7155GPR9",
        "type": "message"
    },
    {
        "ts": "1559019191.006800",
        "text": "口頭での議論のとおりですが、簡潔に書くなら諦めて `catches` するしかなさそうな気がします。\n\n&gt; which is why we recommend using `try` rather than `catch` for ordinary exception recovery.\n\nの部分ですが、例外処理が十分に軽い処理（非同期例外がmaskされてもすぐに終わる）であれば問題ないでしょうし。",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1559021399.007000",
        "text": "1つのアプリーケーション内なら、直和型を宣言して適宜ラップするとか",
        "user": "U56L7EVNY",
        "type": "message"
    },
    {
        "ts": "1559024673.007300",
        "text": "実際に `try` 関数が `catch` を使ってやっているように、直和型でラップするだけ、というのが正解なんでしょうね\n参考: <https://hackage.haskell.org/package/base-4.12.0.0/docs/src/Control.Exception.Base.html#try>",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1559024850.007500",
        "text": "こんなのはどうでしょう？\n<https://gist.github.com/mizunashi-mana/c2d6b87206e9c1f43046f84b135fd445>\n\nやってることは大体 `catches` と同じです",
        "user": "U57D08Z9U",
        "type": "message"
    },
    {
        "ts": "1559026004.007900",
        "text": "なるほでぃうす",
        "user": "U4L0B71L1",
        "type": "message"
    },
    {
        "ts": "1559118620.008400",
        "text": "<@UJRDL35U3> has joined the channel",
        "user": "UJRDL35U3",
        "type": "message"
    },
    {
        "ts": "1559198752.000200",
        "text": "みなさんありがとうございました。vector-spaceは良さげですね！直接は大小比較をサポートしていない（ベクトルだから当たり前ですが）ので、その部分を手当してあげる必要はありそうです。",
        "user": "U7GSVRQ6S",
        "type": "message"
    },
    {
        "ts": "1559268175.002400",
        "text": "Haskellでデータをファイルに書き出し，読み込みできるようなライブラリはなにがあるでしょうか．\n思い付くのだとAesonを使うしかないのかなと考えています．\nより効率がいいものがあるような気がするのですが，見付けられませんでした．",
        "user": "UH195J82Y",
        "type": "message"
    },
    {
        "ts": "1559270297.002900",
        "text": "シリアライズライブラリという認識でよろしいでしょうか．\nこちらの方で有志の方々がシリアライズのパフォーマンス比較をなさっておられるので参考になると思います．\n<https://scrapbox.io/haskell-shoen/シリアライズ>",
        "user": "U59GW4U4T",
        "type": "message"
    },
    {
        "ts": "1559272495.003300",
        "text": "ありがとうございます!\nたすかりました!",
        "user": "UH195J82Y",
        "type": "message"
    },
    {
        "ts": "1559374102.008300",
        "text": "自分で簡単なパーサーを作ろうと思っています。失敗した時の位置情報を出すくらいの機能はつけたいのですが、その実装について述べられているページや基本的なアイディアなとご存知でしたら教えていただければ幸いです（Parsecあたりのソースコードを読め、と言われればそうなんですが……）",
        "user": "U7155GPR9",
        "type": "message"
    },
    {
        "ts": "1559377409.008400",
        "text": "読んでたらなんとなくわかってきたかも……もうちょい自分で頑張ってみます",
        "user": "U7155GPR9",
        "type": "message"
    },
    {
        "ts": "1559385536.008700",
        "text": "「パーサー」ではなく「パーサーコンビネーターライブラリー」ですよね？\nparsecもmegaparsecも読んでませんが、ちょっと思い浮かぶ感じだと、Stateとして現在の位置情報を表すカウンターを持っておいて、1文字進めるごとに +1 する感じですかね。",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1559391832.009000",
        "text": "Text.Parser.Pos に SourcePos というのがあって、 `getPosition :: Monad m =&gt; ParsecT s u m SourcePos` でいつでも取得できます。 igrep さんがいうようなメンテナンスは、 `setPosition :: Monad m =&gt; SourcePos -&gt; ParsecT s u m ()` でやることができるのですが、 Text.Parser.Char に含まれてるようなコンビネータはもともと一文字単位でいい感じに setPosition してるのだと思うので、自分で書く必要はほとんどないのでは、と思います",
        "user": "UF8SE896V",
        "type": "message"
    },
    {
        "ts": "1559391962.009200",
        "text": "あとは、 AST に SourcePos の情報を混ぜ込んで扱うのが吉だと思います。 <https://qiita.com/Mizunashi_Mana/items/115855bf2af9b9970198> 個々の例だと AST に a の穴をあけておいてそこに SourcePos をいれていますね",
        "user": "UF8SE896V",
        "type": "message"
    },
    {
        "ts": "1559392081.009500",
        "text": "ちなみにガチの AST の例として LLVM の C++ フロントエンドである Clang の AST をみてると、 AST に対応するソースコード位置の情報を「その AST に対応する部分の先頭位置・終了位置・代表的な位置（エラーメッセージにつけるのにもっともよさげな位置）」と三種類ぐらい持っていた気がします。そこまでやらないとあの親切なエラーメッセージは出せないんだなあ、っていう感じでした",
        "user": "UF8SE896V",
        "type": "message"
    },
    {
        "ts": "1559392257.009700",
        "text": "あ、ひょっとしてパーサコンビネータライブラリを作る、っていうもう一個メタな話をしていらっしゃるんでしたら、釈迦に説法でしたか…^^;;",
        "user": "UF8SE896V",
        "type": "message"
    },
    {
        "ts": "1559392364.009900",
        "text": "もし、パーサコンビネータに頼らずにパーサを書くとなると、結局「1文字パースするたびにアップデートする基礎の層」を作ってそれをメンテナンスできる State をもっておいて、適宜 get しておくようにしつつ、結局は AST に混ぜ込むようにするという話になって、それは AST を設計する際に考えましょうっていう話になると思います。",
        "user": "UF8SE896V",
        "type": "message"
    },
    {
        "ts": "1559406646.011000",
        "text": "<@UK8LM56K0> has joined the channel",
        "user": "UK8LM56K0",
        "type": "message"
    },
    {
        "ts": "1559487843.017400",
        "text": "haskell初心者です\nテストに関して質問させてください\n\n自分で定義したリスト型を返す関数のテストをhspecを用いて実行しようとしています。\n\n```\n-- src/Lexer.hs\nmodule Lexer (TokenType, Token, lexer) where\ndata TokenType = TK_NUM | TK_OP | TK_EOF deriving (Show)\ndata Token = Token {\n    tokenType :: TokenType,\n    valueString :: String\n} deriving (Show)\n\n-- 中略\n\nlexer :: String -&gt; [Token]\n\n-- 中略\n\n```\n\nこのlexer関数に“3+3”を入力に実行した結果をprintすると\n\n```\n[Token {tokenType = TK_NUM, valueString = \"3\"},Token {tokenType = TK_OP, valueString = \"+\"},Token {tokenType = TK_NUM, valueString = \"3\"}]\n```\n\nと出力されます。\nこれが正しい結果であることのテストを書きたいです。\n\n```\n-- tests/LexerSpec.hs\nmodule LexerSpec (spec) where\n\nimport Test.Hspec\nimport Lexer\n\nspec :: Spec\nspec = do\n  describe \"Lexer\" $ do\n    it \"number and `+` and `-`\" $ do\n        lexer \"3\" `shouldBe` [Token {tokenType = TK_NUM, valueString = \"3\"}] -- ←ここ\n```\n\n`stack test`を実行すると、以下のようなエラーが出ます\n```\n Not in scope: data constructor 'Token'\n Not in scope: data constructor 'tokenType'\n Not in scope: data constructor 'valueString'\n```\n\n理解が曖昧な点がたくさんあり、どこに問題があるのかわかっていない状態です。(module、テスト、などなど)\n\n考えられる問題点\n- そもそもhpecを用いるべきでない\n- testファイルでのimportがうまくいっていない\n- exportがうまくいっていない\n- テストの書き方がまずい\n\nよろしくおねがいします:man-bowing:",
        "user": "UCM4G8PGW",
        "type": "message"
    },
    {
        "ts": "1559488892.017600",
        "text": "パッと見た感じ\n• exportがうまくいっていない\nが原因だと思います．\n\nちょっと分かりにくいのですが，\n```\ndata A = A { valueA :: Int }\n```\nというプログラムは， 2 つのものを作ります．それは，\n• `A` という名前の型 (この名前は左側から類推されます)\n• `A` という名前の値コンストラクタ (data constructor) (この名前は右側から類推されます)\nです．そして， export の際それぞれ export するかが選べます．",
        "user": "U57D08Z9U",
        "type": "message"
    },
    {
        "ts": "1559489361.017800",
        "text": "今回問題になっているのは，\n```\nmodule Lexer (TokenType, Token, lexer) where\n```\nの部分で，データ型の export は\n```\nmodule M\n  ( 型名( 値コンストラクタ1, 値コンストラクタ2, ..., フィールド名1, ...)\n  ) where\n```\nという風に書きます．この場合， 型名とコンストラクタ，フィールドがそれぞれ export され外部モジュールから使えます (書かなければ使えません) ．なお， `()` の部分は省略できて，それが今回使われてる書き方になります．\n\nなので， `Token` という型名は export されてるものの， 値コンストラクタ `Token` やフィールド `tokenType` / `valueString` は export されていないため上記のエラーが起きているのだと思います．\n\nデータ型の全てを export したい場合は `型名(..)` という記法も用意されています．なので，それを使って\n```\nmodule Lexer (TokenType, Token(..), lexer) where\n```\nと修正するか，または\n```\nmodule Lexer (TokenType, Token(Token, tokenType, valueString), lexer) where\n```\nと修正するのがいい気がします．",
        "user": "U57D08Z9U",
        "type": "message"
    },
    {
        "ts": "1559491538.018000",
        "text": "丁寧な回答有り難うございます！！！\n`Token(..)`でexportする方法があるんですね！\n少し進むことが出来ました",
        "user": "UCM4G8PGW",
        "type": "message"
    },
    {
        "ts": "1559491659.018200",
        "text": "しかし、また別のエラーが出てしまいました\n(①~④という番号は僕が振っています)\n```\n   ① • No instance for (Eq Token) arising from a use of 'shouldBe'\n   ②• In a stmt of a 'do' block:\n        lexer \"3\"\n          `shouldBe` [Token {tokenType = TK_NUM, valueString = \"3\"}]\n      ③In the second argument of '($)', namely\n        'do lexer \"3\"\n              `shouldBe` [Token {tokenType = TK_NUM, valueString = \"3\"}]'\n      ④In a stmt of a 'do' block:\n        it \"number and `+` and `-`\"\n          $ do lexer \"3\"\n                 `shouldBe` [Token {tokenType = TK_NUM, valueString = \"3\"}]\n```\n\nテストコード側の、shuoldBeの後の部分での[Token]の書き方が合ってる気がしないのですが、どうしたら良いのでしょうか..\n```\n-- tests/LexerSpec.hs\nmodule LexerSpec (spec) where\n\nimport Test.Hspec\nimport Lexer\n\nspec :: Spec\nspec = do\n  describe \"Lexer\" $ do\n    it \"number and `+` and `-`\" $ do\n        lexer \"3\" `shouldBe` [Token {tokenType = TK_NUM, valueString = \"3\"}] -- ←ここ\n```\n\nそもそも、僕はHaskellのエラーの読み方がわかっていないようです。\nエラーとして表示されている①~④はどれを参考にすればよいのでしょうか。\n①はshoulBe関数にはEq Token型クラスのインスタンスではない、という意味でしょうか(だとしても解決方法がわからない)\n②~④は同じようなことを言っているようですが、意味がわかりません",
        "user": "UCM4G8PGW",
        "type": "message"
    },
    {
        "ts": "1559514923.018500",
        "text": "①～④は別々のエラーではなくてそれで一続きのメッセージですね。①のエラーが起きた場所が②の部分であり、その②の部分は（より大きな範囲で見ると）③であり、それは（さらに大きな範囲で見ると）④である、と言っているだけなので、①と②ぐらいを見て場所がわかるのならそれ以降を見る必要はないと思います。\nで、①のエラーは「shouldBe を使うことに起因して、 Token 型についての Eq クラスのインスタンス宣言が無いことが問題」だと言っているので、 `instance Eq Token where …` を必要とする、ということになります。あるいは `data Token …` の後ろに `deriving Eq` を書いて自動的に Eq のインスタンス宣言を導出するのでもよいと思います",
        "user": "UF8SE896V",
        "type": "message"
    },
    {
        "ts": "1559515048.018800",
        "text": "すでに `deriving Show` が書いてあるので `deriving (Show, Eq)` のようにカッコにくくってカンマで列挙して書くことになりますね",
        "user": "UF8SE896V",
        "type": "message"
    },
    {
        "ts": "1559518366.019400",
        "text": "全般的なお話をすると、GHCが出す型エラーは、一つのエラーが概ね以下のような形式で、必ず複数の行に渡ります。\n\n```\nPath/To/Module.hs:123:45: error:\n    ・&lt;エラーメッセージの内容1&gt;\n    ・&lt;エラーメッセージの内容2 以下、詳しい診断情報がいくつか続く&gt;\n    ・&lt;エラーメッセージの内容3&gt;\n      &lt;エラーメッセージの内容3。一つの診断情報が複数行に及ぶ場合「・」以降をインデントする\n    ・...\n```\n\nいずれにしても、一つの型エラーは「エラーが発生した場所（ :point_up: で言うところの `Path/To/Module.hs:123:45: error:` ）」で始まる行からインデントしている範囲が一つの型エラーです。\n型エラーもオフサイドルールに従っていると思っていただけると分かりやすいかと。",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1559535589.020400",
        "text": "「必ず」複数の行に渡ります、はさすがに言いすぎではないでしょうか。シンプルな構文エラーだと\n`Main.hs:1:13: error: parse error on input 'whree'`\nてな感じですし…（where をタイプミスした例）",
        "user": "UF8SE896V",
        "type": "message"
    },
    {
        "ts": "1559535686.020700",
        "text": "あ、「型エラー」は、と書かれていました、失礼しました。型エラーは確かに必ず複数行になりますね",
        "user": "UF8SE896V",
        "type": "message"
    },
    {
        "ts": "1559536959.021200",
        "text": "<@UK0MXUCAV> has joined the channel",
        "user": "UK0MXUCAV",
        "type": "message"
    },
    {
        "ts": "1559538648.021500",
        "text": "<@UF8SE896V>\nあああ、できました！！！ありがとうございます…\n\n<@UF8SE896V> <@U4LGTMTMK>\nなるほど！！ありがとうございます\nエラー文の読み方、参考になりました:man-bowing:",
        "user": "UCM4G8PGW",
        "type": "message"
    },
    {
        "ts": "1559544831.027800",
        "text": "Haskellの問題ではない可能性も高いのですが，\nSQLite3(SQLite.Simple)で複数回の書き込み後にErrorCan’tOpenがでてしまいます．\nおそらく100回程度の書き込み(成功) -&gt; しばらくErrorCan’tOpen -&gt; 時間を置いて復活\nという謎挙動でまいっています．．．\n拙作ですがコメント以外そのままのコードを載せます．\n```\nlogger :: String -&gt; Middleware\nlogger db app req sendResponse = do\n    t0 &lt;- getCurrentTime\n    app req $ \\rsp -&gt; do\n        let isRaw =\n                case rsp of\n                  ResponseRaw{} -&gt; True\n                  _ -&gt; False\n        t1 &lt;- getCurrentTime\n        let logRow = LogField\n              { getDatetime = t0\n              , getRemoteHost = remoteHost req\n              , getRequestMethod = requestMethod req\n              , getStatusCode = if isRaw then Nothing else Just $ H.statusCode . responseStatus $ rsp\n              , getPath = rawPathInfo req\n              , getQuery = rawQueryString req\n              , getRequestHeaderHost = requestHeaderHost req\n              , getRequestHeaderReferer = requestHeaderReferer req\n              , getRequestHeaderUserAgent = requestHeaderUserAgent req\n              , getResponseTime = diffUTCTime t1 t0\n              }\n        void $ forkIO $ do\n            insertLogRetry db logRow\n\n        sendResponse rsp\n    where\n        insertLogRetry :: String -&gt; LogField -&gt; IO()\n        insertLogRetry db' logRow = insertLog db' logRow\n                                    `catch` (\\x -&gt; case sqlError x of\n                                        ErrorBusy -&gt; insertLogRetry' db' logRow\n                                        ErrorLocked -&gt; insertLogRetry' db' logRow\n                                        e -&gt; putStrLn $ \"unknown error: \" ++ show e ++ \"\\n\" ++ show logRow) -- ErrorCan'tOpenが発生する\n        insertLogRetry' :: String -&gt; LogField -&gt; IO()\n        insertLogRetry' db' lr = (retry 100 $ do\n                                    gen &lt;- Rand.newStdGen\n                                    let (t, _) = Rand.randomR (1, 10) gen\n                                    threadDelay t\n                                    insertLog db' lr)\n                                  `catch` (\\x -&gt; case sqlError x of\n                                    e -&gt; putStrLn $ show e ++ \"error occurs after retry 100 times\")\n        insertLog :: String -&gt; LogField -&gt; IO()\n        insertLog db' lf = do\n                         conn &lt;- open db'\n                         execute conn \"INSERT INTO log VALUES (null,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)\" lf\n                         close conn\n```\nもしどなたか心当たりあれば不確実な情報でもお願いします…_(:3 」∠ )_",
        "user": "UH195J82Y",
        "type": "message"
    },
    {
        "ts": "1559546450.028100",
        "text": "さきほどレポジトリの設定をPublicにしたので，こちらから見れます．．．\n<https://gitlab.com/sarashino/prida>",
        "user": "UH195J82Y",
        "type": "message"
    },
    {
        "ts": "1559550579.028400",
        "text": "多分 <https://gitlab.com/sarashino/prida/blob/master/src/Web/Prida/Logger.hs#L127-131> で `insert` する度にコネクションを開いてしまっているのが原因なんじゃないかと思います。\nWAIのmiddlewareの設定からして、レスポンスを書く度にforkしてログに書き込んでいるわけですよね？\nとなると、リクエストを受け取る度に書き込むスレッドをforkしてDBをオープンしていることになるので、結果として同時にオープンできる量の限界に達してしまっているのではないかと思います。",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1559550868.028700",
        "text": "通常、Webアプリケーションが使うDBへのコネクションは、コネクションプールを使って、一定量のコネクションを常時開けておくのが定石です。\nHaskellでそれをやる場合、 <http://hackage.haskell.org/package/resource-pool> にコネクションプールを任せ、 `Pool` オブジェクトを `ReaderT` で引き回すか、愚直に必要な関数の引数に渡して回ることになるかと思います。\n\n:thinking_face: *もう少しWebアプリに慣れた人へ* ほかにいいパッケージありますかね... 試したことないのでちょっと自信ない",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1559551556.029200",
        "text": "しかし sqlite3 なのでコネクションといっても単にローカルファイルを open してるだけな気がするのですよね…100個ぐらいで限界がくるものなのだろうか？という気がします",
        "user": "UF8SE896V",
        "type": "message"
    },
    {
        "ts": "1559551710.029500",
        "text": "書き込みの際はDB全体でロックがかかっている、と読めますね。。。 :cold_sweat:\n<https://stackoverflow.com/questions/9017762/what-is-the-maximum-connections-for-sqlite3-database>",
        "user": "U4LGTMTMK",
        "type": "message"
    }
]