[
    {
        "ts": "1606974568.195400",
        "text": "昔の GHC だと、UNPACK で  Strict な小さな値は、ポインターではなく即値が格納されるようになります。\nしかし、現在の GHC は UNPACK は必要なく、Strict で小さければ、既値が格納されます。",
        "user": "U56MBRKR9",
        "type": "message"
    },
    {
        "ts": "1606981265.196400",
        "text": "unpackされるかどうか自動的に判断されるということですね、ありがとうございます！",
        "user": "UP6J2B1LL",
        "type": "message"
    },
    {
        "ts": "1607305195.196800",
        "text": "<@U7822EKEW> has joined the channel",
        "user": "U7822EKEW",
        "type": "message"
    },
    {
        "ts": "1607407240.197100",
        "text": "<@U01G6E7DR54> has joined the channel",
        "user": "U01G6E7DR54",
        "type": "message"
    },
    {
        "ts": "1607494891.205200",
        "text": "質問させてください :raising_hand:\n<https://hackage.haskell.org/package/vector-sized-1.4.3/docs/Data-Vector-Sized.html|vector-sizedの型レベルで長さを持つVector>の以下のような型クラスのインスタンスを定義したいのですがやり方が分からず困ってます :cry:\nうまいやり方を知っている or 一緒に悩んでくれる人がいたらコメントしていただけると嬉しいです :pray:\n（動かないですが書きたいコード）\n```import qualified Data.Vector.Sized as V\n\nclass Raccum a where\n  raccum :: a -&gt; a\n\ninstance Num a =&gt; Raccum (Vector 1 a) where\n  raccum = id\n\ninstance Num a =&gt; Raccum (Vector m a) where\n  raccum v = V.cons (V.sum v) (raccum $ V.tail v)```\n一応以下のように試行錯誤したのですが成功せず、、\nVector n a の関数実装に Vector (n-1) a の関数を使っているところの型推論がうまく行かないので\n• ↑を解決するためにUndecidableInstancesを使って（あまり使いたくない…）型クラス制約を `(Num a, m ~ (1+n), Raccum (Vector n a)) =&gt;` のように変更するとコンパイルは通るが実行時に `Overlapping instances` で怒られる\n• ↑仕方ないので以下のように一つの実装にまとめると `Couldn't match type '1' with '0' arising from a use of 'raccum'` と怒られる\n```instance (KnownNat m, KnownNat n, Num a, m ~ (1+n), Raccum (Vector n a)) =&gt; Raccum (Vector m a) where\n  raccum v\n    | m == 1    = v\n    | otherwise = V.cons (V.sum v) (raccum $ V.tail v)\n    where m = natVal (Proxy @m)```",
        "user": "U4KPPQW7K",
        "type": "message"
    },
    {
        "ts": "1607495010.205300",
        "text": "※`raccum` を実装したいわけではなくこの例のようにGHCの型レベル自然数に対して帰納的に型クラスのインスタンスを実装する方法を知りたいと思っています",
        "user": "U4KPPQW7K",
        "type": "message"
    },
    {
        "ts": "1607496050.205500",
        "text": ":memo: こう書けても良さそうなんですがこれは `Illegal type synonym family application 'n + 1' in instance` と怒られるんですよね、、\n```instance (Raccum (Vector n a), Num a) =&gt; Raccum (Vector (n+1) a) where\n  raccum v = V.cons (V.sum v) (raccum $ V.tail v)```",
        "user": "U4KPPQW7K",
        "type": "message"
    },
    {
        "ts": "1607497039.205700",
        "text": "<https://qiita.com/mod_poppo/items/3a37424d299a9f71b757> に書いたように、GHCのNatは帰納的な定義ではないので、真っ当な方法でそういう関数を定義することはできません。",
        "user": "UGM9F7XQS",
        "type": "message"
    },
    {
        "ts": "1607497151.206000",
        "text": "unsafeな手段を厭わないのであれば、\n```\ndata NatCons (n :: Nat) where\n  Zero :: NatCons 0\n  Succ :: (KnownNat n, m ~ (1 + n)) =&gt; Proxy n -&gt; NatCons m\n\n{-# NOINLINE natCons #-}\nnatCons :: KnownNat n =&gt; Proxy n -&gt; NatCons n\nnatCons proxy = case sameNat proxy (Proxy :: Proxy 0) of\n                  Just Refl -&gt; Zero\n                  Nothing -&gt; case someNatVal (natVal proxy - 1) of\n                               SomeNat proxy' -&gt; unsafeCoerce (Succ proxy')```\nという補助関数を用意してやれば自然数が0か後続者かで場合分けできるようになります。（完全なコードは <https://gist.github.com/minoki/08b5825e249ae5642a6236a5f5adf702>）",
        "user": "UGM9F7XQS",
        "type": "message"
    },
    {
        "ts": "1607497223.206200",
        "text": "試してませんが、自分でunsafeなコードを書きたくないのであれば、singletonsとcompiler pluginの組み合わせでどうにかできるかもしれません。",
        "user": "UGM9F7XQS",
        "type": "message"
    },
    {
        "ts": "1607497435.206400",
        "text": "Nat自体が帰納的に定義されてないことに起因してますよね、、\n調べてる時にこちらの記事も読ませていただきました! :pray:\n\n実装教えていただきありがとうございます!! unsafeな方法でも動かす方法が全く思いつかなかったのでめちゃくちゃありがたいです :innocent:\n\nsingletons + pluginですか :memo:\nsingletons 使ったことがないので考える良い機会になりそうです :arigatougozaimasu: :pray:",
        "user": "U4KPPQW7K",
        "type": "message"
    },
    {
        "ts": "1607503731.206600",
        "text": "singletons + compiler plugin を使った版も書いてみましたが、結局痒いところに手が届かなくてunsafeCoerceを使ってしまう羽目になりました <https://gist.github.com/minoki/08b5825e249ae5642a6236a5f5adf702#file-sing-hs>\n（更新：ghc-typelits-knownnatを入れた意義が微妙なことになっていたので直しました）",
        "user": "UGM9F7XQS",
        "type": "message"
    },
    {
        "ts": "1607503967.206800",
        "text": "すごい！めちゃくちゃ勉強になります :pray: :arigatougozaimasu:",
        "user": "U4KPPQW7K",
        "type": "message"
    },
    {
        "ts": "1607505408.207200",
        "text": "本来書きたかったコードも頂いたコードを参考に無事実装できました :pray: :pray: :pray:",
        "user": "U4KPPQW7K",
        "type": "message"
    },
    {
        "ts": "1607610810.207800",
        "text": "<@U01HAQDQUHW> has joined the channel",
        "user": "U01HAQDQUHW",
        "type": "message"
    },
    {
        "ts": "1608140827.210300",
        "text": "HakyllでBinaryのインスタンスじゃないもののsnapshot的なものは取れないんでしょうか。LucidのHtmlTのコンストラクタがエクスポートされてなくてStandaloneDerivingでもBinary(Generic)のインスタンスにできず...",
        "user": "UMKGDJ2RZ",
        "type": "message"
    },
    {
        "ts": "1608141270.210500",
        "text": "本当にsnapshot取りたかったのは取りたかったのはタイトルの部分ですよね? タイトルだけsnapshot取って解決",
        "user": "UMKGDJ2RZ",
        "type": "message"
    },
    {
        "ts": "1608163096.210800",
        "text": "Monad TransformerをBinaryのインスタンスにしてシリアライズするのは原理的に難しそうなので、やるとしたら一旦生の文字列（TextでもByteStringでも）に変えるしかなかったのではないかと",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1608179841.211700",
        "text": "リストを codensity 変換したものって `forall r. m r -&gt; (a -&gt; r -&gt; m r) -&gt; m r` でいいんですよね。これってモナドにするときに `Monad m` が必要ということで合ってますよね？",
        "user": "U5LEE6C1J",
        "type": "message"
    },
    {
        "ts": "1608180457.211800",
        "text": "<https://stackoverflow.com/questions/45334985/when-to-use-cps-vs-codensity-vs-reflection-without-remorse-in-haskell> によると、これは「 codensity 変換」ではなく「 CPS 変換」なようです。",
        "user": "U5LEE6C1J",
        "type": "message"
    },
    {
        "ts": "1608184533.212100",
        "text": "mはなくてもよく、foldrにリストを部分適用した型になります。もしLogicTのようにモナドを埋め込むなら、`(a → m r → m r) → m r → m r`ですね",
        "user": "U4KUNQF9N",
        "type": "message"
    },
    {
        "ts": "1608184883.212900",
        "text": "ありがとうございます！",
        "user": "U5LEE6C1J",
        "type": "message"
    },
    {
        "ts": "1609219658.215400",
        "text": "<@U01HQRVD875> has joined the channel",
        "user": "U01HQRVD875",
        "type": "message"
    },
    {
        "ts": "1609596543.217100",
        "text": "<@U01HPB51LLE> has joined the channel",
        "user": "U01HPB51LLE",
        "type": "message"
    },
    {
        "ts": "1609654731.221800",
        "text": "amazonkaでS3へファイルアップロードする処理について質問です。\n<https://github.com/brendanhay/amazonka/blob/develop/examples/src/Example/S3.hs>\nこちらのexampleを参考に、下のようなコードで手元でアップロードできることを確認しました。\n```createSourceFile :: IO ()\ncreateSourceFile = do\n    writeFile \"input.txt\" \"This is a test.\"\n\ns3Upload :: IO ()\ns3Upload = do\n    createSourceFile\n    logger &lt;- newLogger Debug stdout\n    env &lt;- newEnv Discover &lt;&amp;&gt; set envLogger logger . set envRegion Tokyo\n    runResourceT . runAWST env $ do\n        body &lt;- chunkedFile defaultChunkSize \"./input.txt\"\n        void . send $ putObject (BucketName \"test-bucket\") (ObjectKey \"output.txt\") body```\n `chunkedFile` という関数を噛ませていることから、Streamに読み込みながらアップロードしているという認識で合っているでしょうか？\n`amazonka-s3-streaming` というパッケージもありますが、Streamにアップロードする上で特にこれは不要でしょうか？\n<https://github.com/axman6/amazonka-s3-streaming/issues?q=is%3Aissue+is%3Aclosed>\n\n教えて頂ければ幸いです。",
        "user": "UGRUDUG3X",
        "type": "message"
    },
    {
        "ts": "1609654843.222100",
        "text": "stack.ymlです。\n```resolver: lts-13.18\n\npackages:\n- .\n\nextra-deps:\n- conduit-1.3.4\n- amazonka-1.6.1\n- amazonka-s3-1.6.1\n- amazonka-s3-streaming-1.0.0.1\n- http-client-0.5.14\n- text-1.2.3.1\n- lens-4.17```",
        "user": "UGRUDUG3X",
        "type": "message"
    },
    {
        "ts": "1609666569.222900",
        "text": "&gt; `chunkedFile` という関数を噛ませていることから、Streamに読み込みながらアップロードしているという認識で合っているでしょうか？\n気になって実装読んでましたがその通りStreamに読み込みながらアップロードしてそうです:eyes:\n書いてある通り、\n\nchunkedFile でchunk毎に分割したStream (Chunked ChunkedBody) にして\n<https://github.com/brendanhay/amazonka/blob/020bc7bde47bb235e448c76088dc44d6cec13e9b/amazonka/src/Network/AWS/Internal/Body.hs#L76-L88>\n\nsend から最終的には http-conduit の http 関数を利用して送信しています\n<https://github.com/brendanhay/amazonka/blob/020bc7bde47bb235e448c76088dc44d6cec13e9b/amazonka/src/Network/AWS/Internal/HTTP.hs#L147>\n\namazonka の RqBody の Chunked は http-conduit の RequestBodyStreamChunked に変換されるので\n<https://github.com/brendanhay/amazonka/blob/020bc7bde47bb235e448c76088dc44d6cec13e9b/core/src/Network/AWS/Data/Body.hs#L168>\n\n無事 Stream で送信されてると思います。\nStreamでアップロードしたいだけなら `amazonka-s3-streaming` は不要に見えますね:eyes:",
        "user": "U4KPPQW7K",
        "type": "message"
    },
    {
        "ts": "1609667103.223200",
        "text": "正確に確かめられてはいませんが、どうやらamazonka-s3-streamingが使っているのは、マルチパートアップロード <https://docs.aws.amazon.com/ja_jp/AmazonS3/latest/dev/mpuoverview.html> という機能のようで、挙げられたサンプルが使用している `putObject` が呼ぶAPIとはまた別物みたいです。\nどうやら使用している `Network.AWS.S3` 以下のモジュールは、S3のREST APIに対する各APIと一対一に対応しているようでして、`putObject` の定義元である `Network.AWS.S3.PutObject` は、名前のとおりPutObjectという命令 <https://docs.aws.amazon.com/AmazonS3/latest/API/API_PutObject.html> を呼んでいるものと推測されます。\n一方、`Network.AWS.S3.StreamingUpload` が使用しているのは `CreateMultipartUpload` や `CompleteMultipartUpload` といった、マルチパートアップロードで使用するAPIだからです。",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1609667213.223500",
        "text": "一番確実に確かめるなら、Fiddlerなどのプロキシを使って実際にリクエストを読み、以下の各APIのドキュメントと照合してみることでしょう\n• PutObject <https://docs.aws.amazon.com/AmazonS3/latest/API/API_PutObject.html>\n• CreateMultipartUpload <https://docs.aws.amazon.com/AmazonS3/latest/API/API_CreateMultipartUpload.html>\n• CompleteMultipartUpload <https://docs.aws.amazon.com/AmazonS3/latest/API/API_CompleteMultipartUpload.html>",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1609667366.224000",
        "text": "あ、長くなりましたがいずれにしてもlotzさんの回答のとおり、`putObject` でもストリーミングアップロード、つまり *一つの* リクエストでちょっとずつファイルの中身をアップロードすることはできていると思います。\nマルチパートアップロード機能は、とても大きなファイルを *複数の* リクエストでアップロードするためのものなので。",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1609668105.224300",
        "text": "なるほど、理解できました！\nまだ学び始めで見様見真似といった感じですが、実装も読めるようになっていきたいです。\n皆さんありがとうございます。",
        "user": "UGRUDUG3X",
        "type": "message"
    },
    {
        "ts": "1609668215.224700",
        "text": "&gt; send から最終的には http-conduit の http 関数を利用して送信しています\nなるほど、amazonkaは内部でconduit(ストリーミングライブラリですよね)を使っていたんですね。",
        "user": "UGRUDUG3X",
        "type": "message"
    },
    {
        "ts": "1609711445.225500",
        "text": "<@U01J9M7LZB3> has joined the channel",
        "user": "U01J9M7LZB3",
        "type": "message"
    },
    {
        "ts": "1609740118.225600",
        "text": "質問と直接関係なく恐縮なのですが、ChunkedFileと見て思い出したので共有させていただきます。\n現在リリースされているamazonkaのバージョンで、ChunkedFileを使って1mb以上のファイルを扱う際に、次のバグを踏みそうに見えます。ご注意下さい。\n<https://github.com/brendanhay/amazonka/issues/546>",
        "user": "U59TQ3MJ9",
        "type": "message"
    },
    {
        "ts": "1609755160.226100",
        "text": "ありがとうございました。\nS3へのputアップロードとマルチパートアップロードどちらも手元で動作できましたので、会社ブログにまとめました。\n確認なのですが、謝辞としてhaskell-jpに相談させて頂きましたと一言追記することは良いでしょうか？\n<https://dev.classmethod.jp/articles/haskell-s3-upload/>\n&gt; ChunkedFileを使って1mb以上のファイルを扱う際に、次のバグを踏みそうに見えます。\nありがとうございます、このバグしっかり踏みましたｗ\ndevelopに修正はマージされているようですが、リリースはいつになるのか・・・:thinking_face:\n後で追記しようと思っています。",
        "user": "UGRUDUG3X",
        "type": "message"
    },
    {
        "ts": "1609757002.226700",
        "text": "&gt; 確認なのですが、謝辞としてhaskell-jpに相談させて頂きましたと一言追記することは良いでしょうか？\n問題ないと思います :ok_woman:\n僕もよく記事にHaskell-jpに質問した旨の謝辞を書いてますー",
        "user": "U4KPPQW7K",
        "type": "message"
    },
    {
        "ts": "1609760362.227100",
        "text": "あまり見やすくはないのですが、slack-logの発言のリンクまで張っていただけると特に助かります。\nこの辺: <https://haskell.jp/slack-log/html/C5666B6BB/94.html#message-1609654731.221800>",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1609761241.227300",
        "text": "こういうのあるんですね！\nご丁寧に教えて頂きありがとうございます。",
        "user": "UGRUDUG3X",
        "type": "message"
    },
    {
        "ts": "1609765582.227900",
        "text": "`おわりに` の中に追記させて頂きました！",
        "user": "UGRUDUG3X",
        "type": "message"
    },
    {
        "ts": "1609766193.228300",
        "text": "<@U01HHDX3NQP> has joined the channel",
        "user": "U01HHDX3NQP",
        "type": "message"
    },
    {
        "ts": "1609833310.232100",
        "text": "cabal init したときに、作成されるsrc/MyLib.hs などの雛形ファイルをカスタマイズするにはどうすればいいのでしょうか。stack を使う場合は、~/.stack/config.yaml でtemplateファイルを指定して、そのtemplateファイルを編集すればよかったのですが。",
        "user": "U4KU9ABL0",
        "type": "message"
    },
    {
        "ts": "1609836185.232300",
        "text": "Distribution/Client/Init.hs にハードコーディングされてるのかな。。。",
        "user": "U4KU9ABL0",
        "type": "message"
    },
    {
        "ts": "1609836334.232700",
        "text": "全然回答になってませんが、今時はGitHubのテンプレートリポジトリーを使った方がいいのかも知れませんね。",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1609836513.232900",
        "text": "ああ、それがよさそう。ありがとうございます。",
        "user": "U4KU9ABL0",
        "type": "message"
    },
    {
        "ts": "1609897821.233500",
        "text": "<https://github.com/kowainik/summoner> summonerというツールが行儀のいい設定を用意してくれるのでおすすめです",
        "user": "U4KUNQF9N",
        "type": "message"
    },
    {
        "ts": "1609898008.234100",
        "text": "ありがとうございます。みてみます。",
        "user": "U4KU9ABL0",
        "type": "message"
    },
    {
        "ts": "1609975932.234500",
        "text": "<@U01J5HQ4ZH9> has joined the channel",
        "user": "U01J5HQ4ZH9",
        "type": "message"
    },
    {
        "ts": "1610182880.235300",
        "text": "<@U01HX0A6NT1> has joined the channel",
        "user": "U01HX0A6NT1",
        "type": "message"
    },
    {
        "ts": "1610248749.235500",
        "text": "<@U01JJHKV4PN> has joined the channel",
        "user": "U01JJHKV4PN",
        "type": "message"
    }
]