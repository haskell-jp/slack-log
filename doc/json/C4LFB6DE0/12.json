[
    {
        "ts": "1543311413.040100",
        "text": "呼ぶ側では、単純に結果のheadのlengthを評価するだけでテストしていたんですが、単純に出力するだけのものを試してみます。",
        "user": "UEC0PN1PA",
        "type": "message"
    },
    {
        "ts": "1543311479.040300",
        "text": "あ、これ戻り値IOだから遅延しないか",
        "user": "U570660KX",
        "type": "message"
    },
    {
        "ts": "1543311565.040500",
        "text": "いやparseCSVTはIOじゃないから遅延しますね",
        "user": "U570660KX",
        "type": "message"
    },
    {
        "ts": "1543311654.040700",
        "text": "や、パース失敗かどうか最後まで入力読まないと駄目だから遅延しないです。だとmapM_でも遅延にならないですね",
        "user": "U570660KX",
        "type": "message"
    },
    {
        "ts": "1543311685.041000",
        "text": "ちょっと混乱したので見なかった事に…",
        "user": "U570660KX",
        "type": "message"
    },
    {
        "ts": "1543311711.041200",
        "text": "行の分割を `lines` 関数に任せて1行ごとにパーサーを走らせれば回避できる？",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1543311754.041400",
        "text": "プロファイルの先頭部分ですが,quated Cell が悪さをしているらしくいじってみましたがどこが原因がなかなかわかりません.",
        "user": "UEC0PN1PA",
        "type": "message"
    },
    {
        "ts": "1543311835.041800",
        "text": "lines関数も試させていただきます, 環境がネットに繋がっていないので(現在自前にうつしています)反応遅くすみません.",
        "user": "UEC0PN1PA",
        "type": "message"
    },
    {
        "ts": "1543312018.042000",
        "text": "lines関数で行ごとに区切って読む方が軽いのは間違いなさそうですね。そうすると、遅延IOにより、最初の要素にアクセスしただけでは最終行まで読まないので注意です",
        "user": "U570660KX",
        "type": "message"
    },
    {
        "ts": "1543312127.042200",
        "text": "strict 拡張をしていても遅延が起きるでしょうか?",
        "user": "UEC0PN1PA",
        "type": "message"
    },
    {
        "ts": "1543312305.042400",
        "text": "おそらく起きます。Strict拡張やBangパターンはあくまでseq相当で、WHNFまでしか評価しないので。deepseqすれば最後まで行くはずです",
        "user": "U570660KX",
        "type": "message"
    },
    {
        "ts": "1543312413.042600",
        "text": "問題は *なにを* deepseqするかなんですが…:thinking_face:",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1543312464.042800",
        "text": "ありがとうございます. 今,putStrLnで試していますが,linesをその後に試させていただきます.\n少し話題がずれるのですが,1GB程度のファイルをText.IO.readFilesしただけでも5~6GB消費するのは,Boxedだとしかたないのでしょうか?",
        "user": "UEC0PN1PA",
        "type": "message"
    },
    {
        "ts": "1543312700.043100",
        "text": "`readCSVTWin path &gt;&gt;= \\x -&gt; deepseq x (return ()))`  とかですかね＞何を～",
        "user": "U570660KX",
        "type": "message"
    },
    {
        "ts": "1543312817.043300",
        "text": "total allocだからreallocして領域広げた分を累計してるのかも（未確認）",
        "user": "U570660KX",
        "type": "message"
    },
    {
        "ts": "1543313317.043500",
        "text": "すみません,計算待ちです,6GBのファイルを読ませてみていますが,現状121GB使っているので,呼ぶ側ではなさそうです.",
        "user": "UEC0PN1PA",
        "type": "message"
    },
    {
        "ts": "1543313840.044500",
        "text": "conduitなどを使う方がいいでしょうね。",
        "user": "U56MBRKR9",
        "type": "message"
    },
    {
        "ts": "1543314103.044700",
        "text": "不勉強でconduitをあまり理解していないのですが,可能なことは逐次処理で行別にパースしていくイメージであっているでしょうか?",
        "user": "UEC0PN1PA",
        "type": "message"
    },
    {
        "ts": "1543314341.044900",
        "text": "行単位でもできますし、調整すればセル単位でもできます",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1543314422.045100",
        "text": "現在linesで先に分割したものをためしてみているます.評価をputSTRLnにしたままだったので,出力に時間をくっていますが,40GB程度の消費で終わりそうです.",
        "user": "UEC0PN1PA",
        "type": "message"
    },
    {
        "ts": "1543314621.045500",
        "text": "一応,当面の課題は解決しました.ありがとうございます.一点疑問なのですが,6GBのcsvを[[Text]]で保持して,40GBほどメモリを消費するというのはHaskellの相場からすると通常なのでしょうか?conduit等も試させていただきますが,メモリ的にも節約が見込めるものでしょうか?",
        "user": "UEC0PN1PA",
        "type": "message"
    },
    {
        "ts": "1543315975.046000",
        "text": "- Total allocなので、allocしてすぐ解放したような物もカウントされているのでは？\n- HaskellというかParsecが遅い\n\nあたりも考えられるので、詳しくは検証しないと分からない所です。メモリ使用量はともかく速度については、リークや文字列処理に気を遣って書いたHaskellはC++の5倍程度遅く、JVMロード時間を除いたJavaとトントンくらい、とされています。",
        "user": "U570660KX",
        "type": "message"
    },
    {
        "ts": "1543316045.047200",
        "text": "<https://medium.com/@maoe/ghc%E3%83%92%E3%83%BC%E3%83%97%E3%83%97%E3%83%AD%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AA%E3%83%B3%E3%82%B0%E3%81%AE%E6%89%8B%E5%BC%95%E3%81%8D-md-bb8d180230f6>",
        "user": "U570660KX",
        "type": "message"
    },
    {
        "ts": "1543316110.048100",
        "text": "Total allocよりも、Total memory in useを見るべきか。あとはグラフ化した奴も見れば色々分かるかもしれません",
        "user": "U570660KX",
        "type": "message"
    },
    {
        "ts": "1543316157.049600",
        "text": "メモリに関しては載せていませんでしたが(すみません)単純にタスクマネージャーで見ていたの実行時の消費です。速度に関しては、並列化でどうにか頑張れると思うのですが、メモリ消費を減らす知見があれば教えていただけると大変助かります。要求ばかりですみません。",
        "user": "UEC0PN1PA",
        "type": "message"
    },
    {
        "ts": "1543316256.051500",
        "text": "ただ、認識不足でしたが一度に読まずにバッチ処理をしろという意味だと思いますので(&gt;&gt;conduit )そちらで努力してみます。",
        "user": "UEC0PN1PA",
        "type": "message"
    },
    {
        "ts": "1543316412.053000",
        "text": "ヒーププロファイリングのグラフ化は行ったことがなかったので今後利用させていただきます。ご教示助かります。ありがとうございました。",
        "user": "UEC0PN1PA",
        "type": "message"
    },
    {
        "ts": "1543317504.053200",
        "text": "conduitの敷居が高ければ、Lazy TextでgetContentsする-&gt;Lazyのlinesで分割-&gt;toStrict-&gt;パース　でも一応大丈夫ですね。あるいは他言語同様にgetLineでループして頑張るか",
        "user": "U570660KX",
        "type": "message"
    },
    {
        "ts": "1543317901.058200",
        "text": "なるほど。遅延評価の活かし方参考になります。せっかくなのでstreamも勉強してみますが、当面の実装はそちらで試してみます。使い始めたものの全く扱えていないので大変勉強になります。",
        "user": "UEC0PN1PA",
        "type": "message"
    },
    {
        "ts": "1543377028.065000",
        "text": "データの使われ方によって対策が変わると思います。前から順にストリーム処理可能ならcassavaなどのstreamingインタフェースを使えば良さそうですが、全てのデータをメモリ上に保持してランダムアクセスする場合は[[Text]]ではなくもっとコンパクトなデータに変換するのが良いと思います。データが数値なら適切な数値型にしてunboxed vectorにするなどです。",
        "user": "U4M9NJ7QE",
        "type": "message"
    },
    {
        "ts": "1543377305.067700",
        "text": "リストはかなり富豪的なデータ構造で大量の要素を保持しなければならない時にはメモリ使用量やGCの仕事量が増えて遅くなりがちなので気をつけないといけません",
        "user": "U4M9NJ7QE",
        "type": "message"
    },
    {
        "ts": "1543392262.068100",
        "text": "ご回答ありがとうございます.日本語混じりの文字列なので,数値型やBytestringなどは使えません.Unboxed vectorは,そのままTextを要素にできないように理解していましたが,\ndata NewText = NewText {text :: {-# Unpack #-} Text のようなものをBoxedVectorに入れても,同じ効果が得られるものでしょうか.",
        "user": "UEC0PN1PA",
        "type": "message"
    },
    {
        "ts": "1543393376.068600",
        "text": "newtype にはUnpackプラグマは使えないのですね..修正しました",
        "user": "UEC0PN1PA",
        "type": "message"
    },
    {
        "ts": "1543393646.068800",
        "text": "それと気になるのが,Parserのような処理で返り値をVectorにするとConsを各Char(をT.pack)したものに繰り返すことになりそうですが,そこが少し怖いです.以前,手当たり次第にVectorにしていて,snoc,cons,++あたりを繰り返して死んだことがあり,寧ろリストの方が安全ではないかと考えていました. いずれにしても手元で試させていただきます.",
        "user": "UEC0PN1PA",
        "type": "message"
    },
    {
        "ts": "1543426319.069100",
        "text": "勉強のために色々試してみたのですが、以下のように変更したら `total memory in use` が1/3ぐらいになりました。\n\n`cell = (quotedCell &lt;|&gt; many (noneOf \",\\n\\r\")) &gt;&gt;= (\\res -&gt; return $! T.pack res)`",
        "user": "U5B3EGEFQ",
        "type": "message"
    },
    {
        "ts": "1543461077.069600",
        "text": "これ意識して避けるの絶対無理ですね…… Textでゴリゴリやりたい人はattoparsec使えって事なんでしょうか",
        "user": "U570660KX",
        "type": "message"
    },
    {
        "ts": "1543461167.069800",
        "text": "megaparsecとかtrifectaならまた違ったりするのかな。 :thinking_face:",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1543461172.070000",
        "text": "そもそもparsecはincremental parsingに対応していなかったと思うので、大きなデータを使う場合はattoparsecを使ってくださいということだと思います",
        "user": "U4M9NJ7QE",
        "type": "message"
    },
    {
        "ts": "1543461194.070300",
        "text": "megaparsec でも書き直してみましたが、同様でした。attoparsec なら違うかもしれないですね。",
        "user": "U5B3EGEFQ",
        "type": "message"
    },
    {
        "ts": "1543461327.070700",
        "text": "attoparsecは\"Use the Text-oriented parsers whenever possible\" に従えば大丈夫そう？　<http://hackage.haskell.org/package/attoparsec-0.13.2.2/docs/Data-Attoparsec-Text.html>",
        "user": "U570660KX",
        "type": "message"
    },
    {
        "ts": "1543461573.071000",
        "text": "あと `&gt;&gt;=` で書いてある部分を `do` で書き換えて、全部の関数に型を明示的に書いたら、処理的には何も変更していませんが 50MB ぐらい減りましたね。",
        "user": "U5B3EGEFQ",
        "type": "message"
    },
    {
        "ts": "1543461624.071200",
        "text": "Strict拡張があるので、doで変数束縛すると暗黙にseqが掛かるからそれじゃないですかね",
        "user": "U570660KX",
        "type": "message"
    },
    {
        "ts": "1543462141.071600",
        "text": "確かに手元で確認したら `Strict` 拡張の有無でプロファイル結果が変わったので、それっぽいです。",
        "user": "U5B3EGEFQ",
        "type": "message"
    },
    {
        "ts": "1543470689.072000",
        "text": "ここまでくると途中経過のソース全部含めてBIG MOONの記事になっていて欲しくなりますね :pray:",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1543472259.072200",
        "text": "書いてみますね！",
        "user": "U5B3EGEFQ",
        "type": "message"
    },
    {
        "ts": "1543472340.072600",
        "text": "<@UEC0PN1PA> 念のため確認ですが、ソースを <@U5B3EGEFQ> さんのブログに載せちゃっても大丈夫でしょうか。。。？",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1543476156.073800",
        "text": "<@U4LGTMTMK> 問題ありません。皆さん色々議論してくださって大変勉強になりましたので是非残してください。",
        "user": "UEC0PN1PA",
        "type": "message"
    },
    {
        "ts": "1543545285.078600",
        "text": "お知らせです、MiniKanren やReasoned Schemer で知られるWilliam Byrd 氏(日本名:ウィルちゃん) が12月17日に茅場町でTalkされます。Abstractなどは後ほど出します^_^  <https://www.meetup.com/ja-JP/Tokyo-Haskell-Meetup/events/ckxnrpyxqbvb/>",
        "user": "U6RPDAT8E",
        "type": "message"
    },
    {
        "ts": "1543546218.078900",
        "text": "すみませんが、このチャンネルは相談か、このSlack Workspace自体についての連絡用に限定したいので、 <#C4NDY2TF1|event-announcement> か <#C4M4TT8JJ|random> に移していただけないでしょうか？ :bow:",
        "user": "U4LGTMTMK",
        "type": "message"
    }
]