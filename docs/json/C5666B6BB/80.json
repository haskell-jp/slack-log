[
    {
        "ts": "1582715671.026900",
        "text": "実装を見ると、入力値を全て記憶していますね。これはfumievalさんに上で説明頂いた対角化のようです <https://www.stackage.org/haddock/lts-15.1/machines-0.7/src/Data.Machine.Mealy.html#driveMealy>",
        "user": "U570660KX",
        "type": "message"
    },
    {
        "ts": "1582715810.027100",
        "text": "ArrowApplyインスタンスが正しく定義できる場合、`k a b` と `a -&gt; k () b` が同型になるので、ArrowMonadで一般のMealyを表現できます",
        "user": "U570660KX",
        "type": "message"
    },
    {
        "ts": "1582721720.028600",
        "text": "今日同僚と話して気になったんですが、構文とか、表面的な要素を除いて、型レベルプログラミングにできてTemplate Haskellにできないこと、って何がありますかね。あるのは間違いないんですが、なんかうまく言語化できないので、お知恵を拝借したいです。",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1582722789.028700",
        "text": "一言で表すなら「型に応じて挙動を変えること」ではないでしょうか。Template Haskellは型検査の前にあるので、構文として見えている型が実際は何であるか、既知のデータから推測しかできない一方、型レベルプログラミングなら型に依存した振る舞いを拡張性のある形で表現できます",
        "user": "U4KUNQF9N",
        "type": "message"
    },
    {
        "ts": "1582762118.029100",
        "text": "同型作れるのかこれ……（だんだん不安になる）",
        "user": "U570660KX",
        "type": "message"
    },
    {
        "ts": "1582877987.029400",
        "text": "ものすごいニッチな質問なのですが、REPL上でTextをプリントする際、<http://Data.Text.IO|Data.Text.IO>.putStrLnよりもRIOが提供しているlogInfoのほうが出力される速度が圧倒的に速いのはなぜだかわかる人いますか。\n<https://hackage.haskell.org/package/text-1.2.4.0/docs/Data-Text-IO.html#v:putStrLn>\n<https://hackage.haskell.org/package/rio-0.1.14.0/docs/RIO.html#v:logInfo>",
        "user": "U7Z4F723Z",
        "type": "message"
    },
    {
        "ts": "1582879409.035000",
        "text": "簡単な例をRepoにしてみました。\n<https://github.com/HirotoShioi/speed-test>",
        "user": "U7Z4F723Z",
        "type": "message"
    },
    {
        "ts": "1582879416.035200",
        "text": "Windows環境でMySQLの接続確認したかったけど、mysql_config not foundの直し方(それらしいSetup.hsかSetup.lhsがみあたらない)がわからないのでPostgresqlで試したら動いたのでよしとするか",
        "user": "UU21TJHHV",
        "type": "message"
    },
    {
        "ts": "1582881982.039500",
        "text": "<https://qiita.com/Lugendre/items/6b4a8c8a9c85fcdcb292> によると `arr (b, c) d === b -&gt; arr c d` という同型が ArrowApply ならあるらしいので問題ないと思います。というか、下みたいに作れませんかね？\n```(&gt;&gt;=) :: ArrowApply arr =&gt; arr a b -&gt; (b -&gt; arr a c) -&gt; arr a c\nx &gt;&gt;= f = proc a -&gt;\n  b &lt;- x -&lt; a\n  f b -&lt;&lt; a```",
        "user": "U5LEE6C1J",
        "type": "message"
    },
    {
        "ts": "1582882311.041200",
        "text": "そういえば Prelude の putStrLn を使っていたら、出力なしの時よりもかなり遅くなったということがありますね。早い出力方法ってあるんでしょうか",
        "user": "U5LEE6C1J",
        "type": "message"
    },
    {
        "ts": "1582882426.041500",
        "text": "<https://github.com/commercialhaskell/rio/blob/b01145fd4df4ee80b39996a04450a764ae8baffa/rio/src/RIO/Prelude/Logger.hs#L349-L362>\nこの部分が、おそらく実際に使われている実装だと思います。その先まではよくわかりませんが。",
        "user": "U5LEE6C1J",
        "type": "message"
    },
    {
        "ts": "1582882481.041800",
        "text": "<https://haskell-jp.slack.com/archives/C5666B6BB/p1582882311041200> の質問も含めて、 `Utf8Builder` というやつが速いから `<http://Data.Text.IO|Data.Text.IO>.putStrLn` よりも速いんだろうし、 `putStrLn` の代わりに `Utf8Builder` とやらを使えば速くなるんじゃないっすかね。\nただこの手のビルダー類、ほかにもいくつか作られていたと記憶しているので、探すのもよいかと。",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1582884640.042400",
        "text": "ビルダーについていろいろ調べてみます。ありがとう！",
        "user": "U7Z4F723Z",
        "type": "message"
    },
    {
        "ts": "1582942007.042900",
        "text": "はい、その同型で `c ~ ()` としたものを考えればいいかと思っていたのですが、 `Mealy a b` から `a -&gt; Mealy () b` への関数で、元の情報を落とさないようなものが作れないのです",
        "user": "U570660KX",
        "type": "message"
    },
    {
        "ts": "1582942087.043200",
        "text": "同型って「型と型のSetとしての同型」の事ではないのだろうか",
        "user": "U570660KX",
        "type": "message"
    },
    {
        "ts": "1582942236.043400",
        "text": "あるいは、ArrowApplyが扱っているのって要するに冪対象だと思っていて、その同型というのは <https://ja.wikipedia.org/wiki/%E5%86%AA%E5%AF%BE%E8%B1%A1#%E5%AE%9A%E7%BE%A9> にあるhomの式だと思うのですが、それをHaskellにエンコードすると `arr (b, c) d === arr b (arr c d)` が正しくて、右辺の形がちょっと違うのではと",
        "user": "U570660KX",
        "type": "message"
    },
    {
        "ts": "1582942592.043800",
        "text": "実際、 `Mealy (a, b) c` を `Mealy a (Mealy b c)` で表すのは、まさにMealyのArrowApply(app)の定義がはまりそうな感じがします",
        "user": "U570660KX",
        "type": "message"
    },
    {
        "ts": "1582943597.044100",
        "text": "圏論に強い人の意見を聞きたいです",
        "user": "U570660KX",
        "type": "message"
    },
    {
        "ts": "1582943771.044500",
        "text": "`a -&gt; b ==&gt; Mealy a b` はできるけど `Mealy a b ==&gt; a -&gt; b` はできないわけで、 as_capabl さんの考察があっているように思います",
        "user": "U5LEE6C1J",
        "type": "message"
    },
    {
        "ts": "1582944179.044700",
        "text": "Idioms are oblivious, arrows are meticulous, monads are promiscuous という論文にこのあたりのことが書かれているらしいです",
        "user": "U5LEE6C1J",
        "type": "message"
    },
    {
        "ts": "1583025662.047200",
        "text": "<https://www.stackage.org/haddock/lts-15.1/bytestring-0.10.10.0/Data-ByteString-Builder.html#v:hPutBuilder|https://www.stackage.org/haddock/lts-15.1/bytestring-0.10.10.0/Data-ByteString-Builder.html#v:hPutBuilder>\n`hPutBuilder` というのが件の関数の中心で使われているんですが、 `Handle` のバッファを使って `Builder` を実行するから早いとか書いてありますね。",
        "user": "U5LEE6C1J",
        "type": "message"
    },
    {
        "ts": "1583065035.050000",
        "text": "すみませんよくわかってないのですが、ステートモナドだとなにか過不足があるのでしょうか？",
        "user": "U74KTAG0N",
        "type": "message"
    },
    {
        "ts": "1583065098.051400",
        "text": "ミーリーマシンをつかうのはなにか回路的な記述をするためでしょうか？",
        "user": "U74KTAG0N",
        "type": "message"
    }
]