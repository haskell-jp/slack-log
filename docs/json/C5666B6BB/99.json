[
    {
        "ts": "1635485581.001700",
        "text": "<@U02KK6NUFFE> has joined the channel",
        "user": "U02KK6NUFFE",
        "type": "message"
    },
    {
        "ts": "1635546600.002000",
        "text": "<@U02KLUFFJ6N> has joined the channel",
        "user": "U02KLUFFJ6N",
        "type": "message"
    },
    {
        "ts": "1635547410.006900",
        "text": "はじめまして、Haskell初心者で、さらにSlackを使うのも初めてでして、投稿方法など間違っていましたらすみません。\nとても簡単な質問かもしれないのですが、\n「行列の第 i, j 成分のみ関数 f を適用する」\nという関数\nmatrixsubst :: ( a -&gt; a ) -&gt; [[a]] -&gt; [Int] -&gt; [[a]]\nmatrixsubst f m [i, j] =\nを作りたいのですが、どうしたらよいでしょうか。\n\n具体例としましては、\nf = (\\x -&gt; x^2),\nm=\n[[1,2,3]\n,[4,5,6]\n,[7,8,9]]\ni= 2, j=3\nとすると、出力として\n[[1,2,3]\n,[4,5,36]\n,[7,8,9]]\nを得たい、ということです。",
        "user": "U02KLUFFJ6N",
        "type": "message"
    },
    {
        "ts": "1635560352.013800",
        "text": "既出かもしれませんが\nHaskellでパターンマッチを実行するとき想定外のパターンはエラー（コンパイルエラーか実行時エラー）にしたりすることはできるのでしょうか？\nよくパターンマッチを使うと以下のような警告が出るのですが、そもそもありえないパターンが入ってたりするのです。\n```Warning: Pattern match(es) are non-exhaustive```",
        "user": "U02KK6NUFFE",
        "type": "message"
    },
    {
        "ts": "1635718877.017900",
        "text": "<@U02LD7MAQ00> has joined the channel",
        "user": "U02LD7MAQ00",
        "type": "message"
    },
    {
        "ts": "1635915074.018300",
        "text": "あまり経験がなかったので気になったのですが、newtypeで宣言できる型をdataで宣言するユースケースって何があるでしょうか？",
        "user": "UH195J82Y",
        "type": "message"
    },
    {
        "ts": "1636073332.020400",
        "text": "GHC 9.2 でライブラリをコンパイルすると、Word8 (#付きかも)で問題が出ることが多いんですが、これは何が変更されたためですか？",
        "user": "U56MBRKR9",
        "type": "message"
    },
    {
        "ts": "1636208665.022800",
        "text": "<@U02LT3J3B3K> has joined the channel",
        "user": "U02LT3J3B3K",
        "type": "message"
    },
    {
        "ts": "1636257337.023000",
        "text": "<@U02LF3A4U58> has joined the channel",
        "user": "U02LF3A4U58",
        "type": "message"
    },
    {
        "ts": "1636443228.023600",
        "text": "GHC 9.0 の GHC API を使うと\n\n```Left :: a %1 -&gt; Either a b```\nのように %1 が出てくるんですが、これ何でしたっけ？",
        "user": "U56MBRKR9",
        "type": "message"
    },
    {
        "ts": "1636493243.024800",
        "text": "<@U02LRUA906N> has joined the channel",
        "user": "U02LRUA906N",
        "type": "message"
    },
    {
        "ts": "1636592171.025900",
        "text": "GHC 9.0.1 ですが、Linuxではうまく動いています。\nしかし、macOSだと warp や quic の cabal test が失敗するようになりました。\n将来 GHC 9.0.2 となるブランチの先頭で試してみたいのですが、Intel macOS 用の GHC nightly build ってどこかに落ちていませんか？\ngitlab を探してみたのですが、見つかりませんでした。",
        "user": "U56MBRKR9",
        "type": "message"
    },
    {
        "ts": "1636653798.030500",
        "text": "stackのLTS18.16で、muslを静的リンクしたaesonに依存するバイナリを作ろうとして躓いています。\n再現手順：\n1. <https://qiita.com/lambda_funtaro/items/5ac47f83616f8c07d4db> の通りに設定する（stack.yaml中のdockerのrepoはutdemir/ghc-musl:v22-ghc8107にする）\n2. package.yamlのdependenciesにaesonを加える\n3. `stack build --docker`する\n4. ビルドに失敗する↓\n```Error: While constructing the build\nplan, the following exceptions were\nencountered:\n\nIn the dependencies\nfor hashable-1.3.0.0:\n    integer-gmp must\n                match &gt;=0.4 &amp;&amp; &lt;1.1, but\n                the stack configuration\n                has no specified\n                version  (latest\n                matching version\n                is 1.0.3.0)\nneeded due to test-0.1.0.0\n               -&gt; hashable-1.3.0.0\n\nIn the dependencies\nfor integer-logarithms-1.0.3.1:\n    integer-gmp must match &lt;1.1, but the\n                stack configuration has\n                no specified version\n                (latest matching version\n                is 1.0.3.0)\nneeded due to test-0.1.0.0\n               -&gt; integer-logarithms-1.0.3.1\n\nIn the dependencies\nfor scientific-0.3.7.0:\n    integer-gmp needed, but the stack\n                configuration has no\n                specified version\n                (latest matching version\n                is 1.0.3.0)\nneeded due to test-0.1.0.0\n               -&gt; scientific-0.3.7.0\n\nSome different approaches to resolving\nthis:\n\n  * Recommended action: try adding the\n    following to your extra-deps\n    in (略)/stack.yaml:\n\n- integer-gmp-1.0.3.0@sha256:514e81647473ce380cf1814821664c0dcedc2801ad8dbf41b19a10f916e1cc75,2138\n\nPlan construction failed.```",
        "user": "U015L5JEP8D",
        "type": "message"
    },
    {
        "ts": "1636764294.036400",
        "text": "stackのpackage.yamlのexecutables欄に指定することで異なるオプションを持つ複数のバイナリを生成することができますが、そのうちのいくつかをデフォルトでは生成されないようにすることってできますか",
        "user": "U015L5JEP8D",
        "type": "message"
    },
    {
        "ts": "1636884480.038100",
        "text": "<@U02M9636PFV> has joined the channel",
        "user": "U02M9636PFV",
        "type": "message"
    },
    {
        "ts": "1637734725.045200",
        "text": "質問失礼します．\nf(g(x)) はf.g $ x と表されますが，関数を連ねてしてデータを変換するという思考プロセスであれば，g.fのほうが自然かと思います．シンボルを読むのは左から右なのに，関数適用の順序を追って行くのは右から左に読むのは不自然です．UXINコマンドのパイプの思考に侵され過ぎているだけでしょうか?\nただ，この仕様を変更しただけでは，今度は前置記法から来る違和感が発生するとは思います．\n\n既出の議論であれば申し訳ございません．",
        "user": "U01TZ1XM7MG",
        "type": "message"
    },
    {
        "ts": "1637749615.051900",
        "text": "<@U02NV1XHYBT> has joined the channel",
        "user": "U02NV1XHYBT",
        "type": "message"
    },
    {
        "ts": "1638084178.053300",
        "text": "<@U02NV8V2EEQ> has joined the channel",
        "user": "U02NV8V2EEQ",
        "type": "message"
    },
    {
        "ts": "1638331843.054000",
        "text": "pattern synonyms は便利なんですが、以下の例では Show インスタンスが冗長に感じます。自動生成する方法はありませんか？\n\n```newtype Error = Error Int\npattern InternalError = Error 1\ninstance Show Error where\n  show (Error 1) = \"InternalError\"```",
        "user": "U56MBRKR9",
        "type": "message"
    },
    {
        "ts": "1638354464.055200",
        "text": "これと等価なことをHaskellでやる方法ってありますか？\n<https://qiita.com/yosuke_furukawa/items/ec30f619166cb8090a09>",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1638601411.057200",
        "text": "<@U02PHQ2D9D0> has joined the channel",
        "user": "U02PHQ2D9D0",
        "type": "message"
    },
    {
        "ts": "1638711222.057400",
        "text": "<@U02P4JW563Z> has joined the channel",
        "user": "U02P4JW563Z",
        "type": "message"
    },
    {
        "ts": "1638792128.057600",
        "text": "<@U02PMKJTR8S> has joined the channel",
        "user": "U02PMKJTR8S",
        "type": "message"
    },
    {
        "ts": "1639806628.058700",
        "text": "<@U02RB7KA56Y> has joined the channel",
        "user": "U02RB7KA56Y",
        "type": "message"
    },
    {
        "ts": "1639977076.058900",
        "text": "<@U02RQ8E76DP> has joined the channel",
        "user": "U02RQ8E76DP",
        "type": "message"
    },
    {
        "ts": "1640130779.059100",
        "text": "<@U02RZNLGUV7> has joined the channel",
        "user": "U02RZNLGUV7",
        "type": "message"
    },
    {
        "ts": "1640255700.059200",
        "text": "Sum Typeに対するLensのフィールドを自動生成する方法について質問です。\n(多分日本語を含むのでバイナリ扱いされている)スニペットに詳細を書いてあるように、\n\n```deriveFieldsForSumType ''HasBase ''ToyExpr```\nのように書いたら、\n\n```instance HasBase ToyExpr Text where\n  base = lens getter setter\n    where getter (ToyExprToyInt x) = view base x\n          getter (ToyExprToyStr x) = view base x\n\n          setter (ToyExprToyInt x) y = toToyExpr $ set base y x\n          setter (ToyExprToyStr x) y = toToyExpr $ set base y x```\nのようなコードが自動生成されると嬉しいなと思っています。\n\n軽く探した所そういうライブラリは見当たらなかったので、\n自分で書こうとも思っていますが、\nTemplate Haskellはそんなに得意では無いので、\n既存のライブラリがあったり、\nそもそも他の方法を使えばボイラープレート書かなくても良いなどという指摘があれば欲しいと思っています。",
        "user": "U57CUMWQ6",
        "type": "message"
    }
]