[
    {
        "type": "message",
        "user": "UL1HFJATE",
        "ts": "1680184874.825459",
        "text": "<ttps://haskell-jp.slack.com/archives/CL3AXB1AL/p1680155886899719|https://haskell-jp.slack.com/archives/CL3AXB1AL/p1680155886899719> の関係で `strict-wrapper` のコード (<https://github.com/tomjaguarpaw/strict-wrapper/blob/48a2695995a4c4c9d853b5f45175f6cf1241ebb2/lib/Data/Strict/Wrapper.hs#LL223-L262>) を読んでたんですが，ここの `strict` と `unstrict` 関数が怖いことをしていると思うので，皆様のご意見を伺いたいです．参照先のコードは大体\n\n```data SPair a b = SPair !a !b\n\nstrict :: (a, b) -&gt; SPair a b\nstrict x = case x of\n  (!_, !_) -&gt; unsafeCoerce x\n\nunstrict :: SPair a b -&gt; (a, b)\nunstrict = unsafeCoerce```\nのようなことをしており，これって `SPair a b` と `(a, b)` の runtime representation が完全に一致しているということを主張している気がするんですが，そんな保証ってありましたっけ…？"
    },
    {
        "type": "message",
        "user": "U578W9676",
        "ts": "1680187369.961749",
        "text": "データコンストラクターの `SPair` を export せずに `SPair a b` 型の値は必ず `strict` によって生成されるようにすることで、内部表現が `(a, b)` と同じだという保証を得ているんじゃないでしょうか :thinking_face:\n\nスマートコンストラクターパターンですかね。\n<https://wiki.haskell.org/Smart_constructors>"
    },
    {
        "type": "message",
        "user": "UL1HFJATE",
        "ts": "1680188007.370889",
        "text": "そっちだけのexportなら私も不審には思わなかったんですけど、\n\n```constructStrict (x, y) = SPair x y```\nもexportしているので…"
    },
    {
        "type": "message",
        "user": "UL1HFJATE",
        "ts": "1680229832.337979",
        "text": "検証するのに便利な関数をやっと見つけたので，解決(?)しました！ 結論をいうと，一致 *してない* ですね．\n\n```{-# LANGUAGE UnboxedTuples, MagicHash, BangPatterns #-}\nimport Data.Void (Void)\nimport GHC.Exts (unpackClosure#)\nimport GHC.Ptr (Ptr(..))\n\ntagPtr :: a -&gt; Ptr Void\ntagPtr x = case unpackClosure# x of\n  (# !addr#, !_, !_ #) -&gt; Ptr addr#```\nを準備して `ghci -fobject-code` で見てやると:\n\n```ghci&gt; tagPtr $! ((0,1) :: (Int,Int))\n0x00000001026870e0\nghci&gt; tagPtr $! ((1,1) :: (Int,Int))\n0x00000001026870e0\nghci&gt; tagPtr $! ((2,1) :: (Int,Int))\n0x00000001026870e0\nghci&gt; tagPtr $! ((2,2) :: (Int,Int))\n0x00000001026870e0\nghci&gt; tagPtr $! ((2,0) :: (Int,Int))\n0x00000001026870e0\n\nghci&gt; data T a b = T !a !b\nghci&gt; tagPtr $! (T 0 1 :: T Int Int)\n0x0000000100745008\nghci&gt; tagPtr $! (T 1 1 :: T Int Int)\n0x0000000100745008\nghci&gt; tagPtr $! (T 2 1 :: T Int Int)\n0x0000000100745008\nghci&gt; tagPtr $! (T 2 2 :: T Int Int)\n0x0000000100745008\nghci&gt; tagPtr $! (T 2 0 :: T Int Int)\n0x0000000100745008\n\nghci&gt; data U a b = U a b\nghci&gt; tagPtr $! (U 0 1 :: U Int Int)\n0x0000000100746008\nghci&gt; tagPtr $! (U 1 1 :: U Int Int)\n0x0000000100746008\nghci&gt; tagPtr $! (U 2 1 :: U Int Int)\n0x0000000100746008\nghci&gt; tagPtr $! (U 2 2 :: U Int Int)\n0x0000000100746008\nghci&gt; tagPtr $! (U 2 0 :: U Int Int)\n0x0000000100746008```\nと全然違います．ただ，この状態で `unsafeCoerce#` すると，まるで全てがうまくいったかのように見えますが:\n\n```ghci&gt; t0 = T 1 0 :: T Int Int\nghci&gt; tup = unsafeCoerce t0 :: (Int, Int)\nghci&gt; tup\n(1,0)```\nその実，tag は正しくない値を指しています：\n\n```ghci&gt; tagPtr tup\n0x0000000100745008```\nこれ，いわゆる， undefined behavior が問題を起こしていないだけ，のケースに見えますね．"
    },
    {
        "type": "message",
        "user": "UL1HFJATE",
        "ts": "1680230289.904769",
        "text": "面白いことに， これを `Either` 及びそれと同形状の定義を持つ型\n\n```data E a b = L a | R b```\nでやった時にも「tagは違うのに，`L 2 :: L Int Int` を `unsafeCoerce` することで `Either Int Int` を作ったあと，それを `show` させると `Left 2` が出てくる」という現象が起きます．多分 case式での照合の時に特定のビットしか見てないんですね (GHC9.4.4)．"
    }
]