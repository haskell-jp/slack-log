[
    {
        "ts": "1585282246.113400",
        "text": "<@U4MMHDSNT> 遅い反応ですが、3つの構成子の件。\ndataの直和型には、expression problemがあります。\nなので、コードを完全に自分で管理でき、後から構成子を増やすことに問題がなければ、単純にdataを使います。\nユーザが拡張する可能性があるなら、PatternSynonymsを使います。",
        "user": "U56MBRKR9",
        "type": "message"
    },
    {
        "ts": "1585292882.121600",
        "text": "```[n] := ∀ X1,...,Xn . X1 + ... + Xn \nin_n,k :: [n-1] -&gt; [n]```\nのような抽象概念があれば、\nEither つかうかどうか問題は解決しそうだと思いましたが\n実際あるのでしょうか。",
        "user": "U0108S1LS2W",
        "type": "message"
    },
    {
        "ts": "1585293157.123200",
        "text": "( dependent type をもつシステムでは、型と項の垣根がないので、普通に定義できそうですが、\nHaskell だと厳しいのだろうか。)",
        "user": "U0108S1LS2W",
        "type": "message"
    },
    {
        "ts": "1585293275.124800",
        "text": "拡張可能和みたいなのを指しているんですかね？\nライブラリーとしてはいくつか提供しているものがありますね。\n<https://hackage.haskell.org/package/extensible-0.8/docs/Data-Extensible-Sum.html> とか",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1585293339.125300",
        "text": "おおお、それです。ありがとうございます！",
        "user": "U0108S1LS2W",
        "type": "message"
    },
    {
        "ts": "1585293431.126600",
        "text": "確かに便利ではあるんですが、競合するものがいくつかあって標準もなかったり、記述が標準よりも冗長になりがちだったりで、なかなかおいそれと使おうとはならないのが悩ましいんですよねぇ :disappointed_relieved:",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1585347712.132200",
        "text": "Thanks &gt; <@U56MBRKR9>",
        "user": "U4MMHDSNT",
        "type": "message"
    },
    {
        "ts": "1585382847.148900",
        "text": "Haskell でsubtype を定義する方法ってありますか？\n例えば、NaturalNumbers `N` に対して、EvenNumbers `E` を `N` のsubtype としてユーザーが定義したいような状況です。",
        "user": "U0108S1LS2W",
        "type": "message"
    },
    {
        "ts": "1585383333.150700",
        "text": "コンパイラが型推論に部分型を用いているならば、\n部分型をユーザー定義した場合、型推論器の挙動が少し変わってくるな、と思ったので、そういう仕様が提供されているのか気になりました。",
        "user": "U0108S1LS2W",
        "type": "message"
    },
    {
        "ts": "1585384639.154400",
        "text": "subtype がユーザ定義できる言語の想定仕様としては、\n例えば、\n• Prelude に Set が内包されていると仮定して、subset =&gt; subtype という法則が内部言語に存在する\n• subtype relation が Prelude に定義されていて、ユーザ定義されたsubtype relation が内部言語と競合しないことを確かめてからそれらを取り入れる\nなどが考えられるのではないかと思いましたが、\nこのような機能は、Haskell にはふくまれていないのではないかと思う。\n（二つ目の機能があればの空想の話ですが、もしそれを安易な競合チェックで済ましてしまえば、部分型の推論器を容易にハックできてしまうのではないかなどとも思いました。だからこのような機能は現時点ではない？）",
        "user": "U0108S1LS2W",
        "type": "message"
    },
    {
        "ts": "1585389955.156000",
        "text": "最後の仕様の話はよくわからないけど、多くの言語で継承などによって実現されてる機能はないです",
        "user": "U56L7EVNY",
        "type": "message"
    },
    {
        "ts": "1585390434.156300",
        "text": "ありがとうございます。",
        "user": "U0108S1LS2W",
        "type": "message"
    },
    {
        "ts": "1585437555.157300",
        "text": "<@U0111FK01HD> has joined the channel",
        "user": "U0111FK01HD",
        "type": "message"
    },
    {
        "ts": "1585456248.157700",
        "text": "詳しい <https://qiita.com/mod_poppo/items/80c442a1d95471e6ac55>\n自前でrewrite rule書かないと最適化はされないのか... :disappointed:",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1585460704.158000",
        "text": "記事中にもありますが、あくまで Addr 用の変換関数が用意できる場合、それを元に rewrite rule が書けるという話で、厳密に言えば最適化ではありません\n\nunpackCString との rewrite による変換がない場合でも、foldr で pack 処理が書いてあり、インライン展開できるなら、foldr / build は入るようになっています (この場合、unpack 処理は unpackFoldrCString# という関数で行なわれ、リストは生成されません)",
        "user": "U57D08Z9U",
        "type": "message"
    },
    {
        "ts": "1585472241.158400",
        "text": "おお、すみません、周辺をちゃんと読めてませんでした",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1585492482.159100",
        "text": "haskell のghci 上で",
        "user": "U0108S1LS2W",
        "type": "message"
    },
    {
        "ts": "1585492544.159600",
        "text": "```λ&gt; m x = x x ```\n",
        "user": "U0108S1LS2W",
        "type": "message"
    },
    {
        "ts": "1585492592.160500",
        "text": "とたたくと\n```&lt;interactive&gt;:1:10: error:\n  • Occurs check: cannot construct the infinite type: t ~ t -&gt; t1\n  • In the first argument of 'x', namely 'x'\n   In the expression: x x\n   In an equation for 'm': m x = x x\n  • Relevant bindings include\n    x :: t -&gt; t1 (bound at &lt;interactive&gt;:1:3)\n    m :: (t -&gt; t1) -&gt; t1 (bound at &lt;interactive&gt;:1:1)```\nと出てきますが、\ninfinite type を haskell では導入できないのでしょうか。",
        "user": "U0108S1LS2W",
        "type": "message"
    },
    {
        "ts": "1585492930.163400",
        "text": "```&gt; m m ```\nが型つけできないだけであれば、\ninfinite type を許して、型付けできない場合に error を検出すればいいのではないか、などと安易に考えましたが、\nこれを検出することは難しいでのでしょうか。",
        "user": "U0108S1LS2W",
        "type": "message"
    },
    {
        "ts": "1585493048.165500",
        "text": "なんらかの polymorphism が入っており、infinite type によって rank-2 polymorhism を許してしまうからダメだ。\nというのであれば、infinite type も拡張機能として入っているのかななどと思いました。\nこのあたり実際どうなっているのでしょうか。",
        "user": "U0108S1LS2W",
        "type": "message"
    },
    {
        "ts": "1585493693.167300",
        "text": "これに答えがのっていそう( OCaml の -rectypes フラッグは知らなかった )\n<https://www.quora.com/Why-doesnt-Haskell-implement-infinite-types>",
        "user": "U0108S1LS2W",
        "type": "message"
    },
    {
        "ts": "1585493913.168100",
        "text": "```[T] = T ```\nを許すからか。納得。",
        "user": "U0108S1LS2W",
        "type": "message"
    },
    {
        "ts": "1585619243.176600",
        "text": "<@U011352B5LY> has joined the channel",
        "user": "U011352B5LY",
        "type": "message"
    },
    {
        "ts": "1585670112.179500",
        "text": "<https://twitter.com/public_ai000ya/status/1245016374633619456?s=19|https://twitter.com/public_ai000ya/status/1245016374633619456?s=19>",
        "user": "U5LV76EJH",
        "type": "message"
    },
    {
        "ts": "1585745711.182200",
        "text": "そういえば、現在 ACM Digital Library で、リモートワークを支援するため 6/30 まで全リソースが無料でアクセスできるようになっています。\n<https://www.acm.org/articles/bulletins/2020/march/dl-access-during-covid-19>\n\n<https://gitlab.haskell.org/ghc/ghc/-/wikis/reading-list> が、一部有料で手が出せないなと思っていた人は、この機会を利用してみるのもいいかもしれません :wink:",
        "user": "U57D08Z9U",
        "type": "message"
    },
    {
        "ts": "1585800972.184700",
        "text": "ACM Digital Library について、変な質問ですけど、こんなのあるよみたいなおすすめとかありますか。個人的には、あちこちから参照されてる割に読めなかった「Once upon a type」っていうのを読んでみようと思っています。<https://dl.acm.org/doi/10.1145/224164.224168>",
        "user": "UKYUFC94P",
        "type": "message"
    },
    {
        "ts": "1585825469.185900",
        "text": "お勧めと言うわけではありませんが、関数型プログラミング界隈の論文は、ICFP の Proceedings が ACM DL に置いてあるので、気になったの見てみると良いと思います:\n<https://dl.acm.org/conference/icfp/proceedings>\n\nHaskell Symposium のものについては、Haskell の欄にありますね\n(なお、ICFP の proceeding は基本分かるように書かれていない (と思っている) ので、随時気になるタイトルがあって内容が理解できなければ、参照論文を追っていくのがいいと思います (原論文自体を理解するよりそっち読む方がためになったり))",
        "user": "U57D08Z9U",
        "type": "message"
    },
    {
        "ts": "1585826954.186200",
        "text": "そういえば、\n<https://dl.acm.org/action/doSearch?AllField=Functional+Pearl>\nはお勧めで、こちらはチュートリアル形式 (親切かは結構著者によりますが) なものが多いので、読みやすいと思います。\n\n<https://wiki.haskell.org/Research_papers/Functional_pearls>\nにもリスティングされてるみたいですね\n\n(こっちは僕はこの機会に乗じて何個かダウンロードしたものがあります)",
        "user": "U57D08Z9U",
        "type": "message"
    },
    {
        "ts": "1585827748.186400",
        "text": "(具体的な名前を上げるのは、ACM DL の無料公開の目的に沿わない気がするのでやめときますね。なお、ACM 会員には ACM DL への無制限のアクセスが付与されるようです。年 $198 で入れるのかな？)",
        "user": "U57D08Z9U",
        "type": "message"
    },
    {
        "ts": "1585829566.186600",
        "text": "最後の点もふくめて承知しました。ありがとうございます…！",
        "user": "UKYUFC94P",
        "type": "message"
    },
    {
        "ts": "1585832504.186800",
        "text": "&gt; なお、ACM 会員には ACM DL への無制限のアクセスが付与されるようです。年 $198 で入れるのかな？)\nそのとおりです。私も会員です。DLへのアクセスはオプション？扱いでこれが要らなければ半額になります。DLへの無制限アクセスがなくても、CACMの電子版にはアクセスできると思います。",
        "user": "UMTRA1VHU",
        "type": "message"
    },
    {
        "ts": "1585865674.187400",
        "text": "<@U0110TN1AEP> has joined the channel",
        "user": "U0110TN1AEP",
        "type": "message"
    },
    {
        "ts": "1585926651.188100",
        "text": "ICFP proceedings を読んでたら可愛かったので共有します。",
        "user": "UKYUFC94P",
        "type": "message"
    },
    {
        "ts": "1585932598.188800",
        "text": "ICFP以外にその前身の*Functional Programming and Computer Architecture* (*FPCA*) と *LISP and Functional Programming* (*LFP*)を見てみてもいいかもしれません、古いですが。",
        "user": "UMTRA1VHU",
        "type": "message"
    },
    {
        "ts": "1585971665.192200",
        "text": "<https://github.com/actions/starter-workflows/pull/341> GitHub Actionsが公式で提供するHaskell/cabal向けのCIの設定を修正・改良し、変更が昨夜マージされました。既にTravisやCircle CIなどを使っている場合はわざわざ乗り換えるほどのものではないかもしれませんが、簡単に導入できてカスタマイズもしやすいので試してみてはいかが",
        "user": "U4KUNQF9N",
        "type": "message"
    },
    {
        "ts": "1585997705.194200",
        "text": "これはWindows/macOSも使えますか？",
        "user": "U4M9NJ7QE",
        "type": "message"
    },
    {
        "ts": "1585999759.197400",
        "text": "runs-on: ubuntu-latestとあるのでLinux専用みたいですね。AppVeyorは並列度が低く、いくつもjobがあると遅いので、GitHub Actionsでできると良いなと思っています。",
        "user": "U4M9NJ7QE",
        "type": "message"
    },
    {
        "ts": "1585999822.197600",
        "text": "haskell-CIのフォークの最新版は他のプラットフォームにも対応しているようなので、このように変更したらWindowsも使えました　<https://github.com/fumieval/deriving-aeson/commit/f6d74a5f2d42d13f0bafd0b523e0d29b44dad9b2>",
        "user": "U4KUNQF9N",
        "type": "message"
    },
    {
        "ts": "1586008624.201200",
        "text": "「Haskell IO モナド」のグーグル検索結果 (<https://www.google.com/search?q=Haskell+IO+モナド>) の上位勢が、GHC の IO inside 話で埋まっているため、その改善を目指して書きました (入門者の間で結構混乱が起きてるようなので):\n<https://github.com/haskell-jp/blog/pull/189>\n\n時間ある方レビューお願いしたいです。また、うまく上位に食い込んでいきたいので、SEO 的に何かアドバイスがあればそれも貰いたいです。よろしくお願いします (なお、プレビューはコメントのリンクから見れます)",
        "user": "U57D08Z9U",
        "type": "message"
    },
    {
        "ts": "1586124006.205700",
        "text": "いいですね。ありがとうございます。",
        "user": "U4M9NJ7QE",
        "type": "message"
    },
    {
        "ts": "1586136059.206900",
        "text": ":tada: 昨日の記事が <http://haskell.jp|haskell.jp> におけるはてブ数圧倒的 :muscle: トップ  :tada:\n<https://b.hatena.ne.jp/entrylist?url=https%3A%2F%2Fhaskell.jp%2F>",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1586136612.207300",
        "text": "肝心の検索の結果は、はてブのエントリーページが1ページ目にヒットするという微妙な結果に... :disappointed_relieved:\n<https://www.google.com/search?client=firefox-b-d&amp;q=haskell+io%E3%83%A2%E3%83%8A%E3%83%89>",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1586136680.207500",
        "text": "いや、「IO」と「モナド」の間にスペースを入れたら5番目だ！ :raised_hands:\n<https://www.google.com/search?client=firefox-b-d&amp;biw=1196&amp;bih=733&amp;ei=M4aKXtr6DMrVmAWUkLDQBQ&amp;q=haskell+io+%E3%83%A2%E3%83%8A%E3%83%89&amp;oq=haskell+io+%E3%83%A2%E3%83%8A%E3%83%89&amp;gs_lcp=CgZwc3ktYWIQAzIECAAQHjoCCABKCQgXEgUxMC04OUoICBgSBDEwLTJQ3FFY3FFgtFRoAXAAeACAAVSIAaUBkgEBMpgBAKABAaoBB2d3cy13aXo&amp;sclient=psy-ab&amp;ved=0ahUKEwia4Oux09LoAhXKKqYKHRQIDFo4ChDh1QMICw&amp;uact=5>",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1586139306.208000",
        "text": "「Haskell 副作用」で2番目です！\n<https://www.google.com/search?client=firefox-b-d&amp;q=haskell+%E5%89%AF%E4%BD%9C%E7%94%A8>",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1586151956.208600",
        "text": "<@U0115C7L1PU> has joined the channel",
        "user": "U0115C7L1PU",
        "type": "message"
    },
    {
        "ts": "1586166254.209200",
        "text": "Google 検索、自分の記事より他の記事を推薦するみたいな事できるんですかね?",
        "user": "U57D08Z9U",
        "type": "message"
    },
    {
        "ts": "1586166366.209400",
        "text": "さぁ、それはちょっとわからないですね... :disappointed:\nいろいろ悪さができるかもですし、なさそう",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1586215628.210100",
        "text": "\"Practical FP in Scala: A hands-on approach\" という本のサンプルをHaskell :haskell: に翻訳したそうで\n<https://github.com/gvolpe/shopping-cart-haskell>",
        "user": "U4LGTMTMK",
        "type": "message"
    }
]