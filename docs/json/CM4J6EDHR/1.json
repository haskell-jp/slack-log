[
    {
        "ts": "1566139881.000200",
        "text": "<@U4L0B71L1> has joined the channel",
        "user": "U4L0B71L1",
        "type": "message"
    },
    {
        "ts": "1566139882.000300",
        "text": "<@U4L0B71L1> set the channel purpose: ICFP およびその併設催事について",
        "user": "U4L0B71L1",
        "type": "message"
    },
    {
        "ts": "1566143960.000500",
        "text": "<@U80GXHF6Y> has joined the channel",
        "user": "U80GXHF6Y",
        "type": "message"
    },
    {
        "ts": "1566170926.002000",
        "text": "自分は22日・23日と参加します\nHaskell Symposium と Haskell Implementers' Workshop に\n前乗りして20日夕方からベルリンいます",
        "user": "U4L0B71L1",
        "type": "message"
    },
    {
        "ts": "1566172260.002200",
        "text": "<@U4LGTMTMK> has joined the channel",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1566172295.002700",
        "text": "Me too <https://haskell-jp.slack.com/archives/CM4J6EDHR/p1566170926002000>",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1566176394.003000",
        "text": "<@U4KPPQW7K> has joined the channel",
        "user": "U4KPPQW7K",
        "type": "message"
    },
    {
        "ts": "1566176427.003500",
        "text": "（行かないけど興味本位で覗きに来ました :eyes: ）",
        "user": "U4KPPQW7K",
        "type": "message"
    },
    {
        "ts": "1566180633.003700",
        "text": " set up a reminder “@igrep Add this channel to slack-log” in this channel at 9AM Monday, August 26th, Japan Standard Time.",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1566186540.004200",
        "text": "<@U4M4XHKB8> has joined the channel",
        "user": "U4M4XHKB8",
        "type": "message"
    },
    {
        "ts": "1566186597.005000",
        "text": "自分も行かないけどちょっと興味あるので。",
        "user": "U4M4XHKB8",
        "type": "message"
    },
    {
        "ts": "1566188621.005400",
        "text": "<@U5G2BCVBN> has joined the channel",
        "user": "U5G2BCVBN",
        "type": "message"
    },
    {
        "ts": "1566195964.005700",
        "text": "<@U57CGDBMG> has joined the channel",
        "user": "U57CGDBMG",
        "type": "message"
    },
    {
        "ts": "1566200607.006000",
        "text": "<@U7JEMP5SR> has joined the channel",
        "user": "U7JEMP5SR",
        "type": "message"
    },
    {
        "ts": "1566212355.006300",
        "text": "こんなページがredditに。\n<https://ventotene.conf.meetecho.com/icfp/>",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1566274695.006600",
        "text": "<@U4MA78F6X> has joined the channel",
        "user": "U4MA78F6X",
        "type": "message"
    },
    {
        "ts": "1566320032.007100",
        "text": "ホテル着きました:hotel::de:",
        "user": "U4L0B71L1",
        "type": "message"
    },
    {
        "ts": "1566320117.007300",
        "text": "me too",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1566320354.007600",
        "text": "今年も安定の Unagi",
        "user": "U4M4XHKB8",
        "type": "message"
    },
    {
        "ts": "1566341177.008100",
        "text": "ホテルのアメニティで歯ブラシとひげ剃りあるだろうと思ったらないみたい",
        "user": "U4L0B71L1",
        "type": "message"
    },
    {
        "ts": "1566353425.008300",
        "text": "<@U56L7EVNY> has joined the channel",
        "user": "U56L7EVNY",
        "type": "message"
    },
    {
        "ts": "1566364997.008500",
        "text": "<@U4KUNQF9N> has joined the channel",
        "user": "U4KUNQF9N",
        "type": "message"
    },
    {
        "ts": "1566464458.010100",
        "text": "Haskell Symposium 2019 1日目2つめ。\nGeneric and Flexible Defaults for Verified, Law-Abiding Type-Class Instances\n型クラスのlawは依存型を使えば証明できるけど、インスタンスごとに書くのはめんどうなのでGenericsで出来るようにしようという話",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1566465748.010300",
        "text": "<https://gitlab.com/RyanGlScott/verified-classes>",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1566466278.011600",
        "text": "Modular effects in Haskell through effect polymorphism and explicit dictionary applications - A new approach and the μVeriFast verifier as a case study\nいろんな種類のEffectを扱う大きめのアプリケーションを実際にどう設計したか、みたいな話",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1566467504.012500",
        "text": "with系の関数に異なるMonadのアクションを渡す場合の扱い方についても検討してる",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1566467953.013200",
        "text": "私と同じでExplicit Dictionary Applications推しなのが好感持てる",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1566474774.015800",
        "text": "午後のセッション1つめ\nVerifying Effectful Haskell Programs in Coq\n`Free` を使ったEffectの定理証明を試みるも、そのままでは停止性チェックに引っかかってしまうため、\n```\nclass Container c where\n    type Shape c :: Type\n    type Pos c   :: Shape c -&gt; Type\n\n-- Concrete instance of a container\ndata Ext c a = Ext (s :: Shape c) (Pos c s -&gt; a)\n\ndata Free c a = Pure a | Impure (Ext c (Free c a))\n```\nみたいな型を作ってどうにかする話らしい（どうしてこれでどうにかなるのかわからん",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1566474962.015900",
        "text": "`Writer` みたいなMonadについてどうするか、って話もあったけど理解できず",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1566475148.016100",
        "text": "最終的なゴールはimpureな遅延評価の挙動をモデル化（して証明）する、ところにあるのかな？",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1566475262.016400",
        "text": "だからtraceやbottomについて検討してるっぽい",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1566475594.017400",
        "text": "Solving Haskell equality constraints using Coq\n\n  Haskellで難しい証明はCoqでやろう =&gt; Coqで証明したlemmaをHaskellで利用できるようにするType Checker Pluginを作った",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1566475627.017500",
        "text": "発表者、vimでCoq使ってる！",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1566475796.017900",
        "text": "型と型レベル関数もちゃんと Coq に変換してくれるらしい",
        "user": "U4L0B71L1",
        "type": "message"
    },
    {
        "ts": "1566475869.018100",
        "text": "事例: <https://jaspervdj.be/posts/2018-09-04-binomial-heaps-101.html>",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1566476231.018400",
        "text": "GADTs は 型族で置き換えられるの",
        "user": "U4L0B71L1",
        "type": "message"
    },
    {
        "ts": "1566477168.019100",
        "text": "Formal Verification of Spacecraft Control Programs: An Experience Report",
        "user": "U4L0B71L1",
        "type": "message"
    },
    {
        "ts": "1566477234.019200",
        "text": "REDFIN 固定小数演算と整数演算のために制限されて命令（の処理系）に対して",
        "user": "U4L0B71L1",
        "type": "message"
    },
    {
        "ts": "1566480050.019900",
        "text": "次の発表グループ「Paper Session 3: SMT &amp; Arity」あんまり関係なさそうなのがまとめられててウケる",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1566481521.023000",
        "text": "G2Q: Haskell Constraint Solving\n\nHaskellのソースにQuasiQuoteで埋め込むDSL。Haskellで書いた条件式をsymbolic executionして、SMT solverに渡す式に変換して、SMT solverに条件を満たす関数を導出させる",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1566481541.023200",
        "text": "<http://hackage.haskell.org/package/g2q>",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1566482396.023800",
        "text": "前の方に座ってるとSimonに指されるリスクがあるのちょっと怖い :sweat_smile:",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1566483769.026000",
        "text": "Making a Faster Curry with Extensional Types\n\n「~&gt;」という、arityの情報を型レベルで含んでいる関数を新しく作って、arityを（パフォーマンスを気にする）プログラマーが明示できるようにする",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1566483899.026100",
        "text": "`TYPE (a :: RuntimeRep (FunRep 2))` というような新たなポリモーフィズムが",
        "user": "U4L0B71L1",
        "type": "message"
    },
    {
        "ts": "1566484039.026400",
        "text": "η 変換してほしいところを明示したいという動機らしい",
        "user": "U4L0B71L1",
        "type": "message"
    },
    {
        "ts": "1566484095.026600",
        "text": "eta-expansionしてほしくないケースは割と想像つくし、実際に `--fno-do-lambda-eta-expansion` してるコードを見たことがあるんだけど、積極的にしたいケースってどんなだろう。",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1566484412.026900",
        "text": "関数ににおける Int# みたいなのが出来るイメージっぽい？\n論文もうちょっと読もう。",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1566487014.030400",
        "text": "Multi-Stage Programs in Context\n\n型付きのTemplate Haskell（ `TExp` ）において、splice時に型引数がどう具体化されたか（Context）をどうやって保存するか、という話。\n直接Coreを吐いてしまえば、Coreはexplicitly typedだし解決できるんじゃない？\nしかもspliceが多いmoduleはもっと速くコンパイルできるし、（splice前後のHaskellのソースに対する）型チェックを二重にする必要もなくなるよ！",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1566487186.031500",
        "text": "2つ続けて同じ発表者となったことについてのいじりが:sweat_smile:\n:man-raising-hand: 「前の発表者について質問なんだけど...」",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1566487212.031700",
        "text": "そもそもそこでやらないと Template Haskell の展開でループができちゃうらしい",
        "user": "U4L0B71L1",
        "type": "message"
    }
]