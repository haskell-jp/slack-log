[
    {
        "ts": "1566687665.006300",
        "text": "すみません、tf-randomも欲しいのを完全に忘れてました。PullReqを投げようかと思います。ただ、このままだとmod_poppoさんのと(アルファベット順を考えると)conflictを起こしそうなので、……GitHubの使い方に慣れていません。マージ待ちをするのが良いのでしょうか？",
        "user": "UL1HFJATE",
        "type": "message"
    },
    {
        "ts": "1566687950.006400",
        "text": "今日作業する予定なので、一緒に更新しますね！",
        "user": "U5B3EGEFQ",
        "type": "message"
    },
    {
        "ts": "1566688307.007200",
        "text": "すみません、よろしくお願いします。",
        "user": "UL1HFJATE",
        "type": "message"
    },
    {
        "ts": "1566715670.010600",
        "text": "<@UGM9F7XQS> merge しました。\n<@UL1HFJATE> `tf-random` も追記しました。\n\nインストール手順を再確認しドキュメントを少し微調整しました。\nまた、README に色々書いてあったのでドキュメントを分離しました。\n<https://github.com/haskell-jp/atcoder-haskell-resources>\n\nスプレッドシートへの反映もOKです。\nちょっと気になるのは、言語アップデートの実施日が伸びるとタイミング的に GHC 8.8 がリリースされて `ghcup` の手順が若干変わるのではないかという・・・。",
        "user": "U5B3EGEFQ",
        "type": "message"
    },
    {
        "ts": "1566719172.011300",
        "text": "確かに間もなく出るよ、と一昨日のHIWでいうてましたね",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1566816192.012200",
        "text": "本当に間もなくだった :sweat_smile:\n<https://haskell-jp.slack.com/archives/C4M4TT8JJ/p1566812233010100>\nでもbuggyだったら困るし、8.6.5で様子見るのもいいんじゃないっすか。",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1566884623.012400",
        "text": "8.6.5 を利用したいんですが、ghcup のコマンドをそのまま実行した際に落ちてくるバージョンが 8.8.1 に切り替わると困るので、やっぱりスクリプトをちょっと修正して明示的に 8.6.5 を使うようにした方が安全ですね。",
        "user": "U5B3EGEFQ",
        "type": "message"
    },
    {
        "ts": "1566895509.012700",
        "text": "cabal-install も 3.0.0.0 がリリースされたので同様に修正します。\n<https://hackage.haskell.org/package/cabal-install-3.0.0.0>",
        "user": "U5B3EGEFQ",
        "type": "message"
    },
    {
        "ts": "1567378923.000200",
        "text": "<@UFPSK1JNL> has joined the channel",
        "user": "UFPSK1JNL",
        "type": "message"
    },
    {
        "ts": "1567653891.000400",
        "text": "<@UL3EYH36Z> has joined the channel",
        "user": "UL3EYH36Z",
        "type": "message"
    },
    {
        "ts": "1568772127.009000",
        "text": "超今更なんですけど， `bytestring-to-vector` ( `ByteString` とStorable `Vector` の間の変換をcopylessに行う)ってどう思います？ このパッケージ自体はnaiveに考えると文字列問題系のときに気軽に使えそうでちょっと欲しいな，とも思うんですが，申請しようかは迷っております． `vector-bytestring` ( `ByteString` reimplemented as Storable `Vector` of `Word8` …しかし性能は追いついていないので代替にはならない)とかとモジュール名被りを起こしていたり，そのあとStream Fusionで連鎖的に変換することを前提にするなら `unfoldrN n ByteString.uncons` でもいいような気もしたり，で……",
        "user": "UL1HFJATE",
        "type": "message"
    },
    {
        "ts": "1569669796.011600",
        "text": "いつまで経ってもアップデート実施されないですね…。今更 `vector-th-unbox` (それに伴い `template-haskell`) , `mutable-containers`, `hashable` (`psqueues` の関係で) くらいあった方が良さそうだと気がついたので、明日か明後日あたりプルリク投げます",
        "user": "UL1HFJATE",
        "type": "message"
    },
    {
        "ts": "1569670117.013000",
        "text": "`vector-th-unbox` は `unboxing-vector` があればいらなさそう、というのはありますが。",
        "user": "UL1HFJATE",
        "type": "message"
    },
    {
        "ts": "1569802764.017900",
        "text": "今プルリク投げる前にと思って仮想環境上でやってるんですけど、 `bytestring`, `deepseq`, `transformers`, `containers` 辺りのインストール済みパッケージが含まれるのは…まあ含まれても問題ないんだからいいんでしょうか？  ghcupの既定ghcバージョンが上がった時にそこらへんでエラーが起きてくれそうでもありますし。",
        "user": "UL1HFJATE",
        "type": "message"
    },
    {
        "ts": "1569802880.019700",
        "text": "いや、というのも `template-haskell` はGHC付属パッケージに含まれるため、要望パッケージに追加しないつもりでいたので。追加した方がいいんですかね？",
        "user": "UL1HFJATE",
        "type": "message"
    },
    {
        "ts": "1569803375.020500",
        "text": "とりあえず含めて投げますね",
        "user": "UL1HFJATE",
        "type": "message"
    },
    {
        "ts": "1569833080.023300",
        "text": "亀ですが `bytestring-to-vector` 、DL数の少なさから、今後メンテされるか不安が。どうしても添え字アクセスがしたければ `unsafeUseAsCString` と `peekElemOff` で似たような事が可能ですし",
        "user": "U570660KX",
        "type": "message"
    },
    {
        "ts": "1569833285.024400",
        "text": "というか普通に `index` 関数ありましたね。 `Vector` にしかないアルゴリズムをどうしても使いたい、みたいなユースケースでしょうか",
        "user": "U570660KX",
        "type": "message"
    },
    {
        "ts": "1569840855.026600",
        "text": "というか，\n`ByteString`\n-&gt; `Vector`\n-(`unsafeThaw`)-&gt; `MVector`\n-(modifications)-&gt; `MVector`\n-(`create`)-&gt; `Vector`\n-(Stream-fusible transformations)-&gt; `Vector`\n-&gt; Output, みたいなユースケースを想定してました．",
        "user": "UL1HFJATE",
        "type": "message"
    },
    {
        "ts": "1569841416.027000",
        "text": "`bytestring-to-vector` も（容易に削除可能な形で）含めてプルリク投げたので，みなさまコメントをお願いします\n<https://github.com/haskell-jp/atcoder-haskell-resources/pull/3>",
        "user": "UL1HFJATE",
        "type": "message"
    },
    {
        "ts": "1569842889.027500",
        "text": "不安の声があったので，とりあえずbytestring-to-vectorを除外しました．別のプルリクにします．",
        "user": "UL1HFJATE",
        "type": "message"
    },
    {
        "ts": "1569844229.027700",
        "text": "別のpull requestとして投げました．",
        "user": "UL1HFJATE",
        "type": "message"
    },
    {
        "ts": "1569844712.028900",
        "text": "<@U5B3EGEFQ> このプルリクには問題なさそうなのだけ残してあるので，確認の上mergeしてもらえると嬉しいです． <https://github.com/haskell-jp/atcoder-haskell-resources/pull/3>",
        "user": "UL1HFJATE",
        "type": "message"
    },
    {
        "ts": "1570187281.033300",
        "text": "`index` とかで処理するなら、実のところ `Vector` に変換する必要は感じてなくて、GCでTLEが嫌なので入力領域を可変配列でそのまま書き換えたい、という欲求がある場合を想定してるんですよね。",
        "user": "UL1HFJATE",
        "type": "message"
    },
    {
        "ts": "1570261970.033500",
        "text": "<@U5B3EGEFQ> いま確認したら，妙なところに改行があってspec.mdのレイアウトがおかしいことになっているのですが，追加コミットをして構いませんか？",
        "user": "UL1HFJATE",
        "type": "message"
    },
    {
        "ts": "1570262575.034500",
        "text": "どうぞー。今日の夜確認しますね。",
        "user": "U5B3EGEFQ",
        "type": "message"
    },
    {
        "ts": "1570358972.034900",
        "text": "<@UL1HFJATE>\n以下のPRをマージしました。ありがとうございます。\n<https://github.com/haskell-jp/atcoder-haskell-resources/pull/3>",
        "user": "U5B3EGEFQ",
        "type": "message"
    },
    {
        "ts": "1570359018.035400",
        "text": "<@U5B3EGEFQ> ありがとうございます。",
        "user": "UL1HFJATE",
        "type": "message"
    },
    {
        "ts": "1570359357.035600",
        "text": "<https://github.com/haskell-jp/atcoder-haskell-resources/pull/4>\n\n上記のPRについては、他の方の意見も聞いた方が良いということなのでまだマージしていません。個人的には以下の点が気になるのですが、みなさんご意見ありますか？\n\n&gt; vector-bytestring とモジュール名被りを起こしている\n\nまた、実際の AtCoder の問題でこんな感じで使えそうです。というような実例とかってありますか？<@UL1HFJATE>",
        "user": "U5B3EGEFQ",
        "type": "message"
    },
    {
        "ts": "1570359960.036800",
        "text": "ちょっと待ってください．今探してます・・・．",
        "user": "UL1HFJATE",
        "type": "message"
    },
    {
        "ts": "1570361276.037100",
        "text": "「使える」… `ByteString` って，入力のタイミング以外ではほとんど使いません．だから，メリットって，使うと実行時間とメモリ使用量をO(N) [N:入力サイズ] 減少できる（精神衛生上良い）ぐらいしかないんですよね．Constant mutipleでTLE/MLEになるような問題で微妙に時間計算量を稼ぐとか，それくらいなんですよねえ．",
        "user": "UL1HFJATE",
        "type": "message"
    },
    {
        "ts": "1570361534.037600",
        "text": "実行時間を微妙に縮められる可能性がある，ということであれば，\n<https://atcoder.jp/contests/joi2008ho/submissions/3927679>\nとかが例になります．Storable Arrayとして入力を受け取っておいて，それをVectorとしてコピーしています．",
        "user": "UL1HFJATE",
        "type": "message"
    },
    {
        "ts": "1570361645.037900",
        "text": "名前かぶりは最悪PackageImportsを使うと言うことでいいんじゃないっすかね。\n端から見るにそこまでするメリットがあるの、という気もしますが。\nでもPackageImports使うことを周知しておけばいいと思います。",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1570361885.038100",
        "text": "ちなみにさっきあげた点についてはさっきまで気がついていませんでした．コンテスト終わった後にC++レベルにまで実行時間縮めて悦に入るのが趣味の人間の悪いところが出た感じかなあ．[追記] 気が付いていなかったというよりは，入力時間を数ms縮めることを目的にものを考えることになんの疑いも持っていなかった．[/追記]",
        "user": "UL1HFJATE",
        "type": "message"
    },
    {
        "ts": "1570362494.038300",
        "text": "&gt; 名前かぶりは最悪PackageImportsを使うと言うことでいいんじゃないっすかね。\n\n方法論としては可能ですが、あまり得策ではない気がしています。\nAtCoder にそのような注意点を書ける場所があれば良いのかもしれませんが、現状そうなっていないためコンテスト参加者への周知が難しいと思います。\n\n&gt; 端から見るにそこまでするメリットがあるの、という気もしますが。\n\n僕も同じ意見です。(AtCoder の簡単な問題しか解いたことが無いので必要性に気づけていないだけなのかもしれませんが・・・)",
        "user": "U5B3EGEFQ",
        "type": "message"
    },
    {
        "ts": "1570363066.038500",
        "text": "O(入力サイズ)の高速化にしかならないのですから，もう別に入れなくてもいい感じはします．\n\n＊ちなみに＊付言しておくと， `vector-bytestring` についてはそこまで気にしないでもいいという意見を持っています．というのも，正直， `vector-bytestring` には `bytestring-to-vector` に比べても全く使い道が見当たらないんですよね．\n\n `bytestring-to-vector` は `ByteString` と Storable `Vector` の代数的データ型としての違いを単純に吸収するだけなので，データ型としての定義が変更されない限りメンテナンスの必要がありません．しかし，\n<https://stackoverflow.com/questions/24517995/why-bytestring-is-not-vector-word8>\nを見るに， `bytestring` そのものの速度を得るには `bytestring` と同レベルの開発リソースが注がれる必要がありそうですが，メンテナンスは活発ではなさそうです．",
        "user": "UL1HFJATE",
        "type": "message"
    },
    {
        "ts": "1570363549.038900",
        "text": "ただ，逆にいうといきなり開発が活発になってStackageに `vector-bytestring` が導入されて `bytestring-to-vector` が除外されるレベルで `vector-bytestring` がポピュラーになるなんて未来もないではない(本当に？)し，最悪遊びがしたければdata型の書き換えを手でやっても良いんですよね．",
        "user": "UL1HFJATE",
        "type": "message"
    },
    {
        "ts": "1570367030.045900",
        "text": "なんか、こう、 `VU.unfoldrN n BS.uncons` と書くたびに生じる「無駄なコピーをしているときの強迫的な罪悪感」みたいなもの、から離れて競技に対する集中力を取り戻したい、みたいな動機が近い気がするので、正直、時間が経てば経つほどこのパッケージを強く推すのには躊躇が生まれてきてしまっています。",
        "user": "UL1HFJATE",
        "type": "message"
    },
    {
        "ts": "1570782440.000200",
        "text": "<@UH1L934RZ> has joined the channel",
        "user": "UH1L934RZ",
        "type": "message"
    },
    {
        "ts": "1572319139.003600",
        "text": "言語アップデートの作業が始まったみたいです。(作業シートが追加された)\n<https://docs.google.com/spreadsheets/d/1PmsqufkF3wjKN6g1L0STS80yP4a6u-VdGiEv5uOHe0M/edit#gid=0>",
        "user": "U5B3EGEFQ",
        "type": "message"
    }
]