[
    {
        "type": "message",
        "user": "U043KGWLGVC",
        "ts": "1684652284.419089",
        "text": "parsecで構文解析器を作っています。対象ソースコードのどこに構文エラーがあるのか表示したいです。\n構文解析器はトークナイザからの出力を受け取り、その構文を解析します。\n```tokenize :: Parsec String () [Token]\nsyntaxAnalyze :: Parsec [Token] () SyntaxTree```\nという型になります。\n一回トークナイザを挟むとそのトークンがソースコードの何行何列目にあるかの情報がなくなり、tokenPrim関数でSourcePosの計算ができません。これってどうやって解決したらいいでしょうか？TokenにSourcePosを含めるとパース処理の他に位置計算が含まれるのでコードが読みにくくなるのであまりやりたくないなぁと思っています。\n\nどなたかお教えいただけると非常に助かります！"
    },
    {
        "type": "message",
        "user": "U4LGTMTMK",
        "ts": "1684655064.198159",
        "text": "手元で試してないのでうまく行くか分からないですが、単純な方法として、このように `SourcePos` を取得する処理を抽象化してはいかがでしょうか？\n\n```withPosition :: Parsec String () Token -&gt; Parsec String () (SourcePos, Token)\nwithPosition someToken = (,) &lt;$&gt; getPosition &lt;*&gt; someToken ```\n"
    },
    {
        "type": "message",
        "user": "U043KGWLGVC",
        "ts": "1684656085.986559",
        "text": "なるほど、この方法だと綺麗に書けそうです。ありがとうございます！"
    }
]