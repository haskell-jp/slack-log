[
    {
        "ts": "1550662173.029100",
        "text": "実のところ、 ghc に関しては ghci を起動しちゃえばわかるじゃん、という回秘策を使っていたので、真面目に調べていなかったのです… 今回 haddock のバージョンを知りたくなってハマった、というのが正直なところです :sweat_smile:",
        "user": "UF8SE896V",
        "type": "message"
    },
    {
        "ts": "1550673010.000200",
        "text": "<@UGBS873L4> has joined the channel",
        "user": "UGBS873L4",
        "type": "message"
    },
    {
        "ts": "1550677025.000700",
        "text": "<@UGBUQR35J> has joined the channel",
        "user": "UGBUQR35J",
        "type": "message"
    },
    {
        "ts": "1550712876.001000",
        "text": "Haskellでいう「作用」とは、「主目的である値」を返すこと以外の関数の振る舞いのこと。「副作用」とは、「作用」の一種で、特に外界との入出力やグローバル変数の変更などのこと。で、いいでしょうか？",
        "user": "U56MBRKR9",
        "type": "message"
    },
    {
        "ts": "1550718077.006000",
        "text": "Haskell の IO を指して副作用と言うのは、それが意図している動作であるから間違いであり、作用と言うべきだという話を前に聞いたことがあります。どっちが正しいのか議論をするつもりはなくて、こんな話もあったよー、というだけですが……",
        "user": "U5LEE6C1J",
        "type": "message"
    },
    {
        "ts": "1550719704.006300",
        "text": "<https://qiita.com/Mizunashi_Mana/items/e82214dfae2765c6839a> こういう話ですかね。",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1550719838.006600",
        "text": "ただ説明する上で「副作用」という言葉は使った方が便利かなぁと思いますし、「「副作用」とは、「作用」の一種で、特に外界との入出力やグローバル変数の変更などのこと」という定義にはそんなに違和感を感じません。",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1550722480.006900",
        "text": "プロセス間通信に関する質問です。２つのプロセスがお互いのHandleを相手に渡すことで通信を実現しようとしているのですが、子プロセスから親プロセスにHandleを渡す方法がわかりません。なにか方法はありますでしょうか。\n<https://gist.github.com/HirotoShioi/a0222e19c5dd2746ae04d3a2ba88c1c0>",
        "user": "U7Z4F723Z",
        "type": "message"
    },
    {
        "ts": "1550723225.007100",
        "text": "あ、、わかったかも！！",
        "user": "U7Z4F723Z",
        "type": "message"
    },
    {
        "ts": "1550723467.007300",
        "text": "回答と関係ないですが、どうせ `fdToHandle` するなら `createPipeFd` ではなく `createPipe` を使った方がよいのではないかと。\nソースを読んだ限り結局やってることは同じみたいです。",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1550724513.007600",
        "text": "OK!",
        "user": "U7Z4F723Z",
        "type": "message"
    },
    {
        "ts": "1550728394.007800",
        "text": "fork前に作ったfdとそれに紐付いたリソースはforkで子プロセスにも継がれますが，\nfork後に作ったfdのその数値だけを単に伝えて表面上だけfdの値を再構成できたとしても，\n伝えられた側のプロセス内にそのリソースが実際に存在するわけではないので利用できません．\nunix domain socket と sendmsg/recvmsg syscall を利用するとかによる descriptor passing が必要だと思います．",
        "user": "U5G2BCVBN",
        "type": "message"
    },
    {
        "ts": "1550730783.008300",
        "text": "なるほど、ありがとうございます",
        "user": "U7Z4F723Z",
        "type": "message"
    },
    {
        "ts": "1550747460.008600",
        "text": "fork 「後」につくった場合は notogawa さんのおっしゃるとおりですが、 fork 「前」に作った fd の番号は fork 後に特に何もしなければ「同じ番号で両方のプロセスが同じリソースをつかんでいる」状態になります。なので、 pipe システムコールで作った二つの fd は「write 側でかいたものが read 側でよめる」という状態になります。ただしこれは「片方向パイプ」の役割しか果たさないので、通常は「書きたい側のプロセスは fork 後に read 側だけ閉じて write 側だけ残し、読みたい側のプロセスは fork 後に write 側だけ閉じて read 側だけ残す」ということをやると思います。",
        "user": "UF8SE896V",
        "type": "message"
    },
    {
        "ts": "1550747532.008900",
        "text": "双方向に通信したい場合（どちらのプロセスからも書いたら相手側で読めるようにしたい）のなら、 fork 前に二つ pipe を作る（つまり全部で4つ fd を確保する）か、 socketpair システムコールを使うことになると思います",
        "user": "UF8SE896V",
        "type": "message"
    },
    {
        "ts": "1550747543.009100",
        "text": "Haskell で socketpair が使えるのかは知りません^^;",
        "user": "UF8SE896V",
        "type": "message"
    },
    {
        "ts": "1550747647.009300",
        "text": "「前」の話はわざわざ言うことないかなと思って1行目だけ言及して流しました．",
        "user": "U5G2BCVBN",
        "type": "message"
    },
    {
        "ts": "1550747683.009500",
        "text": "今回のソースをざっと見た感じでは単に双方向通信をしたいだけに見えるので、デスクリプタパッシングとか出してこなくても…という気がしたのです^^;",
        "user": "UF8SE896V",
        "type": "message"
    },
    {
        "ts": "1550747793.009700",
        "text": "(デスクリプタパッシング、存在は知ってるけど一度も使ったことないし^^;)",
        "user": "UF8SE896V",
        "type": "message"
    },
    {
        "ts": "1550748168.011600",
        "text": "先日の数独のコード、修正してみました。諸々の細かい修正に加えて、効率化を図って `Tree` とは別のやり方を試してみました。また、おかしな所があればご指摘いただけると嬉しいです。\n<https://gist.github.com/gaxiiiiiiiiiiii/b1e58813d9afea011c4466c1c18bc1ca>",
        "user": "UF797SSBC",
        "type": "message"
    },
    {
        "ts": "1550748481.011900",
        "text": "今気づきましたが、 `sortBy row b` がダブってますね。。。",
        "user": "UF797SSBC",
        "type": "message"
    },
    {
        "ts": "1550748695.012100",
        "text": "サンプルコードはあくまで質問のために簡略化しているだけでしょうし，本当にやりたいことがサンプルコードになっているとは私は受け取らないので，こういうケースではできるだけ質問内容「子プロセスから親プロセスにHandleを渡す方法」を正面から突破する方法を答えるようにしていますね",
        "user": "U5G2BCVBN",
        "type": "message"
    },
    {
        "ts": "1550750009.012300",
        "text": "Data.List に\n`sortOn :: Ord b =&gt; (a -&gt; b) -&gt; [a] -&gt; [a]`\nがありますよ",
        "user": "UF8SE896V",
        "type": "message"
    },
    {
        "ts": "1550751014.012500",
        "text": "Tree を使わなくなってすっきりしてるので、さらにすっきりさせるなら `loop` を `State -&gt; Maybe State` ではなくて `getStates` とおなじ `State -&gt; [State]` にすると、場合分けが `null empties = [(filled, [])]` か `otherwise = concatMap loop $ getState states` だけで済む（たぶん）ので簡単になりそうです",
        "user": "UF8SE896V",
        "type": "message"
    },
    {
        "ts": "1550751066.012700",
        "text": "あんまり詳しく見てないので細かいことですが，\n```\nfilled  = filter ((/= 0) . num) board\nempties = filter ((== 0) . num) board\n```\nとかも Data.List モジュールの `partition` を使って\n```\n(filled, empties) = partition ((/= 0) . num) board\n```\nと置き換えられます．リスト関係で標準にありそうだなと思った機能は GHC 8.6 をお使いで型が類推できれば Data.List を import した上で， valid hole fits を使うと良いと思います．例えば， `partition` の型は `(a -&gt; Bool) -&gt; [a] -&gt; ([a], [a])` と類推でき， ghci でこの型や `sortBy` の型を検索すると以下のようになります．",
        "user": "U57D08Z9U",
        "type": "message"
    },
    {
        "ts": "1550751180.013100",
        "text": "Valid hole fits のサンプルです．長かったのでファイルにしました",
        "user": "U57D08Z9U",
        "type": "message"
    },
    {
        "ts": "1550751351.013600",
        "text": "それから，個人的な好みでもありますが，\n```\nclassify = flip div 3\n```\nは，セクションを使って\n```\nclassify = (`div` 3)\n```\nと書く方が適用の仕方が視覚的で好きです．",
        "user": "U57D08Z9U",
        "type": "message"
    },
    {
        "ts": "1550751514.013900",
        "text": "あ、あとパターンマッチで使わない変数に名前がついているのが気になりました（getCandidates の e:es の es とか）。\n使わないところはアンダースコアにしたほうがいいと思います",
        "user": "UF8SE896V",
        "type": "message"
    },
    {
        "ts": "1550751580.014100",
        "text": "`null empties = [state]` としてしまえば filled のほうの名前も要らなくなりそうですね",
        "user": "UF8SE896V",
        "type": "message"
    },
    {
        "ts": "1550751831.014400",
        "text": "というか loop の定義をわけて `loop state@(_,[]) = [state]` と `loop state = concatMap loop $ getStates state` にしたほうがすっきりするかも",
        "user": "UF8SE896V",
        "type": "message"
    },
    {
        "ts": "1550757147.014800",
        "text": "おお！見違えるほどスッキリに！変に小難しく考えていたようでお恥ずかしい限り、、\n\nありがとうございます！",
        "user": "UF797SSBC",
        "type": "message"
    },
    {
        "ts": "1550766660.015300",
        "text": "<@UGD7EBDFC> has joined the channel",
        "user": "UGD7EBDFC",
        "type": "message"
    },
    {
        "ts": "1550793123.017800",
        "text": "cabal new-build使用時、ビルド成果物のディレクトリを取得する方法はありますか？ stackなら `stack path --dist-dir` で出来るやつです",
        "user": "U570660KX",
        "type": "message"
    },
    {
        "ts": "1550798309.018100",
        "text": "無さそうな雰囲気がありますね・・・。\n<https://github.com/haskell/cabal/issues/4661>\n<https://github.com/haskell/cabal/issues/3850>",
        "user": "U5B3EGEFQ",
        "type": "message"
    },
    {
        "ts": "1550798581.018500",
        "text": "モナドの説明時に、「作用」といった場合、おっしゃる通り「「主目的である値」を返すこと以外の関数の振る舞いのこと」を指していると思います。しかし、その文脈で「特に外界との入出力やグローバル変数の変更などのこと」を「副作用」と呼び分けてはいないように思います。\n純粋な計算に関する文章では「「主目的である値」を返すこと」が「作用」で、モナドの作用は「副作用」に。\nモナドに関する文章では「「主目的である値」を返すこと以外の関数の振る舞いのこと」が作用になるように思います。\n用語の統一を主眼としてのお話であれば「作用」「副作用」のどちらかしか使わない、というのもありかなと思います。",
        "user": "UFNL9EP98",
        "type": "message"
    },
    {
        "ts": "1550799156.018700",
        "text": "ないので、doctest で困ります。困った場合、 `cabal-doctest` を使うのが解決方法のようです。",
        "user": "U56MBRKR9",
        "type": "message"
    },
    {
        "ts": "1550799296.019000",
        "text": "Programming in Haskell 2nd ed を翻訳中で、その中に両方の言葉が出てくるので、副作用という言葉を使わないという選択肢はないのです。。。",
        "user": "U56MBRKR9",
        "type": "message"
    },
    {
        "ts": "1550799397.019200",
        "text": "ちなみに本書で effect は、純粋な計算の対義語として使われています。",
        "user": "U56MBRKR9",
        "type": "message"
    },
    {
        "ts": "1550800174.019600",
        "text": "逆に、「主目的である値」を返すこと以外の関数の振る舞いのうち、「外界との入出力やグローバル変数の変更」じゃないものって何を含めてるんですか？ :thinking_face:\nこと `IO` に関して言えば大半がそれに該当しそうな気がしますが... （例外を投げるとかスレッドを作るとか？",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1550802024.020000",
        "text": "なるほど、ありがとうございます。とりあえず今はこんな感じです。わざわざ親プロセスにハンドルを渡さなくても、子プロセス側でメッセージを送って、後で親プロセス側で受け取れることがわかりました。\n<https://gist.github.com/HirotoShioi/443ab877898efa5f85cabd89b62d6bfd>\n\n\n「いや、親プロセスから送れるようにしろ」と言われる可能性も一応あるので、koyamaさん、notogawaさんがおっしゃってることに関しても調べてみます。",
        "user": "U7Z4F723Z",
        "type": "message"
    },
    {
        "ts": "1550802366.020200",
        "text": "全く同じではないのです用途次第ですが、executableをリストアップするなら `cabal-plan list-bins` が使えます。 <http://hackage.haskell.org/package/cabal-plan>",
        "user": "U4M9NJ7QE",
        "type": "message"
    },
    {
        "ts": "1550802404.020500",
        "text": "plan.json を直接読むことも出来ると思いますが、中身の構造が安定しているわけではなさそうな気がしています",
        "user": "U4M9NJ7QE",
        "type": "message"
    },
    {
        "ts": "1550802753.020700",
        "text": "solveはMaybe Boardを返すようにしたほうがいいと思う。理由は２つあって、まず与えられたBoardが必ず解けるわけではないことを型で表現したほうがいい。例えば全てのマスが１だったらそれは解けないよね。そういうのにも対応していると型レベルで宣言すると印象が良い。\nもう１つはfromJustは（おそらく）部分関数だから使わないほうがいい。\n<http://hackage.haskell.org/package/base-4.12.0.0/docs/src/Data.Maybe.html#fromJust>\n<http://tanakh.jp/posts/2011-12-25-partial-function-considered-harmful.html>\n部分関数はその場しのぎで使うにはいいけど、最終的には取り除く必要があります。",
        "user": "U7Z4F723Z",
        "type": "message"
    },
    {
        "ts": "1550802968.020900",
        "text": "Maybe Boardに変更するのは、do記法を使えばそんなに難しくないと思う。",
        "user": "U7Z4F723Z",
        "type": "message"
    },
    {
        "ts": "1550803767.021100",
        "text": "あと懸念要素としてぱっと見た感じ、getStates、getCandidatesの計算量がかなり大きいから、大量の問題を解こうとすると危ないかもしれない。\n<https://gist.github.com/gaxiiiiiiiiiiii/b1e58813d9afea011c4466c1c18bc1ca#file-numberplatemaybe-hs-L84>\n<https://gist.github.com/gaxiiiiiiiiiiii/b1e58813d9afea011c4466c1c18bc1ca#file-numberplatemaybe-hs-L89>\nでも正直これはどうにもならないかもしれないから、その場合は気にしなくてもいい。",
        "user": "U7Z4F723Z",
        "type": "message"
    },
    {
        "ts": "1550809217.021700",
        "text": "むしろ余詰めも含めて可能な解を全て求めるという考え方でリストにした方がよいとも思うのです。（最初の一個を取り出して表示しているのは単に表示時のポリシーの問題ということで、 solve 自体の機構ではない、という考え）",
        "user": "UF8SE896V",
        "type": "message"
    },
    {
        "ts": "1550809336.021900",
        "text": "ちなみに高速化したいのなら、 empties のたまたま左上のやつを次の一手に選ぶのではなく、先に「すべての empties に対して candidates を求めてからその中でもっとも少ない candidate を返したマス」を次の一手に選ぶようにすると劇的に高速になると思います",
        "user": "UF8SE896V",
        "type": "message"
    },
    {
        "ts": "1550809424.022100",
        "text": "<https://www.ipsj.or.jp/07editj/promenade/4611.pdf> この論文がそういう解法だったとおもいます",
        "user": "UF8SE896V",
        "type": "message"
    },
    {
        "ts": "1550809677.022300",
        "text": "…と書いておくと執筆者ご本人 <@U4KU9ABL0> さんからフォローがあるかしら^^;",
        "user": "UF8SE896V",
        "type": "message"
    },
    {
        "ts": "1550815944.023500",
        "text": "ありがとうございます、cabal-plan辺りを調べてみようと思います！",
        "user": "U570660KX",
        "type": "message"
    }
]