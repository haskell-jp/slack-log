[
    {
        "ts": "1542858379.064700",
        "text": "例えば、\"Applicative f =&gt; (a -&gt; f b) -&gt; s -&gt; f t\"で検索したらlensパッケージのTraversalがヒットして欲しい、みたいな具合です",
        "user": "U7907NMGF",
        "type": "message"
    },
    {
        "ts": "1542859709.064900",
        "text": "型シノニムだけ結果に表示するようなオプションは見つけられませんでした…\n型変数名が同じなら Google は一応見つけてくれましたが、不便は不便ですね。\n<https://www.google.co.jp/search?q=%22Applicative+f+%3D%3E+%28a+-%3E+f+b%29+-%3E+s+-%3E+f+t%22>",
        "user": "U578W9676",
        "type": "message"
    },
    {
        "ts": "1542862734.065200",
        "text": "なるほど。。。Haddockに直接相談しないとどうにもならなさそうですね。。。 :disappointed_relieved:",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1542877932.066700",
        "text": "この関数って安全ではない気がするんですが、型レベルの分岐が出来る仕組み (Type Families とか) がプリミティブじゃないので大丈夫、だったりするんですか？ <http://hackage.haskell.org/package/base-4.12.0.0/docs/Data-Type-Equality.html#v:inner>",
        "user": "U5LEE6C1J",
        "type": "message"
    },
    {
        "ts": "1542882884.067200",
        "text": "これを見る限りは，value type constructorとtype functionは明確に区別されていて，primitiveのreflexive axiomはvalue type constructorのみに提供されているように見えますね(今はkind equalityが入ってるのでそっちで大丈夫なのか分からないですが)\n<https://www.microsoft.com/en-us/research/wp-content/uploads/2007/01/tldi22-sulzmann-with-appendix.pdf>",
        "user": "U57D08Z9U",
        "type": "message"
    },
    {
        "ts": "1542915925.067500",
        "text": "<@UEBLMNJP8> has joined the channel",
        "user": "UEBLMNJP8",
        "type": "message"
    },
    {
        "ts": "1543138178.067700",
        "text": "ありがとうございます！読んでみます",
        "user": "U5LEE6C1J",
        "type": "message"
    },
    {
        "ts": "1543144528.068000",
        "text": "<@UEB8VS15H> has joined the channel",
        "user": "UEB8VS15H",
        "type": "message"
    },
    {
        "ts": "1543177906.072700",
        "text": "<@UEBAETNPM> has joined the channel",
        "user": "UEBAETNPM",
        "type": "message"
    },
    {
        "ts": "1543202611.075500",
        "text": "stackって「特定のbinをstackローカルのbinパス以外にインストールする」という用途は想定していないんですかね。stack環境無しでも動くexeを作って圧縮して配布、みたいな事を考えた場合はcabalでビルドする事を考えないと駄目でしょうか",
        "user": "U570660KX",
        "type": "message"
    },
    {
        "ts": "1543202651.075600",
        "text": "今やろうとしてるのはbinじゃなくてdllなんですが、それだと更にハードルがいくつかありそうです",
        "user": "U570660KX",
        "type": "message"
    },
    {
        "ts": "1543202789.075800",
        "text": "`stack  --local-bin-path /path/to/install install hoge` ではダメなんですかね。\ndllはわからないですが。。。",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1543203863.076200",
        "text": "ああ、 `--local-bin-path` でインストールされた奴はstack execなしでも動きますね。.stack-work/install以下と混同してたっぽいです。",
        "user": "U570660KX",
        "type": "message"
    },
    {
        "ts": "1543203951.076400",
        "text": "libとかincludeはそこにインストールされないんですが、それはdll固有の問題のようです",
        "user": "U570660KX",
        "type": "message"
    },
    {
        "ts": "1543242506.078600",
        "text": "ああ、これすれば、Windows eshell でstack install した時に現在ディレクトリに~ とかいう謎ディレクトリが作られるの抑えられるのかな？",
        "user": "U9XHWQX7Z",
        "type": "message"
    },
    {
        "ts": "1543274173.078800",
        "text": "stackのconfig.yaml（Windowsだとデフォルトで C:\\sr\\config.yaml になるはず）で、 `local-bin-path`で指定すれば、オプションで指定しなくてもそうなるはずです。 <https://docs.haskellstack.org/en/stable/yaml_configuration/#local-bin-path>",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1543381236.080400",
        "text": "1.15.1のDhallでInject, Interpretの型クラスインスタンスを定義した際に以下のように定義して、dhallファイルをパースしようとすると無限ループにはまるのですが、回避策などはありますか。\n\n```\ndata Person = Person {\n      pName :: !Text\n    , pAge  :: !Natural\n    } deriving (Eq, Show)\n\ninstance Interpret Person where\n    autoWith _ = autoWith $ defaultInterpretOptions {fieldModifier = T.drop 1}\n\ninstance Inject Person where\n    injectWith _ = injectWith $ defaultInterpretOptions {fieldModifier = T.drop 1}\n```\n\nInterpretなら以下の方法で定義すればいいんだけど、\n<http://hackage.haskell.org/package/dhall-1.15.1/docs/Dhall.html#t:RecordType>\n\n```\ninstance Interpret Person where\n    autoWith _ = record $ \n        Person &lt;$&gt; field \"name\" strictText \n               &lt;*&gt; field \"age\" natural\n```\n\nInjectの場合、dhall-1.15.1ではdefaultInterpretOptionsを使う以外方法が見当たらないのです。",
        "user": "U7Z4F723Z",
        "type": "message"
    },
    {
        "ts": "1543382757.081700",
        "text": "`InputType Person` を自分で定義してあげないといけない予感？",
        "user": "U7155GPR9",
        "type": "message"
    },
    {
        "ts": "1543383159.081900",
        "text": "ソースコードを見た限りそうなんですけど、レコード型のInputTypeを定義するサンプルコードが見当たらないんですよね。。\n<http://hackage.haskell.org/package/dhall-1.15.1/docs/src/Dhall.html#line-865>",
        "user": "U7Z4F723Z",
        "type": "message"
    },
    {
        "ts": "1543383919.082300",
        "text": "`RecordLits` 直接いじろうとしてもValueの肩が `Exp Src X` なのでうまく行きそうにないですね自前でレコードの `Interpret` インスタンス書いたときそれで詰まった気がします。現状レコードは柔軟に型定義できなさそうです",
        "user": "U7155GPR9",
        "type": "message"
    },
    {
        "ts": "1543384405.082600",
        "text": "<@U7155GPR9>\nありがとうー\n思いっきり裏技になりますが、以下の方法なら可能でした（多分やったら怒られそう）\n\n```\ndata Person = Person {\n      pName :: !Text\n    , pAge  :: !Natural\n    } deriving (Eq, Generic, Show)\n\n-- 一旦Genericを用いてInjectのインスタンス定義\ninstance Inject Person\n\n-- !?\nclass MyInject a where\n    myInject :: InputType a\n\ninstance MyInject Person where\n    myInject = injectWith $ defaultInterpretOptions {fieldModifier = T.drop 1}\n\n&gt; let p = Person \"Hiroto\" 29\n&gt; pretty $ embed myInject p\n&gt; \"{ Name = \"hiroto\", Age = 29 }\"\n```",
        "user": "U7Z4F723Z",
        "type": "message"
    },
    {
        "ts": "1543389080.083200",
        "text": "でもこれどう考えても冗長的なコードだし、aesonのように定義できる気がするんですよねー。。他のチャンネルでもきいてみます。",
        "user": "U7Z4F723Z",
        "type": "message"
    },
    {
        "ts": "1543392829.083400",
        "text": "1.19.1だと(&gt;*&lt;)とか使って出来そう？ <http://hackage.haskell.org/package/dhall-1.19.1/docs/Dhall.html#v:-62--42--60->",
        "user": "U570660KX",
        "type": "message"
    },
    {
        "ts": "1543392988.083600",
        "text": "1.19.1にするならDevOpsと要相談になりますねー。\nいま作業してるプロジェクトは1.15.1がデフォルトのようです。",
        "user": "U7Z4F723Z",
        "type": "message"
    },
    {
        "ts": "1543399524.083800",
        "text": "ちょっと勘違いしてたんですが、最初のコードが無限ループするのって、autoWithの中でautoWithを呼んでるからってだけではないですかね。autoWithのデフォルト定義 ` autoWith options = fmap <http://GHC.Generics.to|GHC.Generics.to> (evalState (genericAutoWith options) 1)` を貼り付けてoptionの所変えてやってみては？",
        "user": "U570660KX",
        "type": "message"
    },
    {
        "ts": "1543400966.084000",
        "text": "やってみたんですけど、今度は型エラーでコンパイルができなくなりますね。同じ名前の関数を別からインポートする必要があるのかな。。",
        "user": "U7Z4F723Z",
        "type": "message"
    },
    {
        "ts": "1543401828.084200",
        "text": "dhallは比較的まだ新しい言語だし、当時はInjectの型クラスインスタンスは定義できなかったというのも十分ありえると思います。あったとしても相当ややこしかったのかも？（少なくともチュートリアルにはサンプルコードはありませんでした",
        "user": "U7Z4F723Z",
        "type": "message"
    },
    {
        "ts": "1543422092.084400",
        "text": "`genericAutoWith options` が `State Int (Type (Rep Person a))` で `to` が `Rep Person a -&gt; Person` になるはずなんですけど通りませんかね",
        "user": "U570660KX",
        "type": "message"
    },
    {
        "ts": "1543457716.000100",
        "text": "目を通してくれてありがとうー。\n<https://gist.github.com/HirotoShioi/69a63c11e0f73afe01f9182986c052a0>\n色々引っ張ってきてやっとできました！",
        "user": "U7Z4F723Z",
        "type": "message"
    },
    {
        "ts": "1543470187.001000",
        "text": "stack newで新しくプロジェクトを生成した際に予め用意した`.ghci`ファイルも自動的にそのプロジェクトに入れておく方法ってありますか？\n\n``` \n:set prompt \"&gt; \"\n :seti -XOverloadedStrings\n :seti -XScopedTypeVariables\n \n :set -Wall\n :set -fno-warn-type-defaults\n \n :set -DGHCI\n :set +s\n :set +t\n \n :set -package pretty-simple\n \n import Text.Pretty.Simple (pPrint)\n \n :set -interactive-print pPrint\n```\n\nプロジェクトを立ち上げる毎に自分のwikiから.ghciファイルをコピペするのが面倒なんです。かといってグローバルに設定すると色々問題がありそう（どのPreludeを使ってるのかわからなくなるとか）。",
        "user": "U7Z4F723Z",
        "type": "message"
    },
    {
        "ts": "1543470347.001100",
        "text": "テンプレートに.ghciを含めておくことはできるかと思います。\nstackのconfig.yamlでdefault-templateという項目を設定しておけば、デフォルトで使うテンプレートを指定できるみたいです。\n<https://haskell.e-bigmoon.com/stack/tips/config-yaml.html>",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1543471965.001500",
        "text": "できました！",
        "user": "U7Z4F723Z",
        "type": "message"
    },
    {
        "ts": "1543471984.001700",
        "text": "ありがとうー！",
        "user": "U7Z4F723Z",
        "type": "message"
    },
    {
        "ts": "1543479477.002900",
        "text": "テスト書いてて気づいたけど、Dhallって特定の文字列に対してはパースエラーを吐くっぽい？\n例えばこういうのとか\n\"\\uÞ07A\\u1635\"\n\n\"\\uö4BCX\"",
        "user": "U7Z4F723Z",
        "type": "message"
    },
    {
        "ts": "1543479553.003200",
        "text": "Questionじゃなかった。。",
        "user": "U7Z4F723Z",
        "type": "message"
    },
    {
        "ts": "1543486409.003800",
        "text": "`\\u0000` みたいなのはコードポイントの表現なので、コードポイントとしてのパースに失敗するとパースエラーになるのかなと。",
        "user": "U4M598NHM",
        "type": "message"
    },
    {
        "ts": "1543503046.004900",
        "text": "`\\\\uあああ` みたいなのならいけるんでしょうね。",
        "user": "U9XHWQX7Z",
        "type": "message"
    },
    {
        "ts": "1543672944.000300",
        "text": "<@U5CRTAKCP> has joined the channel",
        "user": "U5CRTAKCP",
        "type": "message"
    },
    {
        "ts": "1543675326.000600",
        "text": "<@UAEQ0S5JM> has joined the channel",
        "user": "UAEQ0S5JM",
        "type": "message"
    },
    {
        "ts": "1543710665.000900",
        "text": "<@U55V45LQ0> has joined the channel",
        "user": "U55V45LQ0",
        "type": "message"
    },
    {
        "ts": "1543725188.002200",
        "text": "haskell-jp slack のログってどこかに公開されていたと思うのですが、url わかる方いたら教えてください:man-bowing:",
        "user": "U5B3EGEFQ",
        "type": "message"
    },
    {
        "ts": "1543725709.002400",
        "text": "ほい <https://github.com/haskell-jp/slack-log>",
        "user": "U56L7EVNY",
        "type": "message"
    },
    {
        "ts": "1543725742.002900",
        "text": "doc っていうディレクトリです",
        "user": "U56L7EVNY",
        "type": "message"
    },
    {
        "ts": "1543725761.003000",
        "text": "ありがとうございます！:cactus:",
        "user": "U5B3EGEFQ",
        "type": "message"
    },
    {
        "ts": "1543823570.005400",
        "text": "cabal new-buildやcabal new-testで、stack buildの--pedanticオプション相当のことはできるでしょうか？\ncabal new-build --ghc-options=\"-Werror -Wall\"\nでいけるだろうと思いきや、依存しているパッケージに警告があった場合までエラーになってしまうので、意図した動作にならず、悩んでおります。",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1543824023.005500",
        "text": "`--ghc-options=\"-Wall -Werror\"` とすれば良いっぽい？",
        "user": "U9XHWQX7Z",
        "type": "message"
    },
    {
        "ts": "1543824139.005700",
        "text": "と、現状のstackのpedantic がそう解釈するらしいので (参照: <https://github.com/commercialhaskell/stack/blob/master/src/Stack/Options/BuildParser.hs#L30>)",
        "user": "U9XHWQX7Z",
        "type": "message"
    },
    {
        "ts": "1543824257.006100",
        "text": "さすがにそれでは `--ghc-options=\"-Werror -Wall\"` と結果は変わりません。。。\n依存パッケージに警告があった場合までエラーになってしまいます。。。",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1543824298.006300",
        "text": "すみません、、、-Wallしかしてないのかなと勝手に見間違いしてました&gt;&lt;",
        "user": "U9XHWQX7Z",
        "type": "message"
    },
    {
        "ts": "1543826675.006600",
        "text": "おそらくなのですが、cabal.projectを作って、\n\n```\npackages: ./gtk2hs-buildtools.cabal\n\npackage gtk2hs-buildtools\n  ghc-options: -Wall -Werror\n\nallow-newer: all\n```\n\nみたいな感じに設定すると望みの事が出来るのでは？ (例はgtk2hs-buildtoolsをghc-8.6.1でnew-buildしようとしたときの設定です)",
        "user": "U9XHWQX7Z",
        "type": "message"
    }
]