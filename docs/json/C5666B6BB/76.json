[
    {
        "ts": "1577346007.004500",
        "text": "ありがとうございます。みてみます。",
        "user": "UFPRHDT8X",
        "type": "message"
    },
    {
        "ts": "1577352370.004800",
        "text": "ご教示のとおりmysqlのプログラムのままで動きました。ありがとうございます。\n<https://github.com/ringo-apo/hs_mariadb>",
        "user": "UFPRHDT8X",
        "type": "message"
    },
    {
        "ts": "1577343100.003700",
        "text": "こんにちは。\nHaskellからMariaDBを操作するにはどうしたらよいでしょうか。\nググって見たのですが、MySQLの情報はあっても\nMariaDBの情報は見つけられませんでした。\n参考になるサイトなどお分かりでしたらご教示頂きたく。",
        "user": "UFPRHDT8X",
        "type": "message"
    },
    {
        "ts": "1577344765.003900",
        "text": "<https://github.com/yesodweb/persistent>\nはドライバはMySQLという名前ですがMariaDBで使っている人が結構居るみたいですね\n私はPostgreSQL派なので使ったことは無いのですが,\nそのまま互換性のあるMariaDBでも動くのではないでしょうか",
        "user": "U57CUMWQ6",
        "type": "message"
    },
    {
        "ts": "1577344916.004200",
        "text": "最悪\n<https://github.com/gbwey/persistent-odbc>\nで動きそうな気がします",
        "user": "U57CUMWQ6",
        "type": "message"
    },
    {
        "ts": "1577346007.004500",
        "text": "ありがとうございます。みてみます。",
        "user": "UFPRHDT8X",
        "type": "message"
    },
    {
        "ts": "1577352370.004800",
        "text": "ご教示のとおりmysqlのプログラムのままで動きました。ありがとうございます。\n<https://github.com/ringo-apo/hs_mariadb>",
        "user": "UFPRHDT8X",
        "type": "message"
    },
    {
        "ts": "1577372741.009400",
        "text": "vscode で Haskell Language Server のプラグインを使っての開発環境を作っているのですが、コードを編集する度に  `\"print-build-platform\" (exit 1): failed` というエラーが出てうっとおしく思っているのですが黙らせるにはどうしたら良いのでしょうか。\n\nネットに転がっている記事を読んみたところ `export PATH=$(stack path --compiler-bin):$PATH` を ~/.bash_profile に書き込むと解決するらしかったので試してみたのですがダメでした…。",
        "user": "UQBK4AKNG",
        "type": "message"
    },
    {
        "ts": "1577373044.009500",
        "text": "役に立つかわかりませんが参考になりそうなコマンドのログ貼っておきます:sweat:\n```$ ghc --version\nThe Glorious Glasgow Haskell Compilation System, version 8.6.5\n\n$ stack path --compiler-bin\n~/.stack/programs/x86_64-osx/ghc-8.6.5/bin\n\n$ which hie\n~/.local/bin/hie\n\n$ ~/haskell-ide-engine/.stack-work/install/x86_64-osx/hogehogehoge/8.6.5/bin/cabal-helper-wrapper \"print-build-platform\"\nx86_64-osx```",
        "user": "UQBK4AKNG",
        "type": "message"
    },
    {
        "ts": "1577374012.009700",
        "text": "あ、すみません、何故かはわからないのですが以下のオペレーションやったら何故か解決しました:thinking_face:\n```1. ブラウザからDLした古い verison の vscode を rm コマンドで削除\n2. brew cask install visual-studio-code```",
        "user": "UQBK4AKNG",
        "type": "message"
    },
    {
        "ts": "1577421842.010400",
        "text": "<https://github.com/input-output-hk/plutus/blob/master/example/shell.nix>\nnix-shellするだけで\nvscodeとhieとghcのセットアップが完了したりしないですかね。（まだ試してないです。）",
        "user": "U74KTAG0N",
        "type": "message"
    },
    {
        "ts": "1577440745.018900",
        "text": "`http-client`の`Network.Http.Simple.httpJSON` について質問です\n\nステータスコードによって異なる内容のJSONを返すAPIを叩こうとしています。(<https://misskey.io/api-doc#operation/users/show>)\nステータスコードが200なら `Right`、それ以外なら `Left`に包んで返したいです。\nしかし `response` に `getResponseBody`を使うと、強制的に成功時の型として扱われてパースできずにエラーになってしまい、困っています。\n自分で思いついた解法は、「 `httpJSON`の代わりに `httpLbs`を使い、最後値を返すときにJSONとしてパースする」くらいなのですが他に方法はあるのでしょうか\n以下のコードです:\n```usersShow :: APIRequest -&gt; ReaderT MisskeyEnv IO (Either APIError User)\nusersShow req = do\n    env &lt;- ask\n    initReq &lt;- parseRequest $ (env^.url) ++ \"/api/users/show\"\n    let requestObject = object [ \"userId\"   .= (req^.userId)\n                               , \"userIds\"  .= (req^.userIds)\n                               , \"username\" .= (req^.username)\n                               , \"host\"     .= (req^.host)\n                               ]\n        request       = initReq { method = \"POST\"\n                                , requestBody = RequestBodyLBS $ encode requestObject\n                                , requestHeaders =\n                                      [(\"Content-Type\", \"application/json; charset=utf-8\")]\n                                }\n\n    response &lt;- httpJSON request\n    case getResponseStatusCode response of\n        200 -&gt; return $ Right $ getResponseBody response\n        400 -&gt; return $ Left  $ getResponseBody response -- APIError型になって欲しいけどならない```",
        "user": "ULTBB86UC",
        "type": "message"
    },
    {
        "ts": "1577442022.019000",
        "text": "ちょっとすぐに調べられる状態ではないので推測ですが、4XXや5XXだと例外が投げられるのでcatchせよ、という仕様じゃないかと思います。",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1577442090.019300",
        "text": "この場合tryの方がいいですね。理由は忘れちゃいましたが一般にcatchよりも推奨されてたはず",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1577442188.019600",
        "text": "<@US388KN85> has joined the channel",
        "user": "US388KN85",
        "type": "message"
    },
    {
        "ts": "1577443131.019900",
        "text": "parseRequestを使っているのでステータスによる例外は発生しないはずです。まず`Value` 型として取得し、`fromJSON` でさらに変換するのはいかがでしょうか",
        "user": "U4KUNQF9N",
        "type": "message"
    },
    {
        "ts": "1577453003.020300",
        "text": "なるほどすみません、問題を誤解してました:sweat_drops:\n実質fumiさんの方法と同じですがFromJSONのインスタンスを:point_down:️のように定義すればいいかもしれませんね。\n\n```\nnewtype EitherJson a b = EitherJson (Either a b)\n\ninstance (FromJSON a, FromJSON b) =&gt; FromJSON (EitherJson a b) where\n  parseJSON v = EitherJson &lt;$&gt; (Right &lt;$&gt; parseJSON v) &lt;|&gt; (Left &lt;$&gt; parseJSON v)\n```",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1577453121.020500",
        "text": ":thinking_face:.oO(そう言えばこれの値コンストラクターが3つ以上のバージョンを会社の同僚が欲しがってたな。割と需要あるだろうからパッケージにしてもいいかも)",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1577508723.020700",
        "text": "なるほど、ありがとうございます！\nとりあえず試してみます(コードは書き直したものの、他の場所がエラー出てて試せていない)",
        "user": "ULTBB86UC",
        "type": "message"
    },
    {
        "ts": "1577541186.020900",
        "text": "これは初めて知りました:sweat:",
        "user": "UQBK4AKNG",
        "type": "message"
    },
    {
        "ts": "1577547656.021300",
        "text": "<@US439GT0Q> has joined the channel",
        "user": "US439GT0Q",
        "type": "message"
    },
    {
        "ts": "1577702977.021600",
        "text": "<@US4UKMB29> has joined the channel",
        "user": "US4UKMB29",
        "type": "message"
    },
    {
        "ts": "1578104663.022800",
        "text": "遅くなりましたが、\nfumievalさんの方法でやってみて上手く動きました〜！\nigrepさんのは理解するのに時間がかかってしまった…\nお二人ともありがとうございました！",
        "user": "ULTBB86UC",
        "type": "message"
    },
    {
        "ts": "1578123119.024800",
        "text": "Haskell で簡易的なスケジューラーを作りたいんですけど、オススメ、あるいはデファクトスタンダードなパッケージとかってありますか？\n（ここでのスケジューラーってのはプログラムを起動しておくと定期的に任意の関数なんかを実行してくれるプログラムのことをイメージしてます）",
        "user": "U56L7EVNY",
        "type": "message"
    },
    {
        "ts": "1578123851.025000",
        "text": "こういうのを見つけた\n<https://www.reddit.com/r/haskell/comments/b63idy/a_new_scheduler_library/>",
        "user": "U56L7EVNY",
        "type": "message"
    },
    {
        "ts": "1578136041.027600",
        "text": "もう間もなく、すごいH本の写経が終わるのですが、次に読む書籍のオススメなどあれば教えていただけますでしょうか？個人的にはより実践的な内容だと嬉しいなーなんて思っております:sweat:",
        "user": "UQBK4AKNG",
        "type": "message"
    },
    {
        "ts": "1578137683.027700",
        "text": "<https://gihyo.jp/book/2017/978-4-7741-9237-6> がオススメです。\n入門と言いつつ入門詐欺と言われるくらい入門者には難しいし、アプリケーションの例が豊富なので。",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1578140671.028100",
        "text": "ぬおー、なるほど！\nちょっと怖いですが読んでみようかなと思います！",
        "user": "UQBK4AKNG",
        "type": "message"
    },
    {
        "ts": "1578143396.028500",
        "text": "cron?",
        "user": "U74KTAG0N",
        "type": "message"
    },
    {
        "ts": "1578143708.028700",
        "text": "あ、はい、もちろん cron を使えば実現できるんですけど、Haskell プログラムだけでできないかなって",
        "user": "U56L7EVNY",
        "type": "message"
    },
    {
        "ts": "1578144784.028900",
        "text": "<https://github.com/MichaelXavier/cron>",
        "user": "U74KTAG0N",
        "type": "message"
    },
    {
        "ts": "1578144801.029200",
        "text": "これはいかがでしょうか。",
        "user": "U74KTAG0N",
        "type": "message"
    },
    {
        "ts": "1578156753.029500",
        "text": "おぉ、cron というパッケージでしたか、失礼しました :bow: \nありがとうございます。試してみます :+1:",
        "user": "U56L7EVNY",
        "type": "message"
    },
    {
        "ts": "1578193202.029800",
        "text": "<@URZC2G59P> has joined the channel",
        "user": "URZC2G59P",
        "type": "message"
    },
    {
        "ts": "1578235426.030500",
        "text": "<@URZHY2K97> has joined the channel",
        "user": "URZHY2K97",
        "type": "message"
    },
    {
        "ts": "1578283027.030800",
        "text": "<@U7YMV774J> has joined the channel",
        "user": "U7YMV774J",
        "type": "message"
    },
    {
        "ts": "1578454514.032800",
        "text": "<https://qiita.com/Dooteeen/items/fbfaf4fd513066ecc554#comment-e0c17b34a7f1453f0d5e> のコメントを書いていて気になったんですが、リストの `foldr'` が `Data.List` にない（`Data.Foldable` から `import` すれば使えますが、普通使うことはないはず） のってなんででしたっけ？\n多分こうだろうというイメージはあるのですが、自信を持って説明できません...",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1578455934.033300",
        "text": "Data.Foldable.foldr'の定義はトリッキーでややわかりにくいですが、foldr' (+) 0 [1,2,3]は、 `+!`を右から評価するものとして表すと`1 +! 2 +! (3 +! 0)` のような形になります。結局、この式を評価するには最後まで辿ってスタックを消費せねばならず、メリットがないからだと言えます",
        "user": "U4KUNQF9N",
        "type": "message"
    },
    {
        "ts": "1578464733.033600",
        "text": "リストに対してパターンマッチする度に `x : xs` における `x` と `xs` の分だけスタックを消費してる、というイメージで合ってますかね？\n`+!` がeagerにパターンマッチするからリストの長さだけスタックを消費してる、と。",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1578469052.033800",
        "text": "それは事実ですが、パターンマッチ関係なしに、1 +! rを評価する際、1を残したままrを先に評価するので1がスタックに残ります(再帰的にも同様)",
        "user": "U4KUNQF9N",
        "type": "message"
    },
    {
        "ts": "1578469262.034100",
        "text": "<https://github.com/haskell-jp/playground/blob/master/Strictness/Fold.hs> playgroundにpushしてみました。やはりfoldr'が一番イヤな感じにコンパイルされている…",
        "user": "U4KUNQF9N",
        "type": "message"
    },
    {
        "ts": "1578469959.034500",
        "text": "```exL = exL'```\nってことは `foldl' (+) 0 [1..1000]` と `foldl (+) 0　[1..1000]` は同じ式として最適化されたってことですか... 正格性解析の結果でしょうか... すごい。",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1578480980.035000",
        "text": "cf. <https://qiita.com/autotaker1984/items/09c5ceaa13e9077f5359>\n部分適用したりしない限りは、どちらでも良さそうですね",
        "user": "U4KUNQF9N",
        "type": "message"
    },
    {
        "ts": "1578482783.035400",
        "text": "<https://www.reddit.com/r/haskell/comments/elcyb8/yet_another_haskell_development_environment_using/>\n\n<https://github.com/GuillaumeDesforges/haskell-nix-dev-template>",
        "user": "U74KTAG0N",
        "type": "message"
    },
    {
        "ts": "1578493467.036000",
        "text": "<@USFQ6M2PR> has joined the channel",
        "user": "USFQ6M2PR",
        "type": "message"
    },
    {
        "ts": "1578557611.036300",
        "text": "<@USHD32BM4> has joined the channel",
        "user": "USHD32BM4",
        "type": "message"
    },
    {
        "ts": "1578655052.000200",
        "text": "<@USH4Z5NUD> has joined the channel",
        "user": "USH4Z5NUD",
        "type": "message"
    },
    {
        "ts": "1578665663.000500",
        "text": "<@USKGMKYJJ> has joined the channel",
        "user": "USKGMKYJJ",
        "type": "message"
    }
]