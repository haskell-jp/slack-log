[
    {
        "ts": "1622540988.054000",
        "text": "はじめまして。\nHaskell学習のため [Advent of Code 2020](<https://adventofcode.com/>) をちまちま解いているところなのですが、解答できたけれどコードが汚くなってしまうものがあります。\n<https://adventofcode.com/2020/day/8> ８日めのこの問題、こういうコードになりました。\n<https://github.com/kyoheiu/aoc2020-haskell/blob/master/day08/app/Main.hs>\n\nそもそも最適なアプローチはこれではないということかもしれませんが、それはいったんおいて、このアプローチでもっとHaskellっぽいコードにリファクタリングするにはどういう考え方があるでしょうか？\nとりあえず引数の数が多いのが嫌な感じなのですが…。",
        "user": "U02371BTELB",
        "type": "message"
    },
    {
        "ts": "1622564788.054200",
        "text": "<@U02371BTELB> この中でいうと、例えば「符号付き整数文字列を整数に変換する」関数を1つにまとめると、ちょっと簡潔になる気がします。持たなくてはならない状態量が多いので、引数の数が多いのはどうにもならない気がしますね……。",
        "user": "U021XMH7NDT",
        "type": "message"
    },
    {
        "ts": "1622567493.054400",
        "text": "素朴かつ関数的に（ここでは、do構文を使わない、配列を使わない、程度の意味）考えるなら、\n性能はともかく、こんな感じでしょうか。(詳細は書いてないので動かしてませんが。^^;）\n\n```module Main where\n\nimport Data.Char ( toUpper )\n\nmain :: IO ()\nmain = print . lastState . run . load . map toUpper . filter ('+' /=)\n     =&lt;&lt; readFile \"day08.txt\"\n\ntype Code = (OP, Arg)\ndata OP\n    = NOP\n    | ACC\n    | JMP\n    deriving (Eq, Show, Read)\n\ntype Arg = Int\n\ntype Offset = Int\n\ntype Mem = ([Code], Code, [Code])\nderefPC :: Mem -&gt; Code\nderefPC (_, c, _) = c\n\njump :: Offset -&gt; Mem -&gt; Mem\njump offset mem = undefined \n\ntype Acc = Int\nupdAcc :: Offset -&gt; Acc -&gt; Acc\nupdAcc offset acc = acc + offset\n\ntype Count = Int\nupdCount :: Count -&gt; Count\nupdCount count = succ count \n\ntype Output = String\n\ntype VMState = (Mem, Acc, Count, Output)\n\nisFinalState :: VMState -&gt; Bool\nisFinalState vm = undefined \n\nload :: String -&gt; VMState\nload src = case map toCode (lines src) of\n    h : t -&gt; (([], h, t), 0, 0, \"\")\n\ntoCode :: String -&gt; Code\ntoCode ln = case words ln of\n    op : num : _ -&gt; (read op, read num)\n\nrun :: VMState -&gt; [VMState]\nrun st = st : if isFinalState st then [] else run (step st)\n\nstep :: VMState -&gt; VMState\nstep vm = execute (decode (fetch vm)) vm\n\nfetch :: VMState -&gt; Code\nfetch (mem, _, _, _) = derefPC mem\n\ndecode :: Code -&gt; (VMState -&gt; VMState)\ndecode code vm = case code of\n    (op, offset) -&gt; undefined\n\nexecute :: (VMState -&gt; VMState) -&gt; VMState -&gt; VMState\nexecute = id\n\nlastState :: [VMState] -&gt; (Acc, Count, Output)\nlastState states = case last states of\n    (_,acc,cnt,msg) -&gt;  (acc, cnt, msg)```\n",
        "user": "U4KU9ABL0",
        "type": "message"
    },
    {
        "ts": "1622567814.054600",
        "text": "命令列をロードしたメモリをいわゆるZipperにしてあるので、jump も簡単に実装できるでしょう。",
        "user": "U4KU9ABL0",
        "type": "message"
    }
]