[
    {
        "type": "message",
        "user": "U024U0DCJ3T",
        "ts": "1701873046.740899",
        "text": "Data.Sequenceを触っていた時に、ふとunconsやunsnocのような関数があれば便利かなと思ってcontainerで提案してみたのですが、viewlやviewr使えば実現できるのであまり本質的じゃない拡張っぽいみたいなレスポンスをもらいました(当然と言えば当然ですが)。\n\nData.Sequenceにunconsやunsnocがあったとしてどんなときに役立つか正直答えられる自信がないので、closeしようかなとも思っています。\nこのような既存の関数で表現できるような関数のライブラリへの必要性について皆さんはどう思いますでしょうか。お手柔らかにお願いします\n\n<https://github.com/haskell/containers/issues/977>"
    },
    {
        "type": "message",
        "user": "U4L0B71L1",
        "ts": "1701887537.402409",
        "text": "同じことをする機能をライブラリーが何通りも提供するのは好みではないですね\n理由としては、同じライブラリーを使ってるのに利用する人によって書き方がバラつくのがいやなのでですね\nメンテナー視点では、機能は取り込んだ後メンテし続けないといけないので、できないことができるようになるとかじゃなければ、なるべくコンパクトにしておきたい\nぐらいかなあ"
    },
    {
        "type": "message",
        "user": "U024U0DCJ3T",
        "ts": "1701908213.996859",
        "text": "おっしゃる通りですね\n\nたしかにライブラリをコンパクトにしておくとメンテナンスもしやすいですしユーザーも好みに合わせて色々拡張しやすいですよね。\nありがとうございます"
    },
    {
        "type": "message",
        "user": "U4KU9ABL0",
        "ts": "1701955810.296029",
        "text": "私の場合は、\n`uncons :: Seq a -&gt; Maybe (a, Seq a)` や `unsnoc :: Seq a -&gt; Maybe (Seq a, a)` では、Seq でのパターンマッチかわりに、Maybe でパターンマッチになるだけなので、あまり有り難みがないです。それよりは、`seqL :: b -&gt; (a -&gt; Seq a -&gt; b) -&gt; Seq a -&gt; b` とか、`seqR :: b -&gt; (Seq a -&gt; a -&gt; b) -&gt; Seq a -&gt; b` があれば便利です。リストの場合も、`Data.List.uncons :: [a] -&gt; Maybe (a, [a])` より、`Data.List.Extra.list :: b -&gt; (a -&gt; [a] -&gt; b) -&gt; [a] -&gt; b` を使うことが多いですね。"
    }
]