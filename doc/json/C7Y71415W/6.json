[
    {
        "ts": "1539679621.000100",
        "text": ":thinking_face:.oO(定理証明器関係のchannelも作ろうかな...)",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1539683228.000100",
        "text": "<https://www.cl.cam.ac.uk/~caw77/papers/mechanising-and-verifying-the-webassembly-specification-draft.pdf>\nこれですかね。\n誤解していたらすみません。\nどんな時でも型がちゃんと付いておかしなことにならないことを証明した？",
        "user": "U74KTAG0N",
        "type": "message"
    },
    {
        "ts": "1539683765.000100",
        "text": "ありがとうございます！読んでみます！",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1539700499.000100",
        "text": "pdf斜め読みした感じだとtype soundness示したっぽいですね",
        "user": "U560KD6DN",
        "type": "message"
    },
    {
        "ts": "1539728063.000100",
        "text": "この話について「あれ？JMeqはCoqでも普通に定義できるよ？」って思って、Coqで色々試してみたら、このコードでいう `≅-elim` が `JMeq_eq` (このコードでの `≅→≡`) を仮定しただけでは証明できず、 `eq_JMeq` (このコードでの `≡→≅` 。公理なしで証明可能) が `JMeq_eq` の左逆射になることを仮定する必要があるっぽいなど、色々面白いことが分かりました\n<https://haskell-jp.slack.com/archives/C5666B6BB/p1538806549000100?thread_ts=1538705462.000100&amp;channel=C5666B6BB&amp;message_ts=1538806549.000100>",
        "user": "U5LEE6C1J",
        "type": "message"
    },
    {
        "ts": "1539728284.000100",
        "text": "ちなみにJMeqが定義できるというのはこんな感じ (ソースコード: <https://github.com/Hexirp/progra-gist/commit/c2f3c7eebd1a465517af912e740f6864d9280486>)\n```\nInductive JMeq (A : Type) (a : A) : forall B : Type, B -&gt; Type :=\n| JMeq_refl : JMeq A a A a\n.\n```",
        "user": "U5LEE6C1J",
        "type": "message"
    },
    {
        "ts": "1539732421.000100",
        "text": "つまり\n&gt; どんな時でも型がちゃんと付いておかしなことにならないことを証明した？\nのことですかね。",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1539740728.000100",
        "text": "type soundnessは一度型が付けばおかしなことにはならない、であって、型がいつでもつくことは含まないです(今回もそれは無理だと思います)",
        "user": "U560KD6DN",
        "type": "message"
    },
    {
        "ts": "1539740830.000100",
        "text": "(あとtype checkerに関する定理とinterpreterに関する定理も示したっぽいが詳細は真面目に読まないと分からなそう…)",
        "user": "U560KD6DN",
        "type": "message"
    },
    {
        "ts": "1540509093.000100",
        "text": "今週のHaskell :haskell: Weeklyから！ :tada: :blue_book:\n<https://np.reddit.com/r/haskell/comments/9q6edo/category_theory_for_programmers_by_bartosz/>",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1541549352.001000",
        "text": "<@UDVMPMU8K> has joined the channel",
        "user": "UDVMPMU8K",
        "type": "message"
    },
    {
        "ts": "1541559921.002700",
        "text": "このペーパーに記述されている数式（表現？）をわかりやすく解説している書籍/資料ってありますかね。。\n<https://cardanodocs.com/files/formal-specification-of-the-cardano-wallet.pdf>",
        "user": "U7Z4F723Z",
        "type": "message"
    },
    {
        "ts": "1541576801.003200",
        "text": "<@U4KPPQW7K> OK! 書いた本人に聞いてみます。何かわかったら共有するね。",
        "user": "U7Z4F723Z",
        "type": "message"
    },
    {
        "ts": "1541576866.003400",
        "text": "ありがとうございます :ok_woman:",
        "user": "U4KPPQW7K",
        "type": "message"
    },
    {
        "ts": "1541578552.007300",
        "text": "ゲーテルの不完全性定理を数学ガール読んで触れてるんだけど\n「形式的体系に矛盾する文を公理として入れると、任意の文が証明可能になってしまう」というの\n「単純型付きラムダ計算の意味論に無限型を入れると、任意の式が型付け可能になってしまう」というのにめっちゃ似てる気がする",
        "user": "U5LV76EJH",
        "type": "message"
    },
    {
        "ts": "1541836217.007800",
        "text": "<@UE0F2T2F4> has joined the channel",
        "user": "UE0F2T2F4",
        "type": "message"
    },
    {
        "ts": "1541861911.018800",
        "text": "英語ですみません、解答がくれた方いたら日本語でも英語でも大丈夫です &gt; &lt;\n\nnLab says:\n\n&gt; a free `C`-object on `x` consists of an object `y ∈ C` together with a morphism\n&gt; `η : x -&gt; U y`  in `D` there exists a unique `g : y -&gt; z` for every `f : x -&gt; U z ∈ C`\n\n<https://ncatlab.org/nlab/show/free+object> paragraph 4 of section 1.\n\nAnd I knows, though not 100% sure, that for a endofunctor `f`, the `Free f` is the `y`, and the `C` is the category of monads, and `D` is the category of endofunctors, U is the forgeful functor simply forgetting the identity and the composition of monad.\n\nMy question is, what is the `x` and `η : x -&gt; U(Free f)`?\nIt seems that `x` can be the identity functor, and `η` is just the identity natrual transformation of `Free f` monad, is that right?\nIf it is not right, what is `x` and `η`?\nIf it is right, is there any other possible definition of `x` and `η`?\n\nThanks in advance.",
        "user": "UACQ9J5D3",
        "type": "message"
    },
    {
        "ts": "1541994448.019400",
        "text": "<@UB1MW6THP> has joined the channel",
        "user": "UB1MW6THP",
        "type": "message"
    },
    {
        "ts": "1541994635.019600",
        "text": "Free objectについてはこのスレッドで初めて知りましたが、Free monadとの関係は確かに興味深いですね、勉強してみたい",
        "user": "U570660KX",
        "type": "message"
    },
    {
        "ts": "1541994722.019800",
        "text": "理解できていなかったら申し訳ないのですが、 `η` が identity natrual transformation だとすると `x` は `U(Free f)` では？",
        "user": "U570660KX",
        "type": "message"
    },
    {
        "ts": "1542014416.020200",
        "text": "質問の意図がよくわかってないですが\nC がモナド圏、D が自己関手圏、U が忘却関手の場合の自己関手 x に対する a free C-object on x は\n```\nFree x と η: x -&gt; U (Free x) からなる組\n```\nではないですかね。\n```\ndata Free f a = Impure (f (Free f a)) | Pure a\n```\nとすると、具体的には η は次の liftF（「haskell lifF」でググれば見つかるのと本質的に同じやつ）\n```\nliftF :: x a -&gt; Free x a\nliftF = Impure . fmap Pure\n```\nここで U は忘却関手なので U (Free x) と Free x を同一視して書いています。\n\nx が Identity関手ならば free C-object on Identity は\nFree Identity と liftF: Identity  -&gt; U (Free Identity) からなる組\nではないかと。\nちなみに Free Identityモナドは自然数の加算モノイドによる Writerモナドと同型のような気がします。（自然数が Impure のネストの深さを表す）",
        "user": "U57CGDBMG",
        "type": "message"
    },
    {
        "ts": "1542041376.021600",
        "text": "おお、確かに `x` は `Free f` の f なら `η : f -&gt; Free f` の方がidentity よりよっぽど意味があると思う。\n\nちなみに最初のスレッドの `identity functor` はHaskellのIdentityではなく、本物のIdentityの方。つまり `type I a = a`の方、残念だがHaskellにはこれを定義してもinstanceを定義できない\n\nありがとうございます",
        "user": "UACQ9J5D3",
        "type": "message"
    },
    {
        "ts": "1542042079.022400",
        "text": "やはりちゃんと順番で勉強しなきゃだめなのね。。。\n\n<https://ncatlab.org/nlab/show/free+functor#free_objects>",
        "user": "UACQ9J5D3",
        "type": "message"
    },
    {
        "ts": "1542085076.023000",
        "text": "補足：\nC がモナド圏、D が自己関手圏、U が忘却関手の場合の there exists a unique `g : y -&gt; z` for every `f : x -&gt; U z ∈ C` の g を f から構成するのが\n```\ng = foldFree f\n```\nだと思います。\nfoldFree <http://hackage.haskell.org/package/free-5.1/docs/src/Control.Monad.Free.html#foldFree>\nこの関数のコメントが \"The very definition of a free monad is that given a natural transformation you get a monad homomorphism.\"",
        "user": "U57CGDBMG",
        "type": "message"
    },
    {
        "ts": "1542429521.024500",
        "text": "<@UE1SBEZTR> has joined the channel",
        "user": "UE1SBEZTR",
        "type": "message"
    },
    {
        "ts": "1542803607.024800",
        "text": "<@UE8N92RKN> has joined the channel",
        "user": "UE8N92RKN",
        "type": "message"
    },
    {
        "ts": "1545133585.000300",
        "text": "<@UEW2WMB7T> has joined the channel",
        "user": "UEW2WMB7T",
        "type": "message"
    },
    {
        "ts": "1545703394.000200",
        "text": "<@UF0N2EEAD> has joined the channel",
        "user": "UF0N2EEAD",
        "type": "message"
    },
    {
        "ts": "1547108561.000500",
        "text": "<@UF8B49RC2> has joined the channel",
        "user": "UF8B49RC2",
        "type": "message"
    },
    {
        "ts": "1547645110.000800",
        "text": "<@UFES5NULC> has joined the channel",
        "user": "UFES5NULC",
        "type": "message"
    },
    {
        "ts": "1547863295.001100",
        "text": "<@U9SQJH9C4> has joined the channel",
        "user": "U9SQJH9C4",
        "type": "message"
    }
]