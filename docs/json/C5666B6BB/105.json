[
    {
        "ts": "1699438078.623899",
        "text": "<@U064CHVVDSB> has joined the channel",
        "type": "message",
        "user": "U064CHVVDSB"
    },
    {
        "ts": "1699850628.377719",
        "text": "`data` とレコード構文で定義した、一つだけコンストラクタを持つ型について、コンストラクタの各引数へのアクセサとなるLensを勝手に導出してくれるような方法はありますか？",
        "type": "message",
        "user": "U015L5JEP8D"
    },
    {
        "ts": "1700661995.320129",
        "text": "<@U066U4ZJF4M> has joined the channel",
        "type": "message",
        "user": "U066U4ZJF4M"
    },
    {
        "ts": "1700718065.425909",
        "text": "<@U066TUG4NNS> has joined the channel",
        "type": "message",
        "user": "U066TUG4NNS"
    },
    {
        "ts": "1700720801.756839",
        "text": "<@U067PLT7Z1N> has joined the channel",
        "type": "message",
        "user": "U067PLT7Z1N"
    },
    {
        "ts": "1700828295.904459",
        "text": "<@U066S0GFN87> has joined the channel",
        "type": "message",
        "user": "U066S0GFN87"
    },
    {
        "ts": "1701180180.539649",
        "text": "以下の `(f $ g)` はどのように理解できますか？\n```ghci&gt; let f = (1 +) :: (Num a) =&gt; a -&gt; a\nghci&gt; let g = (2 +) :: (Num a) =&gt; a -&gt; a\nghci&gt; :t (f $ g)\n(f $ g) :: (Num a, Num (a -&gt; a)) =&gt; a -&gt; a```\n背景としては、以下のようにコンパイルエラーになる例を考えるつもりでした:\n```ghci&gt; let a = (1 +) :: Int -&gt; Int\nghci&gt; let b = (2 +) :: Int -&gt; Int\nghci&gt; :t (a $ b)\n\n&lt;interactive&gt;:1:6: error:\n    • Couldn't match expected type 'Int' with actual type 'Int -&gt; Int'\n    • In the second argument of '($)', namely 'b'\n      In the expression: a $ b```",
        "type": "message",
        "user": "U03H9PH8FRP"
    },
    {
        "ts": "1701873046.740899",
        "text": "Data.Sequenceを触っていた時に、ふとunconsやunsnocのような関数があれば便利かなと思ってcontainerで提案してみたのですが、viewlやviewr使えば実現できるのであまり本質的じゃない拡張っぽいみたいなレスポンスをもらいました(当然と言えば当然ですが)。\n\nData.Sequenceにunconsやunsnocがあったとしてどんなときに役立つか正直答えられる自信がないので、closeしようかなとも思っています。\nこのような既存の関数で表現できるような関数のライブラリへの必要性について皆さんはどう思いますでしょうか。お手柔らかにお願いします\n\n<https://github.com/haskell/containers/issues/977>",
        "type": "message",
        "user": "U024U0DCJ3T"
    },
    {
        "ts": "1703069045.257369",
        "text": "<@U0101HN891Q> has joined the channel",
        "type": "message",
        "user": "U0101HN891Q"
    },
    {
        "ts": "1703649203.739559",
        "text": "stack ベースのhaskell 環境で単体テストに HSpec  を使用しています。\nテストディレクトリ/Spec.hs に以下を指定していますが、haskell language server 経由で出るGHCエラー(下記)を消す方法がわかりません。\nご存知でしたら教えてください。\n\n*補足*\nコマンド行からの stack test 実行では問題ありません。\nstack がインストールした hspec-discover の場所を haskell language server 設定のどこかで指定する必要があると推測しています。\n\n*エラー:*\n&gt; Spec.hs     1   1 error           could not execute: hspec-discover (lsp)\n*Spec.hs:*\n`{-# OPTIONS_GHC -F -pgmF hspec-discover #-}`",
        "type": "message",
        "user": "U022NP2FUMB"
    },
    {
        "ts": "1703651665.033999",
        "text": "package.yaml の build-tool-depends に相当する項目は build-tools ですので、 <@U022NP2FUMB>さんの対処法は（stack+build-toolsでは解決しないという点を除けば）完全に正当なものでは？\n\n <https://github.com/sol/hpack#common-fields|https://github.com/sol/hpack#common-fields>",
        "type": "message",
        "user": "UK0MXUCAV"
    },
    {
        "ts": "1704091586.200939",
        "text": "<@U06CE9R2SQH> has joined the channel",
        "type": "message",
        "user": "U06CE9R2SQH"
    },
    {
        "ts": "1704593186.501989",
        "text": "<@U06D4GB8TTK> has joined the channel",
        "type": "message",
        "user": "U06D4GB8TTK"
    },
    {
        "ts": "1704727713.367749",
        "text": "<@U06CWBV3W75> has joined the channel",
        "type": "message",
        "user": "U06CWBV3W75"
    },
    {
        "ts": "1705544544.084039",
        "text": "<@U06E7FF2LMC> has joined the channel",
        "type": "message",
        "user": "U06E7FF2LMC"
    },
    {
        "ts": "1705923253.265459",
        "text": "<@U06EVL7JADB> has joined the channel",
        "type": "message",
        "user": "U06EVL7JADB"
    },
    {
        "ts": "1706051135.662729",
        "text": "質問です\n関数型プログラミングでdbアクセスしようとする時に、どうしても副作用が多いコードになってしまう気がします\n何か良い例は無いでしょうか...？",
        "type": "message",
        "user": "U06EVL7JADB"
    },
    {
        "ts": "1706641637.624049",
        "text": "<@U06GBQ8BMGB> has joined the channel",
        "type": "message",
        "user": "U06GBQ8BMGB"
    },
    {
        "ts": "1706704763.907499",
        "text": "<@U06GV6ECEEM> has joined the channel",
        "type": "message",
        "user": "U06GV6ECEEM"
    }
]