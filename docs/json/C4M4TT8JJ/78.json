[
    {
        "ts": "1595857886.015700",
        "text": "cabal.projectに\n```package パッケージ名\n  test-show-details: direct```\nと書いておくと便利です",
        "user": "U4M9NJ7QE",
        "type": "message"
    },
    {
        "ts": "1595858783.016000",
        "text": "さっそく書きました！",
        "user": "U4L0B71L1",
        "type": "message"
    },
    {
        "ts": "1595923297.017100",
        "text": "`MonadState` にも `MonadReader` の `local` に相当するものが欲しくなった（具体的な型使えばいいんだけど",
        "user": "U4L0B71L1",
        "type": "message"
    },
    {
        "ts": "1595931620.017900",
        "text": "cabal-install の 3.4.0.0-rc1 がリリースされました。今回は、ARMのaarch64用バイナリもリリースされています。\nですので、ラズパイ4の Ubuntu 20.04LTS上にて、cabal-install-3.4.0.0-rc1 + ghc-8.10.1 の組み合わせが、苦労なく動きます:pie:\n\ncabal-install-3.4.0.0-rc1 リリース情報\n<https://mail.haskell.org/pipermail/cabal-devel/2020-July/010484.html>\n\n別件おまけ。 ARM aarch64用の GHC 8.10.1 のバイナリはここ。\n<https://www.haskell.org/ghc/download_ghc_8_10_1.html#linux_aarch64>\n\nGHCのARM対応近況はここ。\n<https://www.haskell.org/ghc/blog/20200515-ghc-on-arm.html>",
        "user": "U55V441FS",
        "type": "message"
    },
    {
        "ts": "1595933266.018200",
        "text": "coercionを使う場合、内部表現が同じであるという証拠としてnewtypeコンストラクタが要求されます（それがない場合、エラーとなります）。今回のように、不正な値を作る方法がない場合、コンストラクタは公開するのがベストプラクティスと考えられています。　<https://wiki.haskell.org/GHC/Coercible|https://wiki.haskell.org/GHC/Coercible> に簡単な説明があります",
        "user": "U4KUNQF9N",
        "type": "message"
    },
    {
        "ts": "1595949625.019100",
        "text": "ありがとうございます。勉強になりました。\n値構築子を公開した 0.1.1.0 を公開しました。",
        "user": "U4L0B71L1",
        "type": "message"
    },
    {
        "ts": "1596038524.021600",
        "text": "VS Code のプラグインをインストールするだけで haskell-language-server がダウンロードされてうまく動いたっぽい～（Windows でも\nVS Code のプラグイン、id が alanz.vscode-hie-server から haskell.haskell に変わってますね",
        "user": "U4L0B71L1",
        "type": "message"
    },
    {
        "ts": "1596135361.022100",
        "text": "しばらく使ってると何か処理が終わらなくなる……",
        "user": "U4L0B71L1",
        "type": "message"
    },
    {
        "ts": "1596156193.022700",
        "text": "はて、そういえばMonadとApplicativeはどう訳したものか... :confused: <https://twitter.com/FlavioCorpa/status/1288983432870219777>",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1596156363.022900",
        "text": "<http://chaton.practical-scheme.net/haskell-ja/a/2009/10/20>",
        "user": "U5G2BCVBN",
        "type": "message"
    },
    {
        "ts": "1596157354.023100",
        "text": "<https://xtech.nikkei.com/it/article/COLUMN/20120110/378061/?P=2>",
        "user": "U5G2BCVBN",
        "type": "message"
    },
    {
        "ts": "1596160977.023600",
        "text": "&gt;  Monadは「単子」という訳も一応はあったような。\n~中国語で「単子」と訳すこともあるそうなのでなかなか紛らわしいことになりそう~ :sweat_smile:\nすみません、引用したtweetを読み違えてました。むしろぴったりじゃん\n<https://twitter.com/lastland0/status/1288991181259575299>",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1596162349.024000",
        "text": "英辞郎で applicative を引いたら \"applicative language\" に「作用型言語」(他で調べるとどうも「関数型言語」のsynonymらしい)という訳があるっぽいので、 applicative は「作用素」としてはどうだろうとか思ったけど別の「作用素」(operator)と衝突しますねっていう。",
        "user": "U61BA2X0U",
        "type": "message"
    },
    {
        "ts": "1596162402.024300",
        "text": "Applicative Functor は「作用的関手」でどうでしょうとか",
        "user": "U61BA2X0U",
        "type": "message"
    },
    {
        "ts": "1596162532.024700",
        "text": "<https://xtech.nikkei.com/it/article/COLUMN/20120110/378061/?P=2> で呼んでいる「作用ファンクタ」とも整合しますね！ :+1:",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1596162638.025200",
        "text": "ただ個人的には、「適用可能関手」の方が「Functorにapを付けたものだよ」という意図がはっきり伝わるので好みですね。",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1596163006.025400",
        "text": "`Control.Applicative` から参照されてる Applicative Programming with Effects <http://www.staff.city.ac.uk/~ross/papers/Applicative.html> というpaper、内容を見ると \"Effectful Programming with Applicative\" というタイトルのほうが正しいんじゃないかという気持ちになる……",
        "user": "U61BA2X0U",
        "type": "message"
    },
    {
        "ts": "1596169074.025900",
        "text": "そういえば「群作用」という用語があったな……、と思って元の名前を調べてみたら \"group action\" でした、と…… <https://ja.wikipedia.org/wiki/%E7%BE%A4%E4%BD%9C%E7%94%A8>",
        "user": "U61BA2X0U",
        "type": "message"
    },
    {
        "ts": "1596190857.026300",
        "text": "例の論文を読んだ感じではApplicativeは関数適用を意識したネーミングのようなので、あえて訳すとすれば「適用的（関手）」かなあと思ってます",
        "user": "UGM9F7XQS",
        "type": "message"
    },
    {
        "ts": "1596200622.030800",
        "text": "中国語で検索してみたところ、适用函子(適用〜)、应用函子(応用〜)、可应用函子(応用可能〜)、高级函子(高級〜)、加强版函子(強化版〜)などが見つかりました。ご参考まで…",
        "user": "U561MADLH",
        "type": "message"
    },
    {
        "ts": "1596249845.032300",
        "text": "こんな読書会を <@U4KU9ABL0> さんとやる予定なので興味ある人はぜひ！\n<https://twitter.com/lotz84_/status/1289391122238717953?s=21|https://twitter.com/lotz84_/status/1289391122238717953?s=21>",
        "user": "U4KPPQW7K",
        "type": "message"
    },
    {
        "ts": "1596253660.032500",
        "text": "スライドに使うフォントだけで話題になる男、Simon Peyton Jones。\n <https://t.co/WvleQezUjv|https://t.co/WvleQezUjv> <https://twitter.com/YuriyBogomolov/status/1289202285159919616?s=20|https://twitter.com/YuriyBogomolov/status/1289202285159919616?s=20>",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1596253829.032900",
        "text": "GoogleカレンダーのHaskell勉強会カレンダーへの登録お願いします:pray:（アクセス権限ありましたよね？",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1596255058.033100",
        "text": "たしかに、Comic Sans以外のフォントはほぼ見たことがないですね :slightly_smiling_face:",
        "user": "UMTRA1VHU",
        "type": "message"
    },
    {
        "ts": "1596286161.035400",
        "text": "Hackage の haskeline-0.8.0.0 と GHC 8.10.1 付属の haskeline-0.8.0.0 が `MonadFail` に関して異なるせいでハマった……\nThanks to <@UGM9F7XQS>\n<https://hackage.haskell.org/package/haskeline-0.8.0.0/docs/System-Console-Haskeline.html#t:InputT>\n<https://downloads.haskell.org/~ghc/8.10.1/docs/html/libraries/haskeline-0.8.0.0/System-Console-Haskeline.html#t:InputT>",
        "user": "U4L0B71L1",
        "type": "message"
    },
    {
        "ts": "1596286272.035600",
        "text": "なんでわざわざ\n``` MonadFail m =&gt; MonadFail (InputT m)```\nを消してしまったんでしょうね。",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1596286347.035800",
        "text": "0.8.0.0 で入った（はず）のインスタンスなんですよね",
        "user": "U4L0B71L1",
        "type": "message"
    },
    {
        "ts": "1596360914.038000",
        "text": "前回のHaskell Weeklyから。Nixでstack scriptとかcabal script的なことをする話ですかね。\n<https://publish.elbear.com/#Use%20Nix%20to%20make%20experimenting%20with%20Haskell%20easier>",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1596411766.038900",
        "text": "Haskell Language Server、VS Codeだけかと思いきや <https://github.com/haskell/haskell-language-server/releases> から普通に実行ファイルダウンロードできるようになってたんですね。\n素晴らしい。これで私の非力なノートでも戦える",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1596411840.039000",
        "text": "<https://github.com/mattn/vim-lsp-settings> と <https://github.com/neovim/nvim-lsp> に貢献する日が来たか。\n（実はもう誰かやってる？",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1596412016.039400",
        "text": "えっ、Windows版に拡張子 .exe がないのってどういうこと... :cold_sweat:",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1596412081.039600",
        "text": "fileコマンドで調べたら一応ちゃんと実行ファイルにはなっているらしい",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1596446093.040200",
        "text": "モナドトランスフォーマーを雑に `ResultT` という名前にしたら `ResultT Identity` も `Result` という名前にしたくなって名前がかぶった。名前空間が違うからまあいいか？",
        "user": "U4L0B71L1",
        "type": "message"
    },
    {
        "ts": "1596446116.040500",
        "text": "<https://github.com/kakkun61/either-result/blob/monad-transformer/src/Control/Monad/Result.hs>",
        "user": "U4L0B71L1",
        "type": "message"
    },
    {
        "ts": "1596447774.041000",
        "text": "もともと値コンストラクターをかくして直接使わない想定のAPIだったでしょうから、むしろ `ResultT Identity` に寄せるのもいいかも。",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1596459227.041500",
        "text": "<@U017R9WRCFR> has joined the channel",
        "user": "U017R9WRCFR",
        "type": "message"
    },
    {
        "ts": "1596463384.041600",
        "text": "登録しましたー！",
        "user": "U4KPPQW7K",
        "type": "message"
    },
    {
        "ts": "1596504402.042300",
        "text": "Haskell Implementors' Workshop (HIW 2020)でEgisonのパターンマッチを実装したHaskellライブラリであるSweet Egisonについて話せることになりました！\n<https://icfp20.sigplan.org/details/hiw-2020-papers/10/Sweet-Egison-a-Haskell-Library-for-Non-Deterministic-Pattern-Matching>",
        "user": "U80GXHF6Y",
        "type": "message"
    },
    {
        "ts": "1596504583.042800",
        "text": "Sweet Egison ( <https://github.com/egison/sweet-egison> )は去年Haskell Dayで発表させていただいたminiEgison ( <https://github.com/egison/egison-haskell> ) を高速になるよう改良したものになっています．\nEgisonパターンマッチを使って書いたプログラムが同じ意味のHaskellによる通常の関数型プログラムとほぼ同じ速さで動きます．（Egisonパターンマッチを使って書いたプログラムが同じ意味のHaskellプログラムに変換されるように実装されているおかげです．）",
        "user": "U80GXHF6Y",
        "type": "message"
    },
    {
        "ts": "1596534327.044800",
        "text": "`ResultT Identity` に寄せてみた <https://github.com/kakkun61/either-result/compare/monad-transformer>",
        "user": "U4L0B71L1",
        "type": "message"
    },
    {
        "ts": "1596551013.045200",
        "text": "<@U018YFC797S> has joined the channel",
        "user": "U018YFC797S",
        "type": "message"
    },
    {
        "ts": "1596581684.046500",
        "text": "ICFPのearly registration（安くチケットが買える）は8/8まで。\n今年は世界中の人が参加できるよう、発表を録画しておいて2回配信するそうです。\n<https://blog.sigplan.org/2020/08/04/come-to-virtual-icfp/>",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1596628688.048200",
        "text": "5年近く放置されてた optparse-declarative ですが自分がメンテナーに追加されたのでメンテナンスしてきます:muscle:\n<https://hackage.haskell.org/package/optparse-declarative>",
        "user": "U4L0B71L1",
        "type": "message"
    },
    {
        "ts": "1596669284.051500",
        "text": "stack 2.3.3がリリースされました。バグ修正が主な変更のようです。\n<@ULW04DUEA> Contributor入りおめでとう！ :tada:\n<https://github.com/commercialhaskell/stack/releases/tag/v2.3.3>",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1596773516.056800",
        "text": "GHC 9からの多倍長整数( `Integer` 型)のサポートについて。\nghc-bignumというパッケージで内部表現を統一した結果、新しい実装が劇的に作りやすくなったそうです（GHCの作者とかがうれしい）。\nPure Haskellな多倍長整数であるinteger-simpleもそれに合わせて書き換えられ（パッケージの名前も変わる？）、大幅に高速化できた、とのこと。\n<https://iohk.io/en/blog/posts/2020/07/28/improving-haskells-big-numbers-support/>",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1596780114.062800",
        "text": "integer-simpleは内部表現が `[Word]` 風のデータ構造だったのが新しいpure Haskellによる実装では（これまでのinteger-gmpと同様） `ByteArray#` ベースになってますし、integer-simpleは書き換えられたというよりは廃止されて置き換えられたと言った方が適切かと思います。",
        "user": "UGM9F7XQS",
        "type": "message"
    },
    {
        "ts": "1596780312.066200",
        "text": "私が絶賛作成中の浮動小数点数パッケージでも `Integer` の内部表現や内部的な関数に触れられると嬉しいので、ghc-bignum対応を行っています。テストするには自分でGHCをビルドするところから始めないといけないのが辛いところです。 <https://github.com/minoki/haskell-floating-point/blob/%E4%B8%BB/fp-ieee/src/Numeric/Floating/IEEE/Internal/IntegerInternals.hs|https://github.com/minoki/haskell-floating-point/blob/主/fp-ieee/src/Numeric/Floating/IEEE/Internal/IntegerInternals.hs>",
        "user": "UGM9F7XQS",
        "type": "message"
    },
    {
        "ts": "1596785018.067200",
        "text": "bytestring-0.10.12.0がリリースされました。罠として悪名高いIsString ByteStringインスタンスに注意書きが入っていますね　<http://hackage.haskell.org/package/bytestring-0.10.12.0/docs/Data-ByteString.html#t:ByteString>",
        "user": "U4KUNQF9N",
        "type": "message"
    },
    {
        "ts": "1596794402.068900",
        "text": "いっそのこと `IsString ByteString` は削除してしまっても良いのではないかというのは日本人的感覚なのでしょうかね\nRustだとバイトリテラルは別で `b\"hoge\"` みたいに書きますね",
        "user": "U57CUMWQ6",
        "type": "message"
    },
    {
        "ts": "1596797274.069200",
        "text": "「主」",
        "user": "U4L0B71L1",
        "type": "message"
    }
]