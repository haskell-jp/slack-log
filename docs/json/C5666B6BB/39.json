[
    {
        "ts": "1548482409.286000",
        "text": "<@UFP82PUF3> has joined the channel",
        "user": "UFP82PUF3",
        "type": "message"
    },
    {
        "ts": "1548483818.293400",
        "text": "（もくもく会の中でも相談したが、知見として投稿）\nある型を複数のMonadReaderのインスタンスにできないことで、設計上困っています。\nシチュエーションとしては、Xはフレームワークが提供している型で、Yはユーザーが拡張した型、という状況です。\n何かしらアドバイスいただけると嬉しいです。\n```\nnewtype X a = X {unX = ReaderT A IO a}\n deriving\n (MonadReader A)\n\nnewtype Y a = Y {unY = ReaderT B X a}\n deriving\n (\n  --MonadReader A -- 複数のMonadReaderにはできない\n  --MonadReader B\n )\n\nclass MonadReader A =&gt; C1 where ...\nclass MonadReader B =&gt; C2 where ...\n-- YをMonadReader A,Bどちらを要求するコンテキスト下でも使いたい。\n```",
        "user": "U59TQ3MJ9",
        "type": "message"
    },
    {
        "ts": "1548483826.293500",
        "text": "<@U4LGTMTMK> さんから`capability`を使って解決できるのではと教えていただきました。 <https://www.tweag.io/posts/2018-10-04-capability.html>",
        "user": "U59TQ3MJ9",
        "type": "message"
    },
    {
        "ts": "1548485221.293900",
        "text": "ぜんぜん解決策じゃないけど、似たような問題に対して fumi さんの extesnible の extensible effects ならフィールドで切り替えれたような",
        "user": "U56L7EVNY",
        "type": "message"
    },
    {
        "ts": "1548485250.294100",
        "text": "違ったかも",
        "user": "U56L7EVNY",
        "type": "message"
    },
    {
        "ts": "1548486720.294400",
        "text": "実際 <https://www.tweag.io/posts/2018-10-04-capability.html> でも最後の方で、free monadやextensible effectsはcapabilityの特殊なバージョンだ、と触れてますね。\n&gt; Another solution to many of the same problems has been known for a while: free monads and extensible effects. As it happens, capability and free monads can be formally compared. In this paper, Mauro Jaskelioff and Russell O'Connor, prove that free monads are a special case of capabilities (it's not phrased in these terms, of course, but that's what the paper amounts to).",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1548487173.294600",
        "text": "状況の限られた方法になりますが、 `MonadReader a =&gt;`  制約の掛かった関数に渡したい、という用途であれば `(-&gt;) a` がMonadReaderになる事が利用できるかもしれません。適当にラムダ式でくるめば型が合うかも",
        "user": "U570660KX",
        "type": "message"
    },
    {
        "ts": "1548488582.294900",
        "text": "許容解かどうか分かりませんが，\n\n```\nnewtype YA a = YA (Y a) deriving (MonadReader A)\nnewtype YB a = YB (Y a) deriving (MonadReader B)\n\naskA = coerce (ask @A @YA)\naskB = coerce (ask @B @YB)\n```\n\nみたいなのでもいけると思いますね．この解決策がまさに `capability` なので，そっちを使える状況ならそっちを使う方がいいと思いますが",
        "user": "U57D08Z9U",
        "type": "message"
    },
    {
        "ts": "1548595286.296400",
        "text": "素朴な質問なのですが、Haskellって難易度的には高い方なのでしょうか？できない自分が心配です。",
        "user": "UFDKZJBLK",
        "type": "message"
    },
    {
        "ts": "1548596522.302100",
        "text": "ここのサイトで， Haskell は総じて下から数えて数番目にいるので，難しい方とは思いますね．\n<https://www.quora.com/What-is-a-list-of-programming-languages-ordered-from-easiest-to-hardest-to-learn>\n\n個人的にも，難しい方だと思います．ただ，他のプログラミング言語も同程度には覚えることが多いので，そこまで大きな差ではないとは思います．ただ，多くの場合参考文献がプログラミング初心者を想定していないので，その点ではCやJavaなどに(学習環境的に)劣ると思いますね．",
        "user": "U57D08Z9U",
        "type": "message"
    },
    {
        "ts": "1548598968.304800",
        "text": "ありがとうございます:blush:そんなに難しかったんですね:sweat_smile:自分全く知らなかった笑笑",
        "user": "UFDKZJBLK",
        "type": "message"
    },
    {
        "ts": "1548663193.305800",
        "text": "難しいけど、習得すれば必ず役に立つので頑張って！",
        "user": "U7Z4F723Z",
        "type": "message"
    },
    {
        "ts": "1548664670.306100",
        "text": "<@UFPSK1JNL> has joined the channel",
        "user": "UFPSK1JNL",
        "type": "message"
    },
    {
        "ts": "1548731081.317700",
        "text": "インスタンスの意味をネットで調べたのですが、オブジェクト指向時の意味しか記載されてないのですが、haskell上ではどのような意味なのでしょうか？",
        "user": "UFDKZJBLK",
        "type": "message"
    },
    {
        "ts": "1548731291.317800",
        "text": "質問の直接的な答えではないんですけど、そういう時は \"インスタンス haskell\" で調べる方法が便利でいいですよー",
        "user": "U5LEE6C1J",
        "type": "message"
    },
    {
        "ts": "1548731376.318000",
        "text": "それに関連して、「型クラス」も検索ワードに加えると良いかもしれないですね。",
        "user": "U57DM8PBK",
        "type": "message"
    },
    {
        "ts": "1548731430.319000",
        "text": "ありがとうございます:blush:自分「インスタンス 静的型」で調べてました笑笑",
        "user": "UFDKZJBLK",
        "type": "message"
    },
    {
        "ts": "1548731499.319200",
        "text": "もし手元に「すごいhaskell楽しく学ぼう」があるのであれば、索引から調べてみてもいい答えが見つかると思いますよ。",
        "user": "U57DM8PBK",
        "type": "message"
    },
    {
        "ts": "1548732026.321600",
        "text": "それでやってみたところ「振る舞い」と出てきたのですが、haskellでいう振る舞いはどのように動くかという意味でしょうか？",
        "user": "UFDKZJBLK",
        "type": "message"
    },
    {
        "ts": "1548732157.323600",
        "text": "例えば (==) :: (Eq a) =&gt; a -&gt; a-&gt; a -&gt;Bool これ全体でインスタンスということでしょうか？",
        "user": "UFDKZJBLK",
        "type": "message"
    },
    {
        "ts": "1548734536.323800",
        "text": "どんな文章のどこでその「振る舞い」という単語が出てきたのでしょうか？\nHaskellであれほかの言語であれお察しのとおりプログラミングの文脈で「振る舞い」といえば単に「どのように動くか」ぐらいの意味しかないですが...。 :thinking_face:",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1548741168.328700",
        "text": "ありがとうございます。プログラミングとふつーの日常の意味と違う単語とかあるのでもしかしたら違うのかも、、、って言う感じで聞きました！笑笑",
        "user": "UFDKZJBLK",
        "type": "message"
    },
    {
        "ts": "1548742262.329200",
        "text": "私もぐぐってみたら <http://capm-network.com/?tag=Haskell-%E5%9E%8B%E3%82%AF%E3%83%A9%E3%82%B9> というのがヒットしたのですがこれをご覧になったのでしょうか？\nここには「型クラス」が「型のふるまい」だとは書かれていますが「インスタンス」は「型クラスの制約を満たすように定義した型」と書かれていますね。",
        "user": "UF8SE896V",
        "type": "message"
    },
    {
        "ts": "1548742477.329500",
        "text": "まず、単に「インスタンス」というと普通は「何かの実例」という意味だと思います。オブジェクト指向言語ではだいたい「int とか String とかの型にたいして、 1, 2, 3 とか \"foo\" \"bar\" とかが実例」ということになるわけで、つまり値がインスタンスなのですが",
        "user": "UF8SE896V",
        "type": "message"
    },
    {
        "ts": "1548742525.329900",
        "text": "Haskell だと十中八九「型クラスのインスタンス」の話をしているので、レイヤが一個違います。「型クラスとしての Eq, Num に対して、 Int 型や Float 型といったものが実例」です。",
        "user": "UF8SE896V",
        "type": "message"
    },
    {
        "ts": "1548742585.331000",
        "text": "ちょっと突っ込むんですが、「すごい Haskell 楽しく学ぼう！」という本を見たんだと思います",
        "user": "U5LEE6C1J",
        "type": "message"
    },
    {
        "ts": "1548742656.332300",
        "text": ":thinking_face: どうなんでしょうね。「それでやってみたところ「振る舞い」と出てきたのですが」の「それ」がどちらともとれたので私も訪ねたのですが。。。",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1548742766.334100",
        "text": "すごいＨ本を取ってきました。P.27 2.4型クラス初級講座 の冒頭に、「 *型クラス* は、何らかの振る舞いを定義するインターフェイスです。ある型クラスの *インスタンス* である型は、その型クラスが記述する振る舞いを実装します。」と書かれていました",
        "user": "UF8SE896V",
        "type": "message"
    },
    {
        "ts": "1548742807.334700",
        "text": "つまり、インスタンスは振る舞いなのではなくて、振る舞いを「実装」したもの、つまり振る舞いの「実例」ですね。",
        "user": "UF8SE896V",
        "type": "message"
    },
    {
        "ts": "1548742838.335600",
        "text": "あっ、先に書かれてしまいましたがそうです",
        "user": "U5LEE6C1J",
        "type": "message"
    },
    {
        "ts": "1548742854.335800",
        "text": "まあ、「振る舞い」という言葉にまどわされず、ありのまま「型クラス」と「インスタンス」をいろいろ触ってみて体得したほうがいいと思います…。",
        "user": "UF8SE896V",
        "type": "message"
    },
    {
        "ts": "1548743227.336200",
        "text": "Haskell が難しい言語というのは、「欧米人にとって日本語が難しい」みたいな感じなんじゃないかなあと思っています。他の多くのプログラミング言語はお互いに似ているところが多いので一個覚えれば次が楽な傾向があると思うのですが、 Haskell はそれらとはだいぶ違う発想が必要になるので…。\nでも、本当に一個目のプログラミング言語として覚える際に特別難しいかというと、そうでもないような気がしています。",
        "user": "UF8SE896V",
        "type": "message"
    },
    {
        "ts": "1548743397.336400",
        "text": "ただ、最近の GHC 拡張の世界は難しいです^^;私ののーみそは Haskell98 Language Report に毛が生えた程度の水準で止まっています^^;",
        "user": "UF8SE896V",
        "type": "message"
    },
    {
        "ts": "1548743726.336900",
        "text": "さらっとしか書かれてないので読み落としがちなのかもしれないけど、型クラスのインスタンスは「型」である、というところが最重要ポイントですよね",
        "user": "UF8SE896V",
        "type": "message"
    },
    {
        "ts": "1548743846.337100",
        "text": "オブジェクト指向ではクラス（＝型）のインスタンスが値、\nHaskellの型クラスは「型クラス」のインスタンスが型、\nなので一個ずれている、という。",
        "user": "UF8SE896V",
        "type": "message"
    },
    {
        "ts": "1548744131.341300",
        "text": "型クラスの実例が型、型の実例が値、というわけなので、この点をもって、「Haskell の型クラスは、あえていうならオブジェクト指向のインタフェースみたいなものだ」という説明をときどき見る気がしますね。",
        "user": "UF8SE896V",
        "type": "message"
    },
    {
        "ts": "1548744173.341800",
        "text": "ああー！！ その通り！ オブジェクト指向のインスタンスは複数あることもあるんですが、ある文脈において型クラスのインスタンスは一つの型に対して一つしかないんですよね",
        "user": "U5LEE6C1J",
        "type": "message"
    },
    {
        "ts": "1548744782.346200",
        "text": "内部レベルでは型クラスが型だったりインスタンスは値だったりするので、ちょっと混乱してしまったんですが、クラスがそれぞれの値に対してインスタンスを作るのに対して、型クラスがそれぞれの型に対してインスタンスを作るという意味では、そう見れますね",
        "user": "U5LEE6C1J",
        "type": "message"
    },
    {
        "ts": "1548745221.346400",
        "text": "<http://capm-network.com/?tag=Haskell-%E5%9E%8B%E3%82%AF%E3%83%A9%E3%82%B9> 言い方は悪いですが、ここに書かれている内容はまったくのデタラメであることを付け加えておきます。ほぼすべての記述が間違いなので忘れましょう",
        "user": "U4KUNQF9N",
        "type": "message"
    },
    {
        "ts": "1548745351.347000",
        "text": "<@UFR40Q0U9> has joined the channel",
        "user": "UFR40Q0U9",
        "type": "message"
    },
    {
        "ts": "1548746860.347700",
        "text": "否定するならもうちょっと丁寧にやりませんか。。。\n確かに「Interfaceや抽象クラスに相当します」とか「クラスの実装（Implement）に相当します 」とか「show関数やprint関数は、Showのインスタンスです」といった表現はいかがなものかと思いますが、（言葉遣いの厳密さに目をつむって）ざっくりとした理解するには悪くないんじゃないかと思いますが...。",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1548747200.347900",
        "text": "特に「型クラスとは、型の振る舞いを定義するものです。 」とか「インスタンスとは、型クラスの制約を満たすように定義した型のことです。 」なんてすごいH本の記述と特に矛盾しない（参考にした？）ですし、「ほぼすべての記述が間違い」なんて言ってしまっては混乱を招くのでは...",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1548747666.348300",
        "text": "私もいくぶんそう思うのですが、「型クラスとは型の振る舞いを *定義* しているというべきなのだろうか？」とか「インスタンスとは型クラスの *制約* を満たすように…」と書いていいものだろうか？というあたりも気になります。まあその部分だけ見ると ~間違いとは~ 間違いでないとは 言えなくもないのですが、定義という用語や制約という用語をこの説明文中で安易に日常用語の意味で使うのはどうなのかなあ、と…",
        "user": "UF8SE896V",
        "type": "message"
    },
    {
        "ts": "1548748225.348600",
        "text": "私が気になったのは、上に加えて「受け取りデータに対する実装」「等価性検査の型」「Showのインスタンスは、文字列表現を返します。」「型クラスの文脈での振る舞い」や、下の「条件式」などですね。全ての節に誤りが含まれているといえるように思えます。\n\n```\nclass 型クラス 型 where\n　条件式\n\ninstance 型クラス 型 where\n　条件式\n```",
        "user": "U5LEE6C1J",
        "type": "message"
    },
    {
        "ts": "1548748439.349200",
        "text": "↑日本語おかしかったので修正しました^^;",
        "user": "UF8SE896V",
        "type": "message"
    },
    {
        "ts": "1548749004.351700",
        "text": "Haskell の文書をみてたら、何か所かで wurble という関数名とかファイル名が例に出てきたのですが（ <https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#visible-type-application> とか <https://downloads.haskell.org/~ghc/master/users-guide/separate_compilation.html#redirecting-the-compilation-output-s> とか）、これ foo, bar, baz と同列の「意味のない文字列を名称に使ってるだけ」と思っていいのですかねえ… 意味を調べても <https://en.oxforddictionaries.com/search?filter=dictionary&amp;query=wurble> こんな感じですし…",
        "user": "UF8SE896V",
        "type": "message"
    },
    {
        "ts": "1548749242.352000",
        "text": "<https://stooryduster.co.uk/scottish-words-glossary/words-w.htm> をみると crawl forward like a commando sneaking up through the undergrowth （這いよる、っていう感じ？）の意味が書いてるんで、 Glasgow あたりでの方言なんでしょうかねえ",
        "user": "UF8SE896V",
        "type": "message"
    },
    {
        "ts": "1548749502.352800",
        "text": "画像検索してみたら出てきた <https://www.pinterest.jp/pin/558094578795127725/>\nまぁまぁかわいいですな。 :bear:",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1548749684.353400",
        "text": "「イギリス圏では加えて「wibble」「wobble」「wubble」「flob」等も用いられる」<https://ja.wikipedia.org/wiki/%E3%83%A1%E3%82%BF%E6%A7%8B%E6%96%87%E5%A4%89%E6%95%B0#foo%E3%81%A8bar>",
        "user": "U7155GPR9",
        "type": "message"
    },
    {
        "ts": "1548749732.354100",
        "text": "おしい",
        "user": "U7155GPR9",
        "type": "message"
    }
]