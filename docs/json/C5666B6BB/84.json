[
    {
        "ts": "1588315812.091400",
        "text": "詳しい事情はhaskell-cafeあたりで何度か触れられていると思います（自分もぶっちゃけよく調べてない...\n<https://takenobu-hs.github.io/haskell-wiki-search/?siteview=full> からチェックを入れて検索してみてください。",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1588315838.091600",
        "text": "みてみます！\nありがとうございます",
        "user": "ULTBB86UC",
        "type": "message"
    },
    {
        "ts": "1588315860.091800",
        "text": "あと、base-4.13以降のドキュメントについては <https://wiki.haskell.jp/Hikers%20Guide%20to%20Haskell#base-4.13%E4%BB%A5%E9%99%8D%E3%81%AE%E3%83%89%E3%82%AD%E3%83%A5%E3%83%A1%E3%83%B3%E3%83%88> でも触れているとおり、GHC添付のドキュメントを探れ、とのこと。",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1588315927.092000",
        "text": "ｵｫ…知らなかった…\nありがとうございます\nちょっとわかりづらい…",
        "user": "ULTBB86UC",
        "type": "message"
    },
    {
        "ts": "1588396588.092400",
        "text": "<@U012WHCBRSR> has joined the channel",
        "user": "U012WHCBRSR",
        "type": "message"
    },
    {
        "ts": "1588400929.092700",
        "text": "<@U012R7RMZB8> has joined the channel",
        "user": "U012R7RMZB8",
        "type": "message"
    },
    {
        "ts": "1588404058.093000",
        "text": "<@UEC0PN1PA> has joined the channel",
        "user": "UEC0PN1PA",
        "type": "message"
    },
    {
        "ts": "1588404290.093200",
        "text": "質問させていただきます.\nこのプログラムのlikeReturn に相当するような処理は実現可能でしょうか?\n\nST s (STArray s a b) を引数にとって, &lt;ST action&gt; をその内部に適用しつつ,runSTをその内部で利用したいというかなりわがままな利用ができたら色々とキレイに書けるので試行錯誤しています.\n\n&gt;  update i test = readArray  test i &gt;&gt;= writeArray (_test test) (i + 1) \nの形にしたり,\n&gt; runSTTest :: STTest s -&gt; Int -&gt; ST s Int\nにするとシンタックスが手続き型っぽくなるので,できないものかと.\n\nunsafePerformIOを使ってunsafeRunSTを作ればできそうですが悩みどころです.\n\n現行で発生するエラーは下記になります\n\n&gt;  *• Couldn’t match type ‘s1’ with ‘s’*\n&gt;    *‘s1’ is a rigid type variable bound by*\n&gt;     *the type signature for:*\n&gt;      *likeReturn :: Test s -&gt; STTest s*\n&gt;     *at /Users/akagi/Documents/Programs/Haskell/VirtualEconomy/src/Sample.hs:26:1-36*\n&gt;    *‘s’ is a rigid type variable bound by*\n&gt;     *the type signature for:*\n&gt;      *likeReturn :: forall s. Test s -&gt; STTest s*\n&gt;     *at /Users/akagi/Documents/Programs/Haskell/VirtualEconomy/src/Sample.hs:25:1-42*\n&gt;    *Expected type: ST s1 (Test s1)*\n&gt;     *Actual type: ST s1 (Test s)*\n&gt;   *• In the expression: ST (\\ s -&gt; (# s, x #))*\n&gt;    *In an equation for ‘likeReturn’:*\n&gt;      *likeReturn x = ST (\\ s -&gt; (# s, x #))*\n&gt;   *• Relevant bindings include*\n&gt;     *x :: Test s*\n&gt;      *(bound at /Users/akagi/Documents/Programs/Haskell/VirtualEconomy/src/Sample.hs:26:12)*\n&gt;     *likeReturn :: Test s -&gt; STTest s*\n&gt;      *(bound at /Users/akagi/Documents/Programs/Haskell/VirtualEconomy/src/Sample.hs:26:1)*",
        "user": "UEC0PN1PA",
        "type": "message"
    },
    {
        "ts": "1588409583.094600",
        "text": "質問の意図が取れているか自信がないのですが、\n• runSTTestが `ST s Int` ではなく `Int` を返せば、 `runSTTest ... &gt;&gt;= f` ではなく `f (runSTTest ...)` と書けるので恰好いい\n• なので、runSTTestの中でrunSTを呼び、外側のSTに紐づいたSTMArrayを参照したい\nというモチベーションでしょうか。内側にいるとはいえ、STのRankN多相で守られた配列を参照しようとしている事になるので、無理っぽい気がします",
        "user": "U570660KX",
        "type": "message"
    },
    {
        "ts": "1588409638.094800",
        "text": "```type STTest s = forall s. ST s (Test s)```\nこの宣言ですが、右辺のforall sで新しいスコープの変数sが定義されてしまって、左辺のsは使用されないのでは。",
        "user": "U570660KX",
        "type": "message"
    },
    {
        "ts": "1588410842.095100",
        "text": "ご返信ありがとうございます.\n意図はそのとおりで,単に見た目が数式のとおりになるので,という話なのですが,難しそうですね.\n\nたしかに,左辺のsは使用しませんね.左辺のsを消すと\n\n&gt;  forall s. Test s -&gt; STTest\nとなり\n動かない理由が直感的にもわかりやすいですね.\n\n実際のコードでは,複数の時系列変数が大量につまったTest sのようなものを引き連れているので, わかりやすさと更新の速さを両立させたいですが,なかなかうまく行きません.",
        "user": "UEC0PN1PA",
        "type": "message"
    },
    {
        "ts": "1588411225.095500",
        "text": "更新を伴う大量のデータを引数に引き回す際にもともとはMapをつかっていたものをSTに変更しようとしていましたがrunSTをかませるとコードがかなり複雑になってしますので,難しいところです",
        "user": "UEC0PN1PA",
        "type": "message"
    },
    {
        "ts": "1588456424.095900",
        "text": "<@U012YCXSY90> has joined the channel",
        "user": "U012YCXSY90",
        "type": "message"
    },
    {
        "ts": "1588477001.096100",
        "text": "純粋に書いたコードをMutableに直すのが難しいのは、Haskellの泣き所の一つですね（他の言語でも難しいのは変わりないけれど、他の言語だとそもそも最初からMutableで書くので手間が発生しない）\n元の問題の解決方法としてはunsafe系しかなくて、具体的には `unsafeIOToST . unsafeSTToIO` でsの型を強引に合わせられるので、それを使えばなんとか……という感じです",
        "user": "U570660KX",
        "type": "message"
    },
    {
        "ts": "1588647485.096500",
        "text": "<@U0131S18PGT> has joined the channel",
        "user": "U0131S18PGT",
        "type": "message"
    },
    {
        "ts": "1588678058.096800",
        "text": "質問させていただきます.\ntruncateにNaNをくわせると,以下のような挙動になるのは,仕様ですか?\n\n&gt; &gt;&gt;&gt; truncate 1.1\n&gt; 1\n&gt; &gt;&gt;&gt; truncate (1/0)\n&gt; 179769313486231590772930519078902473361797697894230657273430081157732675805500963132708477322407536021120113879871393357658789768814416622492847430639474124377767893424865485276302219601246094119453082952085005768838150682342462881473913110540827237163350510684586298239947245938479716304835356329624224137216 \n&gt; &gt;&gt;&gt; truncate $ log $ (-1 :: Double)\n&gt; -269653970229347386159395778618353710042696546841345985910145121736599013708251444699062715983611304031680170819807090036488184653221624933739271145959211186566651840137298227914453329401869141179179624428127508653257226023513694322210869665811240855745025766026879447359920868907719574457253034494436336205824\nこの挙動のせいで,ループが無限に終わらないのに気づくのに一日費やしました,,笑",
        "user": "UEC0PN1PA",
        "type": "message"
    },
    {
        "ts": "1588678375.097800",
        "text": "全体の処理を早くしようと,STに変更したり色々していたのですが,先程新しくした質問の方が原因でした.\n実時間をとってloop回していたのですが,処理が重くなるとtruncateにNaNが回る仕様になっていて,無限に処理が終わらないという...",
        "user": "UEC0PN1PA",
        "type": "message"
    },
    {
        "ts": "1588678565.098200",
        "text": "質問の答えじゃなくてすみません、 `(1/0)` は `NaN` じゃなくて `Infinity` かと。",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1588678619.098400",
        "text": "あ,そうですね,質問文が InfinityやNaNでした.ご指摘ありがとうございます.",
        "user": "UEC0PN1PA",
        "type": "message"
    },
    {
        "ts": "1588679210.098700",
        "text": "で、これは推測ですが、Haskellの仕様と言うよりは、浮動小数点演算の仕様な気がしますね...\nC言語で近いことをやった場合の結果: <https://ideone.com/hQYKZG>",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1588679413.099000",
        "text": "さらに試していて気づいたんですが、結果を `Int` にしていると `0` が返るみたいです（でもこれも環境依存かもだし、あまり期待しない方がいいかも）。\n```&gt; truncate  (0.0 / 0.0) :: Int\n0```",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1588679735.099200",
        "text": "なるほど.\n取りあえずのところ,NaNやInfinityを渡していたのがまずいので,\n&gt; truncateSafe x\n&gt;  | isNaN x =\n&gt;  | isInfty x =\n的な対処でやり過ごしますが,\nこれがあるあるではないのなら結構ハマる人多そうに感じます.",
        "user": "UEC0PN1PA",
        "type": "message"
    },
    {
        "ts": "1588679744.099400",
        "text": "ご教示ありがとうございます.",
        "user": "UEC0PN1PA",
        "type": "message"
    },
    {
        "ts": "1588679940.099700",
        "text": "なるほど :bulb: 確かに見落としがちな話だと思うので、パッケージ :package: にしておくと案外受け入れてもらえるかも知れませんね！",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1588680010.099900",
        "text": "今調べてみるとceiling , floor, roundでも同様でしたね.",
        "user": "UEC0PN1PA",
        "type": "message"
    },
    {
        "ts": "1588680240.100300",
        "text": "実装をみるとproperFractionのせいのようです.\n<http://www.informatik.uni-bremen.de/~clueth/docs/ZVON/Outputprelude/RealFrac_c.html>",
        "user": "UEC0PN1PA",
        "type": "message"
    },
    {
        "ts": "1588680599.100600",
        "text": "ちなみに toRational や realToFrac にも同様の問題があります",
        "user": "UGM9F7XQS",
        "type": "message"
    },
    {
        "ts": "1588680688.101100",
        "text": "さすが、地雷踏み済みか... :open_mouth:",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1588681538.101300",
        "text": "Float と Double 間の realToFrac は最適化の有無（rewrite rule発動の有無）でNaNやInfに関する挙動が変わるという素敵仕様です:sob:",
        "user": "UGM9F7XQS",
        "type": "message"
    },
    {
        "ts": "1588687918.102100",
        "text": "STアクションAを引数にとってその内部でAをrunSTするとそれぞれが独立に評価されるので同じアクションが何度もゼロから評価されものすごいコストになることに気が付きました,\nいずれにせよこれをやるのはコストが高すぎるようです..",
        "user": "UEC0PN1PA",
        "type": "message"
    },
    {
        "ts": "1588690622.102300",
        "text": "&gt;  a .+ b = (+) &lt;$&gt; a &lt;*&gt; b\nのような形で中置演算子を定義していけば,そのまま内部で使えそうだという方法が結構ニーズに近いものだったかもしれません",
        "user": "UEC0PN1PA",
        "type": "message"
    },
    {
        "ts": "1588700153.102600",
        "text": "<@U012NFZ34S3> has joined the channel",
        "user": "U012NFZ34S3",
        "type": "message"
    },
    {
        "ts": "1588998238.103100",
        "text": "<@U013HUC1F28> has joined the channel",
        "user": "U013HUC1F28",
        "type": "message"
    },
    {
        "ts": "1589085885.105000",
        "text": "`vector` のbugfixを書いているんですが、 `INLINE` 関数がloopbreakerになってしまっているかってどうやって検証するんでしたっけ？",
        "user": "UL1HFJATE",
        "type": "message"
    },
    {
        "ts": "1589108590.105300",
        "text": "<@U0142C5JXHN> has joined the channel",
        "user": "U0142C5JXHN",
        "type": "message"
    },
    {
        "ts": "1589111553.107400",
        "text": "-dcore-lint でINLINEプラグマが付いた関数がloop breakerになると警告が出たような気がします",
        "user": "U4M9NJ7QE",
        "type": "message"
    },
    {
        "ts": "1589111888.110300",
        "text": "単純にある関数がloop breakerか否かを調べるだけならCoreを出力してOcc=Loopbreakerみたいな情報が付いてるかでチェックできます",
        "user": "U4M9NJ7QE",
        "type": "message"
    },
    {
        "ts": "1589119549.111200",
        "text": "なるほど。つまり、 `-ddump-ds` とかですね？",
        "user": "UL1HFJATE",
        "type": "message"
    }
]