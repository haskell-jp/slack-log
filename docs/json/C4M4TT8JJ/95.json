[
    {
        "ts": "1637028445.091600",
        "text": "macOSのFirefoxもChromeも、GHC 9.0.1のソースファイルが「危険だ！」と言ってダウンロードさせてくれない。。\n<https://downloads.haskell.org/ghc/9.0.1/ghc-9.0.1-src.tar.xz>",
        "user": "U56MBRKR9",
        "type": "message"
    },
    {
        "ts": "1637028524.092300",
        "text": "手元のWindowsのFirefoxでも同じことが起きました :cold_sweat:",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1637028729.092700",
        "text": "ドメインが乗っ取られているかとか、判断できないなぁ。",
        "user": "U56MBRKR9",
        "type": "message"
    },
    {
        "ts": "1637028959.093000",
        "text": "さっと中身を覗いた感じは普通なんですけどね...",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1637063234.095600",
        "text": "ゲッター・セッターの関係においてDistributiveと対をなす構造、名付けてLogisticを発見したので、ライブラリとしてリリースしました。data V3 a = V3 a a aのようなデータ型からジェネリクスでインスタンスを導出し、let V3 f g h = settersとすると、各フィールドを更新する関数f, g, hが得られます。考察対象としても面白いですが実用性もありそうです <https://hackage.haskell.org/package/data-functor-logistic>",
        "user": "U4KUNQF9N",
        "type": "message"
    },
    {
        "ts": "1637068960.101000",
        "text": "<https://zenn.dev/mod_poppo/articles/ghc-8-10-and-9-0> 今更感がありますが書いてみました。",
        "user": "UGM9F7XQS",
        "type": "message"
    },
    {
        "ts": "1637073393.101900",
        "text": "ありがたやありがたや",
        "user": "U56L7EVNY",
        "type": "message"
    },
    {
        "ts": "1637208670.105000",
        "text": "Hackage の trustee の人だと任意のパッケージのリビジョン上げれるんですね\n<https://hackage.haskell.org/package/Glob-0.10.2/revisions/|https://hackage.haskell.org/package/Glob-0.10.2/revisions/>\n<https://hackage.haskell.org/packages/trustees/|https://hackage.haskell.org/packages/trustees/>",
        "user": "U4L0B71L1",
        "type": "message"
    },
    {
        "ts": "1637239044.106100",
        "text": ":tada: <https://discourse.haskell.org/t/ann-haskell-language-server-1-5-0-release/3683>\n&gt; As we noted in the previous release we have dropped support for ghc versions 8.6.4, 8.10.2, 8.10.3, 8.10.4 in this release \n結構アグレッシブにサポートを切っていく方針なんですね。",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1637250429.107800",
        "text": "&gt; Hackage \nの trustee の人だと任意のパッケージのリビジョン上げれるんですね\n&gt; \n&gt; \n<https://hackage.haskell.org/package/Glob-0.10.2/revisions/|https://hackage.haskell.org/package/Glob-0.10.2/revisions/>\n&gt; \n&gt; \n<https://hackage.haskell.org/packages/trustees/|https://hackage.haskell.org/packages/trustees/>\n私のパッケージも上げられてびっくりしましたねー",
        "user": "U5LEE6C1J",
        "type": "message"
    },
    {
        "ts": "1637286664.109500",
        "text": "GHC 9.0.1 on macOS は、Haskellコードをコンパイルしている途中で刺さることがあります。9.0 の最新のブランチをビルドして使うと再現しないので、9.0.2 で直ると思います。僕のせいで入り込んだ、IO manager のバグも修正されるでしょう。",
        "user": "U56MBRKR9",
        "type": "message"
    },
    {
        "ts": "1637286797.110000",
        "text": "「刺さる」とは？フリーズするってことですか？",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1637287045.110300",
        "text": "<https://qiita.com/t_nakayama0714/items/478a8ed3a9ae143ad854> に用例が。",
        "user": "U578W9676",
        "type": "message"
    },
    {
        "ts": "1637287128.111500",
        "text": "ありがとうございます。知らなかったー",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1637287132.111600",
        "text": "stuck (stickの過去分詞) の訳語だと思いますが",
        "user": "U61BA2X0U",
        "type": "message"
    },
    {
        "ts": "1637287239.112300",
        "text": "「○○がスタックする」なら通じる人は結構いるんじゃないかと",
        "user": "U61BA2X0U",
        "type": "message"
    },
    {
        "ts": "1637287307.113000",
        "text": "「刺さる」は、処理が止まると言う意味です。",
        "user": "U56MBRKR9",
        "type": "message"
    },
    {
        "ts": "1637287320.113300",
        "text": "ネットワーク用語かな？",
        "user": "U56MBRKR9",
        "type": "message"
    },
    {
        "ts": "1637287667.115800",
        "text": "stick が「刺す」とか「刺さる」という意味で、その過去分詞の stuck が「止まる」「にっちもさっちも行かなくなる」という意味で使われている( The car was stuck in the snow. とか)ので、そこから派生したんだと思います。 英語での用例: <https://www.quora.com/Why-does-my-external-drive-get-stuck-on-certain-files-when-Im-backing-stuff-up>",
        "user": "U61BA2X0U",
        "type": "message"
    },
    {
        "ts": "1637287719.116400",
        "text": "ハードディスクが「刺さる」という言いかたもしばしば聞きますよね。",
        "user": "U61BA2X0U",
        "type": "message"
    },
    {
        "ts": "1637287838.118200",
        "text": "そういえばフルスタックエンジニアをfull stuck engineerと綴ってしまって笑いものなった例がありましたね！ :dagger_knife:",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1637288046.119700",
        "text": "システム(プログラミング)側に寄る程よく聞くようになる表現て気もするけど気のせいかもしれない",
        "user": "U5G2BCVBN",
        "type": "message"
    },
    {
        "ts": "1637288291.121200",
        "text": "90年頃（私が学生の頃）には使われていたように思います。「NFSが刺さった‥」みたいなところから覚えました。（助手がWIDEの人だったので）WIDEの人がいい出したのか？と思っていましたが、本当のところはわかりません :slightly_smiling_face:",
        "user": "UMTRA1VHU",
        "type": "message"
    },
    {
        "ts": "1637288720.122100",
        "text": "「通信用語の基礎知識」だと1999年にエントリが作られてますね <https://www.wdic.org/w/WDIC/%E5%88%BA%E3%81%95%E3%82%8B>",
        "user": "U61BA2X0U",
        "type": "message"
    },
    {
        "ts": "1637288997.123100",
        "text": "まさにその用法でWIDE用語集にも載ってます 「NFSサーバがパニックして，lsコマンドが刺さった．」 <http://member.wide.ad.jp/~sano/glossary.html#L11>",
        "user": "U61BA2X0U",
        "type": "message"
    },
    {
        "ts": "1637317607.124900",
        "text": "まだリリースされてないバージョンを依存の上限に指定するの、意味あるのかなあ（と思いながらがっつり削除する PR 作った\n<https://github.com/Deewiant/glob/pull/44>",
        "user": "U4L0B71L1",
        "type": "message"
    },
    {
        "ts": "1637645389.141100",
        "text": "デフォルト値が入ったレコードに必須のフィールドを混ぜるテクニック。ネストした構造にも使える　<https://twitter.com/fumieval/status/1463009297642655746>",
        "user": "U4KUNQF9N",
        "type": "message"
    },
    {
        "ts": "1637749616.142400",
        "text": "<@U02NV1XHYBT> has joined the channel",
        "user": "U02NV1XHYBT",
        "type": "message"
    },
    {
        "ts": "1637972744.144700",
        "text": "今週のHaskell Weeklyから。Maybeやタプルなど既存のstrictじゃないデータ型をラップするだけでStrictにしてくれる魔法のような型を提供してくれるパッケージ。data familyやbidirectional pattern synonymでこれが実現できちゃうとは思わなかった :sugoi:\n<http://h2.jaguarpaw.co.uk/posts/make-invalid-laziness-unrepresentable/>",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1638084178.145700",
        "text": "<@U02NV8V2EEQ> has joined the channel",
        "user": "U02NV8V2EEQ",
        "type": "message"
    },
    {
        "ts": "1638096710.146000",
        "text": "Haskellは出てこないのですが、数学、グラフィクス、ネットワーク、ということで、n月刊ラムダノートの新刊です。\n<https://www.lambdanote.com/collections/n/products/nmonthly-vol-3-no-2-2021>",
        "user": "U55V441FS",
        "type": "message"
    },
    {
        "ts": "1638180592.149900",
        "text": "書き込みにサーバーを必要としないのが特徴であるKafkaライクなシステム、franz (see also: <https://fumieval.hatenablog.com/entry/2019/09/07/115437|過去の解説記事>)を久々に更新しました。接続が切れたときに再接続したり、サーバーなしでローカルのデータを読み込んだりと新機能が盛りだくさんです <https://hackage.haskell.org/package/franz-0.5>",
        "user": "U4KUNQF9N",
        "type": "message"
    },
    {
        "ts": "1638198767.153900",
        "text": "Web Authenticationという、指紋認証、USBキー、あるいはOS組み込みの認証などをWebで扱うためのインターフェイスがあり、最近はHaskellでサーバーサイド向けの実装を進めていました。まだ利用例も資料も少なく手探りの状態ですが、waiのアプリケーションなら簡単に導入できるミドルウェアも作ったので、おもちゃとしてでも使っていただけると泣いて喜びます　<https://github.com/fumieval/webauthn/blob/master/wai-middleware-webauthn/demo/Main.hs>",
        "user": "U4KUNQF9N",
        "type": "message"
    },
    {
        "ts": "1638260974.162600",
        "text": "monad-skeleton-0.2をリリースしました。Freeモナド、あるいはOperationalモナドと呼ばれる、命令の並びと実際の挙動を分離する――つまり、プログラムの骨と肉を分ける構造を提供するライブラリです。ナイーブな実装は&gt;&gt;=が遅い、CPS版は命令を一つずつ取り出せないという欠点を解決するために提案されたreflection without remorse(キューを使って命令を格納する)を実装しており、実装の簡潔さとパフォーマンスが売りです。応用例として、extensibleと組み合わせて拡張可能作用を実装した<https://hackage.haskell.org/package/extensible-skeleton|extensible-skeleton>があります　<https://hackage.haskell.org/package/monad-skeleton-0.2>",
        "user": "U4KUNQF9N",
        "type": "message"
    },
    {
        "ts": "1638360236.167100",
        "text": "式で記述したバイナリデータをByteStringにしたり、ハンドルやソケットに書き込んだりするライブラリmasonのGHC 9.2.1対応版をリリースしました。高機能・高パフォーマンスが売りでしたが、GHC 9.2.1では一部のベンチマークの結果が悪化し、標準のビルダーと同等になってしまいました。<https://www.haskell.org/ghc/blog/20210607-the-keepAlive-story.html|keepAlive#> のせいか、はたまたByteStringのコンストラクタが変わったせいかと色々検証してみましたが原因はわからずじまいでした……　<https://hackage.haskell.org/package/mason-0.2.5>",
        "user": "U4KUNQF9N",
        "type": "message"
    },
    {
        "ts": "1638505644.168000",
        "text": "最近この件で気づいたんですけど、依存パッケージの上限をつけないままアップロードしていると、Hackageでドキュメントが生成されない原因になるみたいで悩ましいですね。\n（例えば <https://hackage.haskell.org/package/autodocodec> の<https://hackage.haskell.org/package/autodocodec-0.0.0.0/reports/2|build log>を見るとaeson 2.0に対応できてないために失敗している）\nもういっそCargoやnpmみたいに半自動で上限つけてほしい...（そうするとまた更新が面倒という問題に戻るんでしょうけど...",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1638534487.170000",
        "text": "<https://qiita.com/advent-calendar/2021/haskell|Haskell Advent Calendar 2021> 3日目に飛び入りで新作を発表しました　<https://fumieval.hatenablog.com/entry/2021/12/03/212534>",
        "user": "U4KUNQF9N",
        "type": "message"
    },
    {
        "ts": "1638601412.170600",
        "text": "<@U02PHQ2D9D0> has joined the channel",
        "user": "U02PHQ2D9D0",
        "type": "message"
    },
    {
        "ts": "1638711222.172600",
        "text": "<@U02P4JW563Z> has joined the channel",
        "user": "U02P4JW563Z",
        "type": "message"
    },
    {
        "ts": "1638792128.195500",
        "text": "<@U02PMKJTR8S> has joined the channel",
        "user": "U02PMKJTR8S",
        "type": "message"
    },
    {
        "ts": "1639026274.202200",
        "text": "大学のサークルのアドベントカレンダーの企画で記事書きました おてやわらかに <https://qiita.com/minerva1129/items/d2a6380b5e9b0d396f49>",
        "user": "U02NV1XHYBT",
        "type": "message"
    },
    {
        "ts": "1639055552.203500",
        "text": "Advent Calendar の(もう過ぎた)空いている日は、ポエムで埋めてもいいんですよね？",
        "user": "U56MBRKR9",
        "type": "message"
    },
    {
        "ts": "1639057051.204200",
        "text": "2日目を埋めました。\n<https://kazu-yamamoto.hatenablog.jp/entry/2021/12/09/223621>",
        "user": "U56MBRKR9",
        "type": "message"
    },
    {
        "ts": "1639091966.206000",
        "text": "今週のHaskell Weeklyから <https://np.reddit.com/r/haskell/comments/r82ji7/christmas_of_code_haskell_for_mobile_a_3000_grant/>\n「HaskellをコアにしたAndroid・iOSアプリを作るテンプレート」をOSSとして作る人を募集。",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1639391797.212500",
        "text": "aeson ver 2.0に対応しないといけないし複数のGHCバージョンに対応しないとなあって色々調べてたら\nhaskell-ciというCI生成ツールがあることをさっき遅まきながら知って、\nGitHub Actionsにちゃんとキャッシュ含めて対応してるけどCircleCIに対応してないからCircleCI派やめようか悩み中です",
        "user": "U57CUMWQ6",
        "type": "message"
    },
    {
        "ts": "1639396854.212900",
        "text": "これですかね <https://github.com/haskell-CI/haskell-ci>",
        "user": "U4L0B71L1",
        "type": "message"
    },
    {
        "ts": "1639397428.213100",
        "text": "それですねえ(リンク貼ったほうが良かったな)\nプロジェクト巡ってたら見つけてCircleCIサポート追加するかGitHub Actionsに移行するか悩み中ですね\n末端のアプリケーションならGHCのバージョンなんてその時一つで良いんですが、OSSライブラリ開発してるとなると複数テストが必要ですからねえ",
        "user": "U57CUMWQ6",
        "type": "message"
    },
    {
        "ts": "1639413483.213400",
        "text": "<https://github.com/tweag/rules_haskell> の修正をしてて、ちょーど同じ問題に当たりました :innocent:\nただ、1週間ぐらい前にちょーど修正コミットが master には入ったようです :relieved:\n<https://gitlab.haskell.org/ghc/ghc/-/commit/fab2579e63bb317d4c266d7b949cf96ad6e5d17b>\n（頑張ってパッチを当ててみます。。。）",
        "user": "U56L7EVNY",
        "type": "message"
    },
    {
        "ts": "1639703712.215900",
        "text": "CI で cabal test を使っていると、テストに失敗したときに、どのテストが失敗したか分からなくて「使えん」と思っていたのだけど、標準出力に表示するオプションがあるんですね。知りませんでした。\n<https://stackoverflow.com/questions/15669867/cabal-test-does-not-print-executable-output>",
        "user": "U56MBRKR9",
        "type": "message"
    },
    {
        "ts": "1639710877.216400",
        "text": "すばらしい。詳しい。\n<https://qiita.com/maton/items/2f2566eb44bdfed9a6e3>",
        "user": "U4LGTMTMK",
        "type": "message"
    }
]