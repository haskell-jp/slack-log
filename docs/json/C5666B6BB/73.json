[
    {
        "ts": "1571060497.020900",
        "text": "<@UPELDRYJJ> has joined the channel",
        "user": "UPELDRYJJ",
        "type": "message"
    },
    {
        "ts": "1571073112.021200",
        "text": "<@UPC9L1C68> has joined the channel",
        "user": "UPC9L1C68",
        "type": "message"
    },
    {
        "ts": "1571110568.021400",
        "text": "ぼくもまったく同じことをしているので気持ちが分かる気がします。実際のソースを追うと勉強しなきゃいけないことが増える、の繰り返しがあって、もともと知りたかったことに素直にたどり着けない。",
        "user": "UKYUFC94P",
        "type": "message"
    },
    {
        "ts": "1571194221.023700",
        "text": "<@UPGMNDPPZ> has joined the channel",
        "user": "UPGMNDPPZ",
        "type": "message"
    },
    {
        "ts": "1571201772.023900",
        "text": "友達はこの記事を読んでStateモナドが理解できたって言ってました。参考程度にはなるかも？\n<http://brandon.si/code/the-state-monad-a-tutorial-for-the-confused/>",
        "user": "U7Z4F723Z",
        "type": "message"
    },
    {
        "ts": "1571208445.024500",
        "text": "一回Stateモナド無しで状態を扱ってみて、Stateが何をやってくれてるかを感じるのも良いかも",
        "user": "UMKGDJ2RZ",
        "type": "message"
    },
    {
        "ts": "1571229221.025400",
        "text": "昔は `cabal-rangefinder` というツールで出来たんですが、メンテ止まってて新しいcabalだと動かなそうです",
        "user": "U570660KX",
        "type": "message"
    },
    {
        "ts": "1571259372.025800",
        "text": "<@UPJ0N5RPH> has joined the channel",
        "user": "UPJ0N5RPH",
        "type": "message"
    },
    {
        "ts": "1571294939.028900",
        "text": "勉強のためにいくつかの基本的な部品を自分でも書いてみているところです。ExceptT の &lt;*&gt; の定義なんですが、Control.Monad.Trans.Except のソース（<http://hackage.haskell.org/package/transformers-0.5.6.2/docs/src/Control.Monad.Trans.Except.html#line-185> ）だと",
        "user": "UKYUFC94P",
        "type": "message"
    },
    {
        "ts": "1571295026.029000",
        "text": "",
        "user": "UKYUFC94P",
        "type": "message"
    },
    {
        "ts": "1571295123.030100",
        "text": "こうなんですが、単に以下でもよさそうに思うんですがどうでしょう。",
        "user": "UKYUFC94P",
        "type": "message"
    },
    {
        "ts": "1571295200.030200",
        "text": "",
        "user": "UKYUFC94P",
        "type": "message"
    },
    {
        "ts": "1571301558.030900",
        "text": "それだと「fがLeftを返した場合にvが実行されない」という挙動を実現できないのではないでしょうか",
        "user": "UGM9F7XQS",
        "type": "message"
    },
    {
        "ts": "1571301886.031100",
        "text": "Data.Either （<http://hackage.haskell.org/package/base-4.12.0.0/docs/src/Data.Either.html#line-149> ）のソースによると",
        "user": "UKYUFC94P",
        "type": "message"
    },
    {
        "ts": "1571301928.031300",
        "text": "Either の &lt;*&gt; はこうなってるようなので、mf が Left e ならそのまま Left e が返るように見えます。",
        "user": "UKYUFC94P",
        "type": "message"
    },
    {
        "ts": "1571302105.031800",
        "text": "vに副作用がなければそれでいいんですが、現実にはvが副作用を持っているかもしれないので、 `mv &lt;- v` が実行される前にLeft eを返す必要があります",
        "user": "UGM9F7XQS",
        "type": "message"
    },
    {
        "ts": "1571302169.032000",
        "text": "なるほど！",
        "user": "UKYUFC94P",
        "type": "message"
    },
    {
        "ts": "1571302330.032200",
        "text": "だからわざわざこう書いてあるわけなんですね…。すごい。ありがとうございます！",
        "user": "UKYUFC94P",
        "type": "message"
    },
    {
        "ts": "1571318262.032800",
        "text": "<@UPH191QVB> has joined the channel",
        "user": "UPH191QVB",
        "type": "message"
    },
    {
        "ts": "1571404278.033600",
        "text": "<@UPJG8R8CV> has joined the channel",
        "user": "UPJG8R8CV",
        "type": "message"
    },
    {
        "ts": "1571487473.034000",
        "text": "かなり初歩的な質問で恐縮なのですが、「データ型」という言葉は「型」という言葉と全く同じ意味だと考えても大丈夫でしょうか？ Haskellの入門書とかだとデータ型という言葉がいきなり登場するので気になってしまって。",
        "user": "U90TTJDB7",
        "type": "message"
    },
    {
        "ts": "1571526549.034100",
        "text": "はい。問題ないと思います。",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1571571555.034400",
        "text": "<@UP77BA75Y> has joined the channel",
        "user": "UP77BA75Y",
        "type": "message"
    },
    {
        "ts": "1571619157.034600",
        "text": "ありがとうございます!",
        "user": "U90TTJDB7",
        "type": "message"
    },
    {
        "ts": "1571647116.035000",
        "text": "<@UPNPJJNDC> has joined the channel",
        "user": "UPNPJJNDC",
        "type": "message"
    },
    {
        "ts": "1571691321.035200",
        "text": "ちょっと疑問なのですが，data typeってもちろん「型」の意味でも使われていると思うのですが， `data` type，すなわち代数的データ型の意味で使われていることないです？ <https://gitlab.haskell.org/ghc/ghc/wikis/unlifted-data-types> とかその例だと思うんですよね．",
        "user": "UL1HFJATE",
        "type": "message"
    },
    {
        "ts": "1571735651.035800",
        "text": "<@UPMKSF5M2> has joined the channel",
        "user": "UPMKSF5M2",
        "type": "message"
    },
    {
        "ts": "1571874827.038500",
        "text": "最近のcabalで、stackのglobal project相当のこと、つまり、cabal.projectなどがないディレクトリーでcabal v2-installを実行することはできますか？\nちょっとパッケージを試すのに逐一プロジェクトを作るのも不便だな、と思いまして。",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1571875161.038700",
        "text": "3.0では実行ファイルはcabal installで、ライブラリはcabal install --libでglobal project相当の場所にインストール出来ます。",
        "user": "U4M9NJ7QE",
        "type": "message"
    },
    {
        "ts": "1571875235.039000",
        "text": "ちなみにreplだけならcabal repl -b package1 -b package2みたいに依存関係をその場で指定してreplをスタートできます",
        "user": "U4M9NJ7QE",
        "type": "message"
    },
    {
        "ts": "1571875622.039400",
        "text": "できました！ありがとうございます！",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1571875966.039600",
        "text": "捕捉: cabal 2.4でも `v2-install --lib package` や `v2-repl -b package` でできました。",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1572030294.040100",
        "text": "<@UPKU612NM> has joined the channel",
        "user": "UPKU612NM",
        "type": "message"
    },
    {
        "ts": "1572075693.040500",
        "text": "Apache-2.0 を使っているライブラリって見たことがありますか？ 使おうと思っているんですが",
        "user": "U5LEE6C1J",
        "type": "message"
    },
    {
        "ts": "1572075745.040600",
        "text": "ライセンスの話ですよね。\n:raised_hand: 私が個人で作るときは基本Apache-2.0にしてます。",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1572135510.041100",
        "text": "<@UPH4N6YBV> has joined the channel",
        "user": "UPH4N6YBV",
        "type": "message"
    },
    {
        "ts": "1572169514.041400",
        "text": "<@UPWJ8R9ST> has joined the channel",
        "user": "UPWJ8R9ST",
        "type": "message"
    },
    {
        "ts": "1572226415.046000",
        "text": "いわゆるRecord of Functionsを好んでよく作るのですが、例えば以下のように `print` 関数をセットできるRecord型を作ろうとすると、Impredicative Typeを作ってしまい、コンパイルが通せません。\n```\ndata Env m = Env\n  { print :: forall a. Show a =&gt; a -&gt; m ()\n  , otherFields :: m Int\n  }\n```\nRecord of Functionsを諦めてreflectionsパッケージを使うとか、妥協して `print` を `String -&gt; m ()` に変えるとか、いろいろ回避策は考えられると思うのですが、どんな方法がいいと思いますか？",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1572234908.046300",
        "text": "その宣言だけなら普通に通るっぽいです\n\n```\nPrelude&gt; :set -XRankNTypes\nPrelude&gt; data Env m = Env { print :: forall a. Show a =&gt; a -&gt; m (), otherFields :: m Int }\nPrelude&gt; :type Env\nEnv :: (forall a. Show a =&gt; a -&gt; m ()) -&gt; m Int -&gt; Env m\nPrelude&gt; x = Env Prelude.print (return 0)\nPrelude&gt; :info x\nx :: Env IO     -- Defined at &lt;interactive&gt;:10:1\n```",
        "user": "U570660KX",
        "type": "message"
    },
    {
        "ts": "1572234968.046600",
        "text": "あれ、どこで間違えたんだろう... すみません... :sweat_drops:",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1572280112.050200",
        "text": "2重リストにmapを適用させる関数を書きたいのですが、\n\n`[[2],[2]Listed: Listed.hs:(10,1)-(11,55): Non-exhaustive patterns in function secmap`\n\nこのようなエラーが出てしまいます。どなたかアドバイスいただけないでしょうか？\nまた、haskellでは多重リストに対してはあまり関数を作らないのでしょうか？ネットにあまりそう言った記事がなかったので多重リストに対し処理を行うのであれば他のアプローチがあるのであれば教えていただけると幸いです。\nよろしくお願いします。\n\n```\nmodule Listed(main) where\n\nmain :: IO ()\nmain = do\n       print $ secmap (+1) [[1],[1]]\n       print 1\n\n\nsecmap :: (a-&gt; b) -&gt; [[a]] -&gt; [[b]]\nsecmap f [[]]           = [[]]\nsecmap f ((x : xs):xxs) = ((f x:map f xs):secmap f xxs)\n```",
        "user": "UELFKSH0V",
        "type": "message"
    },
    {
        "ts": "1572303640.050800",
        "text": "`[[][]]`にマッチしないからですかね?",
        "user": "UMKGDJ2RZ",
        "type": "message"
    },
    {
        "ts": "1572303649.051000",
        "text": "ちなみに、エラーの意味はわかってますか？",
        "user": "U56L7EVNY",
        "type": "message"
    },
    {
        "ts": "1572304814.051300",
        "text": "意図は`secmap = map . map`なのでしょうか．",
        "user": "U4KU9ABL0",
        "type": "message"
    },
    {
        "ts": "1572309325.055800",
        "text": "おそらく再帰の最後(今回だと二つ目の[1]の後)にsecmapに渡されるとき[]になってしまって違う型になっているのだと思いますが、関数の定義の際それをどうやって指定すればいいのかわかりません...\n\n意図としてはそうですがMap関数はリストのリストに対しても適当可能なのでしょうか？",
        "user": "UELFKSH0V",
        "type": "message"
    },
    {
        "ts": "1572309953.056000",
        "text": "（type エラーもあるかもしれませんが）\nこれはパターンマッチングにおいてパターンが網羅的になってないって意味のエラーなはず",
        "user": "U56L7EVNY",
        "type": "message"
    },
    {
        "ts": "1572310566.056200",
        "text": "多重リストを扱うとき，自分もこんがらがるのでリスト内包表記を併用したりしてます．（例えば下記のような感じで…）\n```\n[ map (+1) xs | xs &lt;- [[1], [1]] ]\n```\nもちろん，リスト内包表記の内部でリスト内包表記を扱うことも出来ます．\n```\n[ [ x + 1 | x &lt;- xs] | xs &lt;- [[1], [1]] ] \n```",
        "user": "U59GW4U4T",
        "type": "message"
    }
]