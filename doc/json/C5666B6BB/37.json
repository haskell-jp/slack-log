[
    {
        "ts": "1548031254.167500",
        "text": "こんにちは。HRRの導入を検討しておりまして、質問があります。\nHRR、動的に決まるテーブル名に対応していますか？\n\n時系列データを日付ごとのテーブルに格納する要件がありまして、テーブル自体は実行時に作成されます。\nこれらのテーブルですが、テーブル名に日付が含まれる以外、カラムや各種制約はすべて一致しています。\n\n以上よろしくお願いします。",
        "user": "U7GSVRQ6S",
        "type": "message"
    },
    {
        "ts": "1548031538.167800",
        "text": "同じく Haskell Relational Record に関する質問です。スキーマの取得時に、`defineTableFromDB` で 実際に（リモートの） DB に接続する代わりに、`mysqldump --no-data` で生成したスキーマのダンプのファイルを読み込む方法って無いのでしょうか？\nTH を使って、コンパイル中にローカルで mysql を起動してファイルを読み込ませた上で `defineTableFromDB` を呼ぶ方法もあると思うのですが、もっと簡潔な手段があれば教えてくださると嬉しく思います。",
        "user": "U6JPU2DD2",
        "type": "message"
    },
    {
        "ts": "1548033663.168100",
        "text": "HRR 人気！",
        "user": "U56L7EVNY",
        "type": "message"
    },
    {
        "ts": "1548033675.168400",
        "text": "HRR 攻略 wiki （違う）",
        "user": "U56L7EVNY",
        "type": "message"
    },
    {
        "ts": "1548040457.168900",
        "text": "typeとはそのtypeだったのですか。見落としていましたが、お陰様で助かりました。情報はありましたね :sob:\n（<@U4LGTMTMK> 別件ですがこれの修正に deriveJsonNoPrefix が活躍しました。とても快適でした、ありがとうございました :bow: ）",
        "user": "U5672KG1X",
        "type": "message"
    },
    {
        "ts": "1548043188.169500",
        "text": "残念ながらなかったはずです。。。CREATE文のパースを避けるためにあのような方式にしていると伺ったことがあるので :disappointed:",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1548043914.169700",
        "text": "ソース読んで頭の中で軽く型合わせをしただけなんで間違っているかもしれませんが、 `Database.Relational.Relation.table` 関数に `Database.Relational.Table.table` 関数にtable名と絡む名を渡して作った `Table` 型の値を渡すとできるはずです。\n\n参考までにどこを調べたか共有しておくと、実際にその定義を生成している行が <https://github.com/khibino/haskell-relational-record/blob/f2246bb4ac7272f27ed59e1caa36e5b00fe42f55/relational-query/src/Database/Relational/TH.hs#L220> にあります。\n`defineTableDerivations` を呼んでいる関数を遡っていくと、チュートリアル <http://khibino.github.io/haskell-relational-record/tutorial.html> にも出てくる `defineTable` 関数にたどり着くのではないかと。",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1548044221.170000",
        "text": "ただ、いずれにしても、日付名付きのテーブルを扱うという運用自体がSQLアンチパターン「メタデータトリブル」の匂いがするので可能ならば見直す検討はした方がいいかと思いますが。。。\n（ご認識の上でしたら済みません...）",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1548044763.170300",
        "text": "なるほど……。ありがとうございます！",
        "user": "U6JPU2DD2",
        "type": "message"
    },
    {
        "ts": "1548048506.176700",
        "text": "これ ↓ 関連なんですが、base パッケージを Haddock ビルド（ドキュメント生成）したときって何かオプション指定しないと GHC が持ってる方の base パッケージに対してドキュメントが生成されるとかいうことありますかね？\n<https://haskell-jp.slack.com/archives/C4M4TT8JJ/p1547693188111300>\n\n起こっていることとしては、\n• GHC のソース（base パッケージを含む）をダウンロードする\n• 該当ソースコードを書き換える\n• _libraries/base_ に _stack.yaml_ を配置する\n• `stack haddock` する\n• 生成されたドキュメント（と HTML になったソースコード）を見ても変更が反映されてない\n\nで、GHC が持ってる方の base を見に行ってるのかなぁと根拠のない推測をしてみたしだい\n\nGHC が持ってる方の base を書き換えてみてみればいいか\nどこにあるのだろう\nそもそも、ソースコードの状態で（オブジェクトファイルとかじゃなく）持ってるんだろうか？",
        "user": "U4L0B71L1",
        "type": "message"
    },
    {
        "ts": "1548050627.177500",
        "text": "Haskellとは関係ないかもしれないけど、電子書籍版のThinking with typesを購入された方っていますか？\n本当に購入したものがKindleで読めるのか知りたいです。（この規模の書籍をpdfで読むのは厳しいので）。\n<https://leanpub.com/thinking-with-types>",
        "user": "U7Z4F723Z",
        "type": "message"
    },
    {
        "ts": "1548066656.177900",
        "text": "なんか自分が勘違いしてるかもしれないんですが、PDF でも Kindle で読めるのでは？",
        "user": "U4L0B71L1",
        "type": "message"
    }
]