[
    {
        "ts": "1738067646.575529",
        "text": "ダメ元の質問です。 C++ ライブラリの写経モジュールが、元 (C++ 実装) の 10 倍遅くて悩んでいます。 <https://github.com/toyboot4e/lct-bench/blob/main/hs/src/Lct.hs|Lct.hs> のどこが遅いか、良ければエスパーお願いします :pray: 。質問用のリポジトリ全体はこちらです:\n<https://github.com/toyboot4e/lct-bench>",
        "type": "message",
        "user": "U03H9PH8FRP"
    },
    {
        "ts": "1738068513.989769",
        "text": "ぱっと見の印象なのでアレですけど、PrimMonadをフル活用するとインライン化あるいは特殊化が働かなかった時に破滅しそうですね。その辺がボトルネックになっているかの確認はしましたか？",
        "type": "message",
        "user": "UGM9F7XQS"
    },
    {
        "ts": "1738068668.909459",
        "text": "ああ、適宜 `stToPrim` を使っているんですね。",
        "type": "message",
        "user": "UGM9F7XQS"
    },
    {
        "ts": "1738070359.827979",
        "text": "ありがとうございます！　ちょうど全体の感想をお伺いしたかったところです。\n`Lct.hs` の全ての関数を `INLINE` 化したところ `1.64` 秒になりました。",
        "type": "message",
        "user": "U03H9PH8FRP"
    },
    {
        "ts": "1738070565.430499",
        "text": "(INLINE 以外の関数に `stToPrim` を付けのは当てずっぽうです)\n特殊化がボトルネックになっているか、他に調べる方法はありますか？",
        "type": "message",
        "user": "U03H9PH8FRP"
    },
    {
        "ts": "1738070875.545909",
        "text": "`-ddump-prep` で最適化後のCoreを見てみる、とかですかね",
        "type": "message",
        "user": "UGM9F7XQS"
    },
    {
        "ts": "1738071017.884059",
        "text": "ありがとうございます。 Core は僕の手に余るので、具体的な型に置き換えて型パラメータを削除してみます。",
        "type": "message",
        "user": "U03H9PH8FRP"
    },
    {
        "ts": "1738071027.137219",
        "text": "手元で触った感触としては、要素の型（`Sum Int`）についての特殊化を発動させるのが重要そうです。`splay` と `rotate` にINLINABLEをつけてやると高速になりました。",
        "type": "message",
        "user": "UGM9F7XQS"
    },
    {
        "ts": "1738071307.863739",
        "text": "ｳｵｵｵｵ `INLINABLE` で `0.678` 秒になりました。爆速です！！！\nこれまでの経験では`INLINABLE` にはほぼ効果が無かったのですが、特に private な関数に `INLINABLE` を付けると良いのかもしれませんね。",
        "type": "message",
        "user": "U03H9PH8FRP"
    },
    {
        "ts": "1738071357.220799",
        "text": "今回も本当にありがとうございました。他のライブラリも同様に高速化して行きます！ :haskell: :haskell:",
        "type": "message",
        "user": "U03H9PH8FRP"
    },
    {
        "ts": "1738071740.313559",
        "text": "",
        "type": "message",
        "user": "U03H9PH8FRP"
    },
    {
        "ts": "1738071742.364239",
        "text": "rotate, splay に INLINE を付けた場合、よく見るとエラー表示があったので、インライン化に失敗していたかもしれません (添付)",
        "type": "message",
        "user": "U03H9PH8FRP"
    },
    {
        "ts": "1738071893.856139",
        "text": "後学のためにCoreの見方について軽く説明しておくと、GHCに `-ddump-to-file -ddump-prep` を渡すと最適化後のCoreがファイルとしてどこかに書き出されます（cabalのプロジェクトに適用した場合は、`dist-newstyle/` のどこかに `*.dump-prep` というファイルができるので探してください）。特殊化されているかを見たい関数名で検索して、いかにも辞書渡しな感じがしたら特殊化されてないでしょう（例えば、 `Lct.splay @GHC.Types.IO @(Data.Semigroup.Internal.Sum <http://GHC.Types.Int|GHC.Types.Int>) Control.Monad.Primitive.$fPrimMonadIO $dMonoid_r9JA $dUnbox_r9JB ipv63_s9Rp sat_sagy` が見つかったら `$fPrimMonadIO`, `$dMonoid_r9JA`, `$dUnbox_r9JB` が辞書）。一方で、特殊化が起こった場合は今回は\n```Main.$w$ssplay [InlPrag=INLINABLE[2]]\n  :: <http://GHC.Prim.Int#|GHC.Prim.Int#>\n     -&gt; GHC.Prim.MutableByteArray# GHC.Prim.RealWorld\n     -&gt; Data.Vector.Unboxed.Base.MVector\n          (Control.Monad.Primitive.PrimState <http://GHC.Types.IO|GHC.Types.IO>) Lct.IndexLct\n     -&gt; Data.Vector.Unboxed.Base.MVector\n          (Control.Monad.Primitive.PrimState <http://GHC.Types.IO|GHC.Types.IO>) Lct.IndexLct\n     -&gt; Data.Vector.Unboxed.Base.MVector\n          (Control.Monad.Primitive.PrimState <http://GHC.Types.IO|GHC.Types.IO>) <http://GHC.Types.Int|GHC.Types.Int>\n     -&gt; Data.Vector.Unboxed.Base.MVector\n          (Control.Monad.Primitive.PrimState <http://GHC.Types.IO|GHC.Types.IO>)\n          Data.Bit.Internal.Bit\n     -&gt; Data.Vector.Unboxed.Base.MVector\n          (Control.Monad.Primitive.PrimState <http://GHC.Types.IO|GHC.Types.IO>)\n          (Data.Semigroup.Internal.Sum <http://GHC.Types.Int|GHC.Types.Int>)\n     -&gt; Data.Vector.Unboxed.Base.MVector\n          (Control.Monad.Primitive.PrimState <http://GHC.Types.IO|GHC.Types.IO>)\n          (Data.Semigroup.Internal.Sum <http://GHC.Types.Int|GHC.Types.Int>)\n     -&gt; Data.Vector.Unboxed.Base.MVector\n          (Control.Monad.Primitive.PrimState <http://GHC.Types.IO|GHC.Types.IO>)\n          (Data.Semigroup.Internal.Sum <http://GHC.Types.Int|GHC.Types.Int>)\n     -&gt; <http://GHC.Prim.Int#|GHC.Prim.Int#>\n     -&gt; GHC.Prim.State# GHC.Prim.RealWorld\n     -&gt; GHC.Prim.State# GHC.Prim.RealWorld```\nという関数が生成されました。",
        "type": "message",
        "user": "UGM9F7XQS"
    },
    {
        "ts": "1738072430.355639",
        "text": "でかい関数はインライン化しづらいと考えて、適宜SPECIALIZEやINLINABLEを使っていくのが重要そうです。今回は私が試した感じでは `Lct.hs` に `SPECIALIZE ... (Sum Int) ...` を書いてもあまり高速にはなりませんでしたが……。",
        "type": "message",
        "user": "UGM9F7XQS"
    },
    {
        "ts": "1738073218.770159",
        "text": "僕でも認識できる違いで驚きました。 dump を見たところ、 `INLINABLE` を付けた場合のみ `lct-test.dump-prep` (実行ファイル側の dump) に `Main.$w$ssplay` のような関数が生成されており、もしやこれが特殊化なのかと思いました。この辺りの知識を付けると、エスパーと言わず自分で調査できそうですね。非常に助かります！",
        "type": "message",
        "user": "U03H9PH8FRP"
    }
]