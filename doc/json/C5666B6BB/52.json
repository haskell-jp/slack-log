[
    {
        "ts": "1552105357.220800",
        "text": "<@UGTGBD50B> has joined the channel",
        "user": "UGTGBD50B",
        "type": "message"
    },
    {
        "ts": "1552105775.221100",
        "text": "<@UGTGD0XQB> has joined the channel",
        "user": "UGTGD0XQB",
        "type": "message"
    },
    {
        "ts": "1552106757.221400",
        "text": "<@UGUN400AK> has joined the channel",
        "user": "UGUN400AK",
        "type": "message"
    },
    {
        "ts": "1552113528.221800",
        "text": "<@UGTH9LHFV> has joined the channel",
        "user": "UGTH9LHFV",
        "type": "message"
    },
    {
        "ts": "1552113596.222100",
        "text": "<@UGV47EC0N> has joined the channel",
        "user": "UGV47EC0N",
        "type": "message"
    },
    {
        "ts": "1552118643.222300",
        "text": "逆アセンブリした結果は以下のようになりました（一部分だけ）\n```\n00000000004fb010 &lt;Main_boolzuvar1_closure&gt;:\n  4fb010: b8 c2 4b 00 00        mov    $0x4bc2,%eax\n  4fb015: 00 00                 add    %al,(%rax)\n  ...\n\n00000000004fb018 &lt;Main_zdtrModule3_closure&gt;:\n  4fb018: f8                    clc\n  4fb019: c2 4b 00              retq   $0x4b\n  4fb01c: 00 00                 add    %al,(%rax)\n  4fb01e: 00 00                 add    %al,(%rax)\n  4fb020: 00 90 50 00 00 00     add    %dl,0x50(%rax)\n  ...\n\n00000000004fb028 &lt;Main_zdtrModule1_closure&gt;:\n  4fb028: f8                    clc\n  4fb029: c2 4b 00              retq   $0x4b\n  4fb02c: 00 00                 add    %al,(%rax)\n  4fb02e: 00 00                 add    %al,(%rax)\n```",
        "user": "U5LEE6C1J",
        "type": "message"
    },
    {
        "ts": "1552119504.222500",
        "text": "んー、Cmm と asm の時点では +9 があるんですが、バイナリから +9 が消えているみたい？",
        "user": "U5LEE6C1J",
        "type": "message"
    },
    {
        "ts": "1552121881.222800",
        "text": "<@UGUPRD547> has joined the channel",
        "user": "UGUPRD547",
        "type": "message"
    },
    {
        "ts": "1552122975.223000",
        "text": "違いますね。アセンブリ言語に関する知識がなくて頭の中がクエスチョンマークだらけです",
        "user": "U5LEE6C1J",
        "type": "message"
    },
    {
        "ts": "1552124089.223300",
        "text": "あー、とても単純なところを勘違いしていました…… バイナリの中で True_closure+9 である 4fb019 の所を指していることと、実行結果も 0000000000004bc2 である 19394 が表示されることを確認しました。回答していただいたみなさん、ありがとうございました！",
        "user": "U5LEE6C1J",
        "type": "message"
    },
    {
        "ts": "1552137027.224400",
        "text": "このような string literal をコンパイルできる環境を探してます．どういう条件でコンパイルすると通るんでしょう？\n<https://gitlab.haskell.org/ghc/ghc/blob/master/compiler/main/GHC.hs#L1063>\n( 今後 master は変更されるかもなので， GHC 8.6.4 版のリンクも貼っておきます: <https://gitlab.haskell.org/ghc/ghc/blob/ghc-8.6.4-release/compiler/main/GHC.hs#L1055> )",
        "user": "U57D08Z9U",
        "type": "message"
    },
    {
        "ts": "1552137098.224600",
        "text": "Haskell2010 上だと， `\\` の後に空白(改行を含む)を続けて再度 `\\` があるとそこの部分が無視されるのは知ってるんですが，終わりの `\\` も無いようですし",
        "user": "U57D08Z9U",
        "type": "message"
    },
    {
        "ts": "1552137235.224900",
        "text": "ついでに，素の GHC 8.6.3 の GHCi 上で\n\n```\n&gt;&gt;&gt; :{\ns = \"a\\\n   \\b\"\n:}\n&gt;&gt;&gt; s\n\"ab\"\n&gt;&gt;&gt; :{\ns = \"a\\\n   b\"\n:}\n\n&lt;interactive&gt;:8:3: error:\n    lexical error in string/character literal at character 'b'\n```\n\nとなるのは試しました",
        "user": "U57D08Z9U",
        "type": "message"
    },
    {
        "ts": "1552137701.225200",
        "text": "これCPPの効果だって某所で聞いた記憶が",
        "user": "U560KD6DN",
        "type": "message"
    },
    {
        "ts": "1552137873.225700",
        "text": "なるほど，今それありそうだなって思ってやってみてます",
        "user": "U57D08Z9U",
        "type": "message"
    },
    {
        "ts": "1552137990.225900",
        "text": "(例のghc-compiler-notesプロジェクトやってたときに、わどさんが同じ箇所で引っかかってCPPによるものみたいです、って教えてもらった)",
        "user": "U560KD6DN",
        "type": "message"
    },
    {
        "ts": "1552138058.226100",
        "text": "(今まさに ghc-compiler-notes の書き直しをやってて引っかかってます)",
        "user": "U57D08Z9U",
        "type": "message"
    },
    {
        "ts": "1552138918.226500",
        "text": "なるほど，こんな話があるんですね( CPP 使ってる場合 string gap が使えないので， CPP のこの機能を使わざるを得ない)\n<https://downloads.haskell.org/~ghc/8.6.4/docs/html/users_guide/phases.html?#cpp-and-string-gaps>",
        "user": "U57D08Z9U",
        "type": "message"
    },
    {
        "ts": "1552200201.227400",
        "text": "<@UGTT7ASV9> has joined the channel",
        "user": "UGTT7ASV9",
        "type": "message"
    },
    {
        "ts": "1552204525.227700",
        "text": "<@UGV3S98P9> has joined the channel",
        "user": "UGV3S98P9",
        "type": "message"
    },
    {
        "ts": "1552366344.228300",
        "text": "<@U4KU9ABL0> もしかしてcata . ana合成したhyloだと中間データ構造を作ってしまい,hyloの再帰型だとDeforestationされると理解して良い?…んだよね?",
        "user": "U4MMHDSNT",
        "type": "message"
    },
    {
        "ts": "1552377393.228500",
        "text": "はい．そうです．",
        "user": "U4KU9ABL0",
        "type": "message"
    },
    {
        "ts": "1552377731.228700",
        "text": "さらに hyloを展開してしまって， 直截再帰的に定義してしまえば，psiで生成するMaybe (b,a) も生成しなくていいよね．",
        "user": "U4KU9ABL0",
        "type": "message"
    },
    {
        "ts": "1552378070.228900",
        "text": "```\nbuildMap :: (Ord key) =&gt; ([Maybe key], [Maybe val]) -&gt; Maybe (Map key val)\nbuildMap = \\ case\n  (Just k : ks, Just v : vs) -&gt; Map.insert k v &lt;$&gt; buildMap (ks, vs)\n  (Nothing : _, _)           -&gt; Nothing\n  (_, Nothing : _)           -&gt; Nothing\n  ([], [])                   -&gt; Just (Map.empty)\n  (_:ks, [])                 -&gt; const (Map.empty) &lt;$&gt; buildMap (ks, [])\n  (e@[], _:vs)               -&gt; asTypeOf (Map.empty) &lt;$&gt; buildMap ([], vs)\n```",
        "user": "U4KU9ABL0",
        "type": "message"
    },
    {
        "ts": "1552378342.230000",
        "text": "おお、ありがとうございます",
        "user": "U4MMHDSNT",
        "type": "message"
    },
    {
        "ts": "1552379168.234800",
        "text": "``mkMap :: Ord k =&gt; ([Maybe k], [Maybe v]) -&gt; Maybe (Map k v)``を定義しようとして，\n```\nmkMap :: Ord k =&gt; ([Maybe k], [Maybe v]) -&gt; Maybe (Map k v)\nmkMap ([], v:vs) = const Map.empty &lt;$&gt; mkMap ([], vs)\n```\nとすると，この部分で以下のようなエラーがでるのですが，なぜ推論できないんでしょうか？\n(ghc-8.6.4)\n\n```\n/home/nobsun/work/ny-sketch-book/src/BuildMap.hs:57:40: error:\n    • Could not deduce (Ord k0) arising from a use of ‘mkMap’\n      from the context: Ord k\n        bound by the type signature for:\n                   mkMap :: forall k v.\n                            Ord k =&gt;\n                            ([Maybe k], [Maybe v]) -&gt; Maybe (Map k v)\n        at /home/nobsun/work/ny-sketch-book/src/BuildMap.hs:56:1-59\n      The type variable ‘k0’ is ambiguous\n      These potential instances exist:\n        instance (Ord a, Ord b) =&gt; Ord (Either a b)\n          -- Defined in ‘Data.Either’\n        instance forall k (s :: k). Ord (Proxy s)\n          -- Defined in ‘Data.Proxy’\n        instance forall k (a :: k) (b :: k). Ord (a :~: b)\n          -- Defined in ‘Data.Type.Equality’\n        ...plus 28 others\n        ...plus 12 instances involving out-of-scope types\n        (use -fprint-potential-instances to see them all)\n    • In the second argument of ‘(&lt;$&gt;)’, namely ‘mkMap ([], vs)’\n      In the expression: const Map.empty &lt;$&gt; mkMap ([], vs)\n      In an equation for ‘mkMap’:\n          mkMap ([], v : vs) = const Map.empty &lt;$&gt; mkMap ([], vs)\n   |\n57 | mkMap ([], v:vs) = const Map.empty &lt;$&gt; mkMap ([], vs)\n   |                                        ^^^^^^^^^^^^^^\nFailed, no modules loaded.\n```",
        "user": "U4KU9ABL0",
        "type": "message"
    },
    {
        "ts": "1552379699.235000",
        "text": "ぱっと思いつくのは、 `const Map.empty ....` と、戻り値を必ず `Map.empty` にしてしまっているからではないかと。\n`asTypeOf` に変えたら通りましたし。",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1552379872.235200",
        "text": "これ、ひょっとして本当にやりたいことは `const` ではなく `Map.union` ではないでしょうか？再帰の基底部で必ず `Map.empty` を返してしまったら意味がないような...",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1552381203.235400",
        "text": "やりたいことは，\n<https://haskell-jp.slack.com/archives/C5666B6BB/p1552378070228900?thread_ts=1551956556.140300&amp;cid=C5666B6BB>\n です．Map.unionをつかっても同じ意図を実装できますが，なぜ，上の書き方でだめなのかが理解できていません．",
        "user": "U4KU9ABL0",
        "type": "message"
    },
    {
        "ts": "1552381431.235900",
        "text": "`mkMap ([], vs) :: Maybe (Map k v)` の `k` と `mkMap :: Ord k =&gt; …` の `k` が同じだということが分からないような",
        "user": "U4L0B71L1",
        "type": "message"
    },
    {
        "ts": "1552382069.236200",
        "text": "Map.unionを使うと判るのは．．．なぜだろう．．．:thinking_face:",
        "user": "U4KU9ABL0",
        "type": "message"
    },
    {
        "ts": "1552382278.236600",
        "text": "`const` は `a -&gt; b -&gt; a` という型なので `mkMap ([], vs) :: Maybe (Map k v)` の `k` が `Map.empty` の型と同じとは限りませんが、\n`Map.union` （や、 `asTypeOf` ）は戻り値も引数もすべて同じ型なのでわかる、ということではないでしょうか？",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1552382472.236800",
        "text": ":sweat_smile:ああそうかなるほど！ありがとうございます．",
        "user": "U4KU9ABL0",
        "type": "message"
    },
    {
        "ts": "1552383160.237200",
        "text": "あらっ？ mkMap ([], vs) :: Maybe (Map k v) みたいな型注釈をつけてもいけそうなんだけど．．．だめなのか．．．:open_mouth:",
        "user": "U4KU9ABL0",
        "type": "message"
    },
    {
        "ts": "1552383286.237500",
        "text": "`ScopedTypeVariables` の出番ですかね。 :smirk:",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1552383318.237700",
        "text": "それを指定したんだけど．．．だめみたい．",
        "user": "U4KU9ABL0",
        "type": "message"
    },
    {
        "ts": "1552383378.237900",
        "text": "`forall` を書き忘れるというミスを犯してませんか... （経験者談 :sweat_smile:",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1552383771.238100",
        "text": ":sweat_smile: おもいっきりヤラカしてました．ありがとうございます．",
        "user": "U4KU9ABL0",
        "type": "message"
    },
    {
        "ts": "1552390790.238700",
        "text": "<@UGW3ZV0AH> has joined the channel",
        "user": "UGW3ZV0AH",
        "type": "message"
    },
    {
        "ts": "1552455593.238900",
        "text": "なにがカッコイイかはよく判らないけれど，プログラムの判りやすさと，時間性能は hylo 版も直接再帰版もオリジナルに敵わないです．",
        "user": "U4KU9ABL0",
        "type": "message"
    },
    {
        "ts": "1552461489.239100",
        "text": "<@U4KU9ABL0> 時間性能については、オリジナル版はallとfromListでリストを二回なめているため、hylo版の方が速いかと",
        "user": "U570660KX",
        "type": "message"
    },
    {
        "ts": "1552462767.239400",
        "text": "ScopedTypeVariables は型変数のスコープの開始を forall で指定するという仕様なのです。",
        "user": "U4KNU6N48",
        "type": "message"
    }
]