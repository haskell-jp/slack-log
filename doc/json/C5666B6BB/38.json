[
    {
        "ts": "1548286097.224000",
        "text": "モジュールは定義してないので読まれないのはいいんですけど、まあたぶんdoubleMeも読まれてませんよね？、ここで<https://haskell-jp.slack.com/archives/C5666B6BB/p1548172078203000?thread_ts=1548136855.190500&amp;channel=C5666B6BB&amp;message_ts=1548172078.203000> \nするとどうなりますか？あと念のためprojectのディレクトリ構成とghciを立ち上げている位置でのpwdを見せてください",
        "user": "UAMGYKUP5",
        "type": "message"
    },
    {
        "ts": "1548286484.228400",
        "text": "あと、いつも使ってるIDEのhaskell plug-inとか、emacsのinteroとか使った方が楽かもしれません。",
        "user": "UAMGYKUP5",
        "type": "message"
    },
    {
        "ts": "1548286647.228600",
        "text": "&gt; あと、いつも使ってるIDEのhaskell plug-inとか、emacsのinteroとか使った方が楽かもしれません。\n\nそれは今は後回しにして良いんじゃないかと。。。多分すごいH本を読んでGHCiで試そうとしているだけですからおそらくまだそれらをインストールしてませんし、端末の操作に不慣れだと、それらのインストールもまた大変です。",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1548286794.228900",
        "text": "そして今更気づいたんですが、画面をスマホでとるよりはスクリーンショットという機能を使った方が見やすくて良いです。\n<https://support.apple.com/ja-jp/HT201361> を参考に、スクリーンショットで直接画面を画像として保存してみせてください。\n（macOS Mojaveでない場合はすみません...）\n\nあるいは、ターミナルの画面は、基本的にすべてそのままコピーできるようになっているので、 <@UFDKZJBLK> さんの入力と、それに対する結果がわかるよう選択してコピーしてこちらに貼り付けてみてください。\n大抵はそれで十分です。",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1548287117.233600",
        "text": "<https://haskell-jp.slack.com/archives/C5666B6BB/p1548286647228600?thread_ts=1548136855.190500&amp;channel=C5666B6BB&amp;message_ts=1>\n\nそうですね、失礼しました。\nでは<@UFDKZJBLK> さんは、端末操作に慣れてきたらもっと楽にhaskellプログラミングができる楽しいソフトがある程度に思っていただければ、\n\n（ご回答の邪魔になるのでinteroなどの話は私からは以上にいたします。）",
        "user": "UAMGYKUP5",
        "type": "message"
    },
    {
        "ts": "1548297376.237600",
        "text": "すみません。本当に初めてやるのがhaskellでなにもかも分かってない状態で初めてました。ターミナルも全くの初見です笑笑。:cd /path/to/directory baby.hs  でやってみれば確認できるでしょうか？",
        "user": "UFDKZJBLK",
        "type": "message"
    },
    {
        "ts": "1548297516.237800",
        "text": "`:cd /path/to/directory`\n`:load baby.hs` です　違うコマンドですよ",
        "user": "U9XHWQX7Z",
        "type": "message"
    },
    {
        "ts": "1548297665.239000",
        "text": "<@UAMGYKUP5> さんが言ってたソフトもいずれは必要になるかもしれませんので、入れて色々と遊んでみますね！！",
        "user": "UFDKZJBLK",
        "type": "message"
    },
    {
        "ts": "1548297849.240000",
        "text": "<@U9XHWQX7Z> さんありがとうございます:blush:まだまだ修行が足りないですね笑笑頑張ります！！",
        "user": "UFDKZJBLK",
        "type": "message"
    },
    {
        "ts": "1548300806.240400",
        "text": "Haskell が初なの珍しい、ぜひ感想とか聞きたいですね :star:",
        "user": "U56L7EVNY",
        "type": "message"
    },
    {
        "ts": "1548301224.243900",
        "text": "こう言ったら失礼かもしれませんが、自分の親の友人のプログラマーが安全なhaskellが良いよと言われたのもありますしhaskellはjava程人気ではないというところがあって他と違うことがやりたいなって感じがしたというのもありやりたいなと思いました笑笑将来起業もしたいので、",
        "user": "UFDKZJBLK",
        "type": "message"
    },
    {
        "ts": "1548310870.244500",
        "text": "<@UFMV026NR> has joined the channel",
        "user": "UFMV026NR",
        "type": "message"
    },
    {
        "ts": "1548344480.250400",
        "text": "QuickCheckに関しての質問なのですが、以下のYampaプログラムをテストしたいです。\nそのために必要なこととして、\n１．初期座標、初期速度を変数にする(コマンドラインで指定できるようにする)\n２．Yampaプログラムから直接テストを行うことは難しいので1000ループで区切りその座標速度ベクトルを配列に入れる\n３．上でもとめた配列が条件に合うかどうか検証する(今回の場合は座標が-100以上)\nだと思うのですが、具体的にどうプログラムを加えていけばいいでしょうか？",
        "user": "UE51MD4E6",
        "type": "message"
    },
    {
        "ts": "1548344498.250500",
        "text": "",
        "user": "UE51MD4E6",
        "type": "message"
    },
    {
        "ts": "1548344688.252100",
        "text": "",
        "user": "UE51MD4E6",
        "type": "message"
    },
    {
        "ts": "1548344781.253900",
        "text": "上の動画の通り、あえて地面の接触判定が雑なプログラムで地面に整地せず、想定とは違う動きになるというのをQuickCheckでさまざまな初期位置初期速度を入力したときに座標が負になることでbool型で返していくイメージです。",
        "user": "UE51MD4E6",
        "type": "message"
    },
    {
        "ts": "1548371654.254600",
        "text": "<@UFNL9EP98> has joined the channel",
        "user": "UFNL9EP98",
        "type": "message"
    },
    {
        "ts": "1548375188.254800",
        "text": "<http://hackage.haskell.org/package/Yampa-0.13/docs/FRP-Yampa.html#v:embed>　embed関数を使うと、SFの出力をリストとして取り出すことができます。`embed (bouncingBall p0 v0) ((), repeat (0.1, Just ()))`の結果を検査すれば良いのではないでしょうか",
        "user": "U4KUNQF9N",
        "type": "message"
    },
    {
        "ts": "1548383488.255100",
        "text": "<@UFPRHDT8X> has joined the channel",
        "user": "UFPRHDT8X",
        "type": "message"
    },
    {
        "ts": "1548389362.255400",
        "text": "ありがとうございます。\nembed関数を用いてためしてみます",
        "user": "UE51MD4E6",
        "type": "message"
    },
    {
        "ts": "1548390980.255600",
        "text": "再度質問すみません\nstack ghci上で上に似たようなコマンドを入力してリストが出たのを確認したのですがこれをどうやってQuickCheckの判定を含めて導入すればよいのでしょうか？\nそもそもstack ghci上で上のコマンドを打つのが間違いなのでしょうか？",
        "user": "UE51MD4E6",
        "type": "message"
    },
    {
        "ts": "1548391055.255800",
        "text": "",
        "user": "UE51MD4E6",
        "type": "message"
    },
    {
        "ts": "1548393069.261100",
        "text": "これは(show a)と記載されてると言うことはaを返すのではないのですか？自分としてはたしかにaに入ってるものはstring値ですが、なぜ最後はaではないのですか？",
        "user": "UFDKZJBLK",
        "type": "message"
    },
    {
        "ts": "1548393158.261500",
        "text": "これは「aがShowである」という制約を示しているだけで、返り値を示しているわけではないですね。",
        "user": "U57DM8PBK",
        "type": "message"
    },
    {
        "ts": "1548393473.262900",
        "text": "あーそういうことか笑笑自分制約あまり分からないものでもう少し勉強してきます笑笑",
        "user": "UFDKZJBLK",
        "type": "message"
    },
    {
        "ts": "1548395609.263100",
        "text": "ちなみに `Show a` の S は大文字ですね",
        "user": "U4L0B71L1",
        "type": "message"
    },
    {
        "ts": "1548396056.263400",
        "text": "型は大文字から、関数は小文字から始まるのがHaskellの文法ですからね！",
        "user": "U57DM8PBK",
        "type": "message"
    },
    {
        "ts": "1548402024.268800",
        "text": "ラムダ式とクロージャって何が違うんですかね？ Haskell 関係でクロージャという言葉を聞いたことがないんですが、Haskell にクロージャはあります？",
        "user": "U5LEE6C1J",
        "type": "message"
    },
    {
        "ts": "1548402758.269000",
        "text": "「自由変数が含まれる関数」を返す関数によって返された関数、ぐらいの認識でした。\n参照している自由変数はその「自由変数が含まれる関数」にしかアクセスできないのでprivateなフィールドをシミュレートする、みたいな例をあちこちの言語で見かけましたね。\n典型的には <https://ja.wikipedia.org/wiki/%E3%82%AF%E3%83%AD%E3%83%BC%E3%82%B8%E3%83%A3> の最初に出てくるSchemeの例です。\n同じ要領でHaskellでもできると思います。",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1548403063.270700",
        "text": "Haskellだと <https://en.wikipedia.org/wiki/Closure_(computer_programming)> に載っているようなPythonの例\n```\ndef h(x):\n    return lambda y: x + y  # Return a closure.\n```\nをそのまま再現しても単に2引数の関数を定義するのと変わらないので、意識されにくいというのはあるでしょうね。。。",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1548403562.271200",
        "text": "ラムダ式は構文で、クロージャはオブジェクト(値など)の一種であると言えば違いは明らかになると思います。<https://ghc.haskell.org/trac/ghc/wiki/Commentary/Rts/Storage/HeapObjects> でGHCのクロージャが説明されています",
        "user": "U4KUNQF9N",
        "type": "message"
    },
    {
        "ts": "1548403648.271500",
        "text": "何かを習得するとき一般に言えることですが、複雑なことを成し遂げたいときはまず個々の動きから始めましょう。この場合の考え方は\n• QuickCheckは純粋な関数をテストする仕組みである\n• 簡単なもの(足し算の交換則など)をQuickCheckしてみて、基本的な使い方を知る\n• SFを純粋に検査できるようにする(embed)\n• 両者を組み合わせ、目標を達成する",
        "user": "U4KUNQF9N",
        "type": "message"
    },
    {
        "ts": "1548403810.272600",
        "text": "そういう細かいとこも注意して頑張ってみます！！",
        "user": "UFDKZJBLK",
        "type": "message"
    },
    {
        "ts": "1548406986.273300",
        "text": "回答ありがとうございます！ どちらも言われてみればそうですね！ クロージャ内では破壊的な代入が可能な必要があるという変な勘違いをしていました。そして、GHC のクロージャについての説明をつまみ読みしたんですが、Heap に保存される一つ一つのオブジェクトは全てクロージャ (GHC の呼び方に従えば) という理解で合ってます？ まるで空気のようですね……",
        "user": "U5LEE6C1J",
        "type": "message"
    },
    {
        "ts": "1548408012.275300",
        "text": "pure Haskell と言うとき、FFIやCとかがない Haskell コードを指すのか、IOなどの副作用がない Haskell コードを指すのか、どちらでしょうか。",
        "user": "U4M598NHM",
        "type": "message"
    },
    {
        "ts": "1548408814.275500",
        "text": "前者かなという気持ち",
        "user": "U4L0B71L1",
        "type": "message"
    },
    {
        "ts": "1548408817.275700",
        "text": "私は no IO の方を連想したんですが、検索してみると no FFI という意味が多い感じでした <https://www.google.com/search?q=%22pure+haskell%22>",
        "user": "U5LEE6C1J",
        "type": "message"
    },
    {
        "ts": "1548408918.275900",
        "text": "もう少しQuickCheckについて勉強していこうと思います\nありがとうございました！",
        "user": "UE51MD4E6",
        "type": "message"
    },
    {
        "ts": "1548410232.276400",
        "text": "完全に感覚の話なのですが、僕も前者だと感じました:wink:",
        "user": "U5LV76EJH",
        "type": "message"
    },
    {
        "ts": "1548410574.279500",
        "text": "この場合のpureが前者だと感じるのは他言語からのアナロジーである可能性が多いと思います。無論私も前者と感じました pure JavaScriptだなどと言った場合に純JS製である事を意図していることから",
        "user": "U9XHWQX7Z",
        "type": "message"
    },
    {
        "ts": "1548410669.279700",
        "text": "GHC拡張などを使わないHaskell…というのはさておき私も前者派です",
        "user": "U4KUNQF9N",
        "type": "message"
    },
    {
        "ts": "1548412963.279900",
        "text": "Haskell の関数は、デフォルトでカリー化されているので、クロージャが陽には見えません。部分適応すれば、他言語でいうクロージャが返されますが、それをクロージャだと意識することはないです。",
        "user": "U56MBRKR9",
        "type": "message"
    },
    {
        "ts": "1548413021.280100",
        "text": "ただ、Haskell の部分適応では、複数の関数で共有しているが、他からアクセスできないような変数は作れませんね。",
        "user": "U56MBRKR9",
        "type": "message"
    },
    {
        "ts": "1548413114.280300",
        "text": "Haskell は pure であるというときと、pure Haskell で作るというときとでは、意味が変わると思います。",
        "user": "U56MBRKR9",
        "type": "message"
    },
    {
        "ts": "1548416637.280600",
        "text": "タプルとか、何かしら複数の値を入れられるものに入れて返さない限りは無理でしょうから、確かに部分適用ではできませんね…",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1548421860.281100",
        "text": "みなさんありがとうございます。pure Haskell というのを only Haskell のこととしてみる方が多いようですね。pure Haskell implementation という表現をしているライブラリがあって気になっていました。",
        "user": "U4M598NHM",
        "type": "message"
    },
    {
        "ts": "1548433844.281400",
        "text": "<@UFP7VJHGT> has joined the channel",
        "user": "UFP7VJHGT",
        "type": "message"
    }
]