[
    {
        "ts": "1626746071.010100",
        "text": "persistentについて、というよりデータベースについての質問です。\n直和型のデータをデータベースに保存したい場合、どのデータベースを使うのがいいのでしょうか？\n\npersistentだとpersistValue型に直和を表すものがなく、というよりそもそもRDBでは直和型を直接サポートしていない(RDBの元となった関係モデルでは演算として直和を考慮していないと思われる)ので、Maybe型などを使って無理やり表現する以外に方法がないように思えるのですが、\nRDB以外のデータベースならサポートしているのかなと。\n\n何か意見をいただければ幸いです。",
        "user": "U01R1UNMVT5",
        "type": "message"
    },
    {
        "ts": "1626746773.010200",
        "text": "RDBのようにスキーマが明確に決まったDBで直和型を直接サポートしているDB、というと、Haskell専用になっちゃいますがacid-stateってパッケージが近いかと。全然使ったことないので全く詳しくないのですが、こちらはシリアライズできるHaskellの型ならなんにでも使える、とのことなので。\n<https://github.com/acid-state/acid-state>",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1626746863.010500",
        "text": "返答ありがとうございます。調べてみます。",
        "user": "U01R1UNMVT5",
        "type": "message"
    },
    {
        "ts": "1626747280.010700",
        "text": "あとは、スキーマをかっちり決めないMongoDBなりNeo4jなりであれば比較的楽に表現できるかと思います。\nそれと余談ですが、RDBで直和型を再現する方法はいろいろ考案されているので参考までに\n<https://www.parsonsmatt.org/2019/03/19/sum_types_in_sql.html>",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1626772603.011200",
        "text": "ありがとうございます。いろいろと試してみたいと思います。",
        "user": "U01R1UNMVT5",
        "type": "message"
    },
    {
        "ts": "1627090925.011800",
        "text": "追加の質問すみません、RDBで直和型を表現する方法について質問なのですが、\nこれって直和型のデータを削除したときに、Garbage Collectionを作らないと大量のゴミが残る感じですかね？",
        "user": "U01R1UNMVT5",
        "type": "message"
    },
    {
        "ts": "1627098706.012000",
        "text": "<https://www.parsonsmatt.org/2019/03/19/sum_types_in_sql.html> の「Shared Primary Key」とかのテクニックを適用した場合の話ですかね？外部キーを使うことになるので、テーブル作成時に ON DELETE CASCADE を設定しておかなければ確かに削除時に余分なレコードが残りますね",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1627120495.012300",
        "text": "返信ありがとうございます。\nなるほど、ということは、XやYを型としてZをXとYの直和型としたとき、\nShared Primary Keyの場合は、直和Zの実装としてXかYの要素のid値を保存するからZの値を削除しただけではXかYの要素を削除できなくて、\nThe persistent Approachの場合は、直和Zは自身のid値を中身のXかYの要素のid値をそのまま使用することで表現するから、id値で削除すれば、XかYの要素も削除できるという理解で合ってますでしょうか？",
        "user": "U01R1UNMVT5",
        "type": "message"
    },
    {
        "ts": "1627120739.012600",
        "text": "いや、Shared Primary Keyの場合であっても、Zに対してDELETE文を発行した場合は外部キー制約がないので~残ります~（実際に外部キー制約が付いている場合はそもそも削除できないはず）が、Xの方を削除するようにすれば外部キー制約からON DELETE CASCADEが使えるんじゃないかと思います。",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1627121265.012800",
        "text": "ええとすみません、私自身、RDBの外部キー制約をちゃんと理解していないことが分かったので、勉強するために少し時間をいただけますでしょうか？",
        "user": "U01R1UNMVT5",
        "type": "message"
    },
    {
        "ts": "1627121361.013100",
        "text": "お気になさらず。私も誤解している可能性がなきにしもあらずですので :sweat_drops:",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1627132090.013500",
        "text": "分かりました。\nShared Primary Keysの場合は、Zが親テーブルで、XやYが子テーブルになって、CASCADE設定してZを削除すると、それを参照していたXやYのデータも削除されるということですね。",
        "user": "U01R1UNMVT5",
        "type": "message"
    },
    {
        "ts": "1627132320.013800",
        "text": "The persistent Approachの場合は、XやYが親テーブルでZが子テーブルなので、子であるZのデータを削除してもXやYのデータが残ってしまうという感じですかね？",
        "user": "U01R1UNMVT5",
        "type": "message"
    }
]