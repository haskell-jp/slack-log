[
    {
        "ts": "1586700134.057600",
        "text": "<@U012A4ALLSC> has joined the channel",
        "user": "U012A4ALLSC",
        "type": "message"
    },
    {
        "ts": "1586706646.058000",
        "text": "<@U011CMS2A1M> has joined the channel",
        "user": "U011CMS2A1M",
        "type": "message"
    },
    {
        "ts": "1586736589.058200",
        "text": "<@U9SS2NKSA> has joined the channel",
        "user": "U9SS2NKSA",
        "type": "message"
    },
    {
        "ts": "1586777580.058600",
        "text": "[yesodweb/serversession: Secure, modular server-side sessions.](<https://github.com/yesodweb/serversession>)\nが少し新しいLTSだとpersistentの破壊的変更でビルドできなくなってるのを直してるんですが,\nもうこれは古いぞみたいなことになってたりしますかね…?\nそれはそうとしてacid-stateがバージョン1を出してくれてないので破壊的変更が何処にあるのかわからなくて非常につらい",
        "user": "U57CUMWQ6",
        "type": "message"
    },
    {
        "ts": "1586789762.058900",
        "text": "とりあえずテストは通しました\n[updated: lts to 15 by ncaq · Pull Request #23 · yesodweb/serversession](<https://github.com/yesodweb/serversession/pull/23>)",
        "user": "U57CUMWQ6",
        "type": "message"
    },
    {
        "ts": "1586865602.059400",
        "text": "<@U011SQR1Y3U> has joined the channel",
        "user": "U011SQR1Y3U",
        "type": "message"
    },
    {
        "ts": "1586869427.059600",
        "text": "Hackage は semantic versioning じゃなくて PVP なので（メンテナーがちゃんとしたがってるなら）0.x.y でも x が上がれば破壊的変更があるはずですが、メンテナーしだいですね……",
        "user": "U4L0B71L1",
        "type": "message"
    },
    {
        "ts": "1586945621.059900",
        "text": "<@U0121PJA7BN> has joined the channel",
        "user": "U0121PJA7BN",
        "type": "message"
    },
    {
        "ts": "1586949831.062200",
        "text": "```data Term = V Char\n            | Abs (Term, Term)\n            | App (Term, Term)\n--replaceは\nreplace :: Term -&gt; Term -&gt; Term -&gt; Term \nreplace (V x) s r =\n    case r of \n            (V y) -&gt; if x == y then s else (V y)\n            Abs((V y), t) -&gt; \n                Abs(V y, (replace (V x) s t))\n            App(Abs(V y,t),u) -&gt; \n                App(Abs((V y),(replace (V x) s t)), replace (V x) s u)```\nこのようなコードを書いたのですがreplace((V x) s t)のところでParse errorが出てしまいます。なぜこのようなエラーが出てしまうのかわかりません。よろしくお願いします。",
        "user": "U5FTM76CA",
        "type": "message"
    },
    {
        "ts": "1586950244.062300",
        "text": "挙げていただいた部分をコピペしただけだと問題のエラーは再現できませんね...\nこれより前の箇所でカッコの対応がとれてないとか、別の箇所で問題が起きているのかも知れません。",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1587002915.062500",
        "text": "もとのコードに戻って再度コンパイルしたところなぜかエラーは出ませんでした。こちらに質問させていただく前にTerm型の値コンストラクタの名前を短いものに変えただけなのですが…。",
        "user": "U5FTM76CA",
        "type": "message"
    },
    {
        "ts": "1587003334.062800",
        "text": ":confused: なるほど。。。間違えて古いコードをコンパイルしようとしてしまっていたとか、その辺のありがちなミスかも知れませんね。。。 :disappointed:",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1587004972.063000",
        "text": "それかもしれないです。今名前を元に戻してもコンパイルはうまく行ったので。答えていただきありがとうございました。",
        "user": "U5FTM76CA",
        "type": "message"
    },
    {
        "ts": "1587182761.064800",
        "text": "<@U011NAMGBV5> has joined the channel",
        "user": "U011NAMGBV5",
        "type": "message"
    },
    {
        "ts": "1587234316.065100",
        "text": "<@U012246MPS9> has joined the channel",
        "user": "U012246MPS9",
        "type": "message"
    },
    {
        "ts": "1587298143.065400",
        "text": "<@U0122H2QD6Z> has joined the channel",
        "user": "U0122H2QD6Z",
        "type": "message"
    },
    {
        "ts": "1587520637.065700",
        "text": "<@U0129N1KTGA> has joined the channel",
        "user": "U0129N1KTGA",
        "type": "message"
    },
    {
        "ts": "1587550238.066000",
        "text": "<@U012AKH2HKM> has joined the channel",
        "user": "U012AKH2HKM",
        "type": "message"
    },
    {
        "ts": "1587737942.067300",
        "text": "雑談程度ですが、rust コンパイラはghcより高速ですか、それとも同程度でしょうか？\nなにかベンチマークはありますか？",
        "user": "U74KTAG0N",
        "type": "message"
    },
    {
        "ts": "1587742597.075200",
        "text": "ベンチマークではなく個人的なイメージではGHCの方が並列ビルド時のsystem CPU時間もメモリ使用量も多い印象です。もちろん入力となるコードによりますが。言語の表現力や担保する安全性の範囲にも違いがあるので、意味のあるベンチマークを作るのが難しそうですね。",
        "user": "U4M9NJ7QE",
        "type": "message"
    },
    {
        "ts": "1587744778.075400",
        "text": "コンパイルタイムならC++、Rust、Haskellが激遅3兄弟なのであんまり気にしないのが吉です。ランタイムはHaskellは遅いんですがC++とRustのどっちが遅いのかについては諸説あるので気にしないのが吉です。",
        "user": "U570660KX",
        "type": "message"
    },
    {
        "ts": "1587800854.076000",
        "text": "<@U0137RHDV7S> has joined the channel",
        "user": "U0137RHDV7S",
        "type": "message"
    },
    {
        "ts": "1587801705.076300",
        "text": "はじめまして、質問があります!\n\ntoInts :: String -&gt; [Int]\ntoInts = map read . lines\n\nの意味するところが不明です。\n\nlinesは改行文字で文字列を区切り、文字列のリストを返す\n(lines :: String -&gt; [String])\n\nそれと、readを関数合成すると何ができるのでしょうか",
        "user": "U0137RHDV7S",
        "type": "message"
    },
    {
        "ts": "1587807069.076400",
        "text": "こんにちは。\ntoIntsの優先度をカッコで明確化すると、 `map (read . lines)` ではなく、 `(map read) . lines` となります。\nなので関数合成しているのは、`map read` と `lines` になります。\n従ってtoIntsは、「 `lines`  の出力結果を、 `map read` に入力する関数」を表しています。\n`map read` は、入力されたリストの各々に、`read` 関数を適用したリストを返します。",
        "user": "U55V441FS",
        "type": "message"
    },
    {
        "ts": "1587809001.076800",
        "text": "Prelude 代替を何か試してみようかと思っているのですが、RIO が最有力でしょうか？　stack の templates に Foundations もあったのでこちらも気になっています。",
        "user": "U6JPU2DD2",
        "type": "message"
    },
    {
        "ts": "1587811253.077000",
        "text": "あんまりalt Preludeはほぼ使ったことがないですがRIOだけはちょっと使ったことがあって、確かにあれはよくできてると思います。\nFoundationsは、わざわざStringなどを独自に作っていて、気持ちはわかるけどちょっと野心的すぎない？という印象です。",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1587811507.077200",
        "text": "RIO 愛用してますが、ほかと比べたわけじゃなくなんとなくで使ってます（とくに不満はありません）",
        "user": "U56L7EVNY",
        "type": "message"
    },
    {
        "ts": "1587814238.078100",
        "text": "ありがとうございます！　RIO を試してみようと思います",
        "user": "U6JPU2DD2",
        "type": "message"
    },
    {
        "ts": "1587816183.078300",
        "text": "ありがとうございます。\n一般にはrustのコンパイル時間も遅いという認識なのですね。ghcがメモリを使うというのは経験的にありますが。",
        "user": "U74KTAG0N",
        "type": "message"
    },
    {
        "ts": "1587824774.078600",
        "text": "<@U012JCZR01Z> has joined the channel",
        "user": "U012JCZR01Z",
        "type": "message"
    },
    {
        "ts": "1587827432.078800",
        "text": "よく分かりましたありがとうございます",
        "user": "U0137RHDV7S",
        "type": "message"
    },
    {
        "ts": "1587887641.081000",
        "text": "cabal (3.2.0.0) でプロジェクトをビルドする際に、 `-threaded`や `-eventlog` などのghcオプションをコマンドラインから与える方法はありますでしょうか？やはり.cabalファイルに書き込むべきですかね？",
        "user": "U59GW4U4T",
        "type": "message"
    },
    {
        "ts": "1587887809.082200",
        "text": "バイナリデータの操作で、グリッチアート生成プログラムを書籍を元に作っていますが、エラーが取れない状況です。\n\nエラー箇所の解決方法を教えてもらえないでしょうか\n<https://ideone.com/3cgTKo>",
        "user": "U0137RHDV7S",
        "type": "message"
    },
    {
        "ts": "1587887868.082400",
        "text": "`--PROG-options=OPTS                                  give extra options to PROG` とhelpにあったのでghcなら--ghc-optionsになりそうですね",
        "user": "U59GW4U4T",
        "type": "message"
    },
    {
        "ts": "1587888008.082600",
        "text": "`(before,rest) = ...` の行と `after = ...` の行、 `newChar = ...` の行の行頭をそろえてください。",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1587888926.082900",
        "text": "コンパイルできましたありがとうございます",
        "user": "U0137RHDV7S",
        "type": "message"
    },
    {
        "ts": "1587976816.083300",
        "text": "<@U012KLD4SSW> has joined the channel",
        "user": "U012KLD4SSW",
        "type": "message"
    },
    {
        "ts": "1588213938.084200",
        "text": "以下のような型クラスを含むライブラリってありますか？\n\n```class Writable a where\n  write :: Handle -&gt; a -&gt; IO ()```\nまた、このような型クラスを使うのは設計としてどうですか？",
        "user": "U5LEE6C1J",
        "type": "message"
    },
    {
        "ts": "1588214016.084300",
        "text": "<https://github.com/Hexirp/hexirp-hakyll/blob/b0757b0b5d64871907f19cf03a5bcf6c246d1a00/hexyll-core/src/Hexyll/Core/Writable.hs>",
        "user": "U5LEE6C1J",
        "type": "message"
    },
    {
        "ts": "1588214125.084600",
        "text": "cerealを採用しない理由はどういうものですか？",
        "user": "U5G2BCVBN",
        "type": "message"
    },
    {
        "ts": "1588214659.084900",
        "text": "cereal は良く知りませんでした。シリアライズのためのライブラリということですね。この型クラスは hPut や hPutStr のような関数を抽象化するためのもので、シリアライズとは少しずれているように私は思っています",
        "user": "U5LEE6C1J",
        "type": "message"
    },
    {
        "ts": "1588225353.085200",
        "text": "とりあえず名前の方に違和感があります\ncerealが提案された理由にも繋がっていて\nWriterableみたいな名前をつけると他言語の経験から\n[std::io::Write - Rust](<https://doc.rust-lang.org/std/io/trait.Write.html>)\nや\n[Writer (Java Platform SE 8 )](<https://docs.oracle.com/javase/jp/8/docs/api/java/io/Writer.html>)\nが連想されて｢書き込む先｣を抽象化しているように見えます\nもちろん `Writable` と `Writer` は違う名前なのですが一見同じに見えてしまうので\n\n`hPutStrLn` を抽象化するというのは\n[Data.ListLike](<https://www.stackage.org/haddock/lts-15.10/ListLike-4.6.3/Data-ListLike.html#t:ListLikeIO>)\nが達成はしているようですね",
        "user": "U57CUMWQ6",
        "type": "message"
    },
    {
        "ts": "1588235587.085500",
        "text": "<https://hackage.haskell.org/package/hakyll-4.13.3.0/docs/Hakyll-Core-Writable.html> から引き継いだ名前なのですが、そう取られるんですね。代替として Puttable はどうかなと思ったんですが、これもシリアライズのライブラリの Put とかと混同されそうで怖いですね。",
        "user": "U5LEE6C1J",
        "type": "message"
    },
    {
        "ts": "1588244621.085800",
        "text": "自分がcerealを引き合いに出したのは，どちらかというと機能直交性(serializeすることと，それを何にどう使う/書き込むかは直交している筈)の点で気になるためです",
        "user": "U5G2BCVBN",
        "type": "message"
    },
    {
        "ts": "1588249733.086100",
        "text": "僕も notogawa さんに賛同で，これは出力先が Handle じゃなくても通用する気がして，ByteString に変換できれば良さそうな気がします (ただ，おそらく cereal はオーバーキルな気がしていて，名前的には StringLike みたいな感じなんですよね．僕はこれは，このプロジェクト独自の機能であって抽象化されるべきではない (例えば，String をファイルに書き込むときにエンコーディングの選択などで実装が一意でない) と思うので，このままでいいと思います)",
        "user": "U57D08Z9U",
        "type": "message"
    },
    {
        "ts": "1588250090.086300",
        "text": "(ついでに，個人的には，これらは Handle の種類や実際のデータ型によって，適切なバッファリング設定が違うはずで，書き込みの抽象化はそういうパフォーマンス面での制御がしにくく逆に結構面倒 (今回はおそらくそこまで IO パフォーマンスを気にするものではないと思うのですが) なので，結構避けてるというのがあります)",
        "user": "U57D08Z9U",
        "type": "message"
    }
]