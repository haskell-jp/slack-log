[
    {
        "type": "message",
        "user": "U04BD6ZFKQ8",
        "ts": "1678007314.529309",
        "text": "nobsun様のGitHubの内容を参照させていただき、自分なりにPack構文への対応(Ex. 3.35)と真理値の変更(Ex. 3.37)を行ってみました。\nnobsun様、ありがとうございました。その後、Ex. 3.38 を進めようとしています。"
    },
    {
        "type": "message",
        "user": "U584T7GAH",
        "ts": "1678007346.451459",
        "text": "\"Recursion Schemes by Example\"　読了　確かに実例豊富で面白かったが　古い？ライブラリーのためか動かない例もいくつかある\nAtCoder 鉄則本 A56 - String Hash　Hashを用いない素朴解法でACだったが　さらに題目どおりの爆速版を探求中"
    },
    {
        "type": "message",
        "user": "U4LGTMTMK",
        "ts": "1678011999.546249",
        "text": "というわけで本日の進捗。やっぱスマホで書いたせいか思った以上に進捗してないなぁ\n<https://github.com/haskell-jp/makeMistakesToLearnHaskell/commit/f80e1b970533c071b6887bbcc9316fd249696198>"
    },
    {
        "type": "message",
        "user": null,
        "ts": "1678593679.903049",
        "text": ""
    },
    {
        "type": "message",
        "user": "U4LGTMTMK",
        "ts": "1678593734.613299",
        "text": "山本悠滋です。makeMistakesToLearnHaskellの続きをちょっとだけ進めます。原稿が終わらない！"
    },
    {
        "type": "message",
        "user": "U03H9PH8FRP",
        "ts": "1678593928.962749",
        "text": "toyboot4e です。 AtCoder 過去問を解きます :lower_left_fountain_pen:"
    },
    {
        "type": "message",
        "user": "UL1HFJATE",
        "ts": "1678594140.366069",
        "text": "Docker と Makefile しか書いてないですが，<https://github.com/gksato/haskell-atcoder-server-gen> を書きます"
    },
    {
        "type": "message",
        "user": "U584T7GAH",
        "ts": "1678594453.439029",
        "text": "\"Conjugate Hylomorphisms Or: The Mother of All Structured Recursion Schemes,\" Ralf Hinze Nicolas Wu Jeremy Gibbons. <https://www.cs.ox.ac.uk/people/nicolas.wu/papers/Hylomorphisms.pdf>\nあとハシゴで AtCoder 鉄則本 B57 - Calculator <https://atcoder.jp/contests/tessoku-book/tasks/tessoku_book_ed>"
    },
    {
        "type": "message",
        "user": "U04BD6ZFKQ8",
        "ts": "1678601319.234809",
        "text": "S.K.です。遅くなってしまいましたが、今週もお世話になります。よろしくお願いします。\nImplementing Functional Languages:a tutorial の Ex. 3.38 の続きから進めたいと思います。"
    },
    {
        "type": "message",
        "user": "U04LCUXALJ2",
        "ts": "1678602748.637059",
        "text": "kkです．\nmixfix operators対応の自作言語を作成しています．\n前回参加時に言い残した文字列リテラルのエスケープ処理は終わりました．インデントもひとまずは簡単なルールだけで済ませてしまいました．do構文が無いとこんなものです．\n今日はパーサに関連する型にSemigroupなLocationのAnnotationを追加して，Lexerと繋げてみます．\n終わったら型検査や型推論に手を出します．"
    },
    {
        "type": "message",
        "user": "U57CGDBMG",
        "ts": "1678604260.630379",
        "text": "数年ぶり（？）に Haskell 書きます。\nChange-Making-Problem（釣り銭生成問題：お釣りを最小枚数で払う問題）で硬貨が3種類の場合の効率的なアルゴリズムを思いついた（かもしれない）ので QuickCheck で検証したいと思います。\nまずはこの問題の解法としてよく紹介される動的計画法のプログラムを書きました。 Haskell はこういうのはとても短く書けますね。\n```import Data.Array\n\ncoins = [43, 14, 1] -- 硬貨が 43円硬貨、14円硬貨、1円硬貨の 3種類として\nn = 99 -- 99円を払う\nmain = print $ as ! n -- =&gt; 結果 5枚（43円硬貨 1枚、14円硬貨 4枚）\nas = array (0, n) ((0, 0) : [(i, 1 + minimum [as ! (i - j) | j &lt;- coins, j &lt;= i]) | i &lt;- [1 .. n]])```"
    },
    {
        "type": "message",
        "user": "UL1HFJATE",
        "ts": "1678607223.643829",
        "text": "そろそろ抜けます．\n1. AtCoder の提案環境をインストールするshell scriptの提案用候補, \n2. その環境をmimicする Docker image, \n3. その環境からimportできるはずの全モジュールをインポートするだけのMain.hsを自動生成して,\n4. 自動で結合テストする，\nが目標ですが，3の途中まで終わりました．3用のツールの自動生成用のMakefileが書けたので，ツールを自動で走らせるtarget を書きたいですが，それはまた後で．"
    },
    {
        "type": "message",
        "user": "U57CGDBMG",
        "ts": "1678609202.215599",
        "text": "思いついたアルゴリズムの実装途中ですが用事があるので抜けます。"
    },
    {
        "type": "message",
        "user": "U4LGTMTMK",
        "ts": "1678611380.186639",
        "text": "本日の進捗はこれだけ\n<https://github.com/haskell-jp/makeMistakesToLearnHaskell/commit/d0ff35847dc4c037a2a3eb2313d7ad4224cdd03b>\nやはり原稿が終わらない！"
    },
    {
        "type": "message",
        "user": "U03H9PH8FRP",
        "ts": "1678611538.709929",
        "text": "テンプレートに `!` をつけまくってました！！！！！！"
    },
    {
        "type": "message",
        "user": null,
        "ts": "1678611695.441289",
        "text": ""
    },
    {
        "type": "message",
        "user": "U584T7GAH",
        "ts": "1678611748.152739",
        "text": "\"Conjugate Hylomorphisms Or: The Mother of All Structured Recursion Schemes\"　読了　全く消化不良　CTは難解\nAtCoder 鉄則本 B57 - Calculator Doubling　前問のA57と同じ Doubling を用いてAC　さらに高速化は <https://atcoder.jp/users/joetheshootingst|joetheshootingst> の解から学んだ"
    },
    {
        "type": "message",
        "user": "U04BD6ZFKQ8",
        "ts": "1678611798.524059",
        "text": "ifl-tut Ex. 3.38 について、EConstrの引数の充足/未充足をどうやって調べるかと、\n充足状態がわかったとしてどうやってコンパイル処理を分けるかを考えていました。\nあまり進められませんでした。:pensive:"
    },
    {
        "type": "message",
        "user": "U04LCUXALJ2",
        "ts": "1678613613.249019",
        "text": "自作言語，LexerとParserの接続が完了しました．次はいよいよ型検査ですかね．"
    },
    {
        "type": "message",
        "user": null,
        "ts": "1679198473.740359",
        "text": ""
    },
    {
        "type": "message",
        "user": "U4LGTMTMK",
        "ts": "1679198529.856699",
        "text": "山本悠滋です。今日も用事があるので、makeMistakesToLearnHaskellを少し進めて終わります。あと眠い！"
    },
    {
        "type": "message",
        "user": "U04BD6ZFKQ8",
        "ts": "1679198881.896069",
        "text": "S.K.です。今週もお世話になります。よろしくお願いします。\n引き続き、Implementing Functional Languages:a tutorial の Ex. 3.38 の続きから進めたいと思います。"
    },
    {
        "type": "message",
        "user": "U584T7GAH",
        "ts": "1679199177.596339",
        "text": "\"Dynamorphism 概論,\" ざくろ著 <https://45deg.github.io/rogyAdC2015/>\nあとハシゴで AtCoder 鉄則本 B58 - Jumping <https://atcoder.jp/contests/tessoku-book/tasks/tessoku_book_ee>"
    },
    {
        "type": "message",
        "user": "U57CGDBMG",
        "ts": "1679199638.765629",
        "text": "先週に続いて Change-Making-Problem（お釣り生成問題：お釣りを最小枚数で払う問題）をやります。\n16時頃抜けます。"
    },
    {
        "type": "message",
        "user": "UL1HFJATE",
        "ts": "1679205631.201379",
        "text": "1時間ほどしか参加できませんが、<https://github.com/gksato/haskell-atcoder-server-gen|https://github.com/gksato/haskell-atcoder-server-gen> の修正とpreflow-push max flow algorithm with scalingを書きます。"
    },
    {
        "type": "message",
        "user": "U584T7GAH",
        "ts": "1679209200.842269",
        "text": "\"Dynamorphism 概論\"　読了　分かりやすいのがウレシイ　難解な CT は避けて Haskell で説明されている　例題もすべて動く　:smile:\nAtCoder 鉄則本 B58 - Jumping　考慮中\n本日はこれにて離脱"
    },
    {
        "type": "message",
        "user": "U4M4XHKB8",
        "ts": "1679210825.024059",
        "text": "チェシャ猫です。厳密には Haskell じゃないですが Elm でちょっとした習作を書いていきます。"
    },
    {
        "type": "message",
        "user": "UL1HFJATE",
        "ts": "1679211127.564169",
        "text": "repoの修正はとりあえず応急手当てしました。ちょっとだけmax flowも進んだところで抜けます。"
    },
    {
        "type": "message",
        "user": "U57CGDBMG",
        "ts": "1679211291.335459",
        "text": "思いついたアイデアには考慮漏れがありました :cold_sweat:。抜けます。"
    },
    {
        "type": "message",
        "user": "U4LGTMTMK",
        "ts": "1679212169.277949",
        "text": "そろそろ出かけるので今日はここまでにしておきます。\n<https://github.com/haskell-jp/makeMistakesToLearnHaskell/commit/17ebe926c8a14180c65c8d6543ccf76a36e096dd>"
    },
    {
        "type": "message",
        "user": null,
        "ts": "1679216495.891259",
        "text": ""
    },
    {
        "type": "message",
        "user": "U04BD6ZFKQ8",
        "ts": "1679216832.853809",
        "text": "一応、何とかEConstrの引数充足/未充足の状態に応じてコンパイル処理を分ける様にできたつもりです。\n他のテストプログラムが動作するかの確認が残っています。"
    },
    {
        "type": "message",
        "user": null,
        "ts": "1679803298.827159",
        "text": ""
    },
    {
        "type": "message",
        "user": "U4LGTMTMK",
        "ts": "1679803415.050319",
        "text": "山本悠滋です。いつもどおりmakeMistakesToLearnHaskellの続きと、久しぶりにcabal replの件を進めます。もうcabalの最新版ではGHC 9.4以降でできているらしいし、いい加減とりあえず動くものにしたい..."
    },
    {
        "type": "message",
        "user": "U584T7GAH",
        "ts": "1679803481.225309",
        "text": "プログラマーのための圏論 (上級編) <https://bitterharvest.hatenablog.com/archive/category/%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9E%E3%83%BC%E3%81%AE%E3%81%9F%E3%82%81%E3%81%AE%E5%9C%8F%E8%AB%96%20%28%E4%B8%8A%E7%B4%9A%E7%B7%A8%29|https://bitterharvest.hatenablog.com/archive/category/%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%[…]%E5%9C%8F%E8%AB%96%20%28%E4%B8%8A%E7%B4%9A%E7%B7%A8%29>\nあとハシゴで AtCoder 鉄則本 A59 - RSQ (Range Sum Queries)"
    },
    {
        "type": "message",
        "user": "UL1HFJATE",
        "ts": "1679805034.729469",
        "text": "明日はatcoder language update の 2nd freezeなので、更新用のscriptを走らせて書き込みに行きます。ついでに <https://github.com/gksato/haskell-atcoder-server-gen|https://github.com/gksato/haskell-atcoder-server-gen> を Shake-basedに置き換えてみようかな。"
    },
    {
        "type": "message",
        "user": "U04BD6ZFKQ8",
        "ts": "1679806673.382259",
        "text": "S.K.です。今週もお世話になります。よろしくお願いします。\nImplementing Functional Languages:a tutorial の Ex. 3.38 について、他のテストプログラムの確認が一応大丈夫そうだったので、\nMark7 Gマシンの写経とExerciseを始めていきたいと思います。"
    },
    {
        "type": "message",
        "user": "UL1HFJATE",
        "ts": "1679818531.857219",
        "text": "とりあえず更新を終えてスプレッドシートに書き込むのだけやってきました。今日は抜けます。"
    },
    {
        "type": "message",
        "user": "U584T7GAH",
        "ts": "1679820387.849209",
        "text": "プログラマーのための圏論 (上級編) 1.8「極限－極限の例」まで読了　丁寧な説明が分かりやすい\nAtCoder 鉄則本 A59 - RSQ (Range Sum Queries)　RMQ/RSQ 的問題の典型　一発 AC\nこれにて離脱"
    },
    {
        "type": "message",
        "user": null,
        "ts": "1679821279.713719",
        "text": ""
    },
    {
        "type": "message",
        "user": "U4LGTMTMK",
        "ts": "1679821431.657059",
        "text": "makeMistakesToLearnHaskellの進捗はこれだけ\n<https://github.com/haskell-jp/makeMistakesToLearnHaskell/commit/810e2aca3212d2e21dd66f1f3b1f4506a8f69a74>\ncabal replの件は次の方針を決めて依存パッケージをどうするかなど考えてました。\nHaskell関係ない別件が捗っちゃってあまり進まず！多分延長戦頑張ります"
    },
    {
        "type": "message",
        "user": "U04BD6ZFKQ8",
        "ts": "1679821483.179979",
        "text": "Ex. 3.40 の途中まで進めました。残りは遷移規則(3.39)と(3.40)です。\n算術演算でなるべくヒープを使わずにVスタックを使って処理するにはどうするべきなのか確認中です。"
    },
    {
        "type": "message",
        "user": "U050T9D1RCH",
        "ts": "1679925825.343449",
        "text": "<@U050T9D1RCH> has joined the channel"
    },
    {
        "type": "message",
        "user": null,
        "ts": "1680408064.844369",
        "text": ""
    },
    {
        "type": "message",
        "user": "U584T7GAH",
        "ts": "1680408371.993429",
        "text": "プログラマーのための圏論 (上級編)　2. 「<https://bitterharvest.hatenablog.com/entry/2018/01/04/103917|極限－余錐と余極限の定義> 」\nあとハシゴで AtCoder 鉄則本 A60 - Stock Price"
    },
    {
        "type": "message",
        "user": "U03H9PH8FRP",
        "ts": "1680408493.649779",
        "text": "こんにちは。 ABC296 の upsolve と EDPC P をやります"
    },
    {
        "type": "message",
        "user": "U04BD6ZFKQ8",
        "ts": "1680408803.472799",
        "text": "S.K.です。今週もお世話になります。よろしくお願いします。\nImplementing Functional Languages:a tutorial の Mark7 Gマシンの続きから進めていきたいと思います。\n(前回の後、Ex. 3.43 まで進めましたが、コンパイル結果がテキストと異なるところがあるため、その原因確認から進めます。)"
    },
    {
        "type": "message",
        "user": "U4LGTMTMK",
        "ts": "1680412542.094269",
        "text": "山本悠滋です。いつもどおりmakeMistakesToLearnHaskellの続きと、cabal replの件を進めます。\n開始前に昼寝を始めて「Google Calendarの通知で目を覚まそう...」と高をくくっていたら今日に限って予定を登録し忘れていた :disappointed_relieved:"
    },
    {
        "type": "message",
        "user": "U584T7GAH",
        "ts": "1680421207.899129",
        "text": "プログラマーのための圏論 (上級編) 7.8「随伴関手を Haskell で表現する」まで読了　今回は必ずしも良い説明ではないと思う　次回で切り上げよう\nAtCoder 鉄則本 A60 - Stock Price　AC　教訓：Data.Vector.Unboxed.find や Data.List.find よりも　手製の recursion が早い（ことがある）\nこれにて離脱"
    },
    {
        "type": "message",
        "user": "U4LGTMTMK",
        "ts": "1680422672.701379",
        "text": "本日のmakeMistakesToLearnHaskellの進捗\n<https://github.com/haskell-jp/makeMistakesToLearnHaskell/commit/51d4a1649164afe6897a9aa225de68aea1a001b7>"
    }
]