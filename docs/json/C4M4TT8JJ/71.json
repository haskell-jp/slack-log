[
    {
        "ts": "1585282246.113400",
        "text": "<@U4MMHDSNT> 遅い反応ですが、3つの構成子の件。\ndataの直和型には、expression problemがあります。\nなので、コードを完全に自分で管理でき、後から構成子を増やすことに問題がなければ、単純にdataを使います。\nユーザが拡張する可能性があるなら、PatternSynonymsを使います。",
        "user": "U56MBRKR9",
        "type": "message"
    },
    {
        "ts": "1585292882.121600",
        "text": "```[n] := ∀ X1,...,Xn . X1 + ... + Xn \nin_n,k :: [n-1] -&gt; [n]```\nのような抽象概念があれば、\nEither つかうかどうか問題は解決しそうだと思いましたが\n実際あるのでしょうか。",
        "user": "U0108S1LS2W",
        "type": "message"
    },
    {
        "ts": "1585293157.123200",
        "text": "( dependent type をもつシステムでは、型と項の垣根がないので、普通に定義できそうですが、\nHaskell だと厳しいのだろうか。)",
        "user": "U0108S1LS2W",
        "type": "message"
    },
    {
        "ts": "1585293275.124800",
        "text": "拡張可能和みたいなのを指しているんですかね？\nライブラリーとしてはいくつか提供しているものがありますね。\n<https://hackage.haskell.org/package/extensible-0.8/docs/Data-Extensible-Sum.html> とか",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1585293339.125300",
        "text": "おおお、それです。ありがとうございます！",
        "user": "U0108S1LS2W",
        "type": "message"
    },
    {
        "ts": "1585293431.126600",
        "text": "確かに便利ではあるんですが、競合するものがいくつかあって標準もなかったり、記述が標準よりも冗長になりがちだったりで、なかなかおいそれと使おうとはならないのが悩ましいんですよねぇ :disappointed_relieved:",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1585347712.132200",
        "text": "Thanks &gt; <@U56MBRKR9>",
        "user": "U4MMHDSNT",
        "type": "message"
    }
]