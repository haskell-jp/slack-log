[
    {
        "text": "現在作ろうとしているツールの一環として、「一定の文字列候補の中から、入力された文字列に一致する文字列をフィルタリングする」機能を作ろうとしています。\n(最終的に作りたいものはrofiやdmenuと似たようなものです、というか具体的にはrofiクローンのようなツールを作ろうとしています)\n\nこのツールでは「文字列の一致」の判定方法をFuzzyやGlob、regex等複数から選べるようにしたいため、ツール全体のステートを維持する型の中に判定用の関数(matcherと呼ぶことにします)を含めたいです。\n\n実際に今考えていたのは以下のような型です:\n\n```data AppModel = AppModel { _typing :: Text\n           , _candidates :: Zipper Candidate\n           , _configFile :: FilePath\n           , _matcher :: (T.Text -&gt; T.Text -&gt; Bool) -- ^ ここのこと\n           } deriving (Eq)```\nしかし、 `AppModel` はUIライブラリ(<https://github.com/fjvallarino/monomer|monomer>)の都合で `Eq` インスタンスを持つ必要があるのですが、 `Eq (a -&gt; a)` のインスタンスが存在しない故に定義が出来なくなってしまっています。\n\n実装の仕方を自分なりに複数考えてみたのですが、どれも微妙でどれを選ぶべきなのか、またより良い方法は無いのかで悩んでいます。\n何かしら定石みたいなものがあれば教えていただければ幸いです :pray:\n(自分で考えたものはスレッドに書き込みます)",
        "type": "message",
        "ts": "1663934840.110889",
        "user": "ULTBB86UC"
    },
    {
        "text": "【 1. matcherが同一であるかを気にしない `Eq` のインスタンスを手書きする】\n\n一番単純かつ簡単な方法だと思います。しかし、この時の `Eq`のインスタンスは `AppModel`の変更を感知するために必要であると思われるので、中途半端なインスタンスを書くのは良くないような気がしています。\n\n``` haskell\ninstance Eq AppModel where\n  m1 == m2 = all [ m1^.typing ==  m2^.typing\n       , m1^.candidates == m2^.candidates\n       , m1^.configFile == m2^.configFile\n       ]```\n【 2. matcherにラッパー型を用意し、識別子を付けてそれで区別する】\n\nMatcherの名前と実際の関数を含む `Matcher` 型を用意し、その `Eq`インスタンスは名前のみ一致を見るようにします。\n\n一番無難そうだなとは思うのですが、矢張り `Matcher` の `Eq`インスタンスが中途半端なのと名前と関数の紐付けが緩い(同じ名前で別の関数とかも作れてしまう)ので、本当にこれで良いのだろうか…と思っています。\n\n```data Matcher = Matcher { _matcherName :: T.Text\n             , _matcher :: T.Text -&gt; T.Text -&gt; Bool\n             }\nmakeLenses ''Matcher\n\ninstance Eq Matcher where\n  m1 == m2 = (m1^.matcherName) == (m2^.matcherName)\n\n-- @match prefixMatcher \"search term\" \"Candidate\"@ のようなイメージ\nmatch :: Matcher -&gt; (T.Text -&gt; T.Text -&gt; Bool)\nmatch = view matcher\n\nprefixMatcher :: Matcher\nprefixMatcher = Matcher \"prefix\" T.isPrefixOf\n\ndata AppModel = AppModel { _typing :: Text\n           , _candidates :: Zipper Candidate\n           , _configFile :: FilePath\n           , _matcher :: Matcher\n           } deriving (Eq)```\n",
        "type": "message",
        "ts": "1663934844.975139",
        "user": "ULTBB86UC"
    },
    {
        "text": "拡張性が減ってしまいますが私なら\n```data Mathcer = Fuzzy | Glob | Regex```\nみたいな型を作って、実際にmatchするときはそれに対するinterpreter（ `Matcher -&gt; T.Text -&gt; T.Text -&gt; Bool` のような型の関数）を作るような方法を採りますね。",
        "type": "message",
        "ts": "1663935383.018309",
        "user": "U4LGTMTMK"
    },
    {
        "text": "成程確かに...!!\nMatcherに拡張性持たせる必要もあまりないと思うので、それが一番良さそうですね。\n関数として捉えすぎてました...難しく考えすぎていた...\nありがとうございます!",
        "type": "message",
        "ts": "1663935542.316679",
        "user": "ULTBB86UC"
    }
]