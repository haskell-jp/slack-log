[
    {
        "ts": "1596815300.200700",
        "text": "Haskell の `head` / `tail` は単連結リストの言葉ですね。Haskell のリストはそのまま単連結リストなので、単連結リストの先頭を示す `head` とそれ以降を示す `tail` という言葉を関数名にそのまま流用したものです。\n\n確かにコマンドの `head` / `tail` を想定すると、ギョッとする命名かもしれませんね",
        "user": "U57D08Z9U",
        "type": "message"
    },
    {
        "ts": "1596848095.201100",
        "text": "ちなみに、 `head :: [a] -&gt; Int -&gt; [a]` に相当するものとして `take` があります（引数の順番は逆なので注意）。\nそれを使って `first` みたいなものを作れば良かったんじゃない、という意図なのかも知れませんが。",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1596863604.208500",
        "text": "`head` はなくてはならないものかというと必ずしもそういうことはなくて、 `xs :: [a]` について、 `let (hd:tl) = xs in (hd,tlを使った式)` とすれば先頭の要素とそれ以外を取り出せます。",
        "user": "U61BA2X0U",
        "type": "message"
    },
    {
        "ts": "1596871961.208700",
        "text": "ご回答ありがとうございます。\n\n<@U57D08Z9U>\n単連結リストは日本語でいうところの単方向リスト(Singly linked list)でしょうか？\n\n<@U4LGTMTMK>\n少し話が逸れますが、 `take` がその順番になってる理由は、取る数よりリストの方が適用する種類が多いからそうなってるんでしょうか？",
        "user": "U7YMV774J",
        "type": "message"
    },
    {
        "ts": "1596873824.208900",
        "text": "はい、そうだと思います。",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1596892952.216500",
        "text": "LensのPrismの使い方について質問です\nPrismを `set`や `over`で `ASetter` として使えることは分かったのですが、Prismの中身に `Lens`を使用してアクセスしたいと思った時にやり方がわかりません。(例を下に載せます)\n現在は↓の `makeBelongTo` のようにしているものの、Characterの値コンストラクタが変わったら変更しなくてはいけなくなり、じゃあPrismにしたメリットないのでは、と悩んでいます。\n```data Character = Animal {\n                    _name  :: String\n                  , _age  :: Int\n                  , _memberOf :: Maybe String\n                  }\n               | Object {\n                    _name :: String\n                  , _memberOf :: Maybe String\n                  }\n              deriving (Show)\n\nmakePrisms ''Character\nmakeLenses ''Character\n\n-- この関数を\nmakeBelengTo :: String -&gt; Character -&gt; Character\nmakeBelengTo belongTo c@(Animal n a _) = Animal n a (Just belongTo)\nmakeBelengTo belongTo c@(Object n _)   = Object n (Just belongTo)\n\n-- こんな感じにしたい(これだと動かない)\nmakeBelongToWithLens :: String -&gt; Character -&gt; Character\nmakeBelongToWithLens belongTo = set (_Animal.memberOf) (Just belongTo)\n                              . set (_Object.memberOf) (Just belongTo)```\nまた、\n```set (_Animal._3) (Just belongTo)```\nのような解法は見つけたのですが、結局タプルの位置を指定しているためこれならPrismのメリットがないな…と思っています。",
        "user": "ULTBB86UC",
        "type": "message"
    },
    {
        "ts": "1596920248.216800",
        "text": "外泊中なので試せないのですが、普通に `set memberOf (Just belongTo)` か `c{_memberOf=Just belongTo}`で行けないでしょうか。",
        "user": "U570660KX",
        "type": "message"
    },
    {
        "ts": "1596950153.217000",
        "text": "あっ確かに…\n実際に書いているコードでLensの名前が違ったのでこんな書き方にしていましたが、よく考えたら同じ名前にすれば大丈夫でした…(違う名前にする必要がなかったです)\nそれを元にして考えたら他の部分もうまく行きました！ありがとうございます",
        "user": "ULTBB86UC",
        "type": "message"
    },
    {
        "ts": "1597058715.217300",
        "text": "<@U018KEA7Y83> has joined the channel",
        "user": "U018KEA7Y83",
        "type": "message"
    },
    {
        "ts": "1597069878.217500",
        "text": "<@U018J8X6WFP> has joined the channel",
        "user": "U018J8X6WFP",
        "type": "message"
    },
    {
        "ts": "1597078487.220600",
        "text": "megaparsec 固有の質問なのですが、`Text.Megaparsec.Char.Lexer.lineFold` ができることは同モジュールの `indentBlock` と同じなんでしょうか？`indentBlock` でできなくて `lineFold` ならできることがある？単に書き味の違い？\n\nHackage\n• <https://hackage.haskell.org/package/megaparsec-8.0.0/docs/Text-Megaparsec-Char-Lexer.html#v:lineFold>\n• <https://hackage.haskell.org/package/megaparsec-8.0.0/docs/Text-Megaparsec-Char-Lexer.html#v:indentBlock>\nチュートリアル\n• <https://markkarpov.com/tutorial/megaparsec.html#indentationsensitive-parsing>",
        "user": "U4L0B71L1",
        "type": "message"
    },
    {
        "ts": "1597078851.220700",
        "text": "どっちにしろこれを使って Haskell のオフサイドルールをパースするのは難しいかなぁ。言語レポートに掲載されてるアルゴリズムと等価なパーサーになってるかの保証が難しそう。",
        "user": "U4L0B71L1",
        "type": "message"
    },
    {
        "ts": "1597215041.239900",
        "text": "`Data.Yaml` のパーサーコンビネーターの作り方について質問です\n`decodeFileEither`などで読み込んだYamlの中にあるパスをさらに読み込んでパースがしたいのですが、一度他の型を経由させる方法しか思いつかなくて迷っています。\nパーサー(`Parser a` )内部でIOを使うことは可能でしょうか(パース結果をFilePathとして、そのファイルも読みにいくことは可能でしょうか)\n`runParser` 内部にある `f` がどうにかできないのかなと思っているのですがよくわからず…\n何かいい方法があれば知りたいです…\n\n例としては:\n```data:\n  - path: foo.yaml\n    offset: (0, 1)\n  ...```\nというファイルを `decodeFileEither` で読んだ時、`foo.yaml` も読み込んで結果に含めたいです。\n\n現在は一度しか入れ子にならないため、一つ中間用の型を用意してその型に(パスはStringとして保存して)変換した後、その中にしまったパスをさらに `decodeFileEither` で読んでいます。\n\n\n```data ActualData = ActuallData ...\n\ndata IntermediateData = IntermidiateData { path :: FilePath, ... }\n\nload :: FilePath -&gt; IO (Either ParseException ActualData)\nload fp = do\n  intermediate &lt;- decodeFileEither fp\n  includedData &lt;- decodeFileEither $ path intermediate\n  return -- intermediate と includedData を使用して、ActualData を生成する```\n実際に使っている例だとこれになります。( `Face` をデコードするために、一度 `FaceFile` としてデコードした後に読み直している)\n<https://github.com/Cj-bc/faclig/blob/master/src/Graphics/Asciiart/Faclig/Types.hs#L36-L57>\n\nしかし、\n\n• 途中に他の型をできれば挟みたくない\n• 入れ子を何重にもしたいので、一度で解決できるようにしたい\nという理由があり、なんとかできないのかなと悩んでいます。",
        "user": "ULTBB86UC",
        "type": "message"
    },
    {
        "ts": "1597215389.240100",
        "text": "&gt; パーサー(`Parser a` )内部でIOを使うことは可能でしょうか\n少なくとも、これはできないと思います。\nここでの `Parser a` は <https://hackage.haskell.org/package/aeson-1.4.6.0/docs/Data-Aeson-Types.html#t:Parser> で、 IO を含まないので。",
        "user": "U56L7EVNY",
        "type": "message"
    },
    {
        "ts": "1597215514.240400",
        "text": "HKDにしてYAMLをパースした結果\nとして `Record IO` を返すようにするか、そこまでしなくとも `IO` 型の値をフィールドに含めるのはいかがでしょうか？\nHKDについては <https://qiita.com/thimura/items/85bdeeca6ced74c89478> とか  <http://fumieval.hatenablog.com/entry/2019/12/25/224329> を。",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1597215807.240700",
        "text": "同じ議論が <https://haskell-jp.slack.com/archives/C4M4TT8JJ/p1554720210064400> でもありましたね...\n確かにこのスレッドへの返信の通りreflectionパッケージを使うという手もありますね。",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1597216076.241100",
        "text": "`Record`については全く知らなかったので調べてみます！\nフィールドにIO型を含めた場合、最終的にはIOを取り外す処理は一括でできるのでしょうか…?(各フィールドの値をそれぞれ取り出す必要があるように思えているのですがそうでもない？)\nとりあえず、いただいたリンクとrefrectionを調べてみます！",
        "user": "ULTBB86UC",
        "type": "message"
    },
    {
        "ts": "1597216223.241300",
        "text": "最終的に `IO (Parser a)` みたいにできるんじゃないかな、HKD なら",
        "user": "U56L7EVNY",
        "type": "message"
    },
    {
        "ts": "1597216235.241500",
        "text": "&gt; 最終的にはIOを取り外す処理は一括でできるのでしょうか\nえぇ、その部分はbarbiesに任せられるはず。そこを一括でできるのがbarbiesの強みなので",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1597216358.241700",
        "text": "`Parser (IO a)` （もっと正確には、 `Compose Parser IO a` ）から `IO a` に変換して最終的に `Identity a` として取り出せるようになるかと。",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1597216534.241900",
        "text": "色々教えてくださりありがとうございます！\nゆっくり噛み砕いてみます",
        "user": "ULTBB86UC",
        "type": "message"
    },
    {
        "ts": "1597410968.242400",
        "text": "<@U0191KH0SA0> has joined the channel",
        "user": "U0191KH0SA0",
        "type": "message"
    },
    {
        "ts": "1598117687.000200",
        "text": "<@U019PLHJQ65> has joined the channel",
        "user": "U019PLHJQ65",
        "type": "message"
    },
    {
        "ts": "1598162532.000400",
        "text": "<@U019BASD7D0> has joined the channel",
        "user": "U019BASD7D0",
        "type": "message"
    },
    {
        "ts": "1598189810.003900",
        "text": "<@U01A1C1LQSU> has joined the channel",
        "user": "U01A1C1LQSU",
        "type": "message"
    },
    {
        "ts": "1598249598.004100",
        "text": "<@U01A20R5Z0Q> has joined the channel",
        "user": "U01A20R5Z0Q",
        "type": "message"
    },
    {
        "ts": "1598507424.005700",
        "text": "Haskell で書いたプログラムをウェブページの上で動かしたいのですが、どうすればいいのでしょうか？　前から知っていた GHCJS は開発が停止してしまっているようです。",
        "user": "U5LEE6C1J",
        "type": "message"
    },
    {
        "ts": "1598512144.005900",
        "text": "状況を考えると質問をした後に思い出した Asterius しか選択肢がなさそうなので、それを試してみます。",
        "user": "U5LEE6C1J",
        "type": "message"
    },
    {
        "ts": "1598806266.000200",
        "text": "<@U01A4JVLVNV> has joined the channel",
        "user": "U01A4JVLVNV",
        "type": "message"
    },
    {
        "ts": "1599094688.000300",
        "text": "class method を inline するにはどうすればいいでしょうか？\n調べた限り、instance 宣言の際に INLINE プラグマを書けばよさそうです。\nしかし、プロファイルを取ると、その method がボトルネックとして現れるので、inline できてないようです。\n\n具体的には、以下の read8 を、具体的な型 ReadBuffer に対して呼び出しています。\n\n<https://hackage.haskell.org/package/network-byte-order-0.1.5/docs/src/Network.ByteOrder.html#read8>\n\n関数定義をトップレベルに移してみたり、関係ないとは思いますが SPECIALIZE を書いたりしてみましたが、やはりうまく行きませんでした。",
        "user": "U56MBRKR9",
        "type": "message"
    },
    {
        "ts": "1599099489.000500",
        "text": "`read8` を使用している箇所が多相になっているためにコンパイル時に型が特定できてない、というケースだと思うので、`read8` を 実際に呼んでいる箇所を一つずつ検証することになりますね... 呼んでいる関数をインライン化するとか。\n（関連: <https://blog.miz-ar.info/2016/06/writing-efficient-program-with-haskell/#2.specialization> すでに読んでいる記事でしたらすみません）",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1599099630.000800",
        "text": "「具体的な型」と書いたように、多相にはなっていません。",
        "user": "U56MBRKR9",
        "type": "message"
    },
    {
        "ts": "1599103396.001200",
        "text": "INLINEプラグマを指定していれば、意図的に最適化を切ったりしないかぎりインライン化されるはずです。もしかしたらプロファイリングが影響しているかもしれません（トップレベルに絞ってみてはいかが）。また、無関係ですがread16などはインライン化がなく辞書渡しになるので、かなりパフォーマンスが落ちます",
        "user": "U4KUNQF9N",
        "type": "message"
    },
    {
        "ts": "1599103587.001400",
        "text": "read16 に SPECIALIZE を書いた方がいいってことですね？",
        "user": "U56MBRKR9",
        "type": "message"
    },
    {
        "ts": "1599104176.001800",
        "text": "ユーザーがReadableのインスタンスを追加できるので私ならINLINEをつけますが、それが想定した使い方でなければSPECIALISEでもいいと思います",
        "user": "U4KUNQF9N",
        "type": "message"
    },
    {
        "ts": "1599105752.002300",
        "text": "ありがとうございます。INLINE を付けておきます。",
        "user": "U56MBRKR9",
        "type": "message"
    },
    {
        "ts": "1599237119.002800",
        "text": "<@U01AAK4UJPN> has joined the channel",
        "user": "U01AAK4UJPN",
        "type": "message"
    },
    {
        "ts": "1599310854.003600",
        "text": "この質問に答えようと思ったのですが、ちょっと自信がないのでツッコミをいただきたいです。いろいろ断言しちゃっていいか迷う...\nreplyに回答案を書きます。\n<https://ja.stackoverflow.com/questions/70079/%E3%83%A2%E3%83%8A%E3%83%89%E5%89%87%E3%82%92%E5%B4%A9%E3%81%97%E3%81%A6%E3%81%97%E3%81%BE%E3%81%86%E4%BE%8B%E3%81%8C%E7%9F%A5%E3%82%8A%E3%81%9F%E3%81%84>",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1599310918.003800",
        "text": "------ 以下回答案 ------\nコメントにも回答にも明確に回答されてないとおぼしき部分について回答します。\n\n&gt; つまりどこの部分にどのように注意してコードを書けばいいのかというようなことが気になっています。おそらく、instanceを実装しているときですよね？\n&gt;\n&gt; instanceの実装さえミスがなければ fやg はモナド則を満たさなくなってしまうことと関係ないと思っているのですがいかがでしょうか？\n\nご認識のとおりです。\nMonad則はあくまでも`&gt;&gt;=`や`return`についての規則であるため、`&gt;&gt;=`や`return`の**引数が**、つまり`f`や`g`がどうなっていようと関係ありません。\n\nが、そもそもあなたが自分でMonadのインスタンスを定義する必要さえないでしょう。\n世の中には無数のMonadが存在するように見えるかも知れません（し、広い意味のモナドは実際そうなのでしょうが）、Haskellプログラミングにおいて役に立つMonadは、数えるほどしかありません。\n実際のところ[モナドの六つの系統[Functor x Functor] - モナドとわたしとコモナド](<http://fumieval.hatenablog.com/entry/2013/06/05/182316)という記事にあるものが概ねすべてです>（分類方法そのものは一般的ではないですが）。\n\n世に広まるパッケージ見ていると、一見先ほどの記事にリストアップされていないMonadが見つかることがあります。\nところがそれらはほぼ間違いなく、ここにリストアップされているMonadの単純なラッパーか、それらを組み合わせて別の名前を付けたり、何らかの用途に特殊化したものです。\n独自に定義しているものがあったとしたら、それは恐らく効率のためであって、実質的な役割は先ほどの記事にリストアップされたMonadのうち、どれかに当てはまるはずです。\n\nもしリストアップされているものにどれにも当てはまらないものができれば、別途論文が書かれていると思います（というのも、実は「どれにも当てはまらない」のかどうか個人的にわからない[Select Monad](<http://hackage.haskell.org/package/transformers-0.5.6.2/docs/Control-Monad-Trans-Select.html)というのがあるからです>）。\nとにかく、「Haskellプログラミングに役に立つMonad型クラスのインスタンス」というのはそれぐらい貴重なのです。\n（もっと広い意味の、本来の圏論における「モナド」はいろいろあるかも知れませんが、私は圏論には詳しくないのでその点は突っ込まないでください！）\n\n少し話がそれましたが、そうした事情があるため、「モナド則を守れているかどうか」というのを意識する必要があるのは、少なくともそうしたライブラリーを作るようになったら、であって、純粋にMonadのユーザーである限りその必要はありません。\nそれはほとんどのHaskellプログラマーが経験しないことのはずです。\n仮に経験したとしても、多分にそれは（先ほど触れたような）既存のMonadを元に独自定義する場合であって、大抵はコピペと少しの修正で済むでしょう。\nDRY原則に従うなら、そんなことしたくないですよね？",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1599317355.004400",
        "text": "<@U01A5JC8GV8> has joined the channel",
        "user": "U01A5JC8GV8",
        "type": "message"
    },
    {
        "ts": "1599378431.005800",
        "text": "高度な話題なので付いていけないですが、回答がついていなかったのでコメントさせて頂きます:bow:\n\n&gt; &gt; つまりどこの部分にどのように注意してコードを書けばいいのかというようなことが気になっています。おそらく、instanceを実装しているときですよね？\n&gt; &gt;\n&gt; &gt; instanceの実装さえミスがなければ fやg はモナド則を満たさなくなってしまうことと関係ないと思っているのですがいかがでしょうか？\n&gt; \n&gt; ご認識のとおりです。\n&gt; Monad則はあくまでも`&gt;&gt;=`や`return`についての規則であるため、`&gt;&gt;=`や`return`の**引数が**、つまり`f`や`g`がどうなっていようと関係ありません。\n上記に関して、私も同様の理解です。\n\n上記の記事の質問者さんはモナド則を崩せる方法を知りたがっているようですが、すでに回答があるようにモナド則を崩す実装は簡単にできると思います。\nプログラマがモナドを自作するときに気をつけるべきことは、モナド則を崩す実装について考えることではなく、モナド則を満たした実装になっているかに気をつけることかと思います。\nモナド則を満たさない実装はあらゆるパターンが考えられますし、モナド則を満たしていない時点で、それはモナドではないため、一般のプログラマがここを深く追求する価値があるとは（今の私のレベルでは）思えません。モナドに代わる新しい計算の概念を探そうとしている方には研究対象になるのかもしれませんが。\n\n後半のモナドの分類の言及については私の手に余りますので、コメントは控えます。。\n\n&gt; ご認識のとおりです。\n&gt; Monad則はあくまでも`&gt;&gt;=`や`return`についての規則であるため、`&gt;&gt;=`や`return`の**引数が**、つまり`f`や`g`がどうなっていようと関係ありません。\nただ、上記の回答だけでも、質問者さんへの回答にはなっているかと思いました。",
        "user": "U012A4ALLSC",
        "type": "message"
    },
    {
        "ts": "1599388075.006100",
        "text": "&gt; ただ、上記の回答だけでも、質問者さんへの回答にはなっているかと思いました。\nそうですね... ただこういう質問自体にうんざりしてまして。\nみんな難しそうに言っているけど、そもそもほとんどの人は気にする必要さえないよ、というのはどうしてもこの場を借りて表明しておきたいのです。",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1599470054.006700",
        "text": "<@U019SBU4MJT> has joined the channel",
        "user": "U019SBU4MJT",
        "type": "message"
    },
    {
        "ts": "1599480968.006800",
        "text": "質問の主旨と全然違うのですが、WriteBufferのread8を見た感じ、これがボトルネックになるくらい呼ばれるなら、個数指定で読んでまとめて返すようなAPIが欲しいかも、と思いました。",
        "user": "U570660KX",
        "type": "message"
    },
    {
        "ts": "1599565266.007100",
        "text": "<@U019UBHCBKR> has joined the channel",
        "user": "U019UBHCBKR",
        "type": "message"
    },
    {
        "ts": "1600051976.012200",
        "text": "<@U01ALNPTZEX> has joined the channel",
        "user": "U01ALNPTZEX",
        "type": "message"
    }
]