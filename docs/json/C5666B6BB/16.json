[
    {
        "ts": "1520860256.000049",
        "text": "<@U9NUV224E> has joined the channel",
        "user": "U9NUV224E",
        "type": "message"
    },
    {
        "ts": "1520997879.000079",
        "text": "`machinecell` について質問です。\n<https://hackage.haskell.org/package/machinecell>\n\n複数のストリームが同時に流れることがあると思うのですが、その場合、複数スレッドで並行（？）処理されるような機能はありますでしょうか？\nreadme に parallel という文字が見えるのですが、それがどういう意味なのかいまいちつかめず・・・",
        "user": "U4LNDESN8",
        "type": "message"
    },
    {
        "ts": "1520998870.000153",
        "text": "どうもです。そこのparallelという単語は、単にArrowの `(***)` 演算子が平行に射を合成するよ、という意味で使っているもので、並列演算の意味ではないんですね。パッケージの標準機能としては、マルチスレッド的なものは提供していません。",
        "user": "U570660KX",
        "type": "message"
    },
    {
        "ts": "1520999077.000090",
        "text": "並行処理対応としては、Pipes.Concurrentのspawnに相当する機能を試験実装していたりします(今作っているアプリのコードにこっそり入っている)。 <https://github.com/as-capabl/armageddon/blob/53004f980f17eea5c6ea38a8c5ea53d2ead264e9/machinecell-extra/src/Control/Arrow/Machine/World.hs#L487>",
        "user": "U570660KX",
        "type": "message"
    },
    {
        "ts": "1521002869.000002",
        "text": "あ、作者さんだ！\n回答ありがとうございます！",
        "user": "U4LNDESN8",
        "type": "message"
    },
    {
        "ts": "1521002955.000157",
        "text": "マルチスレッド的な事情については了解しました。",
        "user": "U4LNDESN8",
        "type": "message"
    },
    {
        "ts": "1521002967.000186",
        "text": "試験実装の方、おもしろそうですね！",
        "user": "U4LNDESN8",
        "type": "message"
    },
    {
        "ts": "1521022633.000006",
        "text": "とりあえずコンパイルが通るコードが無いと何をしたいのかわからない\n引数を([Bool], Int) -&gt; xにするぐらいなら[Bool] -&gt; Int -&gt; xにした方が良さそうですが\nそもそもこの[Bool]必要なのか疑問",
        "user": "U57CUMWQ6",
        "type": "message"
    },
    {
        "ts": "1521197380.000419",
        "text": "Slack上の「Haskell入門 関数型プログラミング言語の基礎と実践」読書会で\n「transformersパッケージと mtlパッケージの違いはなんだろう」\nという疑問が出てました。\n<https://umekitahs.slack.com/>",
        "user": "U57CGDBMG",
        "type": "message"
    },
    {
        "ts": "1521209862.000265",
        "text": "transformers と mtl の歴史的なことは <https://wiki.haskell.org/Monad_Transformer_Library> にまとまっているようです。これは私のブログ (<http://syocy.hatenablog.com/entry/haskell-library-2016>) にも書いたことがあり、孫引きしてしまうと、\n\n&gt;  まず初期にmtl(mtl V1)があり、その後に新機能のtype familiesを用いたmtl-tfが開発されたものの mtlと重複した部分が多く互換性もなかった。 そこで拡張なしの素のHaskell98で動くtransformersが開発され、 その上にmonads-fdとmonads-tfを別々に構築することで互換性の問題は解決された。 しかしその頃にはすでにmtlが広く使われていたため、transformersとmonads-fdからmtlを再構築(mtl V2)することになった、 という経緯のようです。\n\n実際的な違いは、transformers はより古い Haskell で動く、mtl はより洗練された API を持っている、ということになりそうです。",
        "user": "U4M598NHM",
        "type": "message"
    },
    {
        "ts": "1521245351.000002",
        "text": "Extensible Effectが保持するモナド数によらずに定数時間で処理できるのはなぜなんですか?(この記事です <https://konn-san.com/prog/haskell/extensible-effects.html>",
        "user": "U5FTM76CA",
        "type": "message"
    },
    {
        "ts": "1521274227.000077",
        "text": "ありがとうございます。「Haskell入門 関数型プログラミング言語の基礎と実践」読書会に伝えてこちらの slack のことも宣伝しておきます。",
        "user": "U57CGDBMG",
        "type": "message"
    },
    {
        "ts": "1521335256.000057",
        "text": "2つのライブラリーがあって、 `MonadError SomeException m =&gt; m a` な文脈の中で `MonadThrow m =&gt; m a` な関数を使いたくなったんですが、混ぜるハックありますかね？\n```\nfoo :: MonadError SomeException m =&gt; m a\nfoo = do\n  -- ここで使いたい\n  -- 型はライブラリー A で決まってある\n\nbar :: MonadThrow m =&gt; m a\n-- これを使いたい\n-- 型はライブラリー B で決まってある\n```",
        "user": "U4L0B71L1",
        "type": "message"
    },
    {
        "ts": "1521336466.000060",
        "text": "まず、MonadErrorとはmtlのでしょうか？",
        "user": "U57D08Z9U",
        "type": "message"
    },
    {
        "ts": "1521336587.000059",
        "text": "それから、これの意図はMonadThrowのthrowMをMonadErrorのthrowErrorにするようにしたいということでしょうか？",
        "user": "U57D08Z9U",
        "type": "message"
    },
    {
        "ts": "1521341144.000061",
        "text": "&gt; MonadErrorとはmtlのでしょうか？\nそうです\nそれから `MonadThrow` は exceptions のです",
        "user": "U4L0B71L1",
        "type": "message"
    },
    {
        "ts": "1521341190.000068",
        "text": "&gt; これの意図はMonadThrowのthrowMをMonadErrorのthrowErrorにするようにしたいということでしょうか？\nそうですね。例えば一旦捕えて投げ直すとか。",
        "user": "U4L0B71L1",
        "type": "message"
    },
    {
        "ts": "1521341881.000032",
        "text": "MonadErrorはパラメータeが必要な気がするんですが、そこにはSomeExceptionを当てはめる想定ですか？",
        "user": "U57D08Z9U",
        "type": "message"
    },
    {
        "ts": "1521343389.000054",
        "text": "おっとそうでした。元の投稿を直しました。",
        "user": "U4L0B71L1",
        "type": "message"
    },
    {
        "ts": "1521350658.000036",
        "text": "either throwM pure (bar :: Either SomeException a)\n\nor\n\nnewtype MonadThrowWrapper m a = W (m a) deriving (Functor, Applicative, Monad)\ninstance MonadError SomeException m =&gt; MonadThrow (MonadThrowWrapper m) where\n  throwM = W . throwError . toException\nmonadThrowToError :: forall me a. MonadError SomeException me =&gt; (forall mt. MonadThrow mt =&gt; mt a) -&gt; me a\nmonadThrowToError x = coerce (x @(MonadThrowWrapper me))\n\nmonadThrowToError bar",
        "user": "U57D08Z9U",
        "type": "message"
    },
    {
        "ts": "1521350831.000003",
        "text": "とかですかね？",
        "user": "U57D08Z9U",
        "type": "message"
    },
    {
        "ts": "1521367218.000039",
        "text": "下の方を参考にうまくいきましたー！ :muscle:",
        "user": "U4L0B71L1",
        "type": "message"
    },
    {
        "ts": "1521369295.000060",
        "text": "なんかスマフォから打ってめっちゃ間違ってたのと書きかけだったので，いちよ修正しときました",
        "user": "U57D08Z9U",
        "type": "message"
    },
    {
        "ts": "1521449331.000049",
        "text": "論文をちゃんと読んでなくて、実装だけで理解してるので、もしかしたら不正確かもしれませんが…\nたとえば、以下のようにMaybeモナドがたくさん重なったものを考えます。\n\n```\ntype M5 = MaybeT (MaybeT (MaybeT (MaybeT Maybe)))\n```\n\nこれのreturnとbind(&gt;&gt;=)を書き下してやると、重ねたモナドの数だけ型構築や型分解のコストが増えている事が分かります。\n\n```\nreturnM5 :: a -&gt; M5 a\nreturnM5 x= MaybeT $ MaybeT $ MaybeT $ MaybeT $ Just $ Just $ Just $ Just $ Just x\n\nbindM5 :: M5 a -&gt; (a -&gt; M5 b) -&gt; M5 b\nbindM5 x = \n  case x of\n    Nothing -&gt; MaybeT $ MaybeT $ MaybeT $ MaybeT $ Nothing\n    Just x -&gt;\n      case x of\n        Nothing -&gt; MaybeT $ MaybeT $ MaybeT $ MaybeT $ Just $ Nothing\n        Just x -&gt; ...```\n\n一方で、EEではOpen Unionという仕組みを使って、以下のようなデータ型をコンパイル時に生成します。\n\n```\ndata M5' a = Just' a | Nothing1 | Nothing2 | Nothing3 | Nothing4 | Nothing5\n```\n\nこれによって、いくら重ねるモナドが増えても型構築や型分解のコストが増えない、という訳です。",
        "user": "U570660KX",
        "type": "message"
    },
    {
        "ts": "1521449361.000372",
        "text": "モナド→モナド変換子、ですね",
        "user": "U570660KX",
        "type": "message"
    },
    {
        "ts": "1521506318.000196",
        "text": "階層になっていないから深く潜るためのコストがいらないってことですか。open-unionはただのunionとなにか違うんですか?",
        "user": "U5FTM76CA",
        "type": "message"
    },
    {
        "ts": "1521518478.000101",
        "text": "普通のunionというのは、Haskellの普通の和型、data T = A|B|Cのように、宣言の時点で要素を足し算して作る奴の事で、それに対してEE系パッケージに入っているopen-union(単にUnionとかの名前になっている事が多い)は「全体の型を明示せずに構築したりパターンマッチしたりできる」という特徴があります",
        "user": "U570660KX",
        "type": "message"
    },
    {
        "ts": "1521520183.000126",
        "text": "使わないところはプレースホルダーでもおいて使えるんですね。詳しい説明ありがとうございます。",
        "user": "U5FTM76CA",
        "type": "message"
    },
    {
        "ts": "1521528970.000121",
        "text": "集合論･群論の本でわかりやすい本を教えてください。大学数学超初心者です。",
        "user": "U5FTM76CA",
        "type": "message"
    },
    {
        "ts": "1521529603.000275",
        "text": "<#C7Y71415W|math> という部屋がありますので、そちらで聞くといいと思います。\n個人的には、初歩的な分野で書籍数も比較的多いので、書店でパラパラめくって読めそうなものを選んだりamazonのレビュー高い本であればどれでも勉強できるのかなと思いました。",
        "user": "U4MAYDV9C",
        "type": "message"
    },
    {
        "ts": "1521781625.000189",
        "text": "`stack hoogle` コマンドを普通に実行すると、現在開発している（stack.yamlを置いている）プロジェクトのインデックスを生成したいのか、開発中のプロジェクトのビルドを始めます。\nこれを、依存しているパッケージのドキュメントに対するインデックスの生成に限定することはできるでしょうか？\n開発中のプロジェクトは、ビルドが通らない状態になっていることが多いので、開発中のプロジェクトが原因でインデックスを生成できないのはつらいです。",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1521782215.000183",
        "text": "`stack hoogle -- generate base` ?",
        "user": "U98QDF5EJ",
        "type": "message"
    },
    {
        "ts": "1521782590.000016",
        "text": "`stack hoogle -- generate` でいけました！\n（ :thinking_face: さっき手元の環境で `openBinaryFile: invalid argument (Invalid argument)` と出たのは何だったんだろう。。。）\nいずれにしてもありがとうございます！",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1521872215.000048",
        "text": "例えば\n```haskell\nmodule Sonoda.Parser\n#if ON_GHCI\n  ( ParseException (..)\n  , parseExpr\n  , parseType\n  , exprParser\n  , typeParser\n  ) where\n#else\n  where\n#endif\n```\nのようにして、CLIで`stack ghci --on-ghci`みたいな感じ（感じ）でghciを起動したときにだけ\n全てエクスポートしてくれるような方法を探しているのですが、何かないですか？:writing_hand:",
        "user": "U5LV76EJH",
        "type": "message"
    },
    {
        "ts": "1521885679.000041",
        "text": ":load コマンドでそのmoduleを読んだだけではダメなんですかね…\n\nそりゃ敢えてやるとしたら、cabalファイルにflagを書いて、CPPの変数を定義すればできそうな気がしますが…",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1521886841.000082",
        "text": "ついでに，other-modulesでInternalモジュールにしてそこでは全てexportし，exposed-modulesでreexportするのはダメなんですか？",
        "user": "U57D08Z9U",
        "type": "message"
    },
    {
        "ts": "1521896204.000095",
        "text": "&gt; :load コマンドでそのmoduleを読んだだけではダメなんですかね…\n\nおっ、なるほど、:loadってexportされてない関数も読めるんですか！",
        "user": "U5LV76EJH",
        "type": "message"
    },
    {
        "ts": "1521896383.000007",
        "text": "&gt; ついでに，other-modulesでInternalモジュールにしてそこでは全てexportし，exposed-modulesでreexportするのはダメなんですか？\nうーん、考えてみます。\n\nお二人ともありがとうございます！",
        "user": "U5LV76EJH",
        "type": "message"
    },
    {
        "ts": "1521901368.000032",
        "text": "こんにちは。 HaskellでMessagePackのライブラリはどれを使えばよいかご存知の方、教えていただけますか？\n\ndata-msgpackというライブラリが該当するかと思い調べているのですが、 timestampの読み込みで、このコードだと、 2バイト目以降を読んでいるように思うのですが、 msgpackの仕様をみると、2バイト目は“Type”なので、読むなら3バイト目以降じゃないといけない気がしてます。ちゃんとテストすればいいのですが、そもそもこのライブラリでよいのかどうか自信がなく、深入りするまえにおたずねしています。\n\n<https://github.com/TokTok/hs-msgpack/blob/ecfa24d5e237639597797b8e826b37e92efe4fe3/src/Data/MessagePack/Get.hs#L146>\n\n<https://github.com/msgpack/msgpack/blob/master/spec.md#ext-format-family>",
        "user": "U7GSVRQ6S",
        "type": "message"
    },
    {
        "ts": "1521973072.000035",
        "text": "意外と種類ありますね\n<https://hackage.haskell.org/packages/search?terms=messagepack>",
        "user": "U56L7EVNY",
        "type": "message"
    },
    {
        "ts": "1521977301.000033",
        "text": "ほかに同じように使っている人がいればいいんですが、ちょっといなければ深入りするしかなさそうですね。。。 :disappointed:",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1522029223.000192",
        "text": "windowsでHDBC-mysql使っている方いますか？\nこちらの記事やhdbc-mysqlのissueを見ると使うの結構大変そうだなと思ったのですが、どちらもある程度古い記述のため、もしかしたら周辺環境とかで状況変わってないかなと。\n<http://tsubaki.hatenablog.com/entry/20121020/1350734844>",
        "user": "U59TQ3MJ9",
        "type": "message"
    },
    {
        "ts": "1522029492.000165",
        "text": "半年ほど前だったか試してみましたが libmysqlclient をリンカー（？）にうまく探してもらえなくて1日格闘して、諦めて VM にしました",
        "user": "U4L0B71L1",
        "type": "message"
    },
    {
        "ts": "1522029981.000176",
        "text": "<@U4L0B71L1> ありがとうございます！\nなるほど、、かなり苦戦する点ありそうですね。\n格闘する前に感触知れて助かりました。\n（まさにwinで動くように頑張るか、vmにするか検討してる状況でした）",
        "user": "U59TQ3MJ9",
        "type": "message"
    },
    {
        "ts": "1522035227.000187",
        "text": "<@U8X01G6FJ> has left the channel",
        "user": "U8X01G6FJ",
        "type": "message"
    },
    {
        "ts": "1522054664.000183",
        "text": "ソースを非公開のままで Haskell 製のライブラリを提供する方法を探してます。\nソース非公開のパッケージを作る方法（＝ pre built なバイナリ + ヘッダのようなもの）ってありますでしょうか？",
        "user": "U4LNDESN8",
        "type": "message"
    },
    {
        "ts": "1522054972.000096",
        "text": "DLLや.soファイルとして公開するなら GHCの -shared オプションが使えそうですけども、そういう話ではないんですよね。。。",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1522055061.000092",
        "text": "その場合、その .so で提供される関数を Haskell からコールするには、なにかしら FFI をかまさないといけないですよね。",
        "user": "U4LNDESN8",
        "type": "message"
    },
    {
        "ts": "1522055084.000227",
        "text": "そっすね。",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1522055101.000544",
        "text": "参考にするとしたら <http://www.kotha.net/ghcguide_ja/7.0.4/separate-compilation.html> らへんの話ですかね。\n&gt; ソースファイルをコンパイルするとき、GHCはふつう二つのファイルを出力する。オブジェクトファイルとインタフェースファイルである。\n\n&gt; オブジェクトファイルは通常.oで終わり、そのモジュールのコンパイル済みコードを含む。\n\n&gt; インタフェースファイルはふつう.hiで終わり、そのモジュールに依存するモジュールをコンパイルするときに必要な情報を含む。エクスポートされた関数の型や、データ型の定義といったものがこれに含まれる。バイナリ形式なので、読もうとしないように。代わりに—-show-ifaceオプションを使うことができる。",
        "user": "U4LGTMTMK",
        "type": "message"
    }
]