[
    {
        "text": "長いけど見終えた。 <https://www.youtube.com/watch?v=RknM0j138PE&amp;feature=youtu.be>\n言うほどHaskell関係ないし個人的には割と知った話が大半だったのであまりおすすめしません... :disappointed:",
        "type": "message",
        "ts": "1595649780.114900",
        "user": "U4LGTMTMK"
    },
    {
        "text": "プログラミングHaskell第2版の15章、遅延評価を読みました。1周目なので消化不良な部分はありますが:sweat_smile:",
        "type": "message",
        "ts": "1595948494.117500",
        "user": "U012A4ALLSC"
    },
    {
        "text": "自作インタープリターでパターンマッチによる分解ができるようになりました",
        "type": "message",
        "ts": "1596103729.118300",
        "user": "U4L0B71L1"
    },
    {
        "text": "テストから抜粋",
        "type": "message",
        "ts": "1596103761.118400",
        "user": "U4L0B71L1"
    },
    {
        "text": "今朝見終えた。 <https://www.youtube.com/watch?v=I7-JuVNvz78&amp;list=PLiU7KJ5_df6aZbNfh_TUJt-6w9N3rYkTX&amp;index=3>\nやっぱりハッシュテーブルなどのmutableなデータ構造を線形型で管理することで（Rustの`&amp;mut`みたいなものと考えればいいかも）、純粋な関数の中で更新できるようにするのがポイントみたいですね。",
        "type": "message",
        "ts": "1596364573.120900",
        "user": "U4LGTMTMK"
    },
    {
        "text": "Haskell入門関数型プログラミング言語の基礎と実践を読み返してました:grinning:普段書かないコードは忘れるものですね:sweat_smile:",
        "type": "message",
        "ts": "1596559872.123900",
        "user": "U012A4ALLSC"
    },
    {
        "text": "自作 Haskell インタープリターでここまでできるようになった",
        "type": "message",
        "ts": "1596628408.124400",
        "user": "U4L0B71L1"
    },
    {
        "text": "Control.Monad.Trans.State.Lazyとかのソースコードを読んでました。ソースコードを見ずに自分で定義を書き起こしたりして理解を深めてました:smile:\n\n<https://hackage.haskell.org/package/transformers-0.5.6.2/docs/src/Control.Monad.Trans.State.Lazy.html>\n\n<https://hackage.haskell.org/package/base-4.14.0.0/docs/src/Data.Either.html>",
        "type": "message",
        "ts": "1596905993.127300",
        "user": "U012A4ALLSC"
    },
    {
        "text": "マージされた <https://github.com/simonmar/ghc-paths/pull/22>",
        "type": "message",
        "ts": "1597161214.128100",
        "user": "U4L0B71L1"
    },
    {
        "text": "自作 Haskell インタープリターで `import` できるようになった",
        "type": "message",
        "ts": "1597587297.129000",
        "user": "U4L0B71L1"
    },
    {
        "text": "contravariantについての記事を読んでました。\n\n\n<https://typeclasses.com/contravariance|https://typeclasses.com/contravariance>\n\n<https://www.schoolofhaskell.com/school/to-infinity-and-beyond/pick-of-the-week/profunctors|https://www.schoolofhaskell.com/school/to-infinity-and-beyond/pick-of-the-week/profunctors>\n\n消化不良のため、復習が必要。。",
        "type": "message",
        "ts": "1597592800.130400",
        "user": "U012A4ALLSC"
    },
    {
        "text": "今日の進捗 <https://twitter.com/kakkun61/status/1295696334750486531>",
        "type": "message",
        "ts": "1597753339.131600",
        "user": "U4L0B71L1"
    },
    {
        "text": "<https://twitter.com/kakkun61/status/1295711299830079488>",
        "type": "message",
        "ts": "1597757869.131900",
        "user": "U4L0B71L1"
    },
    {
        "text": "contravariantに関する記事を読んでました。以下の記事が自分には分かりやすかったです。\n二番煎じですが、備忘録としてqiitaあたりに記事アップを考え中。\n\n\n<https://ocharles.org.uk/blog/guest-posts/2013-12-21-24-days-of-hackage-contravariant.html|https://ocharles.org.uk/blog/guest-posts/2013-12-21-24-days-of-hackage-contravariant.html>",
        "type": "message",
        "ts": "1597846409.135700",
        "user": "U012A4ALLSC"
    },
    {
        "text": "ProfunctorとかBifunctorの記事を読んでました。\nInvariantの有用性とか、まだよくわかってない。\n\n\n<https://www.fpcomplete.com/blog/2016/11/covariance-contravariance/|https://www.fpcomplete.com/blog/2016/11/covariance-contravariance/>",
        "type": "message",
        "ts": "1598101154.002000",
        "user": "U012A4ALLSC"
    },
    {
        "text": "Control.Categoryに関する記事を読んでました。面白いですね。\n\n\n<https://qiita.com/CyLomw/items/a618b7c7326d9abede63|https://qiita.com/CyLomw/items/a618b7c7326d9abede63>",
        "type": "message",
        "ts": "1598375586.003300",
        "user": "U012A4ALLSC"
    },
    {
        "text": "自作 Haskell インタープリターでのサンクの扱いに悩んでいるので『The Implementation of Functional Programming Languages』を読もうと印刷をした\n<https://www.microsoft.com/en-us/research/publication/the-implementation-of-functional-programming-languages/>",
        "type": "message",
        "ts": "1598450619.004700",
        "user": "U4L0B71L1"
    },
    {
        "text": "Lensに関する動画を見てました。\nまだ理解しきれていませんが、興味深い内容でした:smile:\n\n<https://youtu.be/LBiFYbQMAXc|https://youtu.be/LBiFYbQMAXc>",
        "type": "message",
        "ts": "1598708649.006800",
        "user": "U012A4ALLSC"
    },
    {
        "text": "関数プログラミングの楽しみの10章「アローと計算」を読んでます。一回読んだだけではわからないので、繰り返し読みます:innocent:\n\n<https://shop.ohmsha.co.jp/smartphone/detail.html?id=000000001859|https://shop.ohmsha.co.jp/smartphone/detail.html?id=000000001859>",
        "type": "message",
        "ts": "1599300746.009200",
        "user": "U012A4ALLSC"
    },
    {
        "text": "自分のパッケージのドキュメントがhackageで読めないのはhackageのサーバーがサボっているからだと思ってましたが違うと言うことを学びました。今までごめんなさい私の怠惰のせいです... :cold_sweat:\n<https://haskell-jp.slack.com/archives/C4M4TT8JJ/p1599299006033800?thread_ts=1599296129.033100&amp;cid=C4M4TT8JJ>",
        "type": "message",
        "ts": "1599300837.010500",
        "user": "U4LGTMTMK"
    },
    {
        "text": "Arrowに関する論文を現在進行形で読んでます。\n<http://www.cse.chalmers.se/~rjmh/Papers/arrows.pdf>\n\nまだ半分も読めていませんが、丁寧な解説で素晴らしい。",
        "type": "message",
        "ts": "1599743412.012100",
        "user": "U012A4ALLSC"
    },
    {
        "text": "Watched. <https://www.youtube.com/watch?v=pwnrfREbhWY>",
        "type": "message",
        "ts": "1599868095.012500",
        "user": "U4LGTMTMK"
    },
    {
        "text": "最近、他の作業でHaskell停滞中でしたが、Contravariantについて学習した内容をQiitaの記事にまとめました:sob:\n精進します:sob:\n\n<https://qiita.com/masaki_shoji/items/b384eed4595df3423e0c>",
        "type": "message",
        "ts": "1600621506.002600",
        "user": "U012A4ALLSC"
    },
    {
        "text": "Contravariantをつかっているライブラリを見ていたので助かります。\nありがとうございます。\n<https://kowainik.github.io/posts/2018-09-25-co-log>",
        "type": "message",
        "ts": "1601058138.000300",
        "user": "U74KTAG0N"
    },
    {
        "text": "見終えた <https://www.youtube.com/watch?v=Q3qjTVcU9cg&amp;feature=youtu.be>\nNixOpsでEC2のセットアップしたり、DBのセットアップまでできるんですね :serval: （後者についてはproductionではすべきでないと言ってたけど）",
        "type": "message",
        "ts": "1601084100.001800",
        "user": "U4LGTMTMK"
    },
    {
        "text": "見終えた <https://www.youtube.com/watch?v=sE1qWyQWWVY>\nGHCのtype checker プラグインの仕組み。「type checker」とはいうけど実際にやるのは制約の解決が中心で、型変数に具体的な型を適用したり、また新しく解決する必要がある制約を発見したり、を繰り返してすべての制約を解決する、という流れらしい。",
        "type": "message",
        "ts": "1601697933.004500",
        "user": "U4LGTMTMK"
    },
    {
        "text": "hakyll + emacs org-modeで記事を書いててteaserの設定がうまくできなかったのですが、ちゃんとteaserが表示できるようになりました。\n（haskellというよりはorg-modeの問題でしたが・・・）",
        "type": "message",
        "ts": "1601826147.007900",
        "user": "U55V45LQ0"
    },
    {
        "text": "Haskell + Bazel を始めた、とりあえず Stack プロジェクトだったのを Bazel でビルドするのに成功した",
        "type": "message",
        "ts": "1601871881.008600",
        "user": "U56L7EVNY"
    },
    {
        "text": "さては <https://blog.sumtypeofway.com/posts/bazel-haskell-build-system-joy.html> の影響ですね。 :smirk:\nまだ読んでないけど :kininaru:",
        "type": "message",
        "ts": "1601872043.008800",
        "user": "U4LGTMTMK"
    },
    {
        "text": "あ、いや、うちの会社（の僕が所属してるチーム）では昔から Bazel 使ってて（会社のは Haskell じゃないです）、前々から個人の Haskell プロジェクトでも使いたいなーって考えてたんですよね（特に +Elm してるリポジトリとかに）。\nで、最近よく会社の Bazel 自体に触るようになったから詰まっても、筋肉（？）で解決できるかなーっていう自信がついたので挑戦し始めた感じです笑",
        "type": "message",
        "ts": "1601872376.009100",
        "user": "U56L7EVNY"
    },
    {
        "text": "あ、あとこれもそろそろ頑張ろうかなって思ったきっかけといえばきっかけ（日本語リファレンス増やすかーっていう）\n<https://twitter.com/Lugendre/status/1306204403867680768>",
        "type": "message",
        "ts": "1601875853.009500",
        "user": "U56L7EVNY"
    },
    {
        "text": "冷静に考えれば当たり前なんだけど、今日の学びです。\n<https://twitter.com/igrep/status/1314851782011486208>",
        "type": "message",
        "ts": "1602322266.010200",
        "user": "U4LGTMTMK"
    },
    {
        "text": "今はもうメンテナンスされていないライブラリっぽいですが、セッション周りのお勉強のために、serversessionとyesodの組み合わせでお勉強してました。\n\n<https://hackage.haskell.org/package/serversession|https://hackage.haskell.org/package/serversession>",
        "type": "message",
        "ts": "1605542652.013100",
        "user": "U012A4ALLSC"
    },
    {
        "text": "<@U01F5V08U6R> has joined the channel",
        "type": "message",
        "ts": "1605928999.013500",
        "user": "U01F5V08U6R"
    },
    {
        "text": "<@U56LT20RJ> has joined the channel",
        "type": "message",
        "ts": "1606030614.013700",
        "user": "U56LT20RJ"
    },
    {
        "text": "`cabal outdated --exit-code` コマンドを使うと「依存先パッケージの最新版がちゃんと使われるか（古いバージョン番号を書いていないか）」\nの観点でcabalファイルをチェックできることを知りました。\nこれをCIに仕込んでおけば「依存先パッケージの最新版が出たらメールで通知が来る」みたいなのを実現できて素晴らしいです。\n\n他言語では、通知だけでなくバージョンの書き換えコミットまでやってくれるdependabotというボットもあるらしく、\nこのへんは将来的にHaskellでもできるようになればいいと思いました。\n\n<https://www.reddit.com/r/haskell/comments/ev41o7/dependabot_for_haskell/>",
        "type": "message",
        "ts": "1606116118.019600",
        "user": "U570660KX"
    },
    {
        "text": "<@UKYUFC94P> has joined the channel",
        "type": "message",
        "ts": "1607072434.020300",
        "user": "UKYUFC94P"
    },
    {
        "text": "<@U5B3EGEFQ> has left the channel",
        "type": "message",
        "ts": "1614563911.000200",
        "user": "U5B3EGEFQ"
    },
    {
        "text": "<@U02291FDK6F> has joined the channel",
        "type": "message",
        "ts": "1621347078.000200",
        "user": "U02291FDK6F"
    },
    {
        "text": "<@U02KK6NUFFE> has joined the channel",
        "type": "message",
        "ts": "1640673688.000200",
        "user": "U02KK6NUFFE"
    },
    {
        "text": "randomに書いた話の続きでstackとnixpkgsを連携してみました\n\n連携方法はstackのドキュメントにありました\n<https://docs.haskellstack.org/en/stable/nix_integration/|https://docs.haskellstack.org/en/stable/nix_integration/>\n参考にしたサイト\n<https://utky.github.io/posts/note/stack-and-nix/|https://utky.github.io/posts/note/stack-and-nix/>",
        "type": "message",
        "ts": "1648983203.439729",
        "user": "U02KK6NUFFE"
    },
    {
        "text": "<@U02T0K000AV> has joined the channel",
        "type": "message",
        "ts": "1649855029.348829",
        "user": "U02T0K000AV"
    },
    {
        "text": "Maybeを使ってJustとNothingをパターンマッチで分岐するみたいなことをやりました\nなんか他言語と比べてネットで検索してもコードのサンプルがあまり転がってない印象があります",
        "type": "message",
        "ts": "1650460004.502769",
        "user": "U02KK6NUFFE"
    },
    {
        "text": "今気づきましたがHaskell荘園いろいろコードのサンプルが載っていていいですね\n<https://scrapbox.io/haskell-shoen/>",
        "type": "message",
        "ts": "1650664599.457619",
        "user": "U02KK6NUFFE"
    }
]