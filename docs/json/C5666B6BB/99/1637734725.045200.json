[
    {
        "ts": "1637734725.045200",
        "text": "質問失礼します．\nf(g(x)) はf.g $ x と表されますが，関数を連ねてしてデータを変換するという思考プロセスであれば，g.fのほうが自然かと思います．シンボルを読むのは左から右なのに，関数適用の順序を追って行くのは右から左に読むのは不自然です．UXINコマンドのパイプの思考に侵され過ぎているだけでしょうか?\nただ，この仕様を変更しただけでは，今度は前置記法から来る違和感が発生するとは思います．\n\n既出の議論であれば申し訳ございません．",
        "user": "U01TZ1XM7MG",
        "type": "message"
    },
    {
        "ts": "1637734979.045500",
        "text": "数学の関数合成にならったんだと思います\n<https://ja.wikipedia.org/wiki/%E5%86%99%E5%83%8F%E3%81%AE%E5%90%88%E6%88%90>",
        "user": "U4L0B71L1",
        "type": "message"
    },
    {
        "ts": "1637735121.046500",
        "text": "ちなみに `(Data.Function.&amp;)` を使えば\n```f $ g x -- を\nx &amp; g &amp; f -- と書けます```",
        "user": "U4L0B71L1",
        "type": "message"
    },
    {
        "ts": "1637735769.049200",
        "text": "そのような関数が定義されていたのですね、ありがとうございます！\nさらにHaskellに好感が持てました。\n\n",
        "user": "U01TZ1XM7MG",
        "type": "message"
    },
    {
        "ts": "1637738095.051200",
        "text": "ただ、Data.Fuction.&amp;を使うとフリーポインタスタイルで仮引数を消すのはできなくなってしまいますよね:smiling_face_with_tear:",
        "user": "U01TZ1XM7MG",
        "type": "message"
    },
    {
        "ts": "1637738515.051400",
        "text": "関数合成については、Control.Categoryに `f &gt;&gt;&gt; g = g . f` というのがありますね <https://hackage.haskell.org/package/base-4.16.0.0/docs/Control-Category.html#v:-62--62--62->",
        "user": "UGM9F7XQS",
        "type": "message"
    },
    {
        "ts": "1637763797.052500",
        "text": "どのように、考えるか、見るかによって、自然な書き方が違ってくるのだと思います。\n&gt; 関数を連ねてしてデータを変換するという思考プロセス\nでは、ボトムアップで考えているので、おっしゃる通り g、f という順序が自然にみえます。\n逆にトップダウンで考えているのなら、 f、g という順序が自然に見えるでしょう。\nたとえば、リストの構成は通常トップダウンでみていますから、[1,2,3]を構成するとき、h = (1:) . (2:) . (3:) として h $ [] とするほうが h = (3:) &gt;&gt;&gt; (2:) &gt;&gt;&gt; (1:) として [] &amp; h とするよりも自然に見えます。",
        "user": "U4KU9ABL0",
        "type": "message"
    },
    {
        "ts": "1638331600.053700",
        "text": "OCamlで |&gt; という演算子が流行っているようですが、Haskellでも簡単に実装できます。\n\n```&gt; (f |&gt; g) x = g (f x)\n&gt; :type (|&gt;)\n(|&gt;) :: (t1 -&gt; t2) -&gt; (t2 -&gt; t3) -&gt; t1 -&gt; t3\n&gt; (map (+1) |&gt; sum) [1,2,3]\n9```",
        "user": "U56MBRKR9",
        "type": "message"
    }
]