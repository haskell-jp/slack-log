[
    {
        "ts": "1559552257.030000",
        "text": "まったくの思いつきで恐縮ですが、\n`forkIO`で別スレッドで処理される中で、コネクションの`close`が意図するタイミングで呼ばれていない可能性はありませんか？",
        "user": "U7GSVRQ6S",
        "type": "message"
    },
    {
        "ts": "1559552386.030200",
        "text": "`insertLog db' lf` を `bracket`を使うようにするとどうでしょうか。",
        "user": "U7GSVRQ6S",
        "type": "message"
    },
    {
        "ts": "1559552899.030500",
        "text": "ありがとうございます．\n`bracket`を利用しましたが同様の挙動になりました．\n```\ninsertLog :: String -&gt; LogField -&gt; IO()\ninsertLog db' lf = bracket\n                   (open db')\n                   close\n                   $ \\conn -&gt; execute conn \"INSERT INTO log VALUES (null,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)\" lf\n```",
        "user": "UH195J82Y",
        "type": "message"
    },
    {
        "ts": "1559553015.031100",
        "text": "<https://teratail.com/questions/5099> このような記述をみつけました。本質的な問題なのかも？\n&gt;たしか、現在の実装では、当該データベース ファイルに対する更新処理はジャーナル ファイルにいったん保持した後、ジャーナルの世代が古い順からトランザクションとして処理していき（FIFO）、最終的にジャーナル ファイルがなくなるまでファイルを更新し続けます。\n&gt;その際、更新処理が多重で走ることによりジャーナルをデータベース ファイルに適用するのが間に合わなくなってくると、ロックに関する例外を吐くようになります。",
        "user": "UF8SE896V",
        "type": "message"
    },
    {
        "ts": "1559553375.031600",
        "text": "ロックの問題はどこかで「retryすればいいよ!」と見かけたのですが，もしかしたらその処理が追い付かなくなっているのかもしれないですね．．．\nこの際pgがmysqlを導入することを検討しようかと思います．\nみなさんありがとうございます．",
        "user": "UH195J82Y",
        "type": "message"
    },
    {
        "ts": "1559553806.031800",
        "text": "ログ書くときの `forkIO` を止めて同期的に書き込むだけで若干改善されませんかね（もちろんその分動作は遅くなりますが）\n（どちらにしてもそれだけのリクエストを裁くのであればSQLiteは止めた方がいいのでしょうけども）",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1559553957.032100",
        "text": "そうですね，このプログラム自体がサイトのレスポンスタイムを記録しておきたいものなのでspawnしたいです．．\n私個人のサイトなのでsqliteでいいかなと思ったのですが，pg動かすことにします．",
        "user": "UH195J82Y",
        "type": "message"
    },
    {
        "ts": "1559564676.032500",
        "text": "ナイーブに字句解析器でトークンに位置情報を入れるというのはよくやります．",
        "user": "U4KU9ABL0",
        "type": "message"
    },
    {
        "ts": "1559676243.000200",
        "text": "<@UK96V3T2L> has joined the channel",
        "user": "UK96V3T2L",
        "type": "message"
    },
    {
        "ts": "1559699224.002100",
        "text": "こちらの方法、今日になって気づいたんですが、 *引数が2つ以上ある関数の場合、 `(&gt;&gt;)` の第2引数に渡した関数しか実行されない* という落とし穴があるようです。 :scream:\n自分でも調べてみますが、どなたか詳しい理由がわかったら教えてください...\nHaskell-jp Blogの記事にしようかな...\n<https://haskell-jp.slack.com/archives/C4M4TT8JJ/p1559094017015900>",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1559699573.002400",
        "text": "例:\n```\n&gt; a x y = putStrLn (\"a: \" ++ x ++ y)\n&gt; b x y = putStrLn (\"b: \" ++ x ++ y)\n&gt; ((&gt;&gt;) &lt;$&gt; a &lt;*&gt; b) \"x\" \"y\"\nb: xy\n```",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1559700169.002700",
        "text": "(&gt;&gt;)が関数のモナドに対するものなので、ask &gt;&gt; ...みたいなふるまいをしていますね",
        "user": "U4KUNQF9N",
        "type": "message"
    },
    {
        "ts": "1559700211.003100",
        "text": "っぽいですね... 自分も等式変換しているうちに見えてきました... :disappointed_relieved:",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1559700723.003400",
        "text": "`((&lt;*&gt;) &lt;$&gt; (((&lt;$&gt;) (&gt;&gt;)) . a) &lt;*&gt; b) \"x\" \"y\"`",
        "user": "U5G2BCVBN",
        "type": "message"
    },
    {
        "ts": "1559700782.003700",
        "text": "おおかわさんさすがです... :joy:",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1559700980.003900",
        "text": "というわけで，単に2以上のarityに対して等価な変換じゃないというだけですね．落とし穴ではない",
        "user": "U5G2BCVBN",
        "type": "message"
    },
    {
        "ts": "1559702158.004300",
        "text": "地道に簡約してみました\n\n```\n((&gt;&gt;) &lt;$&gt; a &lt;*&gt; b) \"x\" \"y\"\n((fmap (&gt;&gt;) a) &lt;*&gt; b) \"x\" \"y\"\n(((&gt;&gt;) . a) &lt;*&gt; b) \"x\" \"y\"\n((\\arg -&gt; ((&gt;&gt;) (a arg))) &lt;*&gt; b) \"x\" \"y\"\n((\\arg2 -&gt; (\\arg -&gt; ((&gt;&gt;) (a arg))) arg2 (b arg2))) \"x\" \"y\"\n((\\arg2 -&gt; (\\arg -&gt; (\\k -&gt; (a arg &gt;&gt;= (\\_ -&gt; k)))) arg2 (b arg2))) \"x\" \"y\"\n((\\arg2 -&gt; (\\arg -&gt; (\\k -&gt; (a arg &gt;&gt;= (\\_ -&gt; k)))) arg2 (b arg2))) \"x\" \"y\" -- Monadの (&gt;&gt;) を展開\n((\\arg2 -&gt; (\\arg -&gt; (\\k -&gt; (\\r -&gt; (\\_ -&gt; k) (a arg r) r))) arg2 (b arg2))) \"x\" \"y\" -- (-&gt; r) Monadの (&gt;&gt;=) を展開\n(\\arg2 -&gt; (\\arg k r -&gt; (\\_ -&gt; k) (a arg r) r) arg2 (b arg2)) \"x\" \"y\" -- 入れ子になったλ式をくっつける\n(\\arg2 -&gt; (\\arg k r -&gt; k r) arg2 (b arg2)) \"x\" \"y\" -- (\\_ -&gt; k) (a arg r) を簡約。aが消えた！\n(\\arg2 -&gt; (\\r -&gt; (b arg2) r)) \"x\" \"y\" -- (\\arg k r -&gt; k r) arg2 (b arg2) を簡約。\n(\\r -&gt; (b \"x\") r) \"y\" -- (\\arg2 -&gt; (\\r -&gt; (b arg2) r)) \"x\" を簡約。\n(b \"x\") \"y\" -- (\\r -&gt; (b \"x\") r) \"y\" を簡約。\n```",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1559702969.004500",
        "text": "これ、:point_down: みたいに引数を一切追加しないで `do` に直したら `unused-do-bind` の警告になりましたね。\n```\ndo\n  a\n  b\n```\n戻り値が関数になっている（あるいは、もっとアグレッシブに戻り値が `()` 以外の）アクションに対して `(&gt;&gt;)` を使うと警告が出る、みたいな仕組みを作るといいのかもしれません。",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1559726420.004900",
        "text": "自分がYesodとPostgreSQLで同じような問題に突き当たった時は,コネクションを取得している文脈でコネクションを開放せずにコネクションをもう一度取得しようとしていて,複数の関数でコネクションを取得しようとしてデッドロックに陥ってました\nSimpleの仕組みはよくわかりませんがDBを使ったらその場でコネクションを削除するようにすれば問題なくなるかもしれません",
        "user": "U57CUMWQ6",
        "type": "message"
    },
    {
        "ts": "1559728105.005100",
        "text": "doはシンタックスシュガーだからコンパイル時に警告が出てくれるとありがたいですけど、 `(&gt;&gt;)` は第一引数のアクションの戻り値を捨てる関数だから、警告出すのは微妙な気がしますね……。 `const 1 (f x)` って書いたときに `(f x)` は評価されないよーっていう警告を出すかどうかみたいな。",
        "user": "U61BA2X0U",
        "type": "message"
    },
    {
        "ts": "1559729351.005300",
        "text": "気分的には、HLintに「こういう組み合わせの式は使わないで、こっちを使ってね」と警告させるのと同じような感じにすれば、オプトイン・オプトアウトも簡単になるしいいかな、と思うのですが、いかがでしょう？（現状のHLintにそこまでできたかは忘れましたが）",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1559734020.005500",
        "text": "文脈を理解していないですが引数を必ず使わせたいなら linear types の出番？",
        "user": "U4M598NHM",
        "type": "message"
    },
    {
        "ts": "1559735186.005700",
        "text": "それは確かにそのとおりですが、ちょっとオーバーキルかな... と。 :sweat_smile:",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1559735326.005900",
        "text": "どちらかというと、意図しないインスタンスを使用しないためにはどうすればいいか、というところにフォーカスする方に個人的には関心があります。（ちょっと話がそれてしまいますが...）\n<https://haskell-jp.slack.com/archives/C5666B6BB/p1558343939072900> の時みたいに。",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1559738604.006300",
        "text": "値を捨てている部分を可視化できるようなエディタの支援機能があったら面白そうです。 ~しばしば議論の的となるlength (1,2)とかもわかるし~",
        "user": "U4KUNQF9N",
        "type": "message"
    },
    {
        "ts": "1559739929.006800",
        "text": "↑に対して「1と2を捨ててる(見てない)」ってわかるやつってことですか？",
        "user": "U5G2BCVBN",
        "type": "message"
    },
    {
        "ts": "1559740358.007300",
        "text": "よく考えたら何の意味もない例でした。すみません",
        "user": "U4KUNQF9N",
        "type": "message"
    },
    {
        "ts": "1559797340.007900",
        "text": "<@UKAS45C80> has joined the channel",
        "user": "UKAS45C80",
        "type": "message"
    },
    {
        "ts": "1559806186.010400",
        "text": "STArray (または STUArray )を複数同時に初期化するにはどうしたら良いでしょうか？\n例えば一つならば　\n```\nbuildA = runSTUArray $ do\n  a &lt;- newArray (0,2) 0 :: ST s (STUArray s Int Int)\n  writeArray a 0 999\n  -- detail omitted\n  return a\n\nλ&gt; a = buildA\na :: U.UArray Int Int\nλ&gt; a U.! 0\n999\n```\nこれでOKですが\n２つ同時にするとエラーとなります\n```\nbuildAB = runSTUArray $ do\n  a &lt;- newArray (0,2) 0 :: ST s (STUArray s Int Int)\n  b &lt;- newArray (1,9) 1 :: ST s (STUArray s Int Int)\n  writeArray a 0 999\n  writeArray a 1 111\n  -- detail omitted\n  return (a, b)\n\n• Couldn't match type ‘(STUArray s Int Int, STUArray s Int Int)’\n                  with ‘STUArray s i e’\n  Expected type: ST s (STUArray s i e)\n    Actual type: ST s (STUArray s Int Int, STUArray s Int Int)\n```",
        "user": "U584T7GAH",
        "type": "message"
    },
    {
        "ts": "1559806446.013400",
        "text": "Lensを使っていて、ちょっと気になる挙動に出遭ったので、どなたか理由をご存知であれば教えていただきたいです。\nこちらのコード <https://gist.github.com/igrep/19139bb4e3bc7fe7988597559b9ab2dd> なんですが、\n```\nviewThenSet :: Sample -&gt; Lens' Sample Int -&gt; (Int, Sample)\n```\nという `Lens` を受け取る関数を使って、\n```\nmain = print . viewThenSet (Sample 1 2) $ field' @\"sample1\"\n```\nというコードを書くと、 `Functor f` が曖昧だよ！という型エラーになってしまいます（エラーメッセージの詳細はコードにコメントとして張りました）。\n\nしかし、 `.` の代わりに `$` を使い、 :point_down: のように書き換えると、エラーがなくなります（あるいは、どちらも使わずに括弧で囲うか）。\n```\nmain = print $ viewThenSet (Sample 1 2) $ field' @\"sample1\"\n```\n通常、 `f $ g $ x` という式は `f . g $ x` という式に書き換えられることが知られてますが、なぜこの場合は `.` を使うと型エラーになるのでしょうか？",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1559806448.013500",
        "text": "",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1559806851.014100",
        "text": "`main = print $ viewThenSet (Sample 1 2) $ field' @\"sample1\"`\n2つ目はこう？",
        "user": "U56L7EVNY",
        "type": "message"
    },
    {
        "ts": "1559806979.014300",
        "text": "すぐに思い付いたのはこれですが、これだとそれぞれの初期化が独立である必要がありますね。\nおそらく配列 a と b の初期化で何らか相互に関係するのですよね？\n<https://wandbox.org/permlink/9cSyhgzxGAGprbN1>",
        "user": "U4L0B71L1",
        "type": "message"
    },
    {
        "ts": "1559807087.014600",
        "text": "もっといい方法がありそうな気がしますが、ぱっと思いつくところでは、 `runSTArray`  <https://www.stackage.org/haddock/lts-13.24/array-0.5.3.0/src/Data-Array-ST.html#runSTArray> がやっているように、 `GHC.Arr.unsafeFreezeSTArray` を自前で呼んで `runST `すればよいのではないかと思います。\nhackageにhaddockも生成されてないモジュールの関数なんで大丈夫なのか？という気もしますが...",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1559807125.014800",
        "text": "おっと済みません凡ミスでした...\n修正済みです。",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1559807481.015200",
        "text": "<https://twitter.com/YoshikuniJujo/status/1136537216665079808> こんな指摘をいただいた。",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1559808639.015500",
        "text": "このぐらいで再現できますね\n```\n{-# LANGUAGE RankNTypes #-}\nrankNfunc :: (forall a. Show a =&gt; a-&gt;b) -&gt; [b]\nrankNfunc f = [f 42, f True]\n\nf = length $ rankNfunc $ show  -- OK\ng = length . rankNfunc $ show   -- NG\n```",
        "user": "UF8SE896V",
        "type": "message"
    },
    {
        "ts": "1559808900.015900",
        "text": "impredicative polymorphismと `$` の特別扱いの話は以前記事を書いたので参考までに： <https://qiita.com/mod_poppo/items/806c9c3e0ccb46be92ae#%E9%96%A2%E6%95%B0%E9%81%A9%E7%94%A8%E6%BC%94%E7%AE%97%E5%AD%90%E3%81%AE%E7%89%B9%E4%BE%8B>",
        "user": "UGM9F7XQS",
        "type": "message"
    },
    {
        "ts": "1559808954.016400",
        "text": "ありがとうございます！案の定読んではてブしてるのに忘れてるw",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1559809664.016700",
        "text": "それにしても `{-# LANGUAGE ImpredicativeTypes #-}` をつけると `g = (length . rankNfunc) show` はいけるようになるのに `g = length . rankNfunc $ show` だとだめなままなのはなんでだろう… `($)` の特別扱いが逆に悪さしてるんですかね",
        "user": "UF8SE896V",
        "type": "message"
    },
    {
        "ts": "1559809878.017000",
        "text": "ただ、なるべく独立して初期化させた方が行儀のいいコードにはなりそうな気がします。",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1559810023.017300",
        "text": "kakkun61 さんどうもありがとうございます　お察しのとうり訳アリで `a` と `b` の初期化は絡み合っていて　分離は出来ません\n\n<@U4LGTMTMK> さん　環境設定が悪いのかもしれませんが　出来ませんでした\n```\nNot in scope: ‘GHC.Arr.unsafeFreezeSTUArray’\nNo module named ‘GHC.Arr’ is imported.\n```",
        "user": "U584T7GAH",
        "type": "message"
    },
    {
        "ts": "1559810052.017600",
        "text": "`import GHC.Arr (unsafeFreezeSTUArray)` してください。そういう意味です。",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1559810060.017800",
        "text": "いや、あれ、 ghci のバージョンによって挙動が違う気がしてきました…\n手元にあった 8.0.2 だと ImpredicativeTypes で `(length . rankNfunc) show` が通るけれど 8.4.4 と 8.6.3 では ImpredicativeTypes をつけてもダメっぽい",
        "user": "UF8SE896V",
        "type": "message"
    },
    {
        "ts": "1559810345.018200",
        "text": "それはしてあります",
        "user": "U584T7GAH",
        "type": "message"
    },
    {
        "ts": "1559810393.018400",
        "text": "参照するときは `GHC.Arr.` をつけずに `unsafeFreezeSTUArray` と呼べばいいはずですが...",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1559810595.018700",
        "text": "それにしても `@\"sample1\"` ってなんだろうとおもったら、これ、 TypeApplications と DataKinds のコンボですか？",
        "user": "UF8SE896V",
        "type": "message"
    },
    {
        "ts": "1559810703.018900",
        "text": "そうです。generic-lensを使っていますので。すみません、言及が漏れてましたね。。。 <https://github.com/kcsongor/generic-lens>",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1559810789.019200",
        "text": "いえ、脳内が Haskell2010 のままで止まっているので勉強になります^^; （イヤ、下手したら Haskell98 のままで止まってるかも…）",
        "user": "UF8SE896V",
        "type": "message"
    },
    {
        "ts": "1559810875.019400",
        "text": "```\n...\nimport GHC.Arr (unsafeFreezeSTUArray)\n...\nbuildA' = runST $ do\n  a &lt;- newArray (0,2) 0 :: ST s (STUArray s Int Int)\n  writeArray a 0 999\n  -- detail omitted\n  a &gt;&gt;= unsafeFreezeSTUArray\n```\nこれでテストしました",
        "user": "U584T7GAH",
        "type": "message"
    }
]