[
    {
        "ts": "1541246626.026000",
        "text": "そうです。ただ、「最初の発行年」の部分を「ウェブサイトは毎年新たに発行されうるものだから～」と解釈して都度更新する習慣もないわけではないので、そういう慣習にしたがった人が見れば「あれ？」と思うであろうと言うことで「体裁の問題」と言いました。\n<https://liginc.co.jp/designer/archives/11313>\n\nそう考えると「2017 - 2018」と書くのが法的にも体裁的にも一番的確な気がしますね。\n来年やります。 :sweat_smile:",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1541271821.030700",
        "text": "深くやったものは特にはないんですが、SwiftとC++とExcelのVBAとHTML(後者二つはプログラミング言語と言っても良いのでしょうか)を触りだけやりました。Cはこれからやる予定です。",
        "user": "UDVPWQ5T8",
        "type": "message"
    },
    {
        "ts": "1541299670.030900",
        "text": "なるほど、ターミナルやコンソールなどを使ったことはありますか？",
        "user": "U56L7EVNY",
        "type": "message"
    },
    {
        "ts": "1541315778.032000",
        "text": "ターミナルはHaskellを使う時に使用しました。コンソールはないです。",
        "user": "UDVPWQ5T8",
        "type": "message"
    },
    {
        "ts": "1541318679.032200",
        "text": "homebrew を使うと、いろんなアプリケーションをターミナルでコマンドを打ち込むだけでインストールできるようになります。\nstack は Haskell の処理系である GHC をより扱いやすくするためのツールです。\nたとえば、プロジェクトごとに GHC のバージョンを管理したりできます。",
        "user": "U56L7EVNY",
        "type": "message"
    },
    {
        "ts": "1541333304.032400",
        "text": "いつも2017-とか書いてます",
        "user": "U57D08Z9U",
        "type": "message"
    },
    {
        "ts": "1541416740.034700",
        "text": "なるほど！使いやすくするのにあれば嬉しい機能ですね…！\n今は使わないかもしれないので置いておきます。でもしっかり覚えておいて必要な時に思い出して使ってみたいと思います♪\nありがとうございました！",
        "user": "UDVPWQ5T8",
        "type": "message"
    },
    {
        "ts": "1541419124.035000",
        "text": "<@UDVMPMU8K> has joined the channel",
        "user": "UDVMPMU8K",
        "type": "message"
    },
    {
        "ts": "1541554913.035600",
        "text": "<@UCLGS5XGQ> has joined the channel",
        "user": "UCLGS5XGQ",
        "type": "message"
    },
    {
        "ts": "1541817368.036400",
        "text": "<@UE08ATQUC> has joined the channel",
        "user": "UE08ATQUC",
        "type": "message"
    },
    {
        "ts": "1541836041.036700",
        "text": "<@UE0F1T77C> has joined the channel",
        "user": "UE0F1T77C",
        "type": "message"
    },
    {
        "ts": "1542004489.037000",
        "text": "<@UAQSD7171> has joined the channel",
        "user": "UAQSD7171",
        "type": "message"
    },
    {
        "ts": "1542112186.038200",
        "text": "Twitterでふみさんにもリプライしたのですが, <https://wiki.hask.moe/> の証明書が11月10日に切れているので見れなくなってます,誰が管理者でしょう?",
        "user": "U57CUMWQ6",
        "type": "message"
    },
    {
        "ts": "1542112356.038600",
        "text": "私必要ないと思ってるのでそもそも年書かないですね",
        "user": "U57CUMWQ6",
        "type": "message"
    },
    {
        "ts": "1542116413.039500",
        "text": "stack repl 起動中に cabal ファイル（や package.yaml）を更新したときにそれらをリロードすることってできますかね？",
        "user": "U4L0B71L1",
        "type": "message"
    },
    {
        "ts": "1542116459.039700",
        "text": "そのドメインは fumi さん個人だったような",
        "user": "U56L7EVNY",
        "type": "message"
    },
    {
        "ts": "1542119145.040000",
        "text": "見落としていました。明日直します",
        "user": "U4KUNQF9N",
        "type": "message"
    },
    {
        "ts": "1542163917.040600",
        "text": "私が知る限り無理",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1542163924.040800",
        "text": "ghcid を使ったらどうですか？",
        "user": "U5B3EGEFQ",
        "type": "message"
    },
    {
        "ts": "1542164003.041300",
        "text": "`ghcid --restart=package.yaml` でいける気がしますが、あんまり使ったことないので実用に耐えれなかったらすみません。。",
        "user": "U5B3EGEFQ",
        "type": "message"
    },
    {
        "ts": "1542164220.041800",
        "text": "あ、けどこれだと `repl` にならないですね:sweat_smile:",
        "user": "U5B3EGEFQ",
        "type": "message"
    },
    {
        "ts": "1542164273.042000",
        "text": "`ghcid -c \"stack repl\" --restart=package.yaml` こっちでした。",
        "user": "U5B3EGEFQ",
        "type": "message"
    },
    {
        "ts": "1542164415.042200",
        "text": "これも上手くいかないですね:cold_sweat:",
        "user": "U5B3EGEFQ",
        "type": "message"
    },
    {
        "ts": "1542176809.042500",
        "text": "そういえばこちらに流すの忘れてましたが、いちよイシュー立てときました\n<https://github.com/haskell-jp/blog/issues/142>",
        "user": "U57D08Z9U",
        "type": "message"
    },
    {
        "ts": "1542335326.043100",
        "text": "<@UE51MD4E6> has joined the channel",
        "user": "UE51MD4E6",
        "type": "message"
    },
    {
        "ts": "1542353004.045000",
        "text": "dhall で型などを別ファイル(例えば `types/hoge_type.dhall` )で定義して参照すると相対パスになるから `cat tmp/hoge.dhall | dhall` と実行するとうまくいかないんですけど良い方法ありますか？",
        "user": "U56L7EVNY",
        "type": "message"
    },
    {
        "ts": "1542353197.045100",
        "text": "自己解決 `dhall &lt; tmp/hoge.dhall` ってすればいいのか",
        "user": "U56L7EVNY",
        "type": "message"
    },
    {
        "ts": "1542355587.045700",
        "text": "うそ、治ってないw",
        "user": "U56L7EVNY",
        "type": "message"
    },
    {
        "ts": "1542360984.046400",
        "text": "dhallおもしろい！",
        "user": "UACQ9J5D3",
        "type": "message"
    },
    {
        "ts": "1542361135.046600",
        "text": "やっと見つけた！\n<https://github.com/dhall-lang/dhall-lang/issues/68>",
        "user": "U56L7EVNY",
        "type": "message"
    },
    {
        "ts": "1542361191.047000",
        "text": "`dhall &lt;&lt;&lt; ./tmp/hoge.dhall` でいいみたい\n( `./` をつけないとダメ )",
        "user": "U56L7EVNY",
        "type": "message"
    },
    {
        "ts": "1542362918.048700",
        "text": ":thinking_face: `f :: Monad m =&gt; a -&gt; b -&gt; m c` なアクションと\n`x :: m a, y :: m b` な値があるとき\n`join (f &lt;$&gt; x &lt;*&gt; y)`\nと書くのが一番簡潔な書き方なんですかね。\nほかにあるかな。 `f` の引数が3つ以上の時もいけるっぽいです。",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1542363397.048800",
        "text": "僕もそれが一番簡潔だと思います",
        "user": "U4KPPQW7K",
        "type": "message"
    },
    {
        "ts": "1542363409.049000",
        "text": "無理やり作った例がこちら",
        "user": "U4KPPQW7K",
        "type": "message"
    },
    {
        "ts": "1542363541.049900",
        "text": "どんな簡潔さかによりますが、 `join (liftA2 f a b)` だと 1文字短いとか…",
        "user": "U578W9676",
        "type": "message"
    },
    {
        "ts": "1542428870.050800",
        "text": "2引数限定ですが `liftA2 f x y &gt;&gt;= uncurry f` とも書けます。",
        "user": "U4M9NJ7QE",
        "type": "message"
    },
    {
        "ts": "1542429502.051100",
        "text": "<@UE1SBEZTR> has joined the channel",
        "user": "UE1SBEZTR",
        "type": "message"
    },
    {
        "ts": "1542430482.051300",
        "text": "<@U4M9NJ7QE> `liftA2 (,) x y &gt;&gt;= uncurry f` ですかね?",
        "user": "U57D08Z9U",
        "type": "message"
    },
    {
        "ts": "1542431520.051700",
        "text": "そうです",
        "user": "U4M9NJ7QE",
        "type": "message"
    },
    {
        "ts": "1542687165.057000",
        "text": "前回、#generalのほうでimportについてお世話になりました\n研究内容としてHaskell-Yampaでのデバッグ方法について勉強しているのですがその一つとしてQuickCheckについて勉強しています。\nそこで質問なのですがHaskell-Yampaのゲームのデバッグなどは皆さんどのように行っているのか教えてもらえないでしょうか？",
        "user": "UE51MD4E6",
        "type": "message"
    },
    {
        "ts": "1542691569.057200",
        "text": "Yampaユーザーは極めて少なく、残念ながらYampa固有のデバッグ方法について回答は期待できないです。Haskellはデバッグの方法論が充実しているとは言い難く、Debug.Traceモジュールによるいわゆるprintfデバッグが最もオーソドックスと言えるでしょう",
        "user": "U4KUNQF9N",
        "type": "message"
    },
    {
        "ts": "1542691758.057400",
        "text": "QuickCheckはもっぱら純粋な関数に対してテストをするために使われていて、状態を持っていてテストが難しいFRPに応用する枠組みを作るのは面白い研究だと思います",
        "user": "U4KUNQF9N",
        "type": "message"
    },
    {
        "ts": "1542784883.060000",
        "text": "Lensの `over` 関数の、Functorな値を返す関数を渡すバージョンってないんですかね。\n型宣言で言うと `overM :: Functor f =&gt; ASetter s t a b -&gt; (a -&gt; f b) -&gt; s -&gt; f t` みたいな型になるのかな、と思うのですが。",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1542785109.060200",
        "text": "それってまさにLensそのものでは…",
        "user": "U4KUNQF9N",
        "type": "message"
    },
    {
        "ts": "1542785826.060600",
        "text": "そうでしたね！普通に関数として使ってみたらできました！ありがとうございます！ :+1:",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1542787422.061100",
        "text": "そういえば%%~というid関数のエイリアスもありました。人によってはこちらのほうが驚きが少ないかもですね",
        "user": "U4KUNQF9N",
        "type": "message"
    },
    {
        "ts": "1542794454.063700",
        "text": "hoogleのようなツールを用いて、型の定義やエイリアスのみを検索する良い方法はありますか？hoogleで普通に検索するとほとんど関数しかヒットせず、困る場面は少ないけどちょっと不便だなと思っています。",
        "user": "U7907NMGF",
        "type": "message"
    },
    {
        "ts": "1542801484.063800",
        "text": "<https://github.com/ndmitchell/hoogle#readme> に\n&gt; `:: a` searches for the type “a”\nとありますが、これで思ったように結果が絞れたりするでしょうか?",
        "user": "U578W9676",
        "type": "message"
    },
    {
        "ts": "1542803625.064200",
        "text": "<@UE8N92RKN> has joined the channel",
        "user": "UE8N92RKN",
        "type": "message"
    },
    {
        "ts": "1542839844.064400",
        "text": ":thinking_face: 大文字で始まる名前に特に `-&gt;` とかを含めなければ普通に型の名前が優先されているように見えますが、これではダメなんでしょうか？\n<https://www.haskell.org/hoogle/?hoogle=Maybe>\n<https://www.stackage.org/lts-12.19/hoogle?q=Maybe>",
        "user": "U4LGTMTMK",
        "type": "message"
    }
]
