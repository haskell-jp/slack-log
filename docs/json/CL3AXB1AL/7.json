[
    {
        "type": "message",
        "user": "UL1HFJATE",
        "ts": "1680152962.225539",
        "text": "追加提案，というか皆さまの意見を聞きたいです:\n `strict`  (<https://hackage.haskell.org/package/strict>): 基本的なデータ型 ( `Either` ,  `Maybe` , and pair from `base`,  `These` from `these` )のfield-strict version と baseに入ってる lazy IO の strict version を実装します． 元々transitive dependency に入ってて， <https://haskell-jp.slack.com/archives/C014PGG641Z/p1678521681800639> = <https://haskell.jp/slack-log/html/C014PGG641Z/4.html#message-1678521681.800639> あたり見てもモチベーションはありそうな気がします．しかし，リンク先の会話の主題そのものはタプルなのですが，このパッケージの `Data.Strict.Tuple` はペア `Pair a b` しかサポートしてなくて，19項までのタプル( `T1` , `T2` , … , `T19` )をサポートしてる `strict-tuple`  (<https://hackage.haskell.org/package/strict-tuple>) はモジュール名が `Data.Tuple.Strict` でややこしい，というのがアレですね．"
    },
    {
        "type": "message",
        "user": "U4LGTMTMK",
        "ts": "1680155886.899719",
        "text": "話を複雑にするようで申し訳ないんですが、 <http://h2.jaguarpaw.co.uk/posts/nested-strict-data/> とかどうですか？\n多分 <https://hackage.haskell.org/package/strict-wrapper-0.0.0.0> がその実装のようです。"
    },
    {
        "type": "message",
        "user": "U4LGTMTMK",
        "ts": "1680155928.276409",
        "text": "引用頂いたスレッドの発言の時も本当はこれを挙げたかったんですけど、うまく探せなかったもので..."
    },
    {
        "type": "message",
        "user": "UL1HFJATE",
        "ts": "1680156325.696669",
        "text": "あー，頭のいい実装だ．4項までのタプルしか実装がないのは残念ではありますが，結構便利そう．"
    },
    {
        "type": "message",
        "user": "U4LGTMTMK",
        "ts": "1680156381.606969",
        "text": "あまり利用もメンテも熱心にされてなさそうなのが惜しいんですけどね。すごくいいアイディアなのに。"
    },
    {
        "type": "message",
        "user": "UL1HFJATE",
        "ts": "1680156426.323509",
        "text": "貫禄の Dependencies: `base &lt; 5`"
    },
    {
        "type": "message",
        "user": "UL1HFJATE",
        "ts": "1680156692.120609",
        "text": "こういうパッケージって「古く」はならなそうに見えるので入れるのにそんなにリスクはなさそうですが，無意味に入れると収拾がつかなくなりそうという理由だけで躊躇するところはあるんですよね…"
    },
    {
        "type": "message",
        "user": "UL1HFJATE",
        "ts": "1680156820.743719",
        "text": "でも Haskell の競プロ提出コードなんて bang がついてない変数を思い浮かべるのが難しいくらいですし，あったら結構嬉しそうなんだよな…"
    },
    {
        "type": "message",
        "user": "UL1HFJATE",
        "ts": "1680231036.259809",
        "text": "`strict-wrappers` については， unsafe な関数が注釈なしに含まれているので導入を見合わせようかなと思います．<https://haskell.jp/slack-log/html/C5666B6BB/103.html#message-1680184874.825459> = <https://haskell-jp.slack.com/archives/C5666B6BB/p1680184874825459> でのログをご確認くだされば幸いです．"
    },
    {
        "type": "message",
        "user": "UL5PAB0F9",
        "ts": "1680233986.982779",
        "text": "`strict` の `Data.Strict.Tuple` は `Pair a b` しかないですが `x :!: y :!: z` のようにできるのでそこまで不便ではないかもしれません。\nオンラインジャッジ的な対応としては `containers` にある `Utils.Containers.Internal.StrictPair` を使うという手もありますが `Show` にすらなっていなくて不便ですね"
    },
    {
        "type": "message",
        "user": "ULMGVGLP3",
        "ts": "1680237192.269909",
        "text": "<@ULMGVGLP3> has joined the channel"
    },
    {
        "type": "message",
        "user": "UL1HFJATE",
        "ts": "1680266406.952249",
        "text": "あー、とすると `strict` はだいぶ良さそうですか。メモリ上のレイアウトまで気にするなら `strict-tuple` を更に追加で入れるのも一応選択肢にはならないことは…ないのか？"
    },
    {
        "type": "message",
        "user": "UL1HFJATE",
        "ts": "1680272951.343829",
        "text": "あ，忘れてた．最適化をまともにperf取らずに神に祈るのが好きな私みたいな軟弱者には，`strict-containers`  (<https://hackage.haskell.org/package/strict-containers-0.2|https://hackage.haskell.org/package/strict-containers-0.2>) のデータ型のフィールドまでstrict flagがついた containers (+unordered-containers) 実装とか見せられるとちょっと気になってしまいます。\n\n```data X = X !Int !Double\ndata Y = Y Int Double```\nを考えたときに、 `case x_value of X !a !b -&gt; ...` は `a`, `b` が評価されているかを判定するコードが不要だが、\n`case y_value of Y !a !b -&gt; ...` において `y_value` のフィールドがあらゆる評価パスで評価済みだとしても、実行時に評価済みかどうかを判定するコードが消せない可能性がある、みたいなことを耳にするので…"
    },
    {
        "type": "message",
        "user": "UL1HFJATE",
        "ts": "1680690476.770539",
        "text": "Language Test Contestが2nd freeze (3/28)版に更新されました！\n\n期待通り，次のコードをコードテストに投げると `cabal.project.freeze` ファイルを取ってこれました:\n\n```import <http://System.IO|System.IO>\n\nmain :: IO ()\nmain = putStr =&lt;&lt; readFile \"/judge/submission/cabal.project.freeze\"```\n結果は <https://gist.github.com/gksato/b7d0b18e9ef8be5762fef8717737e27b#file-4-cabal-project-freeze> です．\n\nあと，全exposed modulesのインポート (<https://gist.github.com/gksato/b7d0b18e9ef8be5762fef8717737e27b#file-3-imports-hs>) を投げても実行が通ることも確認できました！\n\n今の所，次のfreezeの時には，\n• `extra` : 1.7.12 -&gt; 1.7.13\n• `strict` を追加\n• インストールコマンドとコンパイルコマンドにおいて，workdirの仕様が不明だったために必要だった余計なコマンド群を除去(参照: <https://docs.google.com/spreadsheets/d/1HXyOXt5bKwhKWXruzUvfMFHQtBxfZQ0047W7VVObnXI/edit#gid=1835616968&amp;range=H67:I68>)\nを確定で実施するつもりでおり，\n• `strict-tuple` の追加\n• `strict-containers` の追加\nについては保留中です．"
    },
    {
        "type": "message",
        "user": "UL5PAB0F9",
        "ts": "1680713459.208939",
        "text": "GHCについてくるライブラリ群で現環境では使えるが新環境では使えない状態のものがあるので対応しておきたいです\n```import Data.Binary () -- binary\nimport Data.Time () -- time\nimport System.Directory () -- directory\nimport System.FilePath () -- filepath\nimport System.Posix () -- unix\nimport System.Process () -- process\nimport Text.PrettyPrint () -- pretty\n\nmain=pure()```\n"
    },
    {
        "type": "message",
        "user": "UL1HFJATE",
        "ts": "1680736340.027829",
        "text": "あーそれ，（競プロに関係あるかわかんなくて）入れるか迷ってたんですよね．入れる側に一票入ったので入れることにしましょう！"
    },
    {
        "type": "message",
        "user": "UL1HFJATE",
        "ts": "1680744242.989739",
        "text": "あと， GHC-bundled library で現環境で使えるけど新環境では使えない，というと `ghc-boot`, `ghc-boot-th`,  `hpc`,  `integer-gmp`,  `terminfo`, `ghc-prim` あたりもそうなはずですね．ここら辺も入れた方がいいでしょうか？\n\n現環境は `cabal install --lib` を用いているので， GHC-bundled library (<https://gitlab.haskell.org/ghc/ghc/-/wikis/commentary/libraries/version-history> で確認できます)のうち，`cabal-install &lt;= 3.8.1.0` が <https://hackage.haskell.org/package/cabal-install-3.8.1.0/docs/src/Distribution.Client.CmdInstall.html#globalPackages|Distribution.Client.CmdInstall.globalPackages> 変数によって明示的に global package とみなしていたものは利用可能だったはずです．\n\nほかには，現環境では使用できない GHC-bundled package (一度も `cabal install --lib` を投げたことのない裸の `ghc` では使えるが，一度でも `cabal install --lib` を投げてしまうと top-level `ghc` から不可視になってしまうタイプのGHC-bundled package．`globalPackages` 変数に名前が挙がってないとそうなる)もありますが，そこら辺についてはどうしましょうか．"
    },
    {
        "type": "message",
        "user": "UL1HFJATE",
        "ts": "1680783614.872259",
        "text": "なるほど． Windows 環境下でないとビルドできない `Win32` を除き，\n• `Cabal`\n• `Cabal-syntax`\n• `binary`\n• `directory`\n• `filepath`\n• `ghc` \n• `ghc-boot` \n• `ghc-boot-th`\n• `ghc-compact`\n• `ghc-heap`\n• `ghc-prim`\n• `ghci`\n• `haskelline`\n• `hpc`\n• `integer-gmp`\n• `libiserv`\n• `pretty`\n• `process`\n• `stm`\n• `terminfo`\n• `time`\n• `unix`\n• `xhtml`\nを全て追加する，ということですか． `ghc-compact` をただ追加するのもアレなので，\n• `compact`\nを追加してもいいかもしれませんね．\n\nさしあたって気にすべき点は，特に `ghc-prim` などの `ghc*` 系が GHC のバージョン間で安定したAPIを提供しそうに見えない，ということでしょうか．\n\n細かい反論としては:\n• `ghc` とか `terminfo`  とか本当に要るの？  → 「本当に」要る要らないの線引きは難しいので，「GHC-bundled」という明確な線引きがあるのは良いこと\n• `ghc*` 系はHackageにアップロードされていないことが多い（ 「GHC-bundled version しか使えないからHackageからのダウンロードの需要がない以上，面倒だからいいよね〜」という理由なのかは知らない）ので，`cabal-plan license-report`  が自動でライセンスを拾ってこれないため，License report の Human-written caveat を手書きで追加執筆しなければならないのが面倒 → 頑張れ\nという点もありますが，ここら辺は簡単に再反論できるところですね．とくに「GHC-bundled」という明確な線引きがある，というのは結構な美点っぽいです．\n\nみなさんのご意見もお聞きしたいので，よろしくお願いします．"
    },
    {
        "type": "message",
        "user": "UL1HFJATE",
        "ts": "1680837944.442169",
        "text": "transitive dependencies に入ってて，ちょっと便利そうなので，追加提案：\n• `indexed-traversable`\n• `indexed-traversable-instances` \nあと， `lens` 系が入っているので，\n• `strict-containers-lens` (`strict-containers` を入れるなら)\nを追加提案しておきます．"
    },
    {
        "type": "message",
        "user": "UL1HFJATE",
        "ts": "1680838999.208309",
        "text": "せっかく `attoparsec` と `parsec` が入っているなら `trifecta` と `megaparsec` を紛れ込ませたいという悪い欲望があります:sweat_smile:"
    },
    {
        "type": "message",
        "user": "UL1HFJATE",
        "ts": "1680839106.112889",
        "text": "あとは，ユーザー側に 「serverに提出されたコードだ」ということを条件に conditional compilation を許すためになんかの Cabal flag を定義してもいいのでは，ということになんとなく思い至りました．環境変数 `ATCODER = 1` だけだと Conditional compilation には不便なので．"
    },
    {
        "type": "message",
        "user": "UL1HFJATE",
        "ts": "1680847504.237249",
        "text": "transitive dependency の direct dependency への 格上げの追加提案:\n• `contravariant`\n• `kan-extensions`\n• `adjunctions`\n• `bifunctors`\n• `comonad`\n• `distributive`\n• `profunctors`\n• `semigroupoids`"
    },
    {
        "type": "message",
        "user": "UL1HFJATE",
        "ts": "1680850863.201929",
        "text": "忘れるところでした:\n• `strict-lens`"
    },
    {
        "type": "message",
        "user": "UL1HFJATE",
        "ts": "1680878603.060549",
        "text": "滑り込みですが、 `trifecta` , `megaparsec` 等々を突っ込むのに賛成が得られるなら\n• `parser-combinators`\nもあったほうが良さそう"
    },
    {
        "type": "message",
        "user": "UL5PAB0F9",
        "ts": "1680879234.100049",
        "text": "前回のアップデートで外れていたこの2つは復活させたいです。漏れてるのにそもそも気づいてなかったが\n• scientific\n• split\ntransitive dependencyに入っていてよく使われてる `tagged` も入れてもいいかもです"
    },
    {
        "type": "message",
        "user": "UL1HFJATE",
        "ts": "1680879469.610739",
        "text": "そう言えば， `strict` に `These` 入ってるんだから，\n• `these`\n•  `these-lens` \nは入れないと整合性がないですね．"
    },
    {
        "type": "message",
        "user": "UL1HFJATE",
        "ts": "1680881517.727479",
        "text": "まとめます．現在結論が出てないものと出ているっぽいものをごた混ぜにして，現在提案されているパッケージは次の通りです．transitive dependency からの昇格については :arrow_heading_up: で示します：\n`strict` 系:\n• :arrow_heading_up: `strict`  \n• :new: `strict-lens`\n• :new: `strict-containers` (?)\n• :new: `strict-containers-lens` (?)\n• :new: `strict-tuple`  (?)\nパーサ系:\n• :new: `megaparsec` \n• :new: `trifecta`\n• :new: `parser-combinators`\n圏論系 (transitive dependency の昇格):\n• :arrow_heading_up: `contravariant`\n• :arrow_heading_up: `kan-extensions`\n• :arrow_heading_up: `adjunctions` \n• :arrow_heading_up: `bifunctors` \n• :arrow_heading_up: `comonad` \n• :arrow_heading_up: `distributive` \n• :arrow_heading_up: `profunctors` \n• :arrow_heading_up: `semigroupoids`\nGHC-bundled packages:\n• :new: `Cabal`\n• :new: `Cabal-syntax`\n• :arrow_heading_up: `binary`\n• :arrow_heading_up: `directory`\n• :arrow_heading_up: `filepath`\n• :new: `ghc`\n• :new: `ghc-boot`\n• :arrow_heading_up: `ghc-boot-th`\n• :new: `ghc-compact`\n• :new: `ghc-heap`\n• :arrow_heading_up: `ghc-prim`\n• :new: `ghci`\n• :new: `haskelline` \n• :new: `hpc`\n• :new: `integer-gmp` \n• :new: `libiserv`\n• :arrow_heading_up: `pretty`\n• :arrow_heading_up: `process`\n• :arrow_heading_up: `stm`\n• :new: `terminfo`\n• :arrow_heading_up: `time`\n• :arrow_heading_up: `unix`\n• :new: `xhtml`\nその他:\n• :arrow_heading_up: `these`  (cf. `strict`)\n• :new: `these-lens` \n• :arrow_heading_up: `scientific` (前々回の環境からの復活)\n• :arrow_heading_up: `split`  (前々回の環境からの復活)\n• :arrow_heading_up: `tagged` \n• :arrow_heading_up: `indexed-traversable`\n• :arrow_heading_up: `indexed-traversable-instances`\nパッケージ追加以外の提案:\n• Cabal flag `atcoder` を追加して有効化する"
    },
    {
        "type": "message",
        "user": "UL5PAB0F9",
        "ts": "1680882594.428769",
        "text": "strict-tuple, strict-containersはhackageでみるとあんまり使われてないのでちょっと不安があります。\n実際に使っていくのであれば入れてもいいかなという感じです"
    },
    {
        "type": "message",
        "user": "UL1HFJATE",
        "ts": "1680911991.248749",
        "text": "theseのdocを読んでたんですけど、semialignとsemialign-indexedまで入れないと片手落ちだったりしますかね、これ……？ (取り敢えず追加提案の期限は過ぎてるので、明示的な賛同が出ない限りは提案はしません)"
    },
    {
        "type": "message",
        "user": "UL5PAB0F9",
        "ts": "1680914067.289309",
        "text": "圏論系ライブラリは `free` を入れ忘れてました。transitive dependencyとしては入ってはいるものです"
    },
    {
        "type": "message",
        "user": "UL1HFJATE",
        "ts": "1680922590.107489",
        "text": "`witherable` を入れたいのを今思い出したけど，もうすぐテスト開始時間だし，transitive dependency にも入ってないし，やめといた方がいいかな…"
    },
    {
        "type": "message",
        "user": "UL1HFJATE",
        "ts": "1680934717.456669",
        "text": "ここまでの議論で提示されたパッケージでテスト作業を開始します．いくつか変更があるのでご確認ください．"
    },
    {
        "type": "message",
        "user": "UL1HFJATE",
        "ts": "1680939307.908529",
        "text": "`libiserv` が `bytestring` の更新を拒絶する (installed version 以外の使用を許さない)ので除外します．結構なbugfixと速度改善が入ってるっぽいので bytestring 更新 を外すのは惜しい．"
    },
    {
        "type": "message",
        "user": "UL1HFJATE",
        "ts": "1680939575.001419",
        "text": "`ghci` も `bytestring` を拒絶したので除外しましたが，これ `ghc` 系が軒並み拒絶されそうですね…"
    },
    {
        "type": "message",
        "user": "UL1HFJATE",
        "ts": "1680940179.601149",
        "text": "`compact` 系がややこしいですね．これ， `ghc-compact` が Hackage上で dependency を upgrade されておらず `&lt;4.17` になっているから，~GHC git repo の 9.4.4 tag 上でちゃんと `&lt;4.18` になっているにもかかわらず~依存性解決に失敗する．その上 `compact-0.2.0.0`  の deps が `base &lt;4.16` なのは本当にわけがわからない！"
    },
    {
        "type": "message",
        "user": "UL1HFJATE",
        "ts": "1680940294.580299",
        "text": "`cabal build --only-dependencies` に `--upgrade-dependencies` をつけているので，これを除外するとどうにかなるかも知れませんが，今回は `compact` と `ghc-compact` はともに諦めます．後で Issue でも投げます．"
    },
    {
        "type": "message",
        "user": "UL1HFJATE",
        "ts": "1680940821.676839",
        "text": "今回諦めたパッケージ:\n• `compact`\n• `ghc`\n• `ghc-boot`\n• `ghc-compact`\n• `ghci`\n• `libiserv`\ndependency solver は取り敢えず通ったので，あとはビルド待ちです．"
    },
    {
        "type": "message",
        "user": "UL1HFJATE",
        "ts": "1680941450.522769",
        "text": "各パッケージに丁寧に lower bound をつけているので， `--upgrade-dependencies`  をやっぱり外すことにしました． `compact` はもちろん不可能ですが， ~`ghc-compact` は回復できました．~"
    },
    {
        "type": "message",
        "user": "UL1HFJATE",
        "ts": "1680951784.338169",
        "text": "`filepath-1.4.100.3` が `System.OSPath` を `Trustworthy` にしといてくれなかったので，こいつに `directory` を介して依存する `hpc` とincompatibleになってますね… `hpc` , なんか全module `Safe` なんですよ…"
    },
    {
        "type": "message",
        "user": "UL1HFJATE",
        "ts": "1680952478.992929",
        "text": "意見募集: `directory` を最新版 (`1.3.8.1`  ), `filepath` を `1.4.100.3` にする代わりに `hpc` を諦めるのと， `directory` を `1.3.7.1`, `filepath`  を `1.4.2.2` にして `hpc` を入れるのと，どっちが良いと思いますか？"
    },
    {
        "type": "message",
        "user": "UL5PAB0F9",
        "ts": "1680952640.756449",
        "text": "ghc 9.4.4にバンドルされてるのが`directory-1.3.7.1`, `filepath-1.4.2.2` なので，最新バージョンを諦めてhpcを入れる方がいいかなと思います"
    },
    {
        "type": "message",
        "user": "UL1HFJATE",
        "ts": "1680952890.028239",
        "text": "そうかー… というか，`directory` はなんで pre-existing visible module を safe から unsafe に格下げしておいて minor bump なんだろう…"
    },
    {
        "type": "message",
        "user": "UL1HFJATE",
        "ts": "1680953103.667429",
        "text": "それはそれとして，すでに `bytestring` を (競プロ的により重要であろうという予断により) 優先して `ghc`, `ghc-boot`, `ghci` `libiserv` を諦めているので， 何か `filepath` か `directory` を優先する 理由があるようであれば `hpc` を諦めなきゃいけないんですけど，パッと思いつくところにはないですよね？"
    },
    {
        "type": "message",
        "user": "UL5PAB0F9",
        "ts": "1680953392.639869",
        "text": "hpcを入れる理由は最大限対応できそうなものは対応する以上の意味はないですね。 filepathとdirectoryのバージョンに関してはどれでもいいかなと思ってます。競プロ的にはそこまで重要ではないはずです"
    },
    {
        "type": "message",
        "user": "UL1HFJATE",
        "ts": "1680953753.398359",
        "text": "後から hpc を入れるようにも filepath + directory を最新版にするようにもどっちにも後方互換性を保って対応できるようにするために hpc を除外して directory-1.3.7.1 と filepath-1.4.2.2 を導入しておくみたいなやり方も考えてます…"
    },
    {
        "type": "message",
        "user": "UL5PAB0F9",
        "ts": "1680954281.326489",
        "text": "ghciを諦めているのであればhpcを諦めるのは自然な感じはします。\nあと，ghciの依存関係のために入っているhaskeline, terminfo外せるかなと。\ndirectory, filepathのバージョンは依存関係の解決が1番簡単なものがよさそうで，\n無難に行くならdirectory-1.3.7.1とfilepath-1.4.2.2になるんですかね"
    },
    {
        "type": "message",
        "user": "UL1HFJATE",
        "ts": "1680954553.784719",
        "text": "`hpc, haskeline, terminfo` を 除外して `directory &gt;=1.3.7.1 &amp;&amp; &lt;1.3.8.0` と `filepath &gt;=1.4.2.2 &amp;&amp; &lt;1.4.99` にします…．"
    },
    {
        "type": "message",
        "user": "UL1HFJATE",
        "ts": "1680954719.837559",
        "text": "それに伴って `unix ^&gt;=2.7.3`  になりました"
    },
    {
        "type": "message",
        "user": "UL1HFJATE",
        "ts": "1680962046.713129",
        "text": "dependency がビルド完了すること， Hello Worldが走ることと， flag が役目を果たすのを一応チェックしました．まだ Imports of Export list を走らせてません． チェックソース生成器に修正が必要なので…．license report もまだ作ってないですが，時間が時間なので取り敢えず書いてきます．<https://gist.github.com/gksato/0993d739f2ac6e81100f41815a27a978>"
    },
    {
        "type": "message",
        "user": "UL1HFJATE",
        "ts": "1680963330.176849",
        "text": "`ghc-compact` の回復はできていませんでした．これも同様に `bytestring` との conflict です．諦めます．"
    }
]