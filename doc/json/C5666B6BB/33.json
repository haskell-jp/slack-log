[
    {
        "ts": "1545204632.033100",
        "text": "了解です。ちょっと調べてみます。ありがとうございます！",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1545204746.033300",
        "text": "それはそれとして，コレって `(++)` と `happend` の中置演算子としての左右結合性が異なることから来てるから， `extensible` のほうで揃える修正もしたほうが便利な気がするけど，どう思いますか？ &gt; <@U4KUNQF9N>",
        "user": "U5G2BCVBN",
        "type": "message"
    },
    {
        "ts": "1545204930.033500",
        "text": "修正しました！さっきextensible-0.5をリリースしてしまったのが悔やまれる… <https://github.com/fumieval/extensible/commit/ae5c1e07269cf80cfd55dca95b567c61707ef66d>",
        "user": "U4KUNQF9N",
        "type": "message"
    },
    {
        "ts": "1545204987.033900",
        "text": "あ、そうですね。上記のソースのビルド通すだけならそれでいけますね :sweat_smile:",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1545205002.034100",
        "text": "こういう場合、ちゃんとした証明を実装しておいて、 ```unsafeCoerce `asTypeOf` proof``` のように定義するというテクニックもあります",
        "user": "U4KUNQF9N",
        "type": "message"
    },
    {
        "ts": "1545205263.034600",
        "text": "ああ， `(++)` は `singletons` のものじゃなくて， `extensible` 内で独自に定義してるのか．",
        "user": "U5G2BCVBN",
        "type": "message"
    },
    {
        "ts": "1545205386.034800",
        "text": "話は逸れますが、要素の型レベルリストは固定してラッパーを変えるのがextensibleの流儀なので、happendは実は非推奨だったりします",
        "user": "U4KUNQF9N",
        "type": "message"
    },
    {
        "ts": "1545205497.035100",
        "text": ":thinking_face: どういう意味でしょうか？\n`happend` を使わずに結合する方法があるんですか？",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1545205794.035300",
        "text": "結合すること自体、あまり推奨はしていないです",
        "user": "U4KUNQF9N",
        "type": "message"
    },
    {
        "ts": "1545208495.035700",
        "text": "解です <https://gist.github.com/notogawa/13422a72683d05cee989d60cd64479a2>",
        "user": "U5G2BCVBN",
        "type": "message"
    },
    {
        "ts": "1545277650.036800",
        "text": "こういう関数ってありませんでしたっけ。。ものすごく曖昧な記憶だけどあった気がするんです。\n\n```\n(&lt;**&gt;) :: (a -&gt; b) -&gt; [[a]] -&gt; [[b]]\n(&lt;**&gt;) = map . map\n-- こんなのなかったっけ・・\n```",
        "user": "U7Z4F723Z",
        "type": "message"
    },
    {
        "ts": "1545277873.038000",
        "text": "Control.Applicativeにある同名の演算子は全然違いますからねぇ\n\n```\n(&lt;**&gt;) :: Applicative f =&gt; f a -&gt; f (a -&gt; b) -&gt; f b\n```",
        "user": "U8EJKMNVA",
        "type": "message"
    },
    {
        "ts": "1545278157.038500",
        "text": "いや、完全に記憶違いだったかもしれないです。前に会社でこんな話してたなーっていうのをなんとなく覚えてただけなのかも。\nそのときの結論を思い出せないのが悔しい",
        "user": "U7Z4F723Z",
        "type": "message"
    },
    {
        "ts": "1545278518.039500",
        "text": "これだー！\n<http://hackage.haskell.org/package/functor-utils-1.17.2/docs/Data-Functor-Utils.html#v:fmap2>",
        "user": "U7Z4F723Z",
        "type": "message"
    },
    {
        "ts": "1545280640.042700",
        "text": "こういうのって どうにかならないんですかね？ 演算子を定義できるってのはhaskellの強みだとは思うのですが、同じ演算子を別の意味で定義されると混乱するというか、、、別にライブラリをまたいで無いので問題ないのはわかるんですけど、、、",
        "user": "U9XHWQX7Z",
        "type": "message"
    },
    {
        "ts": "1545281683.043100",
        "text": "自分がライブラリの開発してたら、まず著名なライブラリの演算子と被らないようにして、それでもどうしようもなかったらqualifiedでimportしてください。。!っていうかなー\n\n```\nimport qualified MyLib as M\n\nM.&lt;**&gt;\n```",
        "user": "U7Z4F723Z",
        "type": "message"
    },
    {
        "ts": "1545282502.043500",
        "text": "演算子じゃないバージョン(普通の関数)も提供する",
        "user": "U56L7EVNY",
        "type": "message"
    },
    {
        "ts": "1545356661.045300",
        "text": "<@UF0HFC1FH> has joined the channel",
        "user": "UF0HFC1FH",
        "type": "message"
    },
    {
        "ts": "1545613443.000300",
        "text": "stackでpackageをimportする所でつまづいています。\n\nstackのUser guideを見ながらAdding dependenciesの項目のように\n以下のようなコンパイルエラーが出ています。\n\n/Users/you/Downloads/tanaoroshi/app/Main.hs:three:1: error:\n    Could not find module ‘Data.List.Split’\n    Use -v to see a list of the files searched for.\n  |\n3 | import Data.List.Split\n  | ^^^^^^^^^^^^^^^^^^^^^^\n\nUser guideのようにpackage.yamlに以下の記載を追加してstack buildしてみましたが上記のエラーが改善しません。\n\ndependencies:\n- base &gt;= 4.7 &amp;&amp; &lt; 5\n- split\n\n指定の仕方に問題があるのかとも思い、以下も試してみましたがダメでした。\n\ndependencies:\n- base &gt;= 4.7 &amp;&amp; &lt; 5\n- Data.List.Split\n\nどのようにすればパッケージを利用できるのでしょうか？",
        "user": "UCDHJ6R6X",
        "type": "message"
    },
    {
        "ts": "1545627093.006500",
        "text": "<https://gist.github.com/applePrincess/ff93cbee587beec9f7c00783c5292dea> な感じで出来ましたよ？ templateはsimple-hpack で resolver はlts-13.0を使いました。URL以外は変更をしてませんが。stack buildは通りましたよ。",
        "user": "U9XHWQX7Z",
        "type": "message"
    },
    {
        "ts": "1545627203.006700",
        "text": "```\ndependencies:\n- base &gt;= 4.7 &amp;&amp; &lt; 5\n- split\n```\n\npackage.yaml でこう書くのが正しいやり方です。正しいはずなのにどうしてエラーになるのかはわからないのですが、 `stack build` をして出てきた文字を全部書いてもらえたら役に立つと思います。",
        "user": "U5LEE6C1J",
        "type": "message"
    }
]