[
    {
        "type": "message",
        "user": "U021XMH7NDT",
        "ts": "1621091571.000200",
        "text": "<@U021XMH7NDT> has joined the channel"
    },
    {
        "type": "message",
        "user": "U028RHBT7TN",
        "ts": "1626745086.000200",
        "text": "<@U028RHBT7TN> has joined the channel"
    },
    {
        "type": "message",
        "user": "U4MMHDSNT",
        "ts": "1633668234.001200",
        "text": "<@U4MMHDSNT> has joined the channel"
    },
    {
        "type": "message",
        "user": "U02V92FG4V8",
        "ts": "1643010809.000200",
        "text": "<@U02V92FG4V8> has joined the channel"
    },
    {
        "type": "message",
        "user": "U01PZCSCJS3",
        "ts": "1657356119.522489",
        "text": "<@U01PZCSCJS3> has joined the channel"
    },
    {
        "type": "message",
        "user": "U4MAYDV9C",
        "ts": "1659404700.652519",
        "text": "<@U4MAYDV9C> has joined the channel"
    },
    {
        "type": "message",
        "user": "U01PHSV8GAH",
        "ts": "1659476172.357139",
        "text": "<@U01PHSV8GAH> has joined the channel"
    },
    {
        "type": "message",
        "user": "U03H9PH8FRP",
        "ts": "1664191832.051969",
        "text": "<@U03H9PH8FRP> has joined the channel"
    },
    {
        "type": "message",
        "user": "U4L0B71L1",
        "ts": "1673959367.280189",
        "text": "<https://twitter.com/atcoder/status/1615328605479014400>"
    },
    {
        "type": "message",
        "user": "UGM9F7XQS",
        "ts": "1673961610.740779",
        "text": "前回の言語アップデートの時のやつはこの辺ですかね <https://atcoder.jp/contests/language-test-202001>"
    },
    {
        "type": "message",
        "user": "UGM9F7XQS",
        "ts": "1673962085.032699",
        "text": "bitReverse (GHC 8.10), GHC2021 (GHC 9.2), vector-0.13.0.0でunboxed vectorのderivingが楽になる, random-1.2でいろいろ追加された？などが大きいですかね（最近競プロやってないのでよくわかってない）"
    },
    {
        "type": "message",
        "user": "UL1HFJATE",
        "ts": "1674218193.762469",
        "text": "昨日見たらhaskell-platformになってたしどうにかしないといけないですね。"
    },
    {
        "type": "message",
        "user": "UL1HFJATE",
        "ts": "1674219234.369079",
        "text": "GHCup recommended(9.2.5 as of Jan 20) + 前回提案パッケージの最新版，を適当に仮想環境上で組んで通ることを確認したのち転記，でいいんでしょうか．atcoder-haskell-resources に再度まとめるとかしようとすると例の repo に write access のある人間が関わる必要が出てくる…．"
    },
    {
        "type": "message",
        "user": "UL1HFJATE",
        "ts": "1674219572.530189",
        "text": "ちなみに私が勝手にやろうとすると exceptions 関係のパッケージ + regex (前回提案されてたけど間に合わなかった)を勝手に追加してあとは最新に更新するだけ，になります．"
    },
    {
        "type": "message",
        "user": "UL1HFJATE",
        "ts": "1674260394.588329",
        "text": "議論があればしたいので反応ください〜 (特にatcoder library の adaptionとか入ってないので関連する lib の話などあれば)"
    },
    {
        "type": "message",
        "user": "UL5PAB0F9",
        "ts": "1674270016.429639",
        "text": "こんにちは。ライブラリだと線形型を使ってみたいのでlinear-baseをいれたいです"
    },
    {
        "type": "message",
        "user": "UL1HFJATE",
        "ts": "1674270123.555219",
        "text": "そこら辺全然触ってないのですが，linear-baseだけあれば競プロ用途だと十分でしょうか？"
    },
    {
        "type": "message",
        "user": "UL5PAB0F9",
        "ts": "1674270956.731709",
        "text": "正直なところ自分もあんまり触れてないのでよくわかってないです。配列がboxedなVectorなので不十分な気はするんですがどうすればいいかの知見は持ってないです"
    },
    {
        "type": "message",
        "user": "UL1HFJATE",
        "ts": "1674273079.715469",
        "text": "実装見てきた感じ， `ST` 型の操作を `runRW#` で走らせた後に `Unsafe.Linear.toLinear` で linear であることを assert しているだけのように見えるので，一般の vector に対する操作を実装するのは難しくはなさそうですが…"
    },
    {
        "type": "message",
        "user": "UL1HFJATE",
        "ts": "1674273682.757209",
        "text": "とりあえず linear-base に入ってるものは(不十分なりに)かなり重要そうなので，含める方向で検討した方がよさそうですね．"
    },
    {
        "type": "message",
        "user": "UL5PAB0F9",
        "ts": "1674274047.269499",
        "text": "すでに便利なものがあるのであれば使いたいですが，自前で対応できそうならそれでいいのかなと。\nコンテナ系は一通りそろっているのでlinear-baseだけでも十分いろんなことはできると思います"
    },
    {
        "type": "message",
        "user": "UL1HFJATE",
        "ts": "1674275065.035079",
        "text": "そういえば， ghc-9.4 ってもう 9.4.4 になってますけど， recommended になってないということは考えない方がいいのでしょうか．"
    },
    {
        "type": "message",
        "user": "UL1HFJATE",
        "ts": "1674353429.074679",
        "text": "bitvec, 面白そうなパッケージですね <https://hackage.haskell.org/package/bitvec>"
    },
    {
        "type": "message",
        "user": "UL1HFJATE",
        "ts": "1674359451.004789",
        "text": "現在の提案 (2023/01/22):\n• GHC: `9.4.4`\n• 提案追加パッケージ\n    ◦ `regex-tdfa`\n    ◦ `exception`, `safe-exception` (<@UL1HFJATE>)\n    ◦ `linear-base` (<@UL5PAB0F9>)\n    ◦ `bitvec` (<@UL1HFJATE>)\n• 提案削除パッケージ\n    ◦ `repa`\nで今日のもくもく会で仮想環境ビルドを試してみたいと思います．"
    },
    {
        "type": "message",
        "user": "UL1HFJATE",
        "ts": "1674359554.198329",
        "text": "他にも欲しいパッケージ等あればどんどんください〜"
    },
    {
        "type": "message",
        "user": "UL1HFJATE",
        "ts": "1674943791.721359",
        "text": "忘れる前にメモ代わりとしてもここに記します． `vector-stream`  は絶対欲しいですね． `vector` の dependency である `vector-stream` は絶対にインストールはされますし， 前回のやり方を踏襲するなら(オフライン性を担保しようと思ったらそうするのが一番楽なので)  `cabal install --lib` なんだから  hidden 扱いにはならないかもしれませんが，万一 Stream に追加の関数が足せないと絶対困るはず．"
    },
    {
        "type": "message",
        "user": "UL1HFJATE",
        "ts": "1674945486.313749",
        "text": "未テストですが，今想定しているインストール手順は\n\n```# make sure you login from the user runner!\n$ sudo apt-get update\n$ sudo apt-get install -y build-essential curl libffi-dev libffi8ubuntu1 libgmp-dev libgmp10 libncurses-dev libncurses5 libtinfo5 llvm-13\n$ curl --proto '=https' --tlsv1.2 -sSf <https://get-ghcup.haskell.org> | BOOTSTRAP_HASKELL_NONINTERACTIVE=1 BOOTSTRAP_HASKELL_GHC_VERSION=9.4 BOOTSTRAP_HASKELL_CABAL_VERSION=latest BOOTSTRAP_HASKELL_INSTALL_NO_STACK=1 sh\n$ source ~/.ghcup/env\n$ cabal install --lib &lt;packages&gt;```\nあたりです．ユーザー名が runner 固定なので user-local install にしてあります．コンパイル手順は:\n\n```$ source ~/.ghcup/env\n$ ghc -fllvm -O2 Main.hs```\nぐらいを考えています (未テストだからうまくいくかは完全に未知数ですが，透明性は高ければ高いだけいいと思いまして)．今は<https://haskell-jp.slack.com/archives/CL3AXB1AL/p1674386752845559?thread_ts=1674359451.004789&amp;cid=CL3AXB1AL> の話で`http-client` と `Cabal-syntax` のライブラリAPI docを読んでます．"
    },
    {
        "type": "message",
        "user": "U04MB7BQ50T",
        "ts": "1675173688.055329",
        "text": "<@U04MB7BQ50T> has joined the channel"
    },
    {
        "type": "message",
        "user": "UL5PAB0F9",
        "ts": "1675344466.542369",
        "text": "2/3に1度freezeするようですね\n<https://twitter.com/atcoder/status/1620338326615232514>"
    },
    {
        "type": "message",
        "user": "UL5PAB0F9",
        "ts": "1675347145.093909",
        "text": "インストールコマンド以外の部分はスプレッドシートを埋めました。\nexceptionとsafe-exceptionは末尾にsをつけて，exceptionsとsafe-exceptionsに修正しました。"
    },
    {
        "type": "message",
        "user": "UL5PAB0F9",
        "ts": "1675347238.117959",
        "text": "ライセンスは基本的にBSD-3-Clauseで，以下が例外でした\n\n```integer-logarithms: MIT\nlens: BSD-2-Clause\nlinear-base: MIT\nmono-traversable: MIT\nmutable-containers: MIT\nparsec: BSD-2-Clause\nsafe-exceptions: MIT\ntext: BSD-2-Clause```"
    },
    {
        "type": "message",
        "user": "UL1HFJATE",
        "ts": "1675391575.192939",
        "text": "取り敢えず cabal が走るところまでしかチェックしていないのですが今日中に追記しようと思ってインストール手順等を書き込んだ瞬間にfreezeされましたね…"
    },
    {
        "type": "message",
        "user": "UL1HFJATE",
        "ts": "1675391652.418429",
        "text": "`ghc-bignum` も足しとかなきゃとか考えてたんですが…。"
    },
    {
        "type": "message",
        "user": "UL5PAB0F9",
        "ts": "1675393620.408609",
        "text": "`-pgmlo opt-13 -pgmlc llc-13` つけないとビルド通らないかも"
    },
    {
        "type": "message",
        "user": "UL1HFJATE",
        "ts": "1675393766.073609",
        "text": "あ、そっか、オプションつけないghciしか通してない！！ 自前のdockerでも確認してみますね"
    },
    {
        "type": "message",
        "user": "UGM9F7XQS",
        "ts": "1675394010.102689",
        "text": "GHCのbindistはconfigure時に `opt-&lt;バージョン番号&gt;` , `llc-&lt;バージョン番号&gt;` のようなコマンド名も探索して記録するので、インストール時にすでにllvm-13が入っていれば大丈夫だと思います。"
    },
    {
        "type": "message",
        "user": "UL1HFJATE",
        "ts": "1675394432.171549",
        "text": "あ、docker上で、`ghc -fllvm -O2 Test.hs` が `main=return()` に対して通るのは確認できました。"
    },
    {
        "type": "message",
        "user": "UL1HFJATE",
        "ts": "1675402815.431589",
        "text": "がんばりました。直接installしていない物も含む、全transitive dependencyのライセンスのリスト:　<https://docs.google.com/spreadsheets/d/1HXyOXt5bKwhKWXruzUvfMFHQtBxfZQ0047W7VVObnXI/edit#gid=1835616968&amp;range=E5|https://docs.google.com/spreadsheets/d/1HXyOXt5bKwhKWXruzUvfMFHQtBxfZQ0047W7VVObnXI/edit#gid=1835616968&amp;range=E5>"
    },
    {
        "type": "message",
        "user": "UL1HFJATE",
        "ts": "1675906753.041469",
        "text": "`parallel` が202001から提案パッケージに含まれたままになっていますが，`--with-rtsopts -threaded` したほうがいいのでしょうか？"
    },
    {
        "type": "message",
        "user": "UL1HFJATE",
        "ts": "1676074165.493749",
        "text": "こちらに残すのを忘れていました：\n追加提案\n1. `ghc-bignum` を追加で明示的に可視にする\n2. `bitvec` は `libgmp`  フラグをEnabledにする\n他に提案があればよろしくお願いします！"
    },
    {
        "type": "message",
        "user": "UL1HFJATE",
        "ts": "1677730463.615279",
        "text": "現状のcabal-install 3.8.1.0において， `cabal install --lib`  が GHC-bundled library[1]の*真*部分集合として default global packages ( `cabal install --lib` する前に最初から可視になっているパッケージ)  のリスト[2] を持ってるので， `cabal-plan license-report`  [3] (このSlackの<https://haskell-jp.slack.com/archives/C5666B6BB/p1675591690570469?thread_ts=1675566381.795629&amp;cid=C5666B6BB|この返答> で紹介いただいたものです) を使うにも面倒だな，という感じになっています．将来のlanguage update のことも考えると，こういうツールが使えた方が後々同じ作業をするときにも楽そうなので，このツールを使えるようにどうにかした方がいい気がします．そのために考えられるやり方を以下に列挙してみましたが，ご意見をいただきたいです．\n\n1.  Cabal package を一個作っといて `cabal v2-build --only-dependencies pkg:exe` するまでをインストールとし，コンパイル時は `cabal v2-build --offline pkg:exe` して，実行時は `cabal v2-run` する\n2. Cabal package を一個作っといて `cabal v2-build --only-dependencies pkg:exe` するまでをインストールとし，コンパイル時は `cabal v2-install --offline pkg:exe` して，実行時は `$ Main` する\n3. `cabal-env` [4]を使う\n4. global packages をスプレッドシートの dependencies に加えておく\n5.  `cabal-plan license-report` の時だけ dependencies に加えて license-report を作成する．そうすると `cabal-plan license-report` は直接の依存性と間接依存性を区別するため，依存するパッケージが増えたように見えてしまうので，その理由をスプレッドシートの付記に加える．\nところで，default global packages は色々問題を引き起こしてきたようで， cabal-installのmasterでは `cabal install --lib` から “global packages”の概念は消えるようです[5]．加えて，GHC-bundled package の中で，GHCと完全に結合していて別バージョンをインストールできないパッケージは9つしかなく[6]，それ以外のGHC-bundled package は global packages の概念がない環境であればアップデートができるようです．\n\nこれらの事情から，取るべき手段として1--3，特に1か2を検討しています．ですがあんまりしっかり考えられていない気がするので，意見をいただけたら非常に助かります．\n\nちなみに，元々「GHC-bundled libraryは全露出するべきだ」という目的で default global packages ができたっぽいので， default global packages が GHC-bundled library の*真*部分集合になってしまったのは，多分メンテナンス忘れによる偶然だと私は無根拠に推測しています．\n\n参考文献:\n1. GHC-bundled library: <https://gitlab.haskell.org/ghc/ghc/-/wikis/commentary/libraries/version-history>\n2. default global packages の list: <https://hackage.haskell.org/package/cabal-install-3.8.1.0/docs/src/Distribution.Client.CmdInstall.html#globalPackages>\n3. `cabal-plan` の Hackage page: <https://hackage.haskell.org/package/cabal-plan>\n4. cabal-env: <https://github.com/phadej/cabal-env>, development moved to <https://github.com/phadej/cabal-extras>\n5. `cabal install --lib` から “global packages” の概念を消すPR: <https://github.com/haskell/cabal/pull/8607>\n6. アップデートできないパッケージ群 in cabal-install source: <https://github.com/haskell/cabal/blob/42a03ff0892101a0a967d6fbb08fe4f339b9f6da/cabal-install/src/Distribution/Client/Dependency.hs#L409>"
    },
    {
        "type": "message",
        "user": "UL1HFJATE",
        "ts": "1678709988.135779",
        "text": "上の発言に従ったインストール方法を作成してみました．License-report と exposed-modules の全importからなるソースをつけています:\n\n<https://gist.github.com/gksato/6f8cf9767a96dd7650cbba88f4cc102c>\n\nビルドは\n```$ source ~/.ghcup/env &amp;&amp; cd ~/submission &amp;&amp; cabal v2-install --offline --install-method=copy --installdir=~```\n実行は  `./main` です"
    },
    {
        "type": "message",
        "user": "UL1HFJATE",
        "ts": "1678711273.196769",
        "text": "ちなみにdependencyをnewline-separated list にするとlicense-reportとチェック用のソースファイルが半自動生成できるようにしたので，今からでもパッケージの追加とかは簡単にできます！ ご意見お待ちしてます〜\n<https://github.com/gksato/haskell-atcoder-server-gen>"
    },
    {
        "type": "message",
        "user": "UL1HFJATE",
        "ts": "1678711342.143289",
        "text": "あとこっちのやり方でインストールすることについてのご意見などもあれば。"
    }
]