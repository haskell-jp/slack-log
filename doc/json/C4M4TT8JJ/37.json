[
    {
        "ts": "1548745351.157000",
        "text": "<@UFR40Q0U9> has joined the channel",
        "user": "UFR40Q0U9",
        "type": "message"
    },
    {
        "ts": "1548754554.159200",
        "text": "もくもく会で少し紹介したやつを、Dhall本家リポジトリに載っけて貰うissue立てた…めっちゃ緊張します <https://github.com/dhall-lang/dhall-lang/issues/356>",
        "user": "U570660KX",
        "type": "message"
    },
    {
        "ts": "1548860019.160400",
        "text": "ビルドオプションとか変えてみて動作確認したまとめ\n<http://kakkun61.hatenablog.com/entry/2019/01/30/Haskell_Ctrl-C_%E5%8B%95%E4%BD%9C%E7%A2%BA%E8%AA%8D>",
        "user": "U4L0B71L1",
        "type": "message"
    },
    {
        "ts": "1548910075.161400",
        "text": "<@UFTURES03> has joined the channel",
        "user": "UFTURES03",
        "type": "message"
    },
    {
        "ts": "1549002045.161700",
        "text": "<@UFUMHSDPB> has joined the channel",
        "user": "UFUMHSDPB",
        "type": "message"
    },
    {
        "ts": "1549333866.162300",
        "text": "<@UFY4AK342> has joined the channel",
        "user": "UFY4AK342",
        "type": "message"
    },
    {
        "ts": "1549346416.163200",
        "text": "moduleをqualifyした状態でre-exportできるようにする提案 <https://github.com/ghc-proposals/ghc-proposals/pull/205>",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1549377518.170100",
        "text": "そう言えば、去年の話になるけど、 <https://haskell-jp.slack.com/archives/C4M4TT8JJ/p1545795271024900?thread_ts=1545795271.024900> な事を言ったと思うのですが、 それっぽい状況に遭遇した かな？ と思ったので追記\n\n```\nResolving dependencies...\ncabal.exe: Could not resolve dependencies:\n[__0] trying: generic-storable-0.1.0.0 (user goal)\n[__1] next goal: base (dependency of generic-storable)\n[__1] rejecting: base-4.12.0.0/installed-4.1... (conflict: generic-storable =&gt;\nbase==4.5.*)\n[__1] rejecting: base-4.12.0.0, base-4.11.1.0, base-4.11.0.0, base-4.10.1.0,\nbase-4.10.0.0, base-4.9.1.0, base-4.9.0.0, base-4.8.2.0, base-4.8.1.0,\nbase-4.8.0.0, base-4.7.0.2, base-4.7.0.1, base-4.7.0.0, base-4.6.0.1,\nbase-4.6.0.0, base-4.5.1.0, base-4.5.0.0, base-4.4.1.0, base-4.4.0.0,\nbase-4.3.1.0, base-4.3.0.0, base-4.2.0.2, base-4.2.0.1, base-4.2.0.0,\nbase-4.1.0.0, base-4.0.0.0, base-3.0.3.2, base-3.0.3.1 (constraint from\nnon-upgradeable package requires installed instance)\n[__1] fail (backjumping, conflict set: base, generic-storable)\nAfter searching the rest of the dependency tree exhaustively, these were the\ngoals I've had most trouble fulfilling: base, generic-storable\n````\n\n`cabal install generic-storable` で、でました。 無論 `allow-newer` で解決したんですが、、、SemVarが絶対の世界(っていうと問題ありそうだけど、、、)だと特になんの意識もしないで入れられる筈ですよね？",
        "user": "U9XHWQX7Z",
        "type": "message"
    },
    {
        "ts": "1549401729.170400",
        "text": "<@UFYU7K1DH> has joined the channel",
        "user": "UFYU7K1DH",
        "type": "message"
    },
    {
        "ts": "1549414943.170700",
        "text": "まず、 SemVer というのが上3つのバージョンを対象に指しているなら、 base は SemVer に準拠していません。今回問題になっている 4.5.x と4.12.x の間だと\n* Monad が Applicative のスーパークラスでない\n* Prelude から catch が消えた\nなどの破壊的変更があります。今回、 allow-newer で問題が起きなかったのは、たまたまこれらの問題を運良く踏まなかったからです。",
        "user": "U57D08Z9U",
        "type": "message"
    },
    {
        "ts": "1549415782.170900",
        "text": "また個人的には、依存 constraints をライブラリ作者が提供している以上、それに違反する制約でビルドすることは、例えどのような背景がありその制約が生み出されたにしても、動作保証外という認識です。なので、 allow-newer 以上の矯正的な自動解決に需要はあまりないと考えています。",
        "user": "U57D08Z9U",
        "type": "message"
    },
    {
        "ts": "1549415933.171100",
        "text": "動作保証があるなら、その旨をライブラリ作者に伝え、 constraints を緩めてもらうことを個人的には推奨します",
        "user": "U57D08Z9U",
        "type": "message"
    },
    {
        "ts": "1549421822.171500",
        "text": "<@UFZ5LD0H1> has joined the channel",
        "user": "UFZ5LD0H1",
        "type": "message"
    },
    {
        "ts": "1549428981.171900",
        "text": "うーん。 今回はたまたま、1個のライブラリだったから良かったものの、10個も20個もみたいな状況だと対応しきれないような。。。 みたいな事を思ってたのですが。。。 やっぱり、人間が付ける バージョン番号には限界があるって事 なんでしょうか。",
        "user": "U9XHWQX7Z",
        "type": "message"
    },
    {
        "ts": "1549434343.172200",
        "text": "えっと，上で主張したいのは2点あって\n• 今回の場合そもそも allow-newer はたまたま成功しただけで，安全な操作ではない．よって，今回の事例ではそもそも rely-on-version 相当のものがあっても安全に依存解決ができたわけではなく，むしろ SemVer にちゃんと準拠していたなら今回の generic-storable は rely-on-version ではビルドできていない (つまり，今回の事例は動機になっていないように思う)\n• cabal の依存 constraints は SemVer の制約を表すのに十分な表現力を持っています（例えば SemVer に準拠したライブラリを使う場合 `&gt;= その時のバージョン &amp;&amp; &lt; 次のメジャーバージョン` と指定すればいい) し， constraints とはそのライブラリの動作保証の範囲を表します．それに違反するような constraints を使うということは少なくともライブラリ作成者は意図していないはずです(そもそも constraints はその意図を表すものなので)．そのような場合に強い需要がなく実装コストの高い柔軟な自動解決が手段が必要なのか\n\nという感じです． 10 個も 20 個も SemVer 準拠だと解決できるような状況は個人的にはあまり起こらないと思います(むしろ，10数個 constraints が解決できない場合， SemVer 準拠でも解決できなくて，手動で解決する必要がある場合がほとんどだと思います)．なので，需要があまりなさそうというのが個人的な意見です．",
        "user": "U57D08Z9U",
        "type": "message"
    },
    {
        "ts": "1549438258.172400",
        "text": "私の主張は、\n`allow-newer` は 単なる緊急回避でしかなく 極端にいえば絶対悪であること\nSemVer が絶対だとすれば、  同一メジャーバージョンでマイナーバージョンが最低でも同一かそれ以上なら 互換性は保障されているということ。今回の例で言えば、 `base == 3.*` の依存だった場合は保障の対象外となること\n\n限界だと言ったのは、SemVer自体には強制力がないので、100%の互換性を失ったとしても、マイナーバージョンのみの変更でよくてそれを(機械的に)調べるすべがない事\n\n`rely-on-version` は `allow-newer` に上限を付けるもので ライブラリ作者が適切にバージョニングを行っていると仮定した場合安全になる ということ。 `constraint` フラグは あくまでも手動の解決であって、 制約自体は機械的に与えられたものではないこと\n\nとは言ったものの\n&gt; GHC is the de facto standard compiler\nとあるようにGHCが事実上の標準だとするとそれの依存である baseパッケージがバージョニングを適切に行なってないならあまり効果はなさそうですね。",
        "user": "U9XHWQX7Z",
        "type": "message"
    },
    {
        "ts": "1549447383.172700",
        "text": "<@UFZLMTQQ5> has joined the channel",
        "user": "UFZLMTQQ5",
        "type": "message"
    }
]