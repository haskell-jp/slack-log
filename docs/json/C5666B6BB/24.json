[
    {
        "ts": "1531312619.000421",
        "text": "たとえば、19ページ。関数適用は、tail call (すなわち jump)とありますね。",
        "user": "U56MBRKR9",
        "type": "message"
    },
    {
        "ts": "1531312699.000022",
        "text": "誰か忘れましたが、日本人の方がたくさん論文を読んでまとめのレポート書いてました。内容には一部間違いがありましたが。。。",
        "user": "U56MBRKR9",
        "type": "message"
    },
    {
        "ts": "1531312811.000027",
        "text": "なんか書いてました。",
        "user": "U56MBRKR9",
        "type": "message"
    },
    {
        "ts": "1531312813.000096",
        "text": "<http://d.hatena.ne.jp/kazu-yamamoto/20130417/1366179138>",
        "user": "U56MBRKR9",
        "type": "message"
    },
    {
        "ts": "1531350000.000009",
        "text": "ありがとうございます！",
        "user": "U56G77VM1",
        "type": "message"
    },
    {
        "ts": "1531369895.000137",
        "text": "VSCodeでHaskell IDE engineを使用していると気づいたら5,6GBもメモリを消費しているのですが、これを回避する方法はありますか。いまのところは定期的にIDEを再起動してこれを回避しています。",
        "user": "U7Z4F723Z",
        "type": "message"
    },
    {
        "ts": "1531370171.000115",
        "text": "現状は IDE を再起動するしかないと思います…。\n<https://github.com/haskell/haskell-ide-engine/issues/665>\n<https://github.com/haskell/haskell-ide-engine/issues/580>",
        "user": "U5B3EGEFQ",
        "type": "message"
    },
    {
        "ts": "1531370288.000023",
        "text": "なるほど。ありがとうございます。",
        "user": "U7Z4F723Z",
        "type": "message"
    },
    {
        "ts": "1531380475.000121",
        "text": "特定のインスタンスを持っている場合だけ処理を変えたいのですが、なにかやり方はありますでしょうか？\n具体的には、\n```\nfromIntegral :: (Num a, Integral i) =&gt; i -&gt; a\n```\nを拡張して、 `(Floating a, Bounded i)` の場合だけ、ノーマライズする処理を入れたいです。\n\n気分的にはこんなコードを動くようにしたいです。\n\n```\nclass FromIntegralNormalized i a where\n  fromIntegralNormalized :: i -&gt; a\n\ninstance (Integral i, Num a, Bounded i, Floating a) =&gt; FromIntegralNormalized i a where\n  fromIntegralNormalized = (/ fromIntegral (maxBound :: i)) . fromIntegral\n\ninstance (Integral i, Num a) =&gt; FromIntegralNormalized i a where\n  fromIntegralNormalized = fromIntegral\n```",
        "user": "U4LNDESN8",
        "type": "message"
    },
    {
        "ts": "1531401547.000108",
        "text": "基本的には，これをそのまま実現するのは難しいため，APIの見直しを推奨します．\n\nAPIそのままとはいきませんが，基本的にはGADTsを使って\n```\n{-# LANGUAGE GADTs #-}\n{-# LANGUAGE ScopedTypeVariables #-}\n\ndata WhetherNormalize i a where\n  BoundedNormalize :: (Bounded i, Floating a) =&gt; i -&gt; WhetherNormalize i a\n  WithoutNormalize :: i -&gt; WhetherNormalize i a\n\nfromIntegralWithNormalize :: forall i a. (Integral i, Num a) =&gt; WhetherNormalize i a -&gt; a\nfromIntegralWithNormalize (BoundedNormalize x) = fromIntegral x / fromIntegral (maxBound :: i)\nfromIntegralWithNormalize (WithoutNormalize x) = fromIntegral x\n```\nというのがいいと思います．\n\nこのような関数を多相化する場合，実行時まで制約が存在するかの判定を遅延する必要があります(要は，それぞれの制約をMaybeに包むことで多相を実現するイメージです)\nなお，一応この仕組みを単純に実現するコンパイラプラグインが提供されているみたいです\n<https://hackage.haskell.org/package/constraints-emerge>",
        "user": "U57D08Z9U",
        "type": "message"
    },
    {
        "ts": "1531451091.000167",
        "text": "OVERLAPSプラグマを使えば近い事は可能です。ただし、型クラス制約が増えただけではOVERLAPSにできる条件「より具体的なインスタンス」を満たさないので、オーバーラップさせる型は個別に指定する必要があります。\n\n```\n{-# LANGUAGE MultiParamTypeClasses, FlexibleInstances, ScopedTypeVariables #-}\n\nimport <http://Data.Int|Data.Int>\n\nclass FromIntegralNormalized i a where\n  fromIntegralNormalized :: i -&gt; a\n\nboundedToFloating :: forall i a. (Integral i, Bounded i, Num a, Floating a) =&gt; i -&gt; a\nboundedToFloating = (/ fromIntegral (maxBound :: i)) . fromIntegral\n\ninstance {-# OVERLAPS #-} (Integral i, Bounded i) =&gt; FromIntegralNormalized i Float where\n  fromIntegralNormalized = boundedToFloating\n\ninstance {-# OVERLAPS #-} (Integral i, Bounded i) =&gt; FromIntegralNormalized i Double where\n  fromIntegralNormalized = boundedToFloating\n\ninstance (Integral i, Num a) =&gt; FromIntegralNormalized i a where\n  fromIntegralNormalized = fromIntegral\n\nmain = do\n  print (fromIntegralNormalized (64 :: Int8) :: Int)\n  print (fromIntegralNormalized (64 :: Int8) :: Float)\n  print (fromIntegralNormalized (64 :: Int8) :: Double)\n```",
        "user": "U570660KX",
        "type": "message"
    },
    {
        "ts": "1531452292.000003",
        "text": "なるほど、この辺は手で書くしかないんですね。ありがとうございます。",
        "user": "UADFT2WQ6",
        "type": "message"
    },
    {
        "ts": "1531452332.000014",
        "text": "この記事は両方ともとても参考になります!ありがとうございます。",
        "user": "UADFT2WQ6",
        "type": "message"
    },
    {
        "ts": "1531453992.000113",
        "text": "<@U57D08Z9U> <@U570660KX> ありがとうございます！やってみます！",
        "user": "U4LNDESN8",
        "type": "message"
    },
    {
        "ts": "1531475540.000070",
        "text": "`OVERLAPS` の方法だと、呼び出し元に `(Num a) ` の制約しかなかったら、ノーマライズしてくれないですね。\n\n```\nhoge :: (Num a) =&gt; a\nhoge = fromIntegralNormalized (100 :: Word8)\n\n&gt;&gt;&gt; hoge :: Int\n100\n&gt;&gt;&gt; hoge :: Float\n100.0\n ```",
        "user": "U4LNDESN8",
        "type": "message"
    },
    {
        "ts": "1531475644.000071",
        "text": "正攻法で GADTs を使う方法でやることにして、こんな感じになりました。\n\n```\ndata Normalizing i a where\n  NonNormalized :: Normalizing i a\n  Normalized :: (Bounded i, Fractional a) =&gt; Normalizing i a\n\nfromIntegral' :: forall i a. (Integral i, Num a) =&gt; Normalizing i a -&gt; i -&gt; a\nfromIntegral' NonNormalized = fromIntegral\nfromIntegral' Normalized    = (/ fromIntegral (maxBound :: i)) . fromIntegral\n```",
        "user": "U4LNDESN8",
        "type": "message"
    },
    {
        "ts": "1531475838.000023",
        "text": "`constraints-emerge` のプラグインも試してみましたが、呼び出し元に `Emerge` 制約が伝播していくのが気になるので見送りました。",
        "user": "U4LNDESN8",
        "type": "message"
    },
    {
        "ts": "1531549509.000004",
        "text": "<@U7155GPR9> has joined the channel",
        "user": "U7155GPR9",
        "type": "message"
    },
    {
        "ts": "1531549571.000043",
        "text": "GraphQLのクエリを作ってくれるモジュールに心当たりのある方はいますか？サーバを提供するものなら発見したのですが……",
        "user": "U7155GPR9",
        "type": "message"
    },
    {
        "ts": "1531554740.000006",
        "text": "これHaskell強い人のigrepさんとlotzさんが知らないということはやはり存在しないのでは……",
        "user": "U7155GPR9",
        "type": "message"
    },
    {
        "ts": "1531554994.000026",
        "text": "一応あるにはあるっぽいんですが、メンテされてなくてちょっとプロジェクトに入れにくいんですよね：graphql: Haskell GraphQL implementation - <https://hackage.haskell.org/package/graphql>",
        "user": "U7155GPR9",
        "type": "message"
    },
    {
        "ts": "1531562467.000019",
        "text": "うお～～～ってなりながら自前で作ることしました",
        "user": "U7155GPR9",
        "type": "message"
    },
    {
        "ts": "1531592547.000028",
        "text": "例えば\n```\ntype Key = String\ntype Value = String\ndata Hoge = [(Key, Value)] \n```\nみたいな型があったとして、`Key`が重複していたらコンパイル時にエラーを出すような仕組みって作れるんでしょうか。`TemplateHaskell`を利用したらできるんでしょうか。",
        "user": "U7155GPR9",
        "type": "message"
    },
    {
        "ts": "1531604014.000004",
        "text": "もうひとつ、次のような型があったとして\n```\ndata Member = Name String | Arguments [Argument]\ndata Field a = Field a [Member]\n```\n`Field a` （例えば `Field Int` ）をとって `Int` か、他の型に包んだ `Some Int` のような型を生成できるのでしょうか。 `Generics` とか使えばできるのかなとは考えてみたのですが上手くまとまらないです。（完全にGraphQLのAST作ってそこから型作る話です）",
        "user": "U7155GPR9",
        "type": "message"
    },
    {
        "ts": "1531616303.000031",
        "text": "どんな `Key` があるのかコンパイル時にすべて求められるのであれば、可能です。\nExtensible Recordというのはみんなそうしたものです。\nfumiさんのextensibleでも、キーが重複していれば検出してくれます。",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1531616355.000033",
        "text": "まぁ、そこまで検索しづらいワードでもないでしょうから、検索してないならないってことなんでしょうね...",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1531616686.000050",
        "text": ":thinking_face: \n`Foo Int` から `Int` や `Some Int` を生成するというのがよくわからないです。\n型ではなくてそういう関数を自動生成したいという話ですかね？",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1531634259.000027",
        "text": "ありがとうございます。やはりextensibleですね",
        "user": "U7155GPR9",
        "type": "message"
    },
    {
        "ts": "1531635043.000023",
        "text": "ちょっといい方が適当すぎました。前述の型があるとき\n```\ndata Nyaan a = Nyaan a\n```\nみたいな型があったとしてこの `a` の型を `Field a` の型と一致させるような仕組みが作れないかなということです",
        "user": "U7155GPR9",
        "type": "message"
    },
    {
        "ts": "1531670229.000054",
        "text": "すみません、ますますわからない... :disappointed: \nちょっと質問で返しちゃいますが、\nもともとのゴールは、GraphQLをHaskellに生成（してサーバーに送って、結果をHaskellの型に変換）させたいわけですよね。\nどういうアプローチでやろうとしてます？\n例えば、 <https://github.com/haskell-graphql/graphql-api#roadmap> が\n&gt; Derive client implementations from types\nと計画しているように型からクエリーを組み立てる関数を生成するっていうアプローチではない？",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1531670331.000002",
        "text": "ちょっと自分でも整理しきれてないのでいろいろ試してからまた来ます！すみません！",
        "user": "U7155GPR9",
        "type": "message"
    },
    {
        "ts": "1531710409.000042",
        "text": "Hakyllのビルドがメモリ不足で失敗するのですが何か良い対策はありませんか？Hakyllそのものに手を入れて二つのライブラリへ分割してコンパイルさせることで対処していますが、あとあと困りそうで……",
        "user": "U5LEE6C1J",
        "type": "message"
    },
    {
        "ts": "1531715093.000065",
        "text": "`travis` がメモリ不足で死ぬ時は `-j 1` オプションで回避したことがありますが、ちょっと違う感じですか？\n<https://haskell.e-bigmoon.com/posts/2017/12-31-travis-out-of-memory.html>",
        "user": "U5B3EGEFQ",
        "type": "message"
    },
    {
        "ts": "1531717943.000017",
        "text": "なるほど……手元のパソコンでビルドした時に発生するものなので違いますね。具体的にはこのバグに引っかかっていて、どうしようもないのでメモリ使用量を減らす方法はないか、という感じです\n<https://github.com/jaspervdj/hakyll/issues/613>",
        "user": "U5LEE6C1J",
        "type": "message"
    },
    {
        "ts": "1531718364.000040",
        "text": "&gt; Couldn’t repro on stackage nightly (GHC 8.4).\n\nwindows 環境が無いので確かめられないのですが、コメントにある `ghc-8.4` 系の `lts-12.0` でもやっぱりダメな感じですか？",
        "user": "U5B3EGEFQ",
        "type": "message"
    },
    {
        "ts": "1531732329.000156",
        "text": "ああ、頭から抜けていました！できました！ありがとうございます。",
        "user": "U5LEE6C1J",
        "type": "message"
    },
    {
        "ts": "1531800161.000136",
        "text": "unlift.ioの対応でresourcetのインスタンスにstatetを受け付けなくなってますが、\nどのように修正するのがおすすめでしょうか。\n<http://hackage.haskell.org/package/conduit-find>\n（リンク張り間違えていました。find-conduitでなくてこっちでした。）\nちなみにこれを使いたいです。",
        "user": "U74KTAG0N",
        "type": "message"
    },
    {
        "ts": "1531802377.000121",
        "text": "直接の回答でなくて恐縮ですが、UnliftIOはそもそもmonad-controlと違ってStateTを使えなくしているのが売りだったはずです。\n<https://www.fpcomplete.com/blog/2017/06/readert-design-pattern> でも少し触れています。",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1531802598.000025",
        "text": "するとstatetつかっているようなものは\nreadertとioref/tvarとかの組み合わせにかえるのがいいのでしょうか。",
        "user": "U74KTAG0N",
        "type": "message"
    },
    {
        "ts": "1531802636.000034",
        "text": "そうなりますね。ちょっと書き換えが面倒くさそうですが...",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1531822685.000046",
        "text": "結構めんどくさいというか、どうすればできるのだっけという感じがしております",
        "user": "U74KTAG0N",
        "type": "message"
    },
    {
        "ts": "1531834207.000248",
        "text": "何回も申し訳ありませんが質問です。 `Data.Extensible` のレコードから `Web.Internal.FormUrlEncoded` の `Form` に変換する以下のようなコードで\n```\n{-# LANGUAGE AllowAmbiguousTypes         #-}\n{-# LANGUAGE DataKinds         #-}\n{-# LANGUAGE FlexibleContexts         #-}\n{-# LANGUAGE FlexibleInstances         #-}\n{-# LANGUAGE MultiParamTypeClasses         #-}\n{-# LANGUAGE OverloadedStrings         #-}\n{-# LANGUAGE ScopedTypeVariables         #-}\n{-# LANGUAGE TypeOperators     #-}\n{-# LANGUAGE UndecidableInstances     #-}\n{-# LANGUAGE UndecidableSuperClasses #-}\n\n\nmodule Hrafnar.Service.Common\n  ( AwaitRequest\n  , Server\n  ) where\n\nimport           Data.Extensible\nimport           Data.HashMap.Strict as HM\nimport           GHC.TypeLits\nimport           Web.Internal.FormUrlEncoded\n\ninstance Forall (KeyValue KnownSymbol (Instance1 ToFormKey h)) xs =&gt; ToForm (Field h :* xs) where\n  toForm = Form . hfoldlWithIndexFor\n    (Proxy :: Proxy (KeyValue KnownSymbol (Instance1 ToFormKey h)))\n    (\\k m v -&gt; HM.insert (toFormKey $ symbolVal $ proxyAssocKey k)  [toFormKey v] m)\n    HM.empty\n```\nとしたのですがどうしても\n```\n    • Could not deduce (ToFormKey (Field h x))\n        arising from a use of ‘toFormKey’\n      from the context: Forall\n                          (KeyValue KnownSymbol (Instance1 ToFormKey h)) xs\n        bound by the instance declaration\n        at src/Hrafnar/Service/Common.hs:33:10-91\n      or from: KeyValue KnownSymbol (Instance1 ToFormKey h) x\n        bound by a type expected by the context:\n                   KeyValue KnownSymbol (Instance1 ToFormKey h) x =&gt;\n                   Membership xs x\n                   -&gt; HashMap Text [Text] -&gt; Field h x -&gt; HashMap Text [Text]\n        at src/Hrafnar/Service/Common.hs:(34,19)-(37,12)\n    • In the expression: toFormKey v\n      In the second argument of ‘HM.insert’, namely ‘[toFormKey v]’\n      In the expression:\n        HM.insert (toFormKey $ symbolVal $ proxyAssocKey k) [toFormKey v] m\n```\nというエラーが出て悩まされています。お心当たりありませんか",
        "user": "U7155GPR9",
        "type": "message"
    },
    {
        "ts": "1531835050.000353",
        "text": "あ、stack lts-9.12です",
        "user": "U7155GPR9",
        "type": "message"
    },
    {
        "ts": "1531836474.000076",
        "text": "おそらくですけど\nToJson のインスタンスとかを参考にしたと思うんですが <https://hackage.haskell.org/package/extensible-0.4.10/docs/src/Data.Extensible.Dictionary.html#line-216>",
        "user": "U56L7EVNY",
        "type": "message"
    },
    {
        "ts": "1531836654.000106",
        "text": "です",
        "user": "U7155GPR9",
        "type": "message"
    },
    {
        "ts": "1531836836.000567",
        "text": "こんな風に Instance1 でいっきにやるには `Field h kv` のインスタンスも必要なので、 `instance ToFormKey (h (AssocValue kv)) =&gt; ToFormKey (Field h kv)` も定義すると通ると思います",
        "user": "U56L7EVNY",
        "type": "message"
    },
    {
        "ts": "1531895102.000157",
        "text": "とりあえず\n```\ninstance ToFormKey (h (AssocValue kv)) =&gt; ToFormKey (Field h kv) where\n  ToFormKey = undefined\n```\nとして適当な `Record` を作り `toForm` してみたのですが\n```\n   • No instance for (ToFormKey (Identity Text))\n        arising from a use of ‘toForm’\n ```\nと出てしまいます。また、 `extensible` のソース見ながら\n```\nderiving instance ToFormKey (h (AssocValue kv)) =&gt; ToFormKey (Field h kv)\n```\nとしたところで\n```\n  • Can't make a derived instance of ‘ToFormKey (Field h kv)’:\n        ‘ToFormKey’ is not a standard derivable class (Eq, Show, etc.)\n        Try GeneralizedNewtypeDeriving for GHC's newtype-deriving extension\n  ```\nと出たのでコンパイラに従い拡張を入れたところでも同様のエラーが出ました",
        "user": "U7155GPR9",
        "type": "message"
    },
    {
        "ts": "1531897224.000244",
        "text": "アッインスタンス作ってないのでは",
        "user": "U7155GPR9",
        "type": "message"
    },
    {
        "ts": "1531897614.000181",
        "text": "1個前の発言は、なんかレコード構文のGenericな導出とごっちゃになって `instance ToForm HogeType` とやってみたけどダメでした",
        "user": "U7155GPR9",
        "type": "message"
    },
    {
        "ts": "1531898615.000002",
        "text": "Identityのインスタンスも作る必要があります。また、GeneralisedNewtypeDerivingが本当に有効になっているかもう一度確認してみてください。PolyKindsもおそらく必要です",
        "user": "U4KUNQF9N",
        "type": "message"
    }
]