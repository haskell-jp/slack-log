[
    {
        "type": "message",
        "user": "U043KGWLGVC",
        "ts": "1699161485.810789",
        "text": "途中からですが参加させてください\nHappyでsemverパーサーを書きます"
    },
    {
        "type": "message",
        "user": "U043KGWLGVC",
        "ts": "1699161975.669449",
        "text": "自分のための整理を兼ねて進捗を共有します。\n\nhappyでsemverをパースするの自体は難しくない\n`1.2.3-alpha+build123` これがsemver。\n難しいのは字句解析。ハイフンが識別子としても使えるので`1.2.3-alpha-7`がOKになる。これだとセパレータと識別子ののハイフンとの区別がつかない。"
    },
    {
        "type": "message",
        "user": "U043KGWLGVC",
        "ts": "1699162273.856759",
        "text": "さらに、利便性のためにsemverを拡張したnode-semverというものがある。package.jsonでよく見る`^1.2.3` は実は拡張構文\nnode-semverでは`X, x, *` をバージョン番号として許容する。つまり、`1.2.x` がOKになる。このため、`-, X, x` だけをみてどのトークンかを判別できない。"
    },
    {
        "type": "message",
        "user": "U043KGWLGVC",
        "ts": "1699162365.628049",
        "text": "よって、１文字ずつ文字列を消費していく単純な字句解析では正しくトークン化できないためParserと文脈を共有しながら字句解析しなければいけない。\n今は識別子をパースしてるからハイフンは識別子だよーみたいな"
    },
    {
        "type": "message",
        "user": "U043KGWLGVC",
        "ts": "1699162596.106069",
        "text": "happyにはパーサをユーザー定義のモナドにできるので、Stateモナドを使って文脈を保持することにする。Alexを使うとlexerも生成できるが、とりあえず今回は手書きする。"
    },
    {
        "type": "message",
        "user": "U043KGWLGVC",
        "ts": "1699163886.811069",
        "text": "まだあった。\n`1.0.0 - 2.0.0` のように、ハイフンをバージョン範囲を指定するのにも使うことができる。このハイフンは前後に１個以上の空白がなければいけない"
    },
    {
        "type": "message",
        "user": "U043KGWLGVC",
        "ts": "1699163918.700669",
        "text": "なので空白を単純に読み飛ばすわけにもいかない"
    },
    {
        "type": "message",
        "user": "U043KGWLGVC",
        "ts": "1699164136.064019",
        "text": "地道にパーサーを描いているが、だんだんとParsecTと同じ型になってしまい、車輪の再発明感がすごい。。。"
    },
    {
        "type": "message",
        "user": "U043KGWLGVC",
        "ts": "1699164467.172909",
        "text": "これ最初からParsecでやればいいのでは・・・！？"
    },
    {
        "type": "message",
        "user": "U043KGWLGVC",
        "ts": "1699164995.649769",
        "text": "semverって多分先読み１でできるだろうからParsecでやるのがベストなのかもしれない・・・"
    },
    {
        "type": "message",
        "user": "U043KGWLGVC",
        "ts": "1699165161.666789",
        "text": "<https://tratt.net/laurie/blog/2020/which_parsing_approach.html>\n\n構文解析の手法を比較したこの記事を読んでみる"
    },
    {
        "type": "message",
        "user": "U043KGWLGVC",
        "ts": "1699166380.078929",
        "text": "1. 再帰降下\n    a. 最もわかりやすい\n    b. 実は形式言語のどのクラスに属するかは明らかではない\n    c. 曖昧な文法（複数通りの解析ができる文法）を事前に検知できない\n    d. 素直な実装では左結合の演算子をパースすると無限ループになる\n    e. 筆者は、再帰下降解析はアセンブリ言語のような、自分の足を自分で打ち抜ける手法だと考えている\n2. Generalised parser\n    a. 文脈自由文法に対応している\n    b. 曖昧な文法を「ランタイムで」検出できる\n    c. 筆者は、この手法は動的型付け言語のように強力だが静的解析の難しい手法だと考えている\n3. LL, LR parse\n    a. 文法に曖昧さがない\n    b. CFGの厳密なサブセットになるわけではない。LRだけど、CFGじゃないみたいな文法が存在できる\n4. LL parse\n    a. 左再帰がない\n    b. あんまりメジャーじゃない\n5. LR parse\n    a. LLより強い\n    b. 曖昧さがない\n    c. 筆者は、静的型付け言語のように制限的だが安全であると考えている\n6. PEG\n    a. 本質的には再帰降下\n    b. 何らかの問題があるらしい\n7. パフォーマンス\n    a. そもそも現代のマシンではどの手法でも十分に早い\n    b. それでもLRが早い\n8. エラーリカバリー\n    a. 再帰下降はめっちゃやりやすい\n    b. LRでリカバリは難しい。けど改善の余地はある\n筆者は LR解析が最も実用的と考えている"
    },
    {
        "type": "message",
        "user": "U043KGWLGVC",
        "ts": "1699167345.524709",
        "text": "ということで Happyでパーサー開発を続けます。\n確認したらAlexのContextという機能を使えそうなのでAlexも使います。"
    },
    {
        "type": "message",
        "user": "U043KGWLGVC",
        "ts": "1699168036.813229",
        "text": "すごい！AlexのContextを使ったら驚くほど簡単にパースできた！"
    },
    {
        "type": "message",
        "user": "U043KGWLGVC",
        "ts": "1699175629.003659",
        "text": "とりあえずsemverパーサー自体は完成しました！AlexとHappyをうまく使うと驚くほど簡単にできました。\nあとはパースできた構文木をバージョン制約に変換する処理を実装します。"
    }
]