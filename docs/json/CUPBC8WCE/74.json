[
    {
        "ts": "1740905428.954989",
        "text": "出先の用事が長引いてしまったので、今日は帰ってから延長戦で軽くやります:bow:",
        "type": "message",
        "user": "U4LGTMTMK"
    },
    {
        "ts": "1740906017.055899",
        "text": "",
        "type": "message",
        "user": null
    },
    {
        "ts": "1740906283.810519",
        "text": "Applied Category Theory, Chapter 5: Signal flow graphs: Props, presentations, and proofs. Part 1 の動画視聴 + text 読了　prop と presentation の定義が　膨大な量の例で示される　新しい概念いっぱい出て来て正直辟易とする　おそらく次回にそれらが signal flow graph として統合されるのだろうが　それを楽しみとしよう　ひたすら我慢の子\nCompetitive Programming in Haskell: Scanner は Haskell 競プロ勢に必読の良記事　さっそく Kattis の Popular Vote と Board Wrapping に使用した（後者は目下 Debug 中）",
        "type": "message",
        "user": "U584T7GAH"
    },
    {
        "ts": "1740907132.951999",
        "text": "先週に続き、Ex.5.9 のデバッグのために、Ex.5.10. の実行結果を確認していました。\n再確認の結果、関数適用ノードやグローバルノードのロック方法や、ロックされたノードの解除方法は、とりあえず一応テキストの遷移規則通りに実装しているように見えました。\n先週間違いかと思ったヒープ内容変更処理も一概にそうとは言えないかもと思われたので、エラーの直接の原因となった getArg 関数の non-exhaustive を解消してみたところ、ex.5.10 のテストプログラムが最後まで動いて、前回と異なり処理結果もOutputに出力されました。\nこの動作が正しいのかどうか確認していこうと思います。",
        "type": "message",
        "user": "U04BD6ZFKQ8"
    },
    {
        "ts": "1740911080.059189",
        "text": "時間外でmakeMistakesToLearnHaskellとHaskell-jp Blogの続きをちょっとずつやりました。\n<https://github.com/haskell-jp/makeMistakesToLearnHaskell/commit/fcdf847efbdfdec26867da219e2df436c80155eb>\n<https://github.com/haskell-jp/blog/commit/0f241700e75a2d766d2d40b795a8a8d9a931c318>",
        "type": "message",
        "user": "U4LGTMTMK"
    },
    {
        "ts": "1741492824.590299",
        "text": "",
        "type": "message",
        "user": null
    },
    {
        "ts": "1741493576.379539",
        "text": "<https://ocw.mit.edu/courses/18-s097-applied-category-theory-january-iap-2019/|Applied Category Theory> (MIT OCW 18.S097 2019) Chapter 5: Signal flow graphs: Props, presentations, and proofs.  Part 2 担当 Fong 先生\nあとハシゴで <https://byorgey.github.io/blog/posts/2019/10/12/competitive-programming-in-haskell-reading-large-inputs-with-bytestring.html|Competitive Programming in Haskell: Reading large inputs with ByteString> : Brent Yorgey 先生のこの blog をもとに Kattis の問題を解きます",
        "type": "message",
        "user": "U584T7GAH"
    },
    {
        "ts": "1741495018.276669",
        "text": "S.K.です。今週もお世話になります。よろしくお願いいたします。\n先週行った Implementing Functional Languages: a tutorial, 5.3.2 The instruction set, Ex.5.9 の修正結果の確認を、Ex.5.10 のテストプログラムを使って進めて行こうと思います。",
        "type": "message",
        "user": "U04BD6ZFKQ8"
    },
    {
        "ts": "1741510825.165309",
        "text": "",
        "type": "message",
        "user": null
    },
    {
        "ts": "1741511567.660509",
        "text": "Applied Category Theory, Chapter 5: Signal flow graphs: Props, presentations, and proofs. Part 2 の動画視聴 + text 読了　props の signal flow graphs が線形代数の matrices で表現され　微積素子を含む複雑な制御系をつなぐ応用などが示される　この辺今まで豊富な諸概念を用意した伏線を回収していて　なかなかのモノ　やっと山の中腹まで登った感\nCompetitive Programming in Haskell: Reading large inputs with ByteString :　はほとんどを写経して Kattis の Amy Strength を解いた　ただし chunksOf が非標準の Data.List.Split であるため　自分で再定義が必要　これを改善するため Yorgey 先生の ScannerBS を使うよう試行中",
        "type": "message",
        "user": "U584T7GAH"
    },
    {
        "ts": "1741512505.625639",
        "text": "Ex.5.9 修正後の Ex.5.10 テストプログラムの動作結果確認をしていました。\n各子タスクの開始と終了のタイミングは把握できましたが、手計算で確認した結果が返されているかどうかの確認が未完了です。\n確認に時間がかかりそうだったので、とりあえずテストプログラムを、\n・twice に渡す関数を恒等関数→インクリメント関数\n・引数を 3 → 0\nの様に変更して確認してみたところ、シーケンシャルマシンとパラレルマシンで同じ結果が返ったので、現状明らかに間違ってるわけではなさそうかなと思いますが、引き続き細かく確認を進めて行こうと思います。",
        "type": "message",
        "user": "U04BD6ZFKQ8"
    },
    {
        "ts": "1741512737.563179",
        "text": "用事で外出していましたが、一応時間外にmakeMistakesToLearnHaskellもHaskell-jp Blogも少し進めたので後で共有します :bow:",
        "type": "message",
        "user": "U4LGTMTMK"
    },
    {
        "ts": "1741515793.173519",
        "text": "本日のmakeMistakesToLearnHaskellの更新: <https://github.com/haskell-jp/makeMistakesToLearnHaskell/commit/e4513632b4d37bf8daf44566ba7c774a0a387571>\nHaskell-jp Blogの更新: <https://github.com/haskell-jp/blog/commit/a5c188d4f3e3e320a43640e4b7b2de47464b0e5e>",
        "type": "message",
        "user": "U4LGTMTMK"
    },
    {
        "ts": "1742097629.654729",
        "text": "",
        "type": "message",
        "user": null
    },
    {
        "ts": "1742099895.393449",
        "text": "S.K.です。今週もお世話になります。よろしくお願いいたします。\n先週に続き Implementing Functional Languages: a tutorial, 5.3.2 The instruction set, Ex.5.9 の修正確認の続き(Ex.5.10 のテストプログラムを使用)を進めて行こうと思います。",
        "type": "message",
        "user": "U04BD6ZFKQ8"
    },
    {
        "ts": "1742099950.689869",
        "text": "<https://ocw.mit.edu/courses/18-s097-applied-category-theory-january-iap-2019/|Applied Category Theory> (MIT OCW 18.S097 2019) Chapter 6: Circuits: Hypergraph Categories and Operads.  Part 1 担当 Spivak 先生\nあとハシゴで <https://byorgey.github.io/blog/posts/2020/02/07/competitive-programming-in-haskell-primes-and-factoring.html|Competitive Programming in Haskell: Primes and factoring> : Brent Yorgey 先生の blog をもとに Kattis の問題を解きます",
        "type": "message",
        "user": "U584T7GAH"
    },
    {
        "ts": "1742110416.778709",
        "text": "出先で遅くなってしまいましたが、いつもどおりmakeMistakesToLearnHaskellとHaskell-jp Blogの続きをします。",
        "type": "message",
        "user": "U4LGTMTMK"
    },
    {
        "ts": "1742115620.489199",
        "text": "",
        "type": "message",
        "user": null
    },
    {
        "ts": "1742116088.811749",
        "text": "Applied Category Theory, Chapter 6: Circuits: Hypergraph Categories and Operads. Part 1 の動画視聴 + text 読了　電気回路図を例に挙げ　それを network diagram と見て　その接続を colimit で表し　Initial objects, coproducts, pushouts を準備してから cospans に抽象化して行き　有限集合の圏の上の monoidal category Cospan_FinSet がその成果となる\nCompetitive Programming in Haskell: Primes and factoring: から Library module をつくり Kattis の Perfect Pth Power 問題に挑むも WA 連発　只今思案投げ首中",
        "type": "message",
        "user": "U584T7GAH"
    },
    {
        "ts": "1742116230.886319",
        "text": "makeMistakesToLearnHaskellの更新: <https://github.com/haskell-jp/makeMistakesToLearnHaskell/commit/2764a062235688a8ff351d36d9e42a57b8bc98bd>\nHaskell-jp Blogの更新: <https://github.com/haskell-jp/blog/commit/e16f446ba3023bf78d9def1c7a62adf3e95a5aa5>",
        "type": "message",
        "user": "U4LGTMTMK"
    },
    {
        "ts": "1742116600.395159",
        "text": "先週に続き、Ex.5.9 修正後の Ex.5.10 テストプログラムの動作結果確認をしていました。\n親タスクと7個の子タスクのうち、他のタスクの評価結果を参照しない子タスク4について、終了前に評価結果を直接の親タスク(子タスク2)へ返す動作を、ようやく確認できました。\nかなり時間がかかってしまいました。ただ、時間をかけたことで自分にも少しずつ動作が分かってきたような気がします。\n残りのタスクについても、動作確認を進めて行こうと思います。",
        "type": "message",
        "user": "U04BD6ZFKQ8"
    },
    {
        "ts": "1742702419.159119",
        "text": "",
        "type": "message",
        "user": null
    },
    {
        "ts": "1742702556.906949",
        "text": "<@U08K8AM0RND> has joined the channel",
        "type": "message",
        "user": "U08K8AM0RND"
    },
    {
        "ts": "1742702749.096489",
        "text": "山本悠滋です。例の如く用事により出先なので帰ってからmakeMistakesToLearnHaskellの続きなどやります！",
        "type": "message",
        "user": "U4LGTMTMK"
    },
    {
        "ts": "1742702777.696859",
        "text": "<https://ocw.mit.edu/courses/18-s097-applied-category-theory-january-iap-2019/|Applied Category Theory> (MIT OCW 18.S097 2019) Chapter 6: Circuits: Hypergraph Categories and Operads.  Part 2 担当Fong 先生\nあとハシゴで <https://byorgey.github.io/blog/posts/2020/02/15/competitive-programming-in-haskell-modular-arithmetic-part-1.html|Competitive Programming in Haskell: Modular arithmetic, Part 1> : Brent Yorgey 先生の blog をもとに Kattis の問題を解きます",
        "type": "message",
        "user": "U584T7GAH"
    },
    {
        "ts": "1742704299.546399",
        "text": "S.K.です。今週もお世話になります。よろしくお願いいたします。\n先週に続き Implementing Functional Languages: a tutorial, 5.3.2 The instruction set, Ex.5.9 の修正確認の続き(Ex.5.10 のテストプログラムを使用)を進めて行こうと思います。",
        "type": "message",
        "user": "U04BD6ZFKQ8"
    },
    {
        "ts": "1742720409.919729",
        "text": "",
        "type": "message",
        "user": null
    },
    {
        "ts": "1742720825.603619",
        "text": "帰宅後はまた疲れちゃってあまり進まず、昨日少し進めた分も含めて共有します\nmakeMistakesToLearnHaskellの続き: <https://github.com/haskell-jp/makeMistakesToLearnHaskell/commit/c3be6d18bbfc22a9c0d36903d55ed3e262cdf0f3>\nHaskell-jp Blogの続き: <https://github.com/haskell-jp/blog/commit/93dd30a30a01ba886ae1069feaacab98fc4e5b45>",
        "type": "message",
        "user": "U4LGTMTMK"
    },
    {
        "ts": "1742720922.456129",
        "text": "Applied Category Theory, Chapter 6: Circuits: Hypergraph Categories and Operads. Part 2 の動画視聴 + text 読了　まず Frobenious monoids で結合の様相を定義し hypergraph categories に至る　さらに電気回路の端子を抽象化して閉路としてとらえ Operads が使えることを例示する　回路図と応用圏論の一つの頂点に達したようだ　それがどうしたという圏論の効用については今一つの感もある\nCompetitive Programming in Haskell: Modular arithmetic, Part 1: から Library module: Modular （および Int 型に特化したモノ）をつくり Kattis の SETI 問題に挑戦中",
        "type": "message",
        "user": "U584T7GAH"
    },
    {
        "ts": "1742722567.622739",
        "text": "先週に続き、Ex.5.9 修正後の Ex.5.10 テストプログラムの動作結果確認をしていました。\nMark1 についても、間接参照ノードに対する getArg 関数定義を追加したら Ex.5.10 のテストプログラムが動いたので、Mark2 の結果と比較したところ、各タスクの実行ステップ数が同じでした。\nロックされた関数適用ノードに対するアンワインド処理を間違えていたようです。\nMark2 でノードをロック/アンロックする処理を追加した際に、ロックされたノードをアンワインドしようとしたらブロックされる処理を追加できていなかったようで、結果的に Mark1 と同じ動作になってしまっていたようです。\nブロックされる処理を追加して再確認中です。",
        "type": "message",
        "user": "U04BD6ZFKQ8"
    },
    {
        "ts": "1743307208.071499",
        "text": "",
        "type": "message",
        "user": null
    },
    {
        "ts": "1743307317.163999",
        "text": "山本悠滋です。今日は15:00過ぎから用事なんでそれまではやります！\nいつもどおりmakeMistakesToLearnHaskellとHaskell-jp Blogの続きをします。",
        "type": "message",
        "user": "U4LGTMTMK"
    },
    {
        "ts": "1743307920.531579",
        "text": "<https://ocw.mit.edu/courses/18-s097-applied-category-theory-january-iap-2019/|Applied Category Theory> (MIT OCW 18.S097 2019) Chapter 7: Logic of Behavior: Sheaves, Toposes, Languages.  Part 1 担当 Spivak 先生\nあとハシゴで <https://byorgey.github.io/blog/posts/2020/03/03/competitive-programming-in-haskell-modular-arithmetic-part-2.html|Competitive Programming in Haskell: Modular arithmetic, Part 2> : Brent Yorgey 先生の blog をもとに Kattis の問題を解きます",
        "type": "message",
        "user": "U584T7GAH"
    },
    {
        "ts": "1743309365.626839",
        "text": "S.K.です。今週もお世話になります。よろしくお願いいたします。\n今週も先週に続き Implementing Functional Languages: a tutorial, 5.3.2 The instruction set, Ex.5.9 の修正確認の続き(Ex.5.10 のテストプログラムを使用)を進めて行こうと思います。",
        "type": "message",
        "user": "U04BD6ZFKQ8"
    },
    {
        "ts": "1743314706.705389",
        "text": "もう出掛けないといけないのでこの辺で。\nHaskell-jp Blogの更新: <https://github.com/haskell-jp/blog/commit/7475b7dcf37a9f6b5b87e8e35ec33dc7d72033f7>\nmakeMistakesToLearnHaskellの更新: <https://github.com/haskell-jp/makeMistakesToLearnHaskell/commit/0d93a2f6cd029278ef84c9df6e143fd758e8a48a>",
        "type": "message",
        "user": "U4LGTMTMK"
    },
    {
        "ts": "1743325203.212429",
        "text": "",
        "type": "message",
        "user": null
    },
    {
        "ts": "1743325509.186049",
        "text": "Applied Category Theory, Chapter 7: Logic of Behavior: Sheaves, Toposes, Languages. Part 1 の動画視聴 + text 読了　\"7.2 The category *Set* as an exemplar topos\" Bool 圏の topos の例が分かりやすい subobject classifier がそのお気持ちがはじめて分かった気がする　''7.3 Sheaves\" も好い例題が多くて消化の助けになる　来週はいよいよ最終回 \"Toposes\" 等に挑む\nCompetitive Programming in Haskell: Modular arithmetic, Part ２: から Library module: Modular （および Int 型に特化したモノ）に中国剰余定理を写経して Kattis の該当問題２つに臨む　Yorgey 先生のおかげで至極簡単だった",
        "type": "message",
        "user": "U584T7GAH"
    },
    {
        "ts": "1743326959.601989",
        "text": "今週も、Ex.5.9 修正後の Ex.5.10 テストプログラム(ただし S K K を inc に変更したもの)の動作結果確認をしていました。\nロックされた関数適用ノードをアンワインドしようとした際にブロックされる処理は一応意図した様に動作している模様です。\n以下の様にサブタスクが生成されるようで、\n・親タスクから子タスク1と子タスク4と子タスク7\n・子タスク1から子タスク2と子タスク5\n・子タスク2から子タスク3\n・子タスク4から子タスク6\n上記のうち、子タスク3の結果が子タスク2に返される部分と、子タスク2の結果が子タスク5を通じて子タスク1に返されるらしい部分まで確認しました。\n相変わらず時間がかかってしまってますが、残りの部分も引き続き確認していこうと思います。",
        "type": "message",
        "user": "U04BD6ZFKQ8"
    },
    {
        "ts": "1743912004.842549",
        "text": "",
        "type": "message",
        "user": null
    },
    {
        "ts": "1743912698.822539",
        "text": "<https://ocw.mit.edu/courses/18-s097-applied-category-theory-january-iap-2019/|Applied Category Theory> (MIT OCW 18.S097 2019) Chapter 7: Logic of Behavior: Sheaves, Toposes, Languages.  Part 2 担当 Fong 先生\nあとハシゴで <https://byorgey.github.io/blog/posts/2020/05/16/competitive-programming-in-haskell-summer-series.html|Competitive Programming in Haskell: Summer series> : Brent Yorgey 先生の blog をもとに Kattis の問題を解きます",
        "type": "message",
        "user": "U584T7GAH"
    },
    {
        "ts": "1743912749.832519",
        "text": "S.K.です。今週もお世話になります。よろしくお願いいたします。\n今週も先週に続き Implementing Functional Languages: a tutorial, 5.3.2 The instruction set, Ex.5.9 の修正確認の続き(Ex.5.10 のテストプログラムを使用)を進めて行こうと思います。",
        "type": "message",
        "user": "U04BD6ZFKQ8"
    },
    {
        "ts": "1743926621.026439",
        "text": "山本悠滋です。出先で遅くなりましたが、今日からは関数型まつりの発表の資料作りをします。makeMistakesToLearnHaskellなどの更新は気が向いたらで。",
        "type": "message",
        "user": "U4LGTMTMK"
    },
    {
        "ts": "1743930015.523739",
        "text": "",
        "type": "message",
        "user": null
    },
    {
        "ts": "1743931370.718319",
        "text": "ちょっとだけ進めました。makeMistakesToLearnHaskellとHaskell-jp Blogは延長戦でやるかも",
        "type": "message",
        "user": "U4LGTMTMK"
    },
    {
        "ts": "1743932057.494619",
        "text": "Applied Category Theory, Chapter 7: Logic of Behavior: Sheaves, Toposes, Languages. Part 2 の動画視聴 + text 読了　独習の困難を痛感するも　なんとか最終回 \"Topos\" まで到達し　感無量　これからはしばらく週替わりに Yorgey 先生の blog の咀嚼をベースにして Kattis の問題をやっていこうと思います\n今日は時間がなくて Competitive Programming in Haskell: Summer series : にある Kattis の該当問題 Ceiling Function はまだ考慮中　Data.Tree は rose tree なので使えなさそう　残念　自分で binary tree を定義してやる必要がある:question:",
        "type": "message",
        "user": "U584T7GAH"
    },
    {
        "ts": "1743932130.711019",
        "text": "今週も、Ex.5.9 修正後の Ex.5.10 テストプログラム(ただし S K K を inc に変更したもの)の動作結果確認をしていました。\n今回は、子タスク5の結果が子タスク2に返されるまでと、子タスク2の結果が子タスク1まで返されるところまでの確認が一応済みました。現在、子タスク1の結果が親タスクに返されるところを確認中です。\nそれが済んだら、親タスクから子タスク4、子タスク4から子タスク6が生成されて結果を返す部分と、親タスクから子タスク7が生成されて結果を返す部分の確認となります。\n親タスクは、処理が進むにつれて、元のヒープの中身が間接参照の間接参照という具合にどんどん書き換えられていくため、確認に想定以上に時間がかかってしまっています。コツコツ確認していこうと思います。",
        "type": "message",
        "user": "U04BD6ZFKQ8"
    },
    {
        "ts": "1743936419.415239",
        "text": "makeMistakesToLearnHaskellの更新: <https://github.com/haskell-jp/makeMistakesToLearnHaskell/commit/eef70bc79a27d694f1904063b9f349fef6250112>\nHaskell-jp Blogの更新: <https://github.com/haskell-jp/blog/commit/8ee72a25c991254f144f54a9be8f70ac78226802>",
        "type": "message",
        "user": "U4LGTMTMK"
    }
]