[
    {
        "ts": "1603872045.092700",
        "text": "<https://scrapbox.io/haskell-shoen/barbies-th> barbies-thの新しいバージョン0.1.7をリリースしました。今まで扱いがあやふやだったderiving周りの変換を改善し、元のデータ型と等価なものが導出されるようになったため、既存のコードを歪めずに導入しやすくなりました。データ型の形状と実体を分離できるHKDは幅広い応用ができ、ボイラープレートを一掃できることも珍しくないので、その有用性がさらに評価されることを願っています",
        "user": "U4KUNQF9N",
        "type": "message"
    },
    {
        "ts": "1603926590.094300",
        "text": "また物騒なタイトルだけどいい記事が出ましたね\n<https://www.snoyman.com/blog/2020/10/haskell-bad-parts-1>",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1603932309.097300",
        "text": "`Data.Monoid.First` が deprecated になるよとドキュメントに書いてあったので代替方法などについて書きました\n<https://kakkun61.hatenablog.com/entry/2020/10/28/Data.Monoid.First_%E3%81%A8_Data.Semigroup.First_%E3%81%82%E3%82%8B%E3%81%84%E3%81%AF_Last>",
        "user": "U4L0B71L1",
        "type": "message"
    },
    {
        "ts": "1603932515.097500",
        "text": "このdeprecationは撤回されたような記憶があります。",
        "user": "U4M9NJ7QE",
        "type": "message"
    },
    {
        "ts": "1603932631.097800",
        "text": "<https://gitlab.haskell.org/ghc/ghc/-/merge_requests/3154>",
        "user": "U4M9NJ7QE",
        "type": "message"
    },
    {
        "ts": "1603932644.098100",
        "text": "<https://mail.haskell.org/pipermail/libraries/2020-April/030357.html>",
        "user": "U4M9NJ7QE",
        "type": "message"
    },
    {
        "ts": "1603933077.098300",
        "text": "(あまりよく知らない状態ですが)Firstでくるんだだけだと単位元が存在しないのでMonoid(単位元のあるSemigroup)にはなれない、ということですかね。",
        "user": "U61BA2X0U",
        "type": "message"
    },
    {
        "ts": "1603933392.098800",
        "text": "sumは何が悪くて、代わりに何を使うべきなのか、よく読み取れないんですが、分かりますか？",
        "user": "U56MBRKR9",
        "type": "message"
    },
    {
        "ts": "1603934350.099200",
        "text": "大抵の `Num` 型クラスのインスタンスは `+` の両辺を正格に評価すべきであるにも関わらず、`sum` などは事実上 `foldr (+)` 相当なので、最適化で特殊化されない限りサンクが増えてしまうよ、という主張だという認識です。\n代わりは `foldl' (+)` ではないかと。",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1603934450.099500",
        "text": "あー、そうですね。sum' = fold' (+) が必要なのかも。",
        "user": "U56MBRKR9",
        "type": "message"
    },
    {
        "ts": "1603964587.099900",
        "text": "First/Lastモノイドについては「Haskellerのためのモノイド完全ガイド」でも触れました（宣伝） <https://blog.miz-ar.info/2019/02/monoid-for-haskellers/|https://blog.miz-ar.info/2019/02/monoid-for-haskellers/>",
        "user": "UGM9F7XQS",
        "type": "message"
    },
    {
        "ts": "1603964960.100100",
        "text": "mod_poppo さんのに書いてたっけなーと書く前に見直しました",
        "user": "U4L0B71L1",
        "type": "message"
    },
    {
        "ts": "1603965171.100300",
        "text": "<@U61BA2X0U> `Data.Semigroup.First` は Monoid になれないと思います。\n`Data.Monoid.First` は `Maybe` の性質を持ってて `Nothing` が単位元になってますね。",
        "user": "U4L0B71L1",
        "type": "message"
    },
    {
        "ts": "1603965891.100500",
        "text": "Merge Request が Merge Bot にクローズされてるのはどういうステータスなんでしょうか？",
        "user": "U4L0B71L1",
        "type": "message"
    },
    {
        "ts": "1603966425.100700",
        "text": "botのコメントの通り、マージされたのでは",
        "user": "UGM9F7XQS",
        "type": "message"
    },
    {
        "ts": "1603968114.100900",
        "text": "元投稿の主題から離れてきましたが、自分が GHC の MR や Git の運用が理解できていないみたいです",
        "user": "U4L0B71L1",
        "type": "message"
    },
    {
        "ts": "1603982326.102400",
        "text": "Haskellと圏論の関わりがいつからなのか気になって歴史を調べてみたら、各標準へのリンクをまとめているとてもステキなページを見つけました。\n<https://typeclasses.com/timeline> :sugoi:",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1603982384.102500",
        "text": "別のところで聞いてたんですけど、本当にHaskell 1.0ってIOが（どうやらMonadも）なかったんですねー！ :open_mouth:",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1603982672.102700",
        "text": "これ超大作ですね :open_mouth:\nGHC 3.02 の位置が気になる…ｗ",
        "user": "U4KPPQW7K",
        "type": "message"
    },
    {
        "ts": "1603982721.103000",
        "text": "Haskell Reportにばっかり気をとられて気づかなかった！",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1603983986.108700",
        "text": "やっぱりざっと調べた限り、圏論っぽい名前のFunctorやMonadなどが標準に入ったのはHaskell 1.3からみたいですね。",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1603984621.111300",
        "text": "興が乗ったので作った <https://twitter.com/igrep/status/1321833162217975808>",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1603984863.112100",
        "text": "高パフォーマンスかつwell-typedなシリアライズライブラリ、<http://hackage.haskell.org/package/winery|winery >の1.3.2を公開しました。<https://scrapbox.io/haskell-shoen/HKD|HKD>からExtractorを生成するbuildRecordExtractorが目玉で、たとえ大きなレコードであっても最小限のコードでカスタマイズできます。\n```extractor = fmap bstrip $ buildRecordExtractor bextractors\n    { hoge = extractField \"hoge\" &lt;|&gt; extractField \"oldHoge\" }```\nまた、直前の1.3.1では、《貧者のDerivingVia》と名付けた技法を用いたbundleViaという関数が追加され、DerivingViaのような使い心地でありながら必要に応じてメソッドを上書きすることもできます。\n```instance Serialise Foo where\n  bundleSerialise = bundleVia WineryRecord\n  extractor = buildExtractor ...```\nwineryはaesonよりも時間・空間効率に優れ、cerealと違って変更に強いので、Haskellのデータの永続化にきっと役に立つと思います",
        "user": "U4KUNQF9N",
        "type": "message"
    },
    {
        "ts": "1603986187.112400",
        "text": "リンク見れないです:eyes:\n<https://gyazo.com/2643fd689c7f665b5b52d783fbb2f760>",
        "user": "U4KPPQW7K",
        "type": "message"
    },
    {
        "ts": "1603986319.112800",
        "text": "ご指摘あざっす！修正しました！",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1604017934.114600",
        "text": "&gt; やっぱりざっと調べた限り、圏論っぽい名前のFunctorやMonadなどが標準に入ったのはHaskell 1.3からみたいですね。\n\nHaskell 1.2 までは、確かそもそも higher kind type に対するクラスが作れなくて、それが Monadic notions of computations が大きな動機となって 1.3 で緩和されたという話だった気がしますね。1.2 まではそもそもユーザ定義の Functor クラスも書けなかったはずです",
        "user": "U57D08Z9U",
        "type": "message"
    },
    {
        "ts": "1604024185.115600",
        "text": "<@U01ECB0PNTA> has joined the channel",
        "user": "U01ECB0PNTA",
        "type": "message"
    },
    {
        "ts": "1604024833.115700",
        "text": "学生の頃にこれを読んだのですが、このあと入ったのだとするとたしかにタイミング的には入っていなかったのかと思います。\n\n\n<https://www.microsoft.com/en-us/research/wp-content/uploads/1993/01/imperative.pdf>",
        "user": "UMTRA1VHU",
        "type": "message"
    },
    {
        "ts": "1604025177.115900",
        "text": "でこれを読んだのは大学で他の部門の先生から、純関数型言語で入出力のうまい解決方法を考えてみるとか興味ない？と言われて、Goferで遊んだりしていたのですが、その当時ですと、CPS使うとかストリームの遅延束縛を使うとかしていて、これがまたなかなかユニークな感じ往生していました。",
        "user": "UMTRA1VHU",
        "type": "message"
    },
    {
        "ts": "1604025294.116100",
        "text": "多分そのころに、GHCがだいぶ広まったりしてきて、東大の武市先生？の周りでもいろいろ活動をし始めた頃で、monadの解説聞いた記憶があります。\n\n'92-93ころでしょうか。",
        "user": "UMTRA1VHU",
        "type": "message"
    },
    {
        "ts": "1604027107.116300",
        "text": "そうですね、dialogue から io monad に切り替わったのも Haskell 1.3 のタイミングなはずですね",
        "user": "U57D08Z9U",
        "type": "message"
    },
    {
        "ts": "1604168083.118600",
        "text": "<@U01DB6D212B> has joined the channel",
        "user": "U01DB6D212B",
        "type": "message"
    },
    {
        "ts": "1604199494.119600",
        "text": "今日だけ1299円みたいです。（実際に買うときはレートの関係？で若干変動します…経験者談）\n<https://www.apress.com/jp/book/9781484244791>",
        "user": "UMTRA1VHU",
        "type": "message"
    },
    {
        "ts": "1604200157.119800",
        "text": "ブログに deprecation 撤回の旨追記しました",
        "user": "U4L0B71L1",
        "type": "message"
    },
    {
        "ts": "1604207138.126400",
        "text": "fumievalさん作のWitherableライブラリをopticsに使う記事をRedditで見つけたので共有します。また、Redditのコメント欄で`Traversable, Filterable, Applicative`の制約があれば`wither`を実装できるのになんで`Witherable`クラスがいるの？的なことが書いてあり、それも気になったので投稿しました…\n<https://www.reddit.com/r/haskell/comments/jlr1g4/blog_composable_filtering_optics_using_witherable/?utm_source=share&amp;utm_medium=ios_app&amp;utm_name=iossmf|https://www.reddit.com/r/haskell/comments/jlr1g4/blog_composable_filtering_optics_using_witherable/?utm_source=share&amp;utm_medium=ios_app&amp;utm_name=iossmf>",
        "user": "UP6J2B1LL",
        "type": "message"
    },
    {
        "ts": "1604213274.130000",
        "text": "optparse-declarative 0.4.0 をリリースしました\n• `foo -t a -t b` とあるとき `-t a` が優先されていたのが、GNU getopt などに合わせて `-t b` が優先されるように\n• `foo -t a -t b` とあるとき `[a]` のようにリストとして取得できるように\n<https://hackage.haskell.org/package/optparse-declarative-0.4.0>",
        "user": "U4L0B71L1",
        "type": "message"
    }
]