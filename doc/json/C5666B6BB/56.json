[
    {
        "ts": "1554800227.047900",
        "text": "`Control.Bifunctor` ってあったっけと思ったら、 category-extras にあったんですね。今は obsolete なパッケージですが",
        "user": "U578W9676",
        "type": "message"
    },
    {
        "ts": "1554800305.048900",
        "text": "BiFunctorは完全に私の勘違いでした＞＜",
        "user": "U9XHWQX7Z",
        "type": "message"
    },
    {
        "ts": "1554864543.049400",
        "text": "みなさん、議論、ありがとうございました。",
        "user": "U56MBRKR9",
        "type": "message"
    },
    {
        "ts": "1554864561.049600",
        "text": "訳語はとりあえず「脱高階関数」としました。",
        "user": "U56MBRKR9",
        "type": "message"
    },
    {
        "ts": "1554867601.052000",
        "text": "cabal new-buildって、UNIX系OSの伝統的なビルド方法である「一般ユーザーでconfigure&amp;コンパイル→スーパーユーザーでmake install」みたいなフローはできるんでしょうか",
        "user": "U570660KX",
        "type": "message"
    },
    {
        "ts": "1554868493.052300",
        "text": "デフォルトだとインストール先にシンボリックリンクを張るようになっていて、コピーするオプションがこの前追加された事は調査したのですが、これをグローバルインストールに使えるのかどうか判然としないのですね <https://github.com/haskell/cabal/issues/5837>",
        "user": "U570660KX",
        "type": "message"
    },
    {
        "ts": "1554868701.052600",
        "text": "--install-method=copyでバイナリのコピーは出来ますが、sudo make install的に使うのは難しいと思います。依存ライブラリは~/.cabal/storeに書き込まれるのとバイナリ以外の例えばdata-filesなどは~/.cabal以下に入ると思うのでnew-buildとnew-installを別ユーザでやるとnew-installは新たにビルドしてインストールする動作になると思います。",
        "user": "U4M9NJ7QE",
        "type": "message"
    },
    {
        "ts": "1554953962.053400",
        "text": "本件、 `cabal new-freeze` で固定した依存関係を元に `runhaskell Setup` を実行できれば、やりたかった事は概ね実現しそうです。「ghcのバージョンに合ったfreezeファイルをリネームしてからconfigureして下さい」みたいなビルド指示になるのかな",
        "user": "U570660KX",
        "type": "message"
    },
    {
        "ts": "1554973353.057400",
        "text": "<https://kazu-yamamoto.hatenablog.jp/entry/2019/04/11/111238> こちらに関連して気になりました。\n実際のところApplicative styleの「おすすめの形」は\n```\nf &lt;$&gt; t &lt;*&gt; u &lt;*&gt; v\n```\nだと思うのですけど、 `&lt;$&gt;` (fmap) と `&lt;*&gt;` の関係が、Applicative則に書いてないので、\n```\npure f &lt;*&gt; t &lt;*&gt; u &lt;*&gt; v\n```\nから、どうやって\n```\nf &lt;$&gt; t &lt;*&gt; u &lt;*&gt; v\n```\nを導けばいいのかわかりません。",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1554973417.057500",
        "text": "と、ここまで書いて「すごいH本に書いてあったような...」と思って読んでみたけど省略されてる... :disappointed: (p. 252より)",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1554973479.058000",
        "text": "<http://hackage.haskell.org/package/base-4.12.0.0/docs/Control-Applicative.html#t:Applicative> でも、\n\n&gt; As a consequence of these laws, the Functor instance for f will satisfy\n&gt;    fmap f x = pure f &lt;*&gt; x\n\nとまでしか書いてなかったか... :disappointed:",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1554973650.058400",
        "text": "すごい Haskell の方は\n&gt; 中でも一番重要なのは `pure f &lt;*&gt; x = fmap f x` です。\nと書いてあるのでこれを使えばいいのでないですか？",
        "user": "U4L0B71L1",
        "type": "message"
    },
    {
        "ts": "1554973694.058600",
        "text": "ああ、だからそれがどうやってほかのApplicative則やFunctor則から導かれるのかがわからないのです...。",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1554973873.058800",
        "text": "他の則から導かれるようなものではないような？\n他の則から導かれるならそれは則に含めなくてよいと思うのですが。\n（何か igrep さんの主張を読みまちがってますかね",
        "user": "U4L0B71L1",
        "type": "message"
    },
    {
        "ts": "1554973989.059000",
        "text": "&gt; 他の則から導かれるようなものではないような？\nでも、さっき言及したApplicativeのドキュメントでは、\n\n&gt; As a consequence of these laws, the Functor instance for f will satisfy\n&gt;    fmap f x = pure f &lt;*&gt; x\n\nとあるのでさもほかの則から導かれるかのように書かれてるんですよね...",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1554974065.059200",
        "text": "と、またここまで書いて気づいたんですが、ひょっとして :point_down: の箇所もApplicative則に含まれるのか。\nだとすれば納得。\n\n&gt; A minimal complete definition must include implementations of pure and of either &lt;*&gt; or liftA2. If it defines both, then they must behave the same as their default definitions:\n&gt;    (&lt;*&gt;) = liftA2 id\n&gt;    liftA2 f x y = f &lt;$&gt; x &lt;*&gt; y",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1554974211.059700",
        "text": "ああー、すみません、すごいH本の「これ以外のアプリカティブ則の一覧はこちらです」の「これ以外の」を見逃してました... :bow: :cold_sweat:",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1554979308.060200",
        "text": "ついでにですが，\n```\n[(+ 1), (+ 2)] &lt;*&gt; [1, 2]\n```\nみたいなのは， `f &lt;$&gt; x &lt;*&gt; y` の形ではないと思いますね． `f &lt;$&gt; x &lt;*&gt; y` の形は実用上は良くでてくる形ですが， applicative style 一般の形がそうとは限らないと思います．一応\n```\nid &lt;$&gt; [(+ 1), (+ 2)] &lt;*&gt; [1, 2]\n```\nとも書けますが",
        "user": "U57D08Z9U",
        "type": "message"
    },
    {
        "ts": "1554986903.060500",
        "text": "Functor がまずあって、しかる後に Applicative があります。",
        "user": "U56MBRKR9",
        "type": "message"
    },
    {
        "ts": "1554986929.060700",
        "text": "なので、まず `&lt;$&gt;` があって、その次に `pure` と `&lt;*&gt;` が出てきます。",
        "user": "U56MBRKR9",
        "type": "message"
    },
    {
        "ts": "1554986982.060900",
        "text": "そのときに、 `&lt;$&gt;` は実は、 `f &lt;$&gt; x = pure f &lt;*&gt; x` に分解できるという話です。",
        "user": "U56MBRKR9",
        "type": "message"
    },
    {
        "ts": "1554987050.061300",
        "text": "定義であって、Applicative 法則に含めるような規則じゃないと思います。",
        "user": "U56MBRKR9",
        "type": "message"
    },
    {
        "ts": "1555031759.069500",
        "text": "`(&lt;$&gt;)`は関数型(function type)の引数に適用できるので， `a -&gt; (b -&gt; c)`のような型をもつ関数にも適用できます．\nたとえば， `someFunc :: a -&gt; (b -&gt; c)`という関数に `(&lt;$&gt;)`を適用した値 `(&lt;$&gt;) someFunc`の型は `f (b -&gt; c)`という関数っぽい型になります．\nそうすると，この関数のような値を `f b`という型の値に適用できるように `f b -&gt; f c`という関数に変換して使いたくなるのが人情でしょう．\nつまり， `f (a -&gt; b) -&gt; (f a -&gt; f b)`という変換関数が欲しくなりますよね．それが， `(&lt;*&gt;)`というわけです．\nもともとの動機を考えれば， `(someFunc &lt;$&gt; (x :: f a)) &lt;*&gt; (y :: f b)  ≡ (pure someFunc &lt;*&gt; (x :: f a)) &lt;*&gt; (y :: f b)`を満たして欲しいですよね．",
        "user": "U4KU9ABL0",
        "type": "message"
    },
    {
        "ts": "1555032764.000100",
        "text": "釈迦に説法ですが， `$` は右結合ですが， `&lt;$&gt;` や `&lt;*&gt;` は左結合です．これでハマった方を知っています．:sweat_smile:",
        "user": "U4KU9ABL0",
        "type": "message"
    },
    {
        "ts": "1555033956.000400",
        "text": "&gt; 定義であって、Applicative 法則に含めるような規則じゃないと思います。\nでも、満たさないように `&lt;*&gt;` を実装することはできる（はず）なので、すごいH本やApplicativeのドキュメントに書いてあるとおり、則の一部であると解釈していいと思います。\nもちろんデフォルトの実装にしたがっていれば破られることはありませんが...",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1555035130.000600",
        "text": "```\npure f &lt;*&gt; x = f &lt;$&gt; x\n```\nは法則であって，定義ではないのでは？．",
        "user": "U4KU9ABL0",
        "type": "message"
    },
    {
        "ts": "1555036226.001100",
        "text": "ApplicativeがFunctorであるために満すべき性質(法則)かな．",
        "user": "U4KU9ABL0",
        "type": "message"
    },
    {
        "ts": "1555036317.001500",
        "text": "`&lt;$&gt;`がメソッドから、単なる演算子に格下げされたら、法則が定義になる？",
        "user": "U56MBRKR9",
        "type": "message"
    },
    {
        "ts": "1555036706.001900",
        "text": "あ、 `&lt;$&gt;` は単なる演算子。 `fmap` との関係を調べないといけないのか。",
        "user": "U56MBRKR9",
        "type": "message"
    },
    {
        "ts": "1555036877.002300",
        "text": "4つの Applicative 法則が満たされれば、 `fmap f x = pure f &lt;*&gt; x` は自動的に満たされるらしい。",
        "user": "U56MBRKR9",
        "type": "message"
    },
    {
        "ts": "1555036980.002500",
        "text": "逆も言えますか？",
        "user": "U4KU9ABL0",
        "type": "message"
    },
    {
        "ts": "1555037349.002700",
        "text": "直感的には、言えないような。。。",
        "user": "U56MBRKR9",
        "type": "message"
    },
    {
        "ts": "1555037806.002900",
        "text": "関手の単位元：\n\n```\npure id &lt;*&gt; x = x\n```\n\n関手の合成法則：\n\n```\npure f &lt;*&gt; (pure g &lt;*&gt; x)\n= pure (.) &lt;*&gt; pure f &lt;*&gt; pure g &lt;*&gt; x\n= pure ((.) f g) &lt;*&gt; x\n= pure (f . g) &lt;*&gt; x\n```",
        "user": "U56MBRKR9",
        "type": "message"
    },
    {
        "ts": "1555037877.003100",
        "text": "`pure f &lt;*&gt; x` は関手法則を満たすので、 `fmap` ですな。",
        "user": "U56MBRKR9",
        "type": "message"
    },
    {
        "ts": "1555037964.003300",
        "text": "4つのApplicative法則が満たされれば、自動的に `f &lt;$&gt; x = pure f &lt;*&gt; x` は満たされるので、これ自体は補題？ぐらいで、法則じゃなさそう。",
        "user": "U56MBRKR9",
        "type": "message"
    },
    {
        "ts": "1555050713.004300",
        "text": "私も気になったのでRedditでも質問してみました <https://www.reddit.com/r/haskell/comments/bcaead/how_to_derive_pure_f_x_fmap_f_x/>",
        "user": "U4KUNQF9N",
        "type": "message"
    },
    {
        "ts": "1555050764.004600",
        "text": "補足ですが，\n```\nfmap' f x = pure f &lt;*&gt; x\n```\nでの `fmap'` は， kazu さんがおっしゃるように Applicative law から Functor law を満たすことが示せます．\n\nただ，もし一つの型に対し， functor law を満たす `fmap` が複数あれば（ここでの違いとは実装の違いではなく，振る舞いの違いであることに注意してください）， `fmap = fmap'` と一概には言えません．しかし，実は fmap の多相性からこれらは一意であることが知られています: <https://wiki.haskell.org/Typeclassopedia#Laws>\n\nなので， Functor の一意性と Applicative law から `f &lt;$&gt; x = pure f &lt;*&gt; x` が導けます．これは定理ですね．なお，これは Applicative law が Functor law を含んでいるからですが，もう少し明確に分離できる別の Applicative law set も知られていて，\n```\n(*) :: f a -&gt; f b -&gt; f (a, b)\nx * y = (,) &lt;$&gt; x &lt;*&gt; y\n\nunit :: f ()\nunit = pure ()\n```\nに対して，\n• naturality : `fmap (f *** g) (u * v) = fmap f u * fmap g v`\n• left identity: `fmap snd (unit * v) = v`\n• right identity: `fmap fst (v * unit) = v`\n• associativity: `fmap (\\(x, (y, z)) -&gt; (x, y, z)) (u * (v * w)) = fmap (\\((x, y), z) -&gt; (x, y, z)) ((u * v) * w)`\nで，これは元の Applicative law が fmap から独立しているのと異なり， fmap を元に law が作られています．",
        "user": "U57D08Z9U",
        "type": "message"
    },
    {
        "ts": "1555051611.004800",
        "text": "<@U56MBRKR9> 記事中で気づいたのですが Monad の「交換の法則ですが、左辺は、」のところは「結合の法則」ですね。",
        "user": "U57CGDBMG",
        "type": "message"
    },
    {
        "ts": "1555051640.005100",
        "text": "Functor則，Pointed則と(&lt;*&gt;) . pure = fmap という法則？から，簡単にIdentity則とHomomorphism則は導くことができますね．",
        "user": "U4KU9ABL0",
        "type": "message"
    },
    {
        "ts": "1555052538.005300",
        "text": "<@U57CGDBMG> う。ありがとうございます。訂正しました。",
        "user": "U56MBRKR9",
        "type": "message"
    },
    {
        "ts": "1555055902.005800",
        "text": "<@U56MBRKR9>「do は入れ子で書かずに、平坦な形でスッキリ書いてね」のところですが、右辺の `do { x &lt;- mx; y &lt;- f x; g x }` は左辺（と同じ意味の）の `do { y &lt;- h mx; g x }; h mx = do { x &lt;- mx; f x }` に書き換えられるように「do の中の一部分を関数に切り出しても大丈夫だよ」という解釈の方がプログラミングでは役に立つ気がします。",
        "user": "U57CGDBMG",
        "type": "message"
    },
    {
        "ts": "1555056434.006700",
        "text": "<@U57CGDBMG> 昔、だれかが「どこで切ってもMonad」と言っていたのを思い出します。。。",
        "user": "U56MBRKR9",
        "type": "message"
    },
    {
        "ts": "1555130527.007100",
        "text": "<@UHP0JPA2D> has joined the channel",
        "user": "UHP0JPA2D",
        "type": "message"
    },
    {
        "ts": "1555327731.007700",
        "text": "<@UJ05UB286> has joined the channel",
        "user": "UJ05UB286",
        "type": "message"
    },
    {
        "ts": "1555342562.009200",
        "text": "Well typedってどう訳すのが適切でしょうか。型安全？",
        "user": "U7Z4F723Z",
        "type": "message"
    },
    {
        "ts": "1555381135.009700",
        "text": "TaPLだと「正しく型付けされている」と訳されています。",
        "user": "U6S3ARBDL",
        "type": "message"
    },
    {
        "ts": "1555410696.009900",
        "text": "訳さない派ですが、「型がツイてる」というのはいかが",
        "user": "U4KUNQF9N",
        "type": "message"
    },
    {
        "ts": "1555433757.011200",
        "text": "```\ndata Term = TermTrue\n          | TermFalse\n          | TermIf Term Term Term\n          | TermZero\n          | TermSucc Term\n          | TermPred Term\n          | TermIsZero Term\n          deriving (Show) \n```\nTerm型を宣言したいのに、その中でもTermが使われていて、これどうゆうこと….",
        "user": "UGHG1RKDL",
        "type": "message"
    },
    {
        "ts": "1555436380.012400",
        "text": "なるほど！あえて訳さないほうがいいかもね。ありがとうー",
        "user": "U7Z4F723Z",
        "type": "message"
    }
]