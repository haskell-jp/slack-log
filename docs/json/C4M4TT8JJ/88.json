[
    {
        "ts": "1614305304.034000",
        "text": "ログが取られない(公開されない)雑談できるチャンネルはありますか？",
        "user": "U56MBRKR9",
        "type": "message"
    },
    {
        "ts": "1614310203.037900",
        "text": "上記の件ですが、特に欲しいのは「関数型言語」が「関数型プログラミング」を前提とした概念となっているという情報です。なお、これは <@U4KUNQF9N> さんの <https://twitter.com/fumieval/status/1364561412610121729|https://twitter.com/fumieval/status/1364561412610121729> というツイートをきっかけとして始めた活動です。",
        "user": "U5LEE6C1J",
        "type": "message"
    },
    {
        "ts": "1614322965.042900",
        "text": "<https://ja.wikipedia.org/wiki/Special:Diff/82017706/82024973|https://ja.wikipedia.org/wiki/Special:Diff/82017706/82024973> の通り、さらに調査を進めました。私の少ない知識で調べられる範囲は、おそらくここまでなので、他の人からの情報も欲しいです。",
        "user": "U5LEE6C1J",
        "type": "message"
    },
    {
        "ts": "1614346694.046400",
        "text": "本題から外れるけど、「言語がまず規定され、その上の応用としてプログラミングがあるのです」という意見を見かけて驚いた……プログラミング言語はプログラミングをするための道具だったはず",
        "user": "U5LEE6C1J",
        "type": "message"
    },
    {
        "ts": "1614347176.048900",
        "text": "でも、たとえばλ算術のようなものは「計算とは何か」を数学的に論じるために定義されて、それが後々、ソフトウェア技術にも応用されるようになった、という流れをたどってますよね。LISPも、当初McCarchy御大は計算機上で実行するものとしては考えてなくて、学生が評価器を実装しちゃったので動くようになった、という話を聞いたことがあります。",
        "user": "U61BA2X0U",
        "type": "message"
    },
    {
        "ts": "1614348612.050500",
        "text": "なるほど、確かにプログラミングをする用ではないプログラミング言語もありますね。難読プログラミング言語とか",
        "user": "U5LEE6C1J",
        "type": "message"
    },
    {
        "ts": "1614348743.053600",
        "text": "LISPがあくまで当初は理論上のものだったというのは参考文献失念しましたが僕も聞いたことがあります。\n文脈が掴めていませんが、厳密な話をするのであれば、構文に関する形式仕様のある言語については、ア・プリオリには意味を持たず、表示的意味論なり操作的意味論なりを定めて初めてプログラミング言語として使えるのだ、ということはできるとは思います",
        "user": "UK0MXUCAV",
        "type": "message"
    },
    {
        "ts": "1614348996.058900",
        "text": "初めからプログラミング言語として設計された言語に対して言ってもナンセンスですが、とはいえesolangに限らず、例えばそれこそ直観主義論理はあくまで当初ブラウワーの思想を形式化した論理体系に過ぎなかったわけですが、Curry-Howard対応の発見によりλ-計算と厳密に対応がついて、そのλ計算が計算機に応用されたことで、それ自身プログラミング言語と見做せるようになった、というのは一つ「言語が先にあった」実用的な例と言えるとは思います",
        "user": "UK0MXUCAV",
        "type": "message"
    },
    {
        "ts": "1614349517.064700",
        "text": "無論、多くのプログラミング言語は構文という形式を定めるときに、それがプログラミング言語として振る舞うことを期待して設計される訳ですが。一方で、意味を離れて形式的なものとして言語を扱えることによって、例えばマクロが使えるようになるという側面もありますね",
        "user": "UK0MXUCAV",
        "type": "message"
    },
    {
        "ts": "1614349940.070400",
        "text": "これはさらに脇道ですが、そもそもλ-計算をChurchが考えた当初の目的は、数学を展開するための論理体系を含む包括的な言語を提供する、というものだったはずです（追記：<http://homepages.inf.ed.ac.uk/wadler/papers/propositions-as-types/propositions-as-types.pdf|Wadler のサーベイ記事> と付随する<https://wadler.blogspot.com/2014/08/howard-on-curry-howard.html|Blog記事>が参考になります）。しかし、論理体系としては矛盾する（のちに縮約規則をなくして線形論理にすれば矛盾しないことが分かっています（追記：<http://www.kurims.kyoto-u.ac.jp/~kyodo/kokyuroku/contents/pdf/1533-5.pdf|古森先生のPDF>））ことが分かり、でもなんか計算っぽいことができるから計算のモデルとして使うことにしよう、とChurchが方針転換したんだったはず。こういうことを思うと、まあ我々関数型言語の祖先とも言えるλ計算自体、もともとはプログラミング言語ではなかったということになる",
        "user": "UK0MXUCAV",
        "type": "message"
    },
    {
        "ts": "1614352690.070900",
        "text": "話の腰折りましたね。すいません:bow:",
        "user": "UK0MXUCAV",
        "type": "message"
    },
    {
        "ts": "1614394011.075800",
        "text": "私も文脈を追わずに書いてしまいましたが、\n&gt; 言語がまず規定され、その上の応用としてプログラミングがあるのですから\nというのは、 <https://ja.wikipedia.org/wiki/%E3%83%8E%E3%83%BC%E3%83%88:%E9%96%A2%E6%95%B0%E5%9E%8B%E8%A8%80%E8%AA%9E#%E3%80%8C%E9%96%A2%E6%95%B0%E5%9E%8B%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0%E3%80%8D%E3%81%B8%E3%81%AE%E6%94%B9%E5%90%8D%E6%8F%90%E6%A1%88|https://ja.wikipedia.org/wiki/%E3%83%8E%E3%83%BC%E3%83%88:%E9%96%A2%E6%95%B0%E5%9E%8B%E8%A8%80%E8%AA%9E#%E3%80%8C%E9%96%A2%E[…]%8D%E6%8F%90%E6%A1%88> にある反対意見の中で述べられていることなんですね。確かにこの場合に関して言えば、少なくとも文献から経緯を辿る限りは「関数型プログラミング」というプログラミング手法が提案され、当該手法によるプログラミングをしやすくするものとして「関数型プログラミング言語」が提案されているので、やや的外れな意見と言えるかもしれません。",
        "user": "U61BA2X0U",
        "type": "message"
    },
    {
        "ts": "1614417942.081100",
        "text": "ありがとうございます。この場合はあまり文脈は気にしてませんでした",
        "user": "U5LEE6C1J",
        "type": "message"
    },
    {
        "ts": "1614422963.082300",
        "text": "witherable、0.4.1 から `ordNubOn` が追加されてめちゃくちゃ便利になってる（CHANGELOG には `ordNubBy` って書いてあるけど、多分間違い）\n<http://hackage.haskell.org/package/witherable-0.4.1>",
        "user": "U56L7EVNY",
        "type": "message"
    }
]