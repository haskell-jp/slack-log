[
    {
        "ts": "1601935082.044900",
        "text": "あるいは、\n```instance MonadFail m =&gt; AWST' env m where\n  fail = ...```\nというインスタンスなら汎用性があるのでそれをPRしてあげるか。",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1601935219.045100",
        "text": "amazonka的にはMonadCatch系を使いたいようなので本流には入らなさそうな気がしますね",
        "user": "U57CUMWQ6",
        "type": "message"
    },
    {
        "ts": "1601935364.045300",
        "text": "なるほど `streaming` の方はサードパーティーか... じゃあおかしいのは\namazonka-s3-streaming のほうですね... ざっとソース読んだ感じ別に `fail` が絶対に必要な展開ではないんだよなぁ... <https://hackage.haskell.org/package/amazonka-s3-streaming-1.1.0.0/docs/src/Network.AWS.S3.StreamingUpload.html#concurrentUpload>",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1601935414.045500",
        "text": "作者も修正したさそうなので修正投げようかと思ったのですが型が大きく変動しそうなのでちょっと気後れしちゃいますね",
        "user": "U57CUMWQ6",
        "type": "message"
    },
    {
        "ts": "1601935898.045800",
        "text": "`MonadFail` を `MonadThrow` に変えるか、 `SomeException` で `fail` で投げるはずの例外を包んであげればいいかな、と思いましたが、そもそも、すでに `m` は `MonadUnliftIO m` （ `MonadIO` のサブクラス）が実装済みなワケですから `liftIO fail` にすればそこで賄えるかと（多分作者の気持ちはそっちの方が近いし）\n\nそれに、仮に変わるとしてもそういうときのためのHPVPなんですから、何も恐れる必要はないと思いますよ！はっきりいって使い物にならないような設計にしてしまっているので恐れず変えちゃいましょう。",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1601936028.046000",
        "text": "なるほどfailをliftIOする方法がありましたか\n考えてみます",
        "user": "U57CUMWQ6",
        "type": "message"
    },
    {
        "ts": "1601936343.046300",
        "text": "ちなみに、 `MonadThrow` に変える方法に抵抗がある理由が「例外作らなきゃいけない」でしたら `throwString` の使用をご検討ください。\n<https://www.stackage.org/haddock/lts-16.17/unliftio-0.2.13/UnliftIO-Exception.html#v:throwString>\nunliftioに入っているので新たに依存関係を足す必要もありません。",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1601936564.046600",
        "text": "続けて済みません「作者が痛みとして思っている」という情報はどこらですか？ <https://github.com/axman6/amazonka-s3-streaming/issues> をざっと見ましたがそれらしいものはないみたいで。どういう論点で `MonadFail` のままにしているのか気になります。",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1601936666.046900",
        "text": "パフォーマンス改善のpull requestsへのコメントで\n作者「MonadFail辛いしやめたい」\nPR作成者「それこのPRで扱うことではないのでは」\nみたいなやり取りがありました",
        "user": "U57CUMWQ6",
        "type": "message"
    },
    {
        "ts": "1601942234.047100",
        "text": "MonadFailじゃなくてMonadAWSの話みたいですよ！\n<https://github.com/axman6/amazonka-s3-streaming/pull/20|https://github.com/axman6/amazonka-s3-streaming/pull/20>",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1601942323.047400",
        "text": "該当するスレッドはこっちか\n<https://github.com/axman6/amazonka-s3-streaming/pull/22#discussion_r397516136|https://github.com/axman6/amazonka-s3-streaming/pull/22#discussion_r397516136>",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1602001113.047700",
        "text": "<@U01CF0YMQTT> has joined the channel",
        "user": "U01CF0YMQTT",
        "type": "message"
    },
    {
        "ts": "1602030660.047900",
        "text": "<@U01CTA51H5W> has joined the channel",
        "user": "U01CTA51H5W",
        "type": "message"
    },
    {
        "ts": "1602036752.049600",
        "text": "リストをなんらかの区切りでリストのリストに分けたいとします。\nただし、区切りは捨てたいです。\nどのように実現するのが簡単でしょうか？\nたとえば、-1 が区切りだとして、groupBy を使うと、-1 が残ってしまいますね。\n\n```&gt; groupBy (\\_ x -&gt; x /= -1) [1,2,-1,3,4,-1,5,6]\n[[1,2],[-1,3,4],[-1,5,6]]```\n",
        "user": "U56MBRKR9",
        "type": "message"
    },
    {
        "ts": "1602036821.049700",
        "text": "実際には Conduit を使ってやります。",
        "user": "U56MBRKR9",
        "type": "message"
    },
    {
        "ts": "1602036891.049900",
        "text": "splitパッケージを見るといいと思います。",
        "user": "U4M9NJ7QE",
        "type": "message"
    },
    {
        "ts": "1602039014.050300",
        "text": "つまり自作しろと。。。うう。",
        "user": "U56MBRKR9",
        "type": "message"
    },
    {
        "ts": "1602039564.050500",
        "text": "使ったことないですが <https://hackage.haskell.org/package/conduit-1.3.2.1/docs/Data-Conduit-Combinators.html#v:splitOnUnboundedE> でしょうか",
        "user": "U4M9NJ7QE",
        "type": "message"
    },
    {
        "ts": "1602039625.050700",
        "text": "すでに試しているのですが、それではない気がします。",
        "user": "U56MBRKR9",
        "type": "message"
    },
    {
        "ts": "1602040828.050900",
        "text": "`Element ByteString = Word8` なので、空行 (`\"\\n\\n\"`)とか指定できないですね。。。",
        "user": "U56MBRKR9",
        "type": "message"
    },
    {
        "ts": "1602042192.051100",
        "text": "```group :: Monad m =&gt; (a -&gt; Bool) -&gt; ConduitT a [a] m ()\ngroup f = loop id\n  where\n    loop rest = do\n        mx &lt;- await\n        case mx of\n          Nothing -&gt; case rest [] of\n            [] -&gt; return ()\n            l  -&gt; yield l\n          Just x\n            | f x       -&gt; yield (rest []) &gt;&gt; loop id\n            | otherwise -&gt; loop (rest . (x:))```\n",
        "user": "U56MBRKR9",
        "type": "message"
    },
    {
        "ts": "1602042215.051300",
        "text": "結局自作しましたが、何が正しいのか Michael に聞いてみます。",
        "user": "U56MBRKR9",
        "type": "message"
    },
    {
        "ts": "1602121728.051500",
        "text": "Michael から返事が来て「君の実装が一番いい」と言われました。^^;  Haskell ライブラリには、なぜか `splitOn` が提供されない問題ですね！",
        "user": "U56MBRKR9",
        "type": "message"
    },
    {
        "ts": "1602214391.051800",
        "text": "<@U01C9E3CY3C> has joined the channel",
        "user": "U01C9E3CY3C",
        "type": "message"
    },
    {
        "ts": "1602236816.053200",
        "text": "[日本語をshowしてうまく表示されなかったら - Haskell-jp](<https://haskell.jp/blog/posts/2019/unicode-show.html>)\nのように開発時のREPLのためにpretty-simpleパッケージを使おうと思っています\nしかし実際のパッケージではREPLのためのpretty-simpleには依存していません\nnpmのdevDependenciesのように開発向けパッケージを定義したいのですがそのような方法はありますか?",
        "user": "U57CUMWQ6",
        "type": "message"
    },
    {
        "ts": "1602237043.053400",
        "text": "うーん、開発者向けのドキュメントに「 `stack build pretty-simiple` （あるいは `cabal install --lib pretty-simple` ）してくれ」と書くか、\ncabalファイルのフラグ機能を使ってデフォルトオフなフラグを作っておいて、 `stack.yaml` か `cabal.project` には有効にするよう記載する、ってところですかね。",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1602237171.053600",
        "text": "なるほど、フラグ機能を使う手がありましたか\n今回のケース <https://github.com/ncaq/dic-nico-intersection-pixiv> ではどうせ開発者は私しか居ないしアプリケーションなのでそこまで気にする必要は無いのですが、広範囲に使っていこうとした時にどうしようかなと悩んでいました\nありがとうございます",
        "user": "U57CUMWQ6",
        "type": "message"
    },
    {
        "ts": "1602310549.057800",
        "text": "型クラスの旨味がなくなるというのはインスタンスによってメソッドの呼び出し方とか呼び出せるかどうかとかが変わっちゃうからですか？\nだとするともしかして、メソッドの制約の部分が関連型族になるのも旨味がなくなってたりしますか？\nなんかもうどう設計するのがよかったのかわからなくなっちゃいました༼;´༎ຶ ༎ຶ༽",
        "user": "U8G16FA59",
        "type": "message"
    },
    {
        "ts": "1602324430.058200",
        "text": "その通りです。インスタンスが違っても共通のコードから呼び出せるという利点をなくしてしまうと、別々の関数として定義するのと同じになってしまうので…　型族によって制約を変えること自体は、その性質を崩さないので大丈夫です",
        "user": "U4KUNQF9N",
        "type": "message"
    }
]