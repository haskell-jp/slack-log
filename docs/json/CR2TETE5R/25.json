[
    {
        "ts": "1714668598.747919",
        "text": "<@U07242FMTSM> has joined the channel",
        "type": "message",
        "user": "U07242FMTSM"
    },
    {
        "ts": "1715238502.949729",
        "text": "<@U072NVB4TC2> has joined the channel",
        "type": "message",
        "user": "U072NVB4TC2"
    },
    {
        "ts": "1715240089.559099",
        "text": "<@U072P2YEDFC> has joined the channel",
        "type": "message",
        "user": "U072P2YEDFC"
    },
    {
        "ts": "1715792526.025839",
        "text": "<@U073LJ0QYKV> has joined the channel",
        "type": "message",
        "user": "U073LJ0QYKV"
    },
    {
        "ts": "1716270577.865469",
        "text": "<@U073XGXCJUF> has joined the channel",
        "type": "message",
        "user": "U073XGXCJUF"
    },
    {
        "ts": "1716422423.477339",
        "text": "Reminder: beginnersチャンネルは、新しい人がスムーズにHaskellに慣れるための質問を歓迎するチャンネルです。 Haskell-Beginners ML や IRCの#haskell-beginners  や RedditのMonthly Hask Anythingのような位置づけを意図しています。  beginnersチャンネルでの回答側は、以下の左側のような応答を厳禁とする運用です。 • それはくだらない質問だ → くだらない質問など無い • その質問は以前にもあった → 質問者はそんなこと知らない • Google検索せよ → 検索できないから質問している  beginnersチャンネルでは、例えば以下のレベルの質問から歓迎します。 • `:` とは何のことですか。 • タプルとは何ですか。 ",
        "type": "message",
        "user": "USLACKBOT"
    },
    {
        "ts": "1716455471.802139",
        "text": "<@U074SDJ07QB> has joined the channel",
        "type": "message",
        "user": "U074SDJ07QB"
    },
    {
        "ts": "1716462569.700859",
        "text": "はじめまして、モナドという単語のカッコよさにあこがれて、すごいHaskell本を読んで、楽しくなってきたので、\nプログラミングHaskell第2版を現在読んでいます。どうぞよろしくお願いします",
        "type": "message",
        "user": "U074SDJ07QB"
    },
    {
        "ts": "1716994771.472169",
        "text": "<@U075MF7TX8T> has joined the channel",
        "type": "message",
        "user": "U075MF7TX8T"
    },
    {
        "ts": "1716995417.495329",
        "text": "夜分遅くに失礼します。\n初めまして、最近Haskellに興味を持ったてぴかと申します。\nHaskellを独学で学んでいるのですが、個人の学習となると、\nどうしても詰まってしまう点が多いので、Haskellの仲間が欲しいと思い参加することにしました。\n\nHaskellに関することで、もし分からないことがありましたら、\n今後このSlackで質問することがあるかもしれません。\nその時はまた宜しくお願いします。",
        "type": "message",
        "user": "U075MF7TX8T"
    },
    {
        "ts": "1717302958.545539",
        "text": "早速相談したいことが出たので、質問させて下さい:bow:\n`stack new stack240529`というコマンドで新規プロジェクトを作成したのですが、\n新規作成したコードをVSCodeで開いたところ、\n`./app/Main.hs`の3行目でimportエラーがでてしまっています。\nこちらの件、何か解決方法とかあるのでしょうか？\n\n参考までに`stack`と`hls`はghcupというツールを使ってインストールしました。",
        "type": "message",
        "user": "U075MF7TX8T"
    },
    {
        "ts": "1717305670.779729",
        "text": "うーん、単純にビルドができてないからだと思いましたが（私自身似たような経験があったので）、違う、と。分かりませんなぁ",
        "type": "message",
        "user": "U4LGTMTMK"
    },
    {
        "ts": "1717312619.119179",
        "text": "恐らく、ghcupがインストールしたGHC（ `PATH` に入っている方のGHC）とstackがインストールしたGHC両方があるせいで混乱しちゃってますね（関連: <https://docs.haskellstack.org/en/stable/Stack_and_VS_Code/> ）。\nVS CodeがGHCupのGHCを使おうとして、stackはstackのGHCを使おうとしているせいで結果が食い違っているのではないかと思います。\n取りあえずの解決策としては、 `stack path --global-config` を実行するとstackの設定ファイルへのパスが出てくるので、そのファイルを編集して、\n```install-ghc: false\nsystem-ghc: true```\nと付け加えてください。",
        "type": "message",
        "user": "U4LGTMTMK"
    },
    {
        "ts": "1717754417.334319",
        "text": "<@U07723WESAF> has joined the channel",
        "type": "message",
        "user": "U07723WESAF"
    },
    {
        "ts": "1718419805.505479",
        "text": "<@U07892H498S> has joined the channel",
        "type": "message",
        "user": "U07892H498S"
    },
    {
        "ts": "1718420231.272899",
        "text": "こんにちは。このコミュニティに参加できて光栄です。2週間ほど日本を訪れています。初めて日本に来ました。\n\nHello. Honored to join this community. Visiting Japan for a couple of weeks. First time here.",
        "type": "message",
        "user": "U07892H498S"
    },
    {
        "ts": "1718436158.204969",
        "text": ":information_source: @here 急な通知すみません。\n*TL;DR 6/23 午後に Yeoh Kim Eeさんを招いて小さな勉強会を開催しようと考えています。若干名の参加者と、場所を募集しています。*\n\nYeoh Kim Ee さんは Lambda Indonesia <https://www.meetup.com/ja-JP/lambda-indonesia/> という勉強会の主催で、今年の ICFP Tutorials にて Haskell についてのワークショップを開催される予定です。\n\n :point_up: の通りこの度日本に2週間滞在される予定です。良い機会なので日本のHaskellerに会いたいということで、急ではありますが、現状次のようなプランで小さな勉強会を開催しようと思います。\n\n• :house: *場所*（候補）: Tatami Works <https://tatami-works.com/>（1人2000円の使用料がかかる見込みですが、比較的安価で、知る限り土日で複数人でも空いている見込みがあるため。ただ、これから（人数が大まかに決まり次第）予約の相談をするため、利用できない場合などに備えて*他の候補*をご提案頂けるとありがたいです。とりあえず長年 Haskell-jp もくもく会でお世話になっていた朝日ネットさんにも声を掛けようと思います。\n• :walking: *参加者:* 若干名募集します。Yeohさんは日本語は挨拶くらいしか通じないそうなので、（身振り手振り、ソースコードなどを駆使しつつ）英語 :gb: でやり取りできることが望ましいです。後、特に時間を切って発表枠などを設ける予定はないですが、何かしらHaskell関係で話したいネタがあると助かります。なければ多分私やYeohさんがやってきたこと共有しながら作業する、みたいな感じで進めることになるかと思います。",
        "type": "message",
        "user": "U4LGTMTMK"
    },
    {
        "ts": "1718601971.307609",
        "text": "<@U077YGSP3EK> has joined the channel",
        "type": "message",
        "user": "U077YGSP3EK"
    },
    {
        "ts": "1719393466.846539",
        "text": "<@U079R3U7J69> has joined the channel",
        "type": "message",
        "user": "U079R3U7J69"
    },
    {
        "ts": "1719979504.758639",
        "text": "<@U07ADAZAZQX> has joined the channel",
        "type": "message",
        "user": "U07ADAZAZQX"
    },
    {
        "ts": "1720116536.107089",
        "text": "<@U07B3F7JCCT> has joined the channel",
        "type": "message",
        "user": "U07B3F7JCCT"
    },
    {
        "ts": "1720251126.003169",
        "text": "<@U07BYE9DRT2> has joined the channel",
        "type": "message",
        "user": "U07BYE9DRT2"
    },
    {
        "ts": "1720759651.312119",
        "text": "<@U07CHBQMWNM> has joined the channel",
        "type": "message",
        "user": "U07CHBQMWNM"
    },
    {
        "ts": "1721482821.240169",
        "text": "関数モナドについて調べてみたのですが、理解できなかったので質問させてください。\n\n```instance Monad ((->) r) where\n    return = const\n    h >>= f = \\w -> f (h w) w```\nこれを使用したときに以下のようになると思います。\n```ghci> f = (+1) >>= \\a -> (+2) >>= \\b -> return (a+b)\nf :: Num b => b -> b\nghci> f 1\n5\nit :: Num b => b```\n上記の場合 `h w` は `(+1) 1` に置き換えられると考えています。\n同様に、`f (h w) w` を単純に置き換えると `(+2) ((+1) 1) 1` になってしまいますが\nおかしいのは理解できています。\n\nこれはどのように考えたらよいのでしょうか ?",
        "type": "message",
        "user": "U04MBBNV5QB"
    },
    {
        "ts": "1721621462.260059",
        "text": "モナドでの `&lt;-`  の挙動について質問させてください。\n\nState s モナドを例にとります。\n```newtype State s a = State { runState :: s -&gt; (a,s) }\n\ninstance Monad (State s) where\n    return a = State $ \\s -&gt; (a, s)\n\n    (State h) &gt;&gt;= f = State $ \\s -&gt;\n        let\n            (a, newState) = h s\n            (State g) = f a\n        in\n            g newState\n\npop = State $ (\\(a:s) -&gt; (a,s))```\n上記の定義に対して以下のようなプログラムを実行します。\n```steps :: State [Int] Int\nsteps = do\n    a &lt;- pop\n    return a\n\nf = runState steps [1..5]```\n結果は以下の通りです。(hugs)\n```Main&gt; :set +t\nMain&gt; :l b.hs\nMain&gt; f\n(1,[2,3,4,5]) :: (Int,[Int])```\n動作自体は理解できたのですが、`a &lt;- pop` により値 (Int) が束縛される理由がわかりません。\n\nMaybe モナドで考えて `a &lt;- Just a` の場合は `Just` が外れて `a` が取り出されている。と理解しやすいです。\nまた、`(a, s) &lt;- pop` であった場合は `Monad (State s)` の定義と矛盾するような気がするので、違うのかと考えています。\n\nモナド値 State s `a` の場合、`a` の位置にあるものが `&lt;-` により取り出される。\nのだと思いますが、そういうものと考えてしまって良いものでしょうか ?",
        "type": "message",
        "user": "U04MBBNV5QB"
    },
    {
        "ts": "1721807478.483769",
        "text": "<@U07DLSPNT7G> has joined the channel",
        "type": "message",
        "user": "U07DLSPNT7G"
    },
    {
        "ts": "1722411011.228429",
        "text": "困っている。ということではないのですが、質問させてください。\n\n関数に引数が適用され、展開されていく様子を見られるようなツールのようなものは存在しますか ?\n具体的には、以下のようなものがあったらと思っています。\n\n[入力]\n```foldr (+) 0 [1..3]```\n[出力]\n```foldr ( (+) 1 0 ) 0 (2:3:[])\nfoldr ( (+) ((+) 1 0) 2 ) 0 (3:[])\nfoldr ( (+) ((+) ((+) 1 0) 2) 3 ) 0 ([])\nfoldr ( (+) ((+) 1 2) 3 ) 0 ([])\nfoldr ( (+) 3 3 ) 0 ([])\n\n--&gt; 6```\n",
        "type": "message",
        "user": "U04MBBNV5QB"
    },
    {
        "ts": "1722468607.789429",
        "text": "これがあるのを思い出しました！\n<https://well-typed.com/blog/2017/09/visualize-cbn/>\nまた私自身試してないもので恐縮ですが、実際のところHaskellのサブセットのようですが、十分目的は達成できるはずです。",
        "type": "message",
        "user": "U4LGTMTMK"
    },
    {
        "ts": "1722474456.706769",
        "text": "<@U4LGTMTMK>\n重ねてありがとうございます。\nこちらも、調べてみます。",
        "type": "message",
        "user": "U04MBBNV5QB"
    },
    {
        "ts": "1723043199.659059",
        "text": "IOモナドの `&gt;&gt;=` について質問させてください\n\n<https://wiki.haskell.org/99_questions/21_to_28> の \"Problem 23\" を参考に\n以下のようなコードを作成しました。\n(\"abcdefgh\" の中からランダムに 3 文字表示するプログラム)\n\n[コード1]\n```import System.Random\n\nrnd_select :: [a] -&gt; Int -&gt; IO [a]\n\nrnd_select xs n = do\n    let l = length xs - 1\n    ys &lt;- sequence . replicate n $ (randomRIO (0, l) :: IO Int)\n    return $ map (xs !!) ys```\nこれは想定通り動作しました。\n```ghci&gt; rnd_select \"abcdefgh\" 3 &gt;&gt;= putStrLn\nefc\nit :: ()```\nこの関数を少し変えて、`&gt;&gt;=` を使用するように変更しました。\n[コード2]\n```rnd_select xs n = f &gt;&gt;= return . map (xs !!)\n    where\n        l = length xs - 1\n        f = sequence . replicate n $ (randomRIO (0, l) :: IO Int)```\nこの場合も問題ありません。\n\nさらに、上記の `f` の部分を (where 句ではなく) 直接書いて以下のように変更しました。\n[コード3]\n```rnd_select xs n = sequence . replicate n $ (randomRIO (0, l) :: IO Int) &gt;&gt;= return . map (xs !!)\n    where\n        l = length xs - 1```\nすると、以下のようにエラーとなります。\n```ghci&gt; :l d\n[1 of 2] Compiling Main             ( d.hs, interpreted )\n\nd.hs:5:86: error: [GHC-83865]\n    • Couldn't match type '[Int]' with 'Int'\n      Expected: Int -&gt; a\n        Actual: [Int] -&gt; [a]\n    • In the second argument of '(.)', namely 'map (xs !!)'\n      In the second argument of '(&gt;&gt;=)', namely 'return . map (xs !!)'\n      In the second argument of '($)', namely\n        '(randomRIO (0, l) :: IO Int) &gt;&gt;= return . map (xs !!)'\n  |\n5 | rnd_select xs n = sequence . replicate n $ (randomRIO (0, l) :: IO Int) &gt;&gt;= return . map (xs !!)\n  |                                                                                      ^^^^^^^^^^^\nFailed, no modules loaded.```\nメッセージから考えて `[Int]` ではなく `Int` が要求されているようだったので、以下のように変更したところ\n問題なく動作しました。\n[コード4]\n```rnd_select xs n = sequence . replicate n $ (randomRIO (0, l) :: IO Int) &gt;&gt;= return . (xs !!)\n    where\n        l = length xs - 1```\n説明が長くなってしまい恐縮ですが、`[コード3]` と `[コード4]` のような違いが出る理由が理解できませんでした。",
        "type": "message",
        "user": "U04MBBNV5QB"
    },
    {
        "ts": "1723191142.554709",
        "text": "Haskell プログラムらしい書き方について質問させてください\n\n```import Control.Exception\nimport Control.Monad\nimport System.Directory\nimport System.Posix.Files\nimport System.Posix.Types\n\nlessThan :: FileOffset -> FilePath -> IO Bool\nlessThan threshold path = do\n    s <- getFileStatus path\n    return $ and [isRegularFile s, fileSize s < threshold]\n\nsmallFiles :: FileOffset -> FilePath -> IO (Either String [FilePath])\nsmallFiles threshold dir = do\n    ei <- try (listDirectory dir)\n\n    case ei of\n        Left (e::SomeException) -> return $ Left (displayException e)\n\n        Right contents -> do\n            paths <- filterM (lessThan threshold) contents\n            return $ Right paths```\n引数で指定したディレクトリから、閾値以下のサイズのファイル・パスを取得する関数を書きました。\n\n```ghci> smallFiles 100 \".\"\nRight [\"retry.hs\",\".gitignore\",\"oop.hs\"]\nit :: Either String [FilePath]```\n想定通りに動作することを確認しました。\n\n上記のコードでは、`try (listDirectory dir)` が Either a b を戻すため、それを case で判定して\nまた Left や Right でくるむような形になっています。\n\nこれをスマートに記述する方法はあるのでしょうか ?\n\n(怒られないので、調子に乗って質問ばかりさせていただいていますが、これがマナー違反であればご指摘ください)",
        "type": "message",
        "user": "U04MBBNV5QB"
    },
    {
        "ts": "1723195449.277199",
        "text": "読んでいて勉強になりました。どんどん質問して盛り上げて欲しいです :raised_hands: ",
        "type": "message",
        "user": "U03H9PH8FRP"
    },
    {
        "ts": "1723604741.629259",
        "text": "ポイントフリーにより書かれたコードを、わかりやすいように展開するようなツールなどはありますか ?\n\n以前 こちらで質問させていただき、ポイントフリー化するツールを教えていただきました\n```<https://pointfree.io/>```\nこれの逆を行う様なツールは存在しますか ?\n```ghci&gt; f = ((+1) .) . (+)\nf :: Num c =&gt; c -&gt; c -&gt; c\nghci&gt; f 1 2\n4\nit :: Num c =&gt; c```\nこのとき、f が `f a b = (+1) $ (+) a b` のように展開されるようなイメージになります。\n```ghci&gt; f a b = (+1) $ (+) a b\nf :: Num a =&gt; a -&gt; a -&gt; a\nghci&gt; f 1 2\n4\nit :: Num a =&gt; a```\n",
        "type": "message",
        "user": "U04MBBNV5QB"
    },
    {
        "ts": "1723680030.778189",
        "text": "Reminder: beginnersチャンネルは、新しい人がスムーズにHaskellに慣れるための質問を歓迎するチャンネルです。 Haskell-Beginners ML や IRCの#haskell-beginners  や RedditのMonthly Hask Anythingのような位置づけを意図しています。  beginnersチャンネルでの回答側は、以下の左側のような応答を厳禁とする運用です。 • それはくだらない質問だ → くだらない質問など無い • その質問は以前にもあった → 質問者はそんなこと知らない • Google検索せよ → 検索できないから質問している  beginnersチャンネルでは、例えば以下のレベルの質問から歓迎します。 • `:` とは何のことですか。 • タプルとは何ですか。 ",
        "type": "message",
        "user": "USLACKBOT"
    },
    {
        "ts": "1723870199.257579",
        "text": "関数従属性について質問させてください\n\nMonadState の定義を見て `| m -&gt; s` が気になりました。\n```class (Monad m) =&gt; MonadState s m | m -&gt; s where\n\tget :: m s\n\tput :: s -&gt; m ()```\n調べてみたところ、以下のように説明がありました。\n&gt; \"-&gt;\" の左側にある型によって右側の型が一意に決定される\nそれ以外にも説明のあるところもあったのですが、納得したといえるほど理解できませんでした。\n\n例)\n```read \"123\" :: Int```\n`:: Int` がないと \"123\" がなんの型かわからないよね。\n\nと、いう程度に簡単に理解できるような例はありますか ?\n(例えがわかりにくかったら無視してください)",
        "type": "message",
        "user": "U04MBBNV5QB"
    },
    {
        "ts": "1724189171.943589",
        "text": "<@U07HKNXSCJJ> has joined the channel",
        "type": "message",
        "user": "U07HKNXSCJJ"
    },
    {
        "ts": "1724382191.158669",
        "text": "曖昧な質問となってしまい申し訳ありませんが\n\n<https://zenn.dev/osio/articles/2022-advent-calendar>\nに、以下のようなものがありました。\n```import Control.Monad (join)\nf = join\nf (*) 5 --&gt; 25 = 5 * 5```\nHoogle で join を調べ以下のような定義ということがわかりました。\n```join              :: (Monad m) =&gt; m (m a) -&gt; m a\njoin x            =  x &gt;&gt;= id```\nこれらをまとめると、以下になると思います。\n```join (*) = (*) &gt;&gt;= id```\nしばらく考えて、なんとなく関数モナドかなと思い、定義に当てはめて\n```h &gt;&gt;= f = \\w -&gt; id ((*) w) w```\nここに引数を与えて、最終的に\n```id ((*) 5) 5 ==&gt; (*) 5 5```\nと、ここまできてようやく納得できました。\n\n前置きが長くなりましたが、`(*)` が関数であるため関数モナドに決まってるでしょ。\n\nと、言われてしまえばそれまでなのですが、`(*) &gt;&gt;= id` のようなものを見て、それが関数モナド ((-&gt;) r) であると導き出すのは経験しかないのでしょうか ?",
        "type": "message",
        "user": "U04MBBNV5QB"
    }
]