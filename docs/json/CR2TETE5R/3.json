[
    {
        "ts": "1577004105.017200",
        "text": "初心者ですが\nはじめテキトーに書いてコンパイラが怒ってくれるのを導きに修正していくという書き方ができるので\n楽だし、すごく楽しいですね\nあまりに嬉しいので投稿しました",
        "user": "ULTN48U8Y",
        "type": "message"
    },
    {
        "ts": "1577006526.017900",
        "text": "<@URZCHQGGM> has joined the channel",
        "user": "URZCHQGGM",
        "type": "message"
    },
    {
        "ts": "1577038606.022200",
        "text": "すごいH本にMonoidの章があると思いますが、Monoidは実際のプログラムでどのように役立つのでしょうか？\nすごいH本には色々なデータ構造に対して畳み込みができる！みたいな例を出していましたが、他の例も知りたいです！",
        "user": "URB930G94",
        "type": "message"
    },
    {
        "ts": "1577055940.022700",
        "text": "Monoidの結合則を利用した応用方法として <https://chrispenner.ca/posts/wc> を挙げておきます。\nざっくり言うと、Monoidの重要な法則である結合則は「どんな順番で結合（ `&lt;&gt;` を適用）しても、各演算の左辺と右辺さえ変わっていなければ結果は変わらない」という性質なので、この記事では、単語や行を数える問題をMonoid則を満たすように分割することで、並列処理してバラバラに実行しても、結合するときは正しく計算されるようにした、という例です。",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1577058883.023000",
        "text": "なるほど！とても面白そうな使い方で驚きました\nありがとうございます！！",
        "user": "URB930G94",
        "type": "message"
    },
    {
        "ts": "1577062829.023500",
        "text": "<@UJ8P66TRP> has joined the channel",
        "user": "UJ8P66TRP",
        "type": "message"
    },
    {
        "ts": "1577079597.023700",
        "text": "`Non-exhaustive patterns`はコンパイル通ることがあるのですね、気をつけなければ",
        "user": "ULTN48U8Y",
        "type": "message"
    },
    {
        "ts": "1577079767.023900",
        "text": "GHCに `-Werror` と `-Wall` オプションを付ければエラーにすることができます。\n`stack build --pedantic` はそのショートカットです。",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1577079828.024200",
        "text": "ありがとうございます！",
        "user": "ULTN48U8Y",
        "type": "message"
    },
    {
        "ts": "1577259274.024900",
        "text": "Persistent で `Integer` 型のフィールドを定義する方法はあるのでしょうか\nテーブル定義で Integer とすると、そんなものはないと言われるので仕方なく Int にしています\nPostgreSQLの場合、内部的には bigint で扱ってくれているようです\nところがHaskell側にもってくると、やはり正体は Int です\n20億は超えてくる可能性があるので、Integer で定義したいのですが...",
        "user": "ULTN48U8Y",
        "type": "message"
    },
    {
        "ts": "1577259395.025100",
        "text": "persistentは全く使ったことがないので伺いたいのですが、\n&gt; そんなものはないと言われる\nというのはどんなエラーですか？",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1577259424.025300",
        "text": "はい、少々お待ち下さい",
        "user": "ULTN48U8Y",
        "type": "message"
    },
    {
        "ts": "1577259564.025500",
        "text": "おまたせしました、そのまま貼ります",
        "user": "ULTN48U8Y",
        "type": "message"
    },
    {
        "ts": "1577259622.025900",
        "text": "`Int64` もありそうでないのです",
        "user": "ULTN48U8Y",
        "type": "message"
    },
    {
        "ts": "1577259733.026200",
        "text": "terminal というのはフィールド名です",
        "user": "ULTN48U8Y",
        "type": "message"
    },
    {
        "ts": "1577260093.026400",
        "text": "`No instance for (persistent-2.9.2:Database.Persist.Sql.Class.PersistFieldSql Integer`\nこれはやはり `Integer` を `persistent` パッケージの `Database.Persist.Sql.Class.PersistFieldSql` のインスタンスにするのが正解、ってことなんでしょうね。ただ、一般にRDBがサポートする整数型に多倍長のもの（最大値が無限のもの）はないため、自明なインスタンス定義がない、ということなんでしょう。",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1577260122.026600",
        "text": "でも、 `Int64` については <https://hackage.haskell.org/package/persistent-2.10.4/docs/Database-Persist-Sql.html#t:PersistFieldSql> を読む限り定義されている、ような...？ :thinking_face:",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1577260229.026800",
        "text": "そうなのです\n`Int64` とするとまた別の短いメッセージがあります",
        "user": "ULTN48U8Y",
        "type": "message"
    },
    {
        "ts": "1577260340.027300",
        "text": "`import <http://Data.Int|Data.Int>` が必要ですね。\n`Int64` は `Prelude` にありません...",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1577260589.027700",
        "text": "定義できたみたいです、ありがとうございます",
        "user": "ULTN48U8Y",
        "type": "message"
    },
    {
        "ts": "1577260892.027900",
        "text": "Haskell の型との対応表はこの辺にまとまってるので参考にどうぞ.\n<https://github.com/yesodweb/persistent/blob/master/docs/Persistent-entity-syntax.md#conversion-table-migrations>",
        "user": "U5B3EGEFQ",
        "type": "message"
    },
    {
        "ts": "1577260948.028200",
        "text": "一つ忘れてた。\n`Int` は64bitな環境であればちゃんと64bitになります... まぁ、精度を明示するのはいい作戦だと思いますが。",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1577329229.029100",
        "text": "<@UMKGDJ2RZ> has joined the channel",
        "user": "UMKGDJ2RZ",
        "type": "message"
    }
]