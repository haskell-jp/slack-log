[
    {
        "ts": "1559810918.019600",
        "text": "うーん、それで `No module named 'GHC.Arr' is imported.` というエラーはさすがに不自然ですね。。。",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1559811590.019800",
        "text": "試してみましたが、エラーメッセージは変わってるはずですよね？\n`Module ‘GHC.Arr’ does not export ‘unsafeFreezeSTUArray’`\n\nとすると、なるほど、なぜか `unsafeFreezeSTArray` は `GHC.Arr` にあるけど `unsafeFreezeSTUArray` にないってことか。。。",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1559811909.020000",
        "text": "すみません、わざわざ unsafe なAPIを使わなくても `freeze` 関数というのがあるみたいですね。\n\n```\nimport Data.Array.Unboxed\nimport <http://Data.Array.ST|Data.Array.ST>\nimport <http://Control.Monad.ST|Control.Monad.ST>\n\nmain :: IO ()\nmain = print arr2\n\narr2 :: (UArray Int Int, UArray Int Int)\narr2 = runST $ do\n  a &lt;- newArray (0,2) 0 :: ST s (STUArray s Int Int)\n  writeArray a 0 999\n  b &lt;- newArray (0,2) 0 :: ST s (STUArray s Int Int)\n  writeArray b 0 999\n  -- detail ommitted\n  (,) &lt;$&gt; freeze a &lt;*&gt; freeze b\n```",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1559813083.020200",
        "text": "` (,) &lt;$&gt; freeze a &lt;*&gt; freeze b ` ですか！　素晴らしい　有難うございました  orz",
        "user": "U584T7GAH",
        "type": "message"
    },
    {
        "ts": "1559882218.020700",
        "text": "<@UK0LLUCE6> has joined the channel",
        "user": "UK0LLUCE6",
        "type": "message"
    },
    {
        "ts": "1559907367.021000",
        "text": "<@UK61N4FS5> has joined the channel",
        "user": "UK61N4FS5",
        "type": "message"
    },
    {
        "ts": "1559950218.021300",
        "text": "<@UKD4B2J6L> has joined the channel",
        "user": "UKD4B2J6L",
        "type": "message"
    },
    {
        "ts": "1560132380.021800",
        "text": "cryptonite速くなりましたね。",
        "user": "U74KTAG0N",
        "type": "message"
    },
    {
        "ts": "1560132390.022300",
        "text": "---",
        "user": "U74KTAG0N",
        "type": "message"
    },
    {
        "ts": "1560132544.024200",
        "text": "MagicHaskellerを動かしたいのですが、\nGHCAPIをつかっているのですが、モジュールのロードがうまくいかず、困っています。\n<http://hackage.haskell.org/package/MagicHaskeller-0.9.6.7/src/MagicHaskeller/SimpleServer.hs>\nこのファイルのprepareGHCAPI です。\n\nstackでlts-3.22でビルドはできたのですが。\nMagicHaskeller/Minimal.hsがロードできないというエラーで落ちてしまいます。\nどなたかノウハウがあれば教えていただきたいです。\n\n手順通りcabalでコンパイルするとNetworkモジュールのロードでこけます。自分の環境のせいかどうかもよくわからないです。",
        "user": "U74KTAG0N",
        "type": "message"
    },
    {
        "ts": "1560132656.025400",
        "text": "また、たくさんの関数を推論させたいのでポータル（<http://nautilus.cs.miyazaki-u.ac.jp/~skata/MagicHaskeller.html）ではなく>\nローカルで実行したいです。WEB サーバーにする必要はありません。",
        "user": "U74KTAG0N",
        "type": "message"
    },
    {
        "ts": "1560142682.026700",
        "text": "正直なところGHC APIをあまり使ったことがないのでわかるかどうかも不明ですが、再現するリポジトリーを上げていただけるとサポートしやすいです。",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1560143012.027000",
        "text": "そうしますね。",
        "user": "U74KTAG0N",
        "type": "message"
    },
    {
        "ts": "1560143056.027300",
        "text": "GHC APIの使い方がわからない問題でデバッグできないですね。\nなにかパスを追加とかなのでしょうが",
        "user": "U74KTAG0N",
        "type": "message"
    },
    {
        "ts": "1560143853.027500",
        "text": "<https://circleci.com/gh/junjihashimoto/MagicHaskeller>\n<https://github.com/junjihashimoto/MagicHaskeller>\nここで再現するはずです。\nちょっとお待ちください。",
        "user": "U74KTAG0N",
        "type": "message"
    },
    {
        "ts": "1560153167.028400",
        "text": "ちょっと見た感じだと、GHC API を使ってパッケージデータベースから `MagicHaskeller` を指定し、Prelude とともに `MagicHaskeller.Minimal` モジュールと `MagicHaskeller.FastRatio` モジュールを読み込もうとしてますね。\n\n<https://github.com/junjihashimoto/MagicHaskeller/blob/master/MagicHaskeller/SimpleServer.hs#L445>\n<https://github.com/junjihashimoto/MagicHaskeller/blob/master/MagicHaskeller/SimpleServer.hs#L207>\n\nエラーになっている原因はたぶん、デフォルトのパッケージデータベースに `MagicHaskeller` が存在しないためだと思います。\n\n色々とやり方はあると思いますが、Docker で動かすのが一番簡単かもしれません。\n\n```\nFROM ubuntu:bionic-20190307\nRUN apt-get update\nRUN apt-get install -y haskell-platform\n\nRUN cabal update\nRUN cabal install MagicHaskeller-0.9.6.7 --global\n\n###########################\n# ghc: 8.0.2\n# cabal-install: 1.24.0.2\n###########################\n```\n\n良くわかりませんが、動いてる気がします。\n\n```\n$ docker run --rm -it waddlaw/magic-haskeller:0.9.6.7 bash\n/# MagicHaskeller -d 5 -t predicates -i\nMagicHaskeller/MagicExceller backend server version 0.9.6.7 built with GHC-8.0 at 2019-06-10 07:33:54.682998096 UTC\nstarted at 2019-06-10 07:46:43.917068284 UTC\n\\f -&gt; ?\nf \"e\" 2 == \"ee\"\nthe predicate is f \"e\" 2 == \"ee\"\n\n\n\n\n\\a b -&gt; concat (replicate b a)\n\n\\a b -&gt; replicate b (last (' ' : a))\n\\a b -&gt; concat (replicate b (reverse a))\n\\a b -&gt; take b (a ++ a)\n\\a b -&gt; replicate b (foldr const ' ' a)\n\\a b -&gt; concat (transpose (replicate b a))\n\\a b -&gt; concat (replicate (abs b) a)\n\\a b -&gt; a ++ take b a\n\\a b -&gt; concatMap (\\_ -&gt; a) (replicate 2 b)\n\\a b -&gt; concatMap (\\_ -&gt; a) [b..3]\n```",
        "user": "U5B3EGEFQ",
        "type": "message"
    },
    {
        "ts": "1560155650.029100",
        "text": "時間経ってからでアレですが、実現方法思いついたのでコメント\n\n関数Applicativeをネストさせる作戦\n```(liftA2 . liftA2) (&gt;&gt;) a b \"x\" \"y\"```\n\nuncurry する作戦\n```(liftA2 (&gt;&gt;) `on` uncurry) a b (\"x\", \"y\")```",
        "user": "UFP82PUF3",
        "type": "message"
    },
    {
        "ts": "1560155863.029500",
        "text": "元々考えていたケースは引数の数が2もあれば3や4もあるので、根本的な間違いの回避にはつながりませんが、いいですね！",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1560157006.029800",
        "text": "ありがとうございます。",
        "user": "U74KTAG0N",
        "type": "message"
    },
    {
        "ts": "1560157045.030000",
        "text": "助かります。",
        "user": "U74KTAG0N",
        "type": "message"
    },
    {
        "ts": "1560245129.000300",
        "text": "<@UKH5P355M> has joined the channel",
        "user": "UKH5P355M",
        "type": "message"
    },
    {
        "ts": "1560307025.000700",
        "text": "<@UKJ6ZSDST> has joined the channel",
        "user": "UKJ6ZSDST",
        "type": "message"
    },
    {
        "ts": "1560314228.001000",
        "text": "<@UK50TKYSE> has joined the channel",
        "user": "UK50TKYSE",
        "type": "message"
    },
    {
        "ts": "1560478122.001400",
        "text": "<@UKJU4EX6C> has joined the channel",
        "user": "UKJU4EX6C",
        "type": "message"
    },
    {
        "ts": "1560603623.001700",
        "text": "<@UK8R5EWQ3> has joined the channel",
        "user": "UK8R5EWQ3",
        "type": "message"
    },
    {
        "ts": "1560760940.004400",
        "text": "レコードのフィールドの関数用法は、値構築子が複数あると部分関数になってよくないので GHC に partial-fields って警告オプションがあるのですが、これだとパターンマッチでしか使っていなくて安全なときでも、そういうフィールドを宣言した時点で警告が出てしまうので、そういうフィールド（もしくはレコードのフィールドすべて）を関数用法をしたときだけ警告が出るようなオプションってありましたっけ？",
        "user": "U4L0B71L1",
        "type": "message"
    },
    {
        "ts": "1560761281.004500",
        "text": "更新ならあるんですけど、かゆいところに手が届かないですね... :disappointed:\n<https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/using-warnings.html#ghc-flag--Wincomplete-record-updates>",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1560761316.004700",
        "text": "そういえば更新も危険でしたね",
        "user": "U4L0B71L1",
        "type": "message"
    },
    {
        "ts": "1560762714.005100",
        "text": "Proposal出しましょう！ <https://github.com/ghc-proposals/ghc-proposals>",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1560762914.005400",
        "text": "チャンネル違いで恐縮ですが: -Wallに-Wincomplete-record-updatesを含めるproposalはacceptedされたそうです。\n<https://github.com/ghc-proposals/ghc-proposals/pull/71>",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1560763215.005700",
        "text": "今の予定ではGHC 8.10からか！ <https://gitlab.haskell.org/ghc/ghc/issues/15656>",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1560764337.006100",
        "text": "英語版 Reddit あたりに投げてみますかね",
        "user": "U4L0B71L1",
        "type": "message"
    },
    {
        "ts": "1560767168.006700",
        "text": "<https://github.com/ghc-proposals/ghc-proposals/pull/184> これですかね",
        "user": "U4M9NJ7QE",
        "type": "message"
    },
    {
        "ts": "1560817483.007400",
        "text": "<@UKAHTJPEF> has joined the channel",
        "user": "UKAHTJPEF",
        "type": "message"
    },
    {
        "ts": "1560822768.007600",
        "text": "読んでみました。まさにこんな感じですね。\nスレッドが SPJ の質問で止まっちゃってますね……",
        "user": "U4L0B71L1",
        "type": "message"
    },
    {
        "ts": "1560826922.012600",
        "text": "Dormantになった提案を強力に前に進める人がいるといいなあと思ったりします。提案者の熱があるうちはいいですが、息切れしてきた時に細かい指摘を拾って提案自体にPRを送ってくれるような。",
        "user": "U4M9NJ7QE",
        "type": "message"
    },
    {
        "ts": "1560858589.018000",
        "text": "継続 + IO + 失敗系モナド？な感じのパッケージってあります？\n具体的には以下のような関数が欲しいんですけど:\n```\nfromMaybeWith :: MonadIO m =&gt; m (Maybe a) -&gt; m r -&gt; ContT r m a\nfromMaybeWith m e = lift m &gt;&gt;= \\case\n  Nothing -&gt; ContT (const e)\n  Just a  -&gt; ContT ($ a)\n\nfromEitherWith :: MonadIO m =&gt; m (Either a e) -&gt; (e -&gt; m r) -&gt; ContT r m a\nfromEitherWith m act = lift m &gt;&gt;= \\case\n  Left e  -&gt; ContT (const $ act e)\n  Right a -&gt; ContT ($ a)\n```",
        "user": "U56L7EVNY",
        "type": "message"
    },
    {
        "ts": "1560899464.020600",
        "text": "副作用を伴うAPIの設計で、「成功時はNothing, 失敗時はJust でエラーを返す」というのはよくあるパターンなのでしょうか？\nkafkaのライブラリ(hw-kafka-client)を使っていて、そういう場面に出会いまして、「ああ、そうなのか」と思いつつ、失敗したときのエラーを返すなら、Either を使って、Leftにエラー、Rightは() ? としたほうが自然なのかとも思いました。\n\n\n<https://github.com/haskell-works/hw-kafka-client>\n```\nsendMessages prod = do\n  err1 &lt;- produceMessage prod (mkMessage Nothing (Just \"test from producer\") )\n  forM_ err1 print\n```",
        "user": "U7GSVRQ6S",
        "type": "message"
    }
]