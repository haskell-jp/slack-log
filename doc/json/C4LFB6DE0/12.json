[
    {
        "ts": "1543311413.040100",
        "text": "呼ぶ側では、単純に結果のheadのlengthを評価するだけでテストしていたんですが、単純に出力するだけのものを試してみます。",
        "user": "UEC0PN1PA",
        "type": "message"
    },
    {
        "ts": "1543311479.040300",
        "text": "あ、これ戻り値IOだから遅延しないか",
        "user": "U570660KX",
        "type": "message"
    },
    {
        "ts": "1543311565.040500",
        "text": "いやparseCSVTはIOじゃないから遅延しますね",
        "user": "U570660KX",
        "type": "message"
    },
    {
        "ts": "1543311654.040700",
        "text": "や、パース失敗かどうか最後まで入力読まないと駄目だから遅延しないです。だとmapM_でも遅延にならないですね",
        "user": "U570660KX",
        "type": "message"
    },
    {
        "ts": "1543311685.041000",
        "text": "ちょっと混乱したので見なかった事に…",
        "user": "U570660KX",
        "type": "message"
    },
    {
        "ts": "1543311711.041200",
        "text": "行の分割を `lines` 関数に任せて1行ごとにパーサーを走らせれば回避できる？",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1543311754.041400",
        "text": "プロファイルの先頭部分ですが,quated Cell が悪さをしているらしくいじってみましたがどこが原因がなかなかわかりません.",
        "user": "UEC0PN1PA",
        "type": "message"
    },
    {
        "ts": "1543311835.041800",
        "text": "lines関数も試させていただきます, 環境がネットに繋がっていないので(現在自前にうつしています)反応遅くすみません.",
        "user": "UEC0PN1PA",
        "type": "message"
    },
    {
        "ts": "1543312018.042000",
        "text": "lines関数で行ごとに区切って読む方が軽いのは間違いなさそうですね。そうすると、遅延IOにより、最初の要素にアクセスしただけでは最終行まで読まないので注意です",
        "user": "U570660KX",
        "type": "message"
    },
    {
        "ts": "1543312127.042200",
        "text": "strict 拡張をしていても遅延が起きるでしょうか?",
        "user": "UEC0PN1PA",
        "type": "message"
    },
    {
        "ts": "1543312305.042400",
        "text": "おそらく起きます。Strict拡張やBangパターンはあくまでseq相当で、WHNFまでしか評価しないので。deepseqすれば最後まで行くはずです",
        "user": "U570660KX",
        "type": "message"
    },
    {
        "ts": "1543312413.042600",
        "text": "問題は *なにを* deepseqするかなんですが…:thinking_face:",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1543312464.042800",
        "text": "ありがとうございます. 今,putStrLnで試していますが,linesをその後に試させていただきます.\n少し話題がずれるのですが,1GB程度のファイルをText.IO.readFilesしただけでも5~6GB消費するのは,Boxedだとしかたないのでしょうか?",
        "user": "UEC0PN1PA",
        "type": "message"
    },
    {
        "ts": "1543312700.043100",
        "text": "`readCSVTWin path &gt;&gt;= \\x -&gt; deepseq x (return ()))`  とかですかね＞何を～",
        "user": "U570660KX",
        "type": "message"
    },
    {
        "ts": "1543312817.043300",
        "text": "total allocだからreallocして領域広げた分を累計してるのかも（未確認）",
        "user": "U570660KX",
        "type": "message"
    },
    {
        "ts": "1543313317.043500",
        "text": "すみません,計算待ちです,6GBのファイルを読ませてみていますが,現状121GB使っているので,呼ぶ側ではなさそうです.",
        "user": "UEC0PN1PA",
        "type": "message"
    },
    {
        "ts": "1543313840.044500",
        "text": "conduitなどを使う方がいいでしょうね。",
        "user": "U56MBRKR9",
        "type": "message"
    },
    {
        "ts": "1543314103.044700",
        "text": "不勉強でconduitをあまり理解していないのですが,可能なことは逐次処理で行別にパースしていくイメージであっているでしょうか?",
        "user": "UEC0PN1PA",
        "type": "message"
    },
    {
        "ts": "1543314341.044900",
        "text": "行単位でもできますし、調整すればセル単位でもできます",
        "user": "U4LGTMTMK",
        "type": "message"
    },
    {
        "ts": "1543314422.045100",
        "text": "現在linesで先に分割したものをためしてみているます.評価をputSTRLnにしたままだったので,出力に時間をくっていますが,40GB程度の消費で終わりそうです.",
        "user": "UEC0PN1PA",
        "type": "message"
    },
    {
        "ts": "1543314621.045500",
        "text": "一応,当面の課題は解決しました.ありがとうございます.一点疑問なのですが,6GBのcsvを[[Text]]で保持して,40GBほどメモリを消費するというのはHaskellの相場からすると通常なのでしょうか?conduit等も試させていただきますが,メモリ的にも節約が見込めるものでしょうか?",
        "user": "UEC0PN1PA",
        "type": "message"
    },
    {
        "ts": "1543315975.046000",
        "text": "- Total allocなので、allocしてすぐ解放したような物もカウントされているのでは？\n- HaskellというかParsecが遅い\n\nあたりも考えられるので、詳しくは検証しないと分からない所です。メモリ使用量はともかく速度については、リークや文字列処理に気を遣って書いたHaskellはC++の5倍程度遅く、JVMロード時間を除いたJavaとトントンくらい、とされています。",
        "user": "U570660KX",
        "type": "message"
    },
    {
        "ts": "1543316045.047200",
        "text": "<https://medium.com/@maoe/ghc%E3%83%92%E3%83%BC%E3%83%97%E3%83%97%E3%83%AD%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AA%E3%83%B3%E3%82%B0%E3%81%AE%E6%89%8B%E5%BC%95%E3%81%8D-md-bb8d180230f6>",
        "user": "U570660KX",
        "type": "message"
    },
    {
        "ts": "1543316110.048100",
        "text": "Total allocよりも、Total memory in useを見るべきか。あとはグラフ化した奴も見れば色々分かるかもしれません",
        "user": "U570660KX",
        "type": "message"
    },
    {
        "ts": "1543316157.049600",
        "text": "メモリに関しては載せていませんでしたが(すみません)単純にタスクマネージャーで見ていたの実行時の消費です。速度に関しては、並列化でどうにか頑張れると思うのですが、メモリ消費を減らす知見があれば教えていただけると大変助かります。要求ばかりですみません。",
        "user": "UEC0PN1PA",
        "type": "message"
    },
    {
        "ts": "1543316256.051500",
        "text": "ただ、認識不足でしたが一度に読まずにバッチ処理をしろという意味だと思いますので(&gt;&gt;conduit )そちらで努力してみます。",
        "user": "UEC0PN1PA",
        "type": "message"
    },
    {
        "ts": "1543316412.053000",
        "text": "ヒーププロファイリングのグラフ化は行ったことがなかったので今後利用させていただきます。ご教示助かります。ありがとうございました。",
        "user": "UEC0PN1PA",
        "type": "message"
    },
    {
        "ts": "1543317504.053200",
        "text": "conduitの敷居が高ければ、Lazy TextでgetContentsする-&gt;Lazyのlinesで分割-&gt;toStrict-&gt;パース　でも一応大丈夫ですね。あるいは他言語同様にgetLineでループして頑張るか",
        "user": "U570660KX",
        "type": "message"
    },
    {
        "ts": "1543317901.058200",
        "text": "なるほど。遅延評価の活かし方参考になります。せっかくなのでstreamも勉強してみますが、当面の実装はそちらで試してみます。使い始めたものの全く扱えていないので大変勉強になります。",
        "user": "UEC0PN1PA",
        "type": "message"
    }
]